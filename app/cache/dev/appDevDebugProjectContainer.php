<?php

use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InactiveScopeException;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

/**
 * appDevDebugProjectContainer.
 *
 * This class has been auto-generated
 * by the Symfony Dependency Injection Component.
 */
class appDevDebugProjectContainer extends Container
{
    private $parameters;
    private $targetDirs = array();

    /**
     * Constructor.
     */
    public function __construct()
    {
        $dir = __DIR__;
        for ($i = 1; $i <= 2; ++$i) {
            $this->targetDirs[$i] = $dir = dirname($dir);
        }
        $this->parameters = $this->getDefaultParameters();

        $this->services =
        $this->scopedServices =
        $this->scopeStacks = array();
        $this->scopes = array('request' => 'container');
        $this->scopeChildren = array('request' => array());
        $this->methodMap = array(
            'annotation_reader' => 'getAnnotationReaderService',
            'assetic.asset_factory' => 'getAssetic_AssetFactoryService',
            'assetic.asset_manager' => 'getAssetic_AssetManagerService',
            'assetic.controller' => 'getAssetic_ControllerService',
            'assetic.filter.cssrewrite' => 'getAssetic_Filter_CssrewriteService',
            'assetic.filter_manager' => 'getAssetic_FilterManagerService',
            'assetic.request_listener' => 'getAssetic_RequestListenerService',
            'assets.context' => 'getAssets_ContextService',
            'assets.packages' => 'getAssets_PackagesService',
            'cache_clearer' => 'getCacheClearerService',
            'cache_warmer' => 'getCacheWarmerService',
            'controller_name_converter' => 'getControllerNameConverterService',
            'controller_resolver' => 'getControllerResolverService',
            'data_collector.dump' => 'getDataCollector_DumpService',
            'data_collector.form' => 'getDataCollector_FormService',
            'data_collector.form.extractor' => 'getDataCollector_Form_ExtractorService',
            'data_collector.request' => 'getDataCollector_RequestService',
            'data_collector.router' => 'getDataCollector_RouterService',
            'data_collector.stash' => 'getDataCollector_StashService',
            'data_collector.translation' => 'getDataCollector_TranslationService',
            'debug.controller_resolver' => 'getDebug_ControllerResolverService',
            'debug.debug_handlers_listener' => 'getDebug_DebugHandlersListenerService',
            'debug.dump_listener' => 'getDebug_DumpListenerService',
            'debug.event_dispatcher' => 'getDebug_EventDispatcherService',
            'debug.stopwatch' => 'getDebug_StopwatchService',
            'doctrine' => 'getDoctrineService',
            'doctrine.dbal.connection_factory' => 'getDoctrine_Dbal_ConnectionFactoryService',
            'doctrine.dbal.default_connection' => 'getDoctrine_Dbal_DefaultConnectionService',
            'doctrine.dbal.logger.profiling.default' => 'getDoctrine_Dbal_Logger_Profiling_DefaultService',
            'esi' => 'getEsiService',
            'esi_listener' => 'getEsiListenerService',
            'ez_search_engine_solr.connection.default.core_filter_id' => 'getEzSearchEngineSolr_Connection_Default_CoreFilterIdService',
            'ez_search_engine_solr.connection.default.endpoint_resolver_id' => 'getEzSearchEngineSolr_Connection_Default_EndpointResolverIdService',
            'ez_search_engine_solr.connection.default.gateway_id' => 'getEzSearchEngineSolr_Connection_Default_GatewayIdService',
            'ez_search_engine_solr.endpoints.endpoint0' => 'getEzSearchEngineSolr_Endpoints_Endpoint0Service',
            'ezplatform.installer.clean_installer' => 'getEzplatform_Installer_CleanInstallerService',
            'ezplatform.installer.install_command' => 'getEzplatform_Installer_InstallCommandService',
            'ezpublish.api.inner_repository' => 'getEzpublish_Api_InnerRepositoryService',
            'ezpublish.api.repository.factory' => 'getEzpublish_Api_Repository_FactoryService',
            'ezpublish.api.repository.lazy' => 'getEzpublish_Api_Repository_LazyService',
            'ezpublish.api.repository.lazy_factory' => 'getEzpublish_Api_Repository_LazyFactoryService',
            'ezpublish.api.repository_configuration_provider' => 'getEzpublish_Api_RepositoryConfigurationProviderService',
            'ezpublish.api.role.limitation_type.content_type' => 'getEzpublish_Api_Role_LimitationType_ContentTypeService',
            'ezpublish.api.role.limitation_type.ezcomments.anti_spam' => 'getEzpublish_Api_Role_LimitationType_Ezcomments_AntiSpamService',
            'ezpublish.api.role.limitation_type.ezcomments.comment_creator' => 'getEzpublish_Api_Role_LimitationType_Ezcomments_CommentCreatorService',
            'ezpublish.api.role.limitation_type.ezcomments.content_section' => 'getEzpublish_Api_Role_LimitationType_Ezcomments_ContentSectionService',
            'ezpublish.api.role.limitation_type.function_list' => 'getEzpublish_Api_Role_LimitationType_FunctionListService',
            'ezpublish.api.role.limitation_type.language' => 'getEzpublish_Api_Role_LimitationType_LanguageService',
            'ezpublish.api.role.limitation_type.location' => 'getEzpublish_Api_Role_LimitationType_LocationService',
            'ezpublish.api.role.limitation_type.new_section' => 'getEzpublish_Api_Role_LimitationType_NewSectionService',
            'ezpublish.api.role.limitation_type.new_state' => 'getEzpublish_Api_Role_LimitationType_NewStateService',
            'ezpublish.api.role.limitation_type.owner' => 'getEzpublish_Api_Role_LimitationType_OwnerService',
            'ezpublish.api.role.limitation_type.parent_content_type' => 'getEzpublish_Api_Role_LimitationType_ParentContentTypeService',
            'ezpublish.api.role.limitation_type.parent_depth' => 'getEzpublish_Api_Role_LimitationType_ParentDepthService',
            'ezpublish.api.role.limitation_type.parent_group' => 'getEzpublish_Api_Role_LimitationType_ParentGroupService',
            'ezpublish.api.role.limitation_type.parent_owner' => 'getEzpublish_Api_Role_LimitationType_ParentOwnerService',
            'ezpublish.api.role.limitation_type.section' => 'getEzpublish_Api_Role_LimitationType_SectionService',
            'ezpublish.api.role.limitation_type.siteaccess' => 'getEzpublish_Api_Role_LimitationType_SiteaccessService',
            'ezpublish.api.role.limitation_type.state' => 'getEzpublish_Api_Role_LimitationType_StateService',
            'ezpublish.api.role.limitation_type.status' => 'getEzpublish_Api_Role_LimitationType_StatusService',
            'ezpublish.api.role.limitation_type.subtree' => 'getEzpublish_Api_Role_LimitationType_SubtreeService',
            'ezpublish.api.role.limitation_type.user_group' => 'getEzpublish_Api_Role_LimitationType_UserGroupService',
            'ezpublish.api.search_engine.factory' => 'getEzpublish_Api_SearchEngine_FactoryService',
            'ezpublish.api.search_engine.legacy.connection' => 'getEzpublish_Api_SearchEngine_Legacy_ConnectionService',
            'ezpublish.api.search_engine.legacy.dbhandler' => 'getEzpublish_Api_SearchEngine_Legacy_DbhandlerService',
            'ezpublish.api.service.content' => 'getEzpublish_Api_Service_ContentService',
            'ezpublish.api.service.content_type' => 'getEzpublish_Api_Service_ContentTypeService',
            'ezpublish.api.service.field_type' => 'getEzpublish_Api_Service_FieldTypeService',
            'ezpublish.api.service.language' => 'getEzpublish_Api_Service_LanguageService',
            'ezpublish.api.service.location' => 'getEzpublish_Api_Service_LocationService',
            'ezpublish.api.service.object_state' => 'getEzpublish_Api_Service_ObjectStateService',
            'ezpublish.api.service.role' => 'getEzpublish_Api_Service_RoleService',
            'ezpublish.api.service.search' => 'getEzpublish_Api_Service_SearchService',
            'ezpublish.api.service.section' => 'getEzpublish_Api_Service_SectionService',
            'ezpublish.api.service.trash' => 'getEzpublish_Api_Service_TrashService',
            'ezpublish.api.service.url_alias' => 'getEzpublish_Api_Service_UrlAliasService',
            'ezpublish.api.service.url_wildcard' => 'getEzpublish_Api_Service_UrlWildcardService',
            'ezpublish.api.service.user' => 'getEzpublish_Api_Service_UserService',
            'ezpublish.api.storage_engine' => 'getEzpublish_Api_StorageEngineService',
            'ezpublish.api.storage_engine.factory' => 'getEzpublish_Api_StorageEngine_FactoryService',
            'ezpublish.api.storage_engine.legacy.dbhandler' => 'getEzpublish_Api_StorageEngine_Legacy_DbhandlerService',
            'ezpublish.api.storage_engine.pcre_compiler' => 'getEzpublish_Api_StorageEngine_PcreCompilerService',
            'ezpublish.api.storage_engine.transformation_converter' => 'getEzpublish_Api_StorageEngine_TransformationConverterService',
            'ezpublish.api.storage_engine.transformation_parser' => 'getEzpublish_Api_StorageEngine_TransformationParserService',
            'ezpublish.api.storage_engine.transformation_processor' => 'getEzpublish_Api_StorageEngine_TransformationProcessorService',
            'ezpublish.block_view.default_matcher_factory' => 'getEzpublish_BlockView_DefaultMatcherFactoryService',
            'ezpublish.block_view.matcher_factory' => 'getEzpublish_BlockView_MatcherFactoryService',
            'ezpublish.block_view_provider.configured' => 'getEzpublish_BlockViewProvider_ConfiguredService',
            'ezpublish.block_view_provider.default_configured' => 'getEzpublish_BlockViewProvider_DefaultConfiguredService',
            'ezpublish.cache_clear.content.base_locations_listener' => 'getEzpublish_CacheClear_Content_BaseLocationsListenerService',
            'ezpublish.cache_clear.content.parent_locations_listener' => 'getEzpublish_CacheClear_Content_ParentLocationsListenerService',
            'ezpublish.cache_clear.content.related_locations_listener' => 'getEzpublish_CacheClear_Content_RelatedLocationsListenerService',
            'ezpublish.cache_pool' => 'getEzpublish_CachePoolService',
            'ezpublish.cache_pool.factory' => 'getEzpublish_CachePool_FactoryService',
            'ezpublish.cache_pool.spi.cache.decorator' => 'getEzpublish_CachePool_Spi_Cache_DecoratorService',
            'ezpublish.chain_router' => 'getEzpublish_ChainRouterService',
            'ezpublish.config.complex_setting_value.resolver' => 'getEzpublish_Config_ComplexSettingValue_ResolverService',
            'ezpublish.config.dynamic_setting.parser' => 'getEzpublish_Config_DynamicSetting_ParserService',
            'ezpublish.config.resolver.chain' => 'getEzpublish_Config_Resolver_ChainService',
            'ezpublish.config.resolver.core' => 'getEzpublish_Config_Resolver_CoreService',
            'ezpublish.config_scope_listener' => 'getEzpublish_ConfigScopeListenerService',
            'ezpublish.console_event_listener' => 'getEzpublish_ConsoleEventListenerService',
            'ezpublish.content_preview.location_provider' => 'getEzpublish_ContentPreview_LocationProviderService',
            'ezpublish.content_preview_helper' => 'getEzpublish_ContentPreviewHelperService',
            'ezpublish.content_view.default_matcher_factory' => 'getEzpublish_ContentView_DefaultMatcherFactoryService',
            'ezpublish.content_view.matcher_factory' => 'getEzpublish_ContentView_MatcherFactoryService',
            'ezpublish.content_view_provider.configured' => 'getEzpublish_ContentViewProvider_ConfiguredService',
            'ezpublish.content_view_provider.default_configured' => 'getEzpublish_ContentViewProvider_DefaultConfiguredService',
            'ezpublish.controller.content.download' => 'getEzpublish_Controller_Content_DownloadService',
            'ezpublish.controller.content.download_redirection' => 'getEzpublish_Controller_Content_DownloadRedirectionService',
            'ezpublish.controller.content.preview.core' => 'getEzpublish_Controller_Content_Preview_CoreService',
            'ezpublish.controller.content.view' => 'getEzpublish_Controller_Content_ViewService',
            'ezpublish.controller.page.view' => 'getEzpublish_Controller_Page_ViewService',
            'ezpublish.core.io.binarydata_handler' => 'getEzpublish_Core_Io_BinarydataHandlerService',
            'ezpublish.core.io.binarydata_handler.factory' => 'getEzpublish_Core_Io_BinarydataHandler_FactoryService',
            'ezpublish.core.io.binarydata_handler.flysystem.default' => 'getEzpublish_Core_Io_BinarydataHandler_Flysystem_DefaultService',
            'ezpublish.core.io.flysystem.default_adapter' => 'getEzpublish_Core_Io_Flysystem_DefaultAdapterService',
            'ezpublish.core.io.flysystem.default_filesystem' => 'getEzpublish_Core_Io_Flysystem_DefaultFilesystemService',
            'ezpublish.core.io.image_fieldtype.legacy_url_decorator' => 'getEzpublish_Core_Io_ImageFieldtype_LegacyUrlDecoratorService',
            'ezpublish.core.io.image_fieldtype.legacy_url_redecorator' => 'getEzpublish_Core_Io_ImageFieldtype_LegacyUrlRedecoratorService',
            'ezpublish.core.io.metadata_handler' => 'getEzpublish_Core_Io_MetadataHandlerService',
            'ezpublish.core.io.metadata_handler.factory' => 'getEzpublish_Core_Io_MetadataHandler_FactoryService',
            'ezpublish.core.io.metadata_handler.flysystem.default' => 'getEzpublish_Core_Io_MetadataHandler_Flysystem_DefaultService',
            'ezpublish.core.io.mimetypedetector.fileinfo' => 'getEzpublish_Core_Io_Mimetypedetector_FileinfoService',
            'ezpublish.core.io.prefix_url_decorator' => 'getEzpublish_Core_Io_PrefixUrlDecoratorService',
            'ezpublish.core.io.service' => 'getEzpublish_Core_Io_ServiceService',
            'ezpublish.core.io.stream_file_listener' => 'getEzpublish_Core_Io_StreamFileListenerService',
            'ezpublish.dynamic_settings_listener' => 'getEzpublish_DynamicSettingsListenerService',
            'ezpublish.exception_listener' => 'getEzpublish_ExceptionListenerService',
            'ezpublish.field_helper' => 'getEzpublish_FieldHelperService',
            'ezpublish.field_type_collection.factory' => 'getEzpublish_FieldTypeCollection_FactoryService',
            'ezpublish.fieldtype.externalstoragehandler.ezgmaplocation.gateway' => 'getEzpublish_Fieldtype_Externalstoragehandler_Ezgmaplocation_GatewayService',
            'ezpublish.fieldtype.ezauthor' => 'getEzpublish_Fieldtype_EzauthorService',
            'ezpublish.fieldtype.ezauthor.converter' => 'getEzpublish_Fieldtype_Ezauthor_ConverterService',
            'ezpublish.fieldtype.ezbinarybase.download_url_generator' => 'getEzpublish_Fieldtype_Ezbinarybase_DownloadUrlGeneratorService',
            'ezpublish.fieldtype.ezbinaryfile' => 'getEzpublish_Fieldtype_EzbinaryfileService',
            'ezpublish.fieldtype.ezbinaryfile.converter' => 'getEzpublish_Fieldtype_Ezbinaryfile_ConverterService',
            'ezpublish.fieldtype.ezbinaryfile.externalstorage' => 'getEzpublish_Fieldtype_Ezbinaryfile_ExternalstorageService',
            'ezpublish.fieldtype.ezbinaryfile.io_service' => 'getEzpublish_Fieldtype_Ezbinaryfile_IoServiceService',
            'ezpublish.fieldtype.ezbinaryfile.pathgenerator' => 'getEzpublish_Fieldtype_Ezbinaryfile_PathgeneratorService',
            'ezpublish.fieldtype.ezbinaryfile.storage_gateway' => 'getEzpublish_Fieldtype_Ezbinaryfile_StorageGatewayService',
            'ezpublish.fieldtype.ezboolean' => 'getEzpublish_Fieldtype_EzbooleanService',
            'ezpublish.fieldtype.ezboolean.converter' => 'getEzpublish_Fieldtype_Ezboolean_ConverterService',
            'ezpublish.fieldtype.ezcomcomments' => 'getEzpublish_Fieldtype_EzcomcommentsService',
            'ezpublish.fieldtype.ezcomcomments.converter' => 'getEzpublish_Fieldtype_Ezcomcomments_ConverterService',
            'ezpublish.fieldtype.ezcountry' => 'getEzpublish_Fieldtype_EzcountryService',
            'ezpublish.fieldtype.ezcountry.converter' => 'getEzpublish_Fieldtype_Ezcountry_ConverterService',
            'ezpublish.fieldtype.ezdate' => 'getEzpublish_Fieldtype_EzdateService',
            'ezpublish.fieldtype.ezdate.converter' => 'getEzpublish_Fieldtype_Ezdate_ConverterService',
            'ezpublish.fieldtype.ezdatetime' => 'getEzpublish_Fieldtype_EzdatetimeService',
            'ezpublish.fieldtype.ezdatetime.converter' => 'getEzpublish_Fieldtype_Ezdatetime_ConverterService',
            'ezpublish.fieldtype.ezdatetime.parameterprovider' => 'getEzpublish_Fieldtype_Ezdatetime_ParameterproviderService',
            'ezpublish.fieldtype.ezemail' => 'getEzpublish_Fieldtype_EzemailService',
            'ezpublish.fieldtype.ezemail.converter' => 'getEzpublish_Fieldtype_Ezemail_ConverterService',
            'ezpublish.fieldtype.ezenum' => 'getEzpublish_Fieldtype_EzenumService',
            'ezpublish.fieldtype.ezenum.converter' => 'getEzpublish_Fieldtype_Ezenum_ConverterService',
            'ezpublish.fieldtype.ezfloat' => 'getEzpublish_Fieldtype_EzfloatService',
            'ezpublish.fieldtype.ezfloat.converter' => 'getEzpublish_Fieldtype_Ezfloat_ConverterService',
            'ezpublish.fieldtype.ezgmaplocation' => 'getEzpublish_Fieldtype_EzgmaplocationService',
            'ezpublish.fieldtype.ezgmaplocation.converter' => 'getEzpublish_Fieldtype_Ezgmaplocation_ConverterService',
            'ezpublish.fieldtype.ezgmaplocation.externalstorage' => 'getEzpublish_Fieldtype_Ezgmaplocation_ExternalstorageService',
            'ezpublish.fieldtype.ezidentifier' => 'getEzpublish_Fieldtype_EzidentifierService',
            'ezpublish.fieldtype.ezidentifier.converter' => 'getEzpublish_Fieldtype_Ezidentifier_ConverterService',
            'ezpublish.fieldtype.ezimage' => 'getEzpublish_Fieldtype_EzimageService',
            'ezpublish.fieldtype.ezimage.converter' => 'getEzpublish_Fieldtype_Ezimage_ConverterService',
            'ezpublish.fieldtype.ezimage.externalstorage' => 'getEzpublish_Fieldtype_Ezimage_ExternalstorageService',
            'ezpublish.fieldtype.ezimage.io_service' => 'getEzpublish_Fieldtype_Ezimage_IoServiceService',
            'ezpublish.fieldtype.ezimage.io_service.draft' => 'getEzpublish_Fieldtype_Ezimage_IoService_DraftService',
            'ezpublish.fieldtype.ezimage.io_service.options_provider' => 'getEzpublish_Fieldtype_Ezimage_IoService_OptionsProviderService',
            'ezpublish.fieldtype.ezimage.io_service.published' => 'getEzpublish_Fieldtype_Ezimage_IoService_PublishedService',
            'ezpublish.fieldtype.ezimage.pathgenerator' => 'getEzpublish_Fieldtype_Ezimage_PathgeneratorService',
            'ezpublish.fieldtype.ezimage.storage_gateway' => 'getEzpublish_Fieldtype_Ezimage_StorageGatewayService',
            'ezpublish.fieldtype.ezinisetting' => 'getEzpublish_Fieldtype_EzinisettingService',
            'ezpublish.fieldtype.ezinisetting.converter' => 'getEzpublish_Fieldtype_Ezinisetting_ConverterService',
            'ezpublish.fieldtype.ezinteger' => 'getEzpublish_Fieldtype_EzintegerService',
            'ezpublish.fieldtype.ezinteger.converter' => 'getEzpublish_Fieldtype_Ezinteger_ConverterService',
            'ezpublish.fieldtype.ezisbn' => 'getEzpublish_Fieldtype_EzisbnService',
            'ezpublish.fieldtype.ezisbn.converter' => 'getEzpublish_Fieldtype_Ezisbn_ConverterService',
            'ezpublish.fieldtype.ezkeyword' => 'getEzpublish_Fieldtype_EzkeywordService',
            'ezpublish.fieldtype.ezkeyword.converter' => 'getEzpublish_Fieldtype_Ezkeyword_ConverterService',
            'ezpublish.fieldtype.ezkeyword.externalstorage' => 'getEzpublish_Fieldtype_Ezkeyword_ExternalstorageService',
            'ezpublish.fieldtype.ezkeyword.storage_gateway' => 'getEzpublish_Fieldtype_Ezkeyword_StorageGatewayService',
            'ezpublish.fieldtype.ezmatrix' => 'getEzpublish_Fieldtype_EzmatrixService',
            'ezpublish.fieldtype.ezmatrix.converter' => 'getEzpublish_Fieldtype_Ezmatrix_ConverterService',
            'ezpublish.fieldtype.ezmedia' => 'getEzpublish_Fieldtype_EzmediaService',
            'ezpublish.fieldtype.ezmedia.converter' => 'getEzpublish_Fieldtype_Ezmedia_ConverterService',
            'ezpublish.fieldtype.ezmedia.externalstorage' => 'getEzpublish_Fieldtype_Ezmedia_ExternalstorageService',
            'ezpublish.fieldtype.ezmedia.storage_gateway' => 'getEzpublish_Fieldtype_Ezmedia_StorageGatewayService',
            'ezpublish.fieldtype.ezmultioption' => 'getEzpublish_Fieldtype_EzmultioptionService',
            'ezpublish.fieldtype.ezmultioption.converter' => 'getEzpublish_Fieldtype_Ezmultioption_ConverterService',
            'ezpublish.fieldtype.ezmultioption2' => 'getEzpublish_Fieldtype_Ezmultioption2Service',
            'ezpublish.fieldtype.ezmultioption2.converter' => 'getEzpublish_Fieldtype_Ezmultioption2_ConverterService',
            'ezpublish.fieldtype.ezmultiprice' => 'getEzpublish_Fieldtype_EzmultipriceService',
            'ezpublish.fieldtype.ezmultiprice.converter' => 'getEzpublish_Fieldtype_Ezmultiprice_ConverterService',
            'ezpublish.fieldtype.ezobjectrelation' => 'getEzpublish_Fieldtype_EzobjectrelationService',
            'ezpublish.fieldtype.ezobjectrelation.converter' => 'getEzpublish_Fieldtype_Ezobjectrelation_ConverterService',
            'ezpublish.fieldtype.ezobjectrelationlist' => 'getEzpublish_Fieldtype_EzobjectrelationlistService',
            'ezpublish.fieldtype.ezobjectrelationlist.converter' => 'getEzpublish_Fieldtype_Ezobjectrelationlist_ConverterService',
            'ezpublish.fieldtype.ezoption' => 'getEzpublish_Fieldtype_EzoptionService',
            'ezpublish.fieldtype.ezoption.converter' => 'getEzpublish_Fieldtype_Ezoption_ConverterService',
            'ezpublish.fieldtype.ezpackage' => 'getEzpublish_Fieldtype_EzpackageService',
            'ezpublish.fieldtype.ezpackage.converter' => 'getEzpublish_Fieldtype_Ezpackage_ConverterService',
            'ezpublish.fieldtype.ezpaex' => 'getEzpublish_Fieldtype_EzpaexService',
            'ezpublish.fieldtype.ezpaex.converter' => 'getEzpublish_Fieldtype_Ezpaex_ConverterService',
            'ezpublish.fieldtype.ezpage' => 'getEzpublish_Fieldtype_EzpageService',
            'ezpublish.fieldtype.ezpage.converter' => 'getEzpublish_Fieldtype_Ezpage_ConverterService',
            'ezpublish.fieldtype.ezpage.hashconverter' => 'getEzpublish_Fieldtype_Ezpage_HashconverterService',
            'ezpublish.fieldtype.ezpage.pageservice' => 'getEzpublish_Fieldtype_Ezpage_PageserviceService',
            'ezpublish.fieldtype.ezpage.pageservice.factory' => 'getEzpublish_Fieldtype_Ezpage_Pageservice_FactoryService',
            'ezpublish.fieldtype.ezpage.parameterprovider' => 'getEzpublish_Fieldtype_Ezpage_ParameterproviderService',
            'ezpublish.fieldtype.ezpage.storage_gateway' => 'getEzpublish_Fieldtype_Ezpage_StorageGatewayService',
            'ezpublish.fieldtype.ezprice' => 'getEzpublish_Fieldtype_EzpriceService',
            'ezpublish.fieldtype.ezprice.converter' => 'getEzpublish_Fieldtype_Ezprice_ConverterService',
            'ezpublish.fieldtype.ezproductcategory' => 'getEzpublish_Fieldtype_EzproductcategoryService',
            'ezpublish.fieldtype.ezproductcategory.converter' => 'getEzpublish_Fieldtype_Ezproductcategory_ConverterService',
            'ezpublish.fieldtype.ezrangeoption' => 'getEzpublish_Fieldtype_EzrangeoptionService',
            'ezpublish.fieldtype.ezrangeoption.converter' => 'getEzpublish_Fieldtype_Ezrangeoption_ConverterService',
            'ezpublish.fieldtype.ezrecommendation' => 'getEzpublish_Fieldtype_EzrecommendationService',
            'ezpublish.fieldtype.ezrecommendation.converter' => 'getEzpublish_Fieldtype_Ezrecommendation_ConverterService',
            'ezpublish.fieldtype.ezrichtext' => 'getEzpublish_Fieldtype_EzrichtextService',
            'ezpublish.fieldtype.ezrichtext.converter' => 'getEzpublish_Fieldtype_Ezrichtext_ConverterService',
            'ezpublish.fieldtype.ezrichtext.converter.edit.xhtml5' => 'getEzpublish_Fieldtype_Ezrichtext_Converter_Edit_Xhtml5Service',
            'ezpublish.fieldtype.ezrichtext.converter.embed' => 'getEzpublish_Fieldtype_Ezrichtext_Converter_EmbedService',
            'ezpublish.fieldtype.ezrichtext.converter.input.dispatcher' => 'getEzpublish_Fieldtype_Ezrichtext_Converter_Input_DispatcherService',
            'ezpublish.fieldtype.ezrichtext.converter.input.xhtml5' => 'getEzpublish_Fieldtype_Ezrichtext_Converter_Input_Xhtml5Service',
            'ezpublish.fieldtype.ezrichtext.converter.link' => 'getEzpublish_Fieldtype_Ezrichtext_Converter_LinkService',
            'ezpublish.fieldtype.ezrichtext.converter.output.xhtml5' => 'getEzpublish_Fieldtype_Ezrichtext_Converter_Output_Xhtml5Service',
            'ezpublish.fieldtype.ezrichtext.converter.output.xhtml5.core' => 'getEzpublish_Fieldtype_Ezrichtext_Converter_Output_Xhtml5_CoreService',
            'ezpublish.fieldtype.ezrichtext.converter.output.xhtml5.fragment' => 'getEzpublish_Fieldtype_Ezrichtext_Converter_Output_Xhtml5_FragmentService',
            'ezpublish.fieldtype.ezrichtext.converter.template' => 'getEzpublish_Fieldtype_Ezrichtext_Converter_TemplateService',
            'ezpublish.fieldtype.ezrichtext.externalstorage' => 'getEzpublish_Fieldtype_Ezrichtext_ExternalstorageService',
            'ezpublish.fieldtype.ezrichtext.normalizer.input' => 'getEzpublish_Fieldtype_Ezrichtext_Normalizer_InputService',
            'ezpublish.fieldtype.ezrichtext.renderer' => 'getEzpublish_Fieldtype_Ezrichtext_RendererService',
            'ezpublish.fieldtype.ezrichtext.storage_gateway' => 'getEzpublish_Fieldtype_Ezrichtext_StorageGatewayService',
            'ezpublish.fieldtype.ezrichtext.validator.docbook' => 'getEzpublish_Fieldtype_Ezrichtext_Validator_DocbookService',
            'ezpublish.fieldtype.ezrichtext.validator.input.dispatcher' => 'getEzpublish_Fieldtype_Ezrichtext_Validator_Input_DispatcherService',
            'ezpublish.fieldtype.ezrichtext.validator.output.ezxhtml5' => 'getEzpublish_Fieldtype_Ezrichtext_Validator_Output_Ezxhtml5Service',
            'ezpublish.fieldtype.ezselection' => 'getEzpublish_Fieldtype_EzselectionService',
            'ezpublish.fieldtype.ezselection.converter' => 'getEzpublish_Fieldtype_Ezselection_ConverterService',
            'ezpublish.fieldtype.ezsrrating' => 'getEzpublish_Fieldtype_EzsrratingService',
            'ezpublish.fieldtype.ezsrrating.converter' => 'getEzpublish_Fieldtype_Ezsrrating_ConverterService',
            'ezpublish.fieldtype.ezstring' => 'getEzpublish_Fieldtype_EzstringService',
            'ezpublish.fieldtype.ezstring.converter' => 'getEzpublish_Fieldtype_Ezstring_ConverterService',
            'ezpublish.fieldtype.ezsubtreesubscription' => 'getEzpublish_Fieldtype_EzsubtreesubscriptionService',
            'ezpublish.fieldtype.ezsubtreesubscription.converter' => 'getEzpublish_Fieldtype_Ezsubtreesubscription_ConverterService',
            'ezpublish.fieldtype.ezsurvey' => 'getEzpublish_Fieldtype_EzsurveyService',
            'ezpublish.fieldtype.ezsurvey.converter' => 'getEzpublish_Fieldtype_Ezsurvey_ConverterService',
            'ezpublish.fieldtype.eztags' => 'getEzpublish_Fieldtype_EztagsService',
            'ezpublish.fieldtype.eztags.converter' => 'getEzpublish_Fieldtype_Eztags_ConverterService',
            'ezpublish.fieldtype.eztext' => 'getEzpublish_Fieldtype_EztextService',
            'ezpublish.fieldtype.eztext.converter' => 'getEzpublish_Fieldtype_Eztext_ConverterService',
            'ezpublish.fieldtype.eztime' => 'getEzpublish_Fieldtype_EztimeService',
            'ezpublish.fieldtype.eztime.converter' => 'getEzpublish_Fieldtype_Eztime_ConverterService',
            'ezpublish.fieldtype.ezurl' => 'getEzpublish_Fieldtype_EzurlService',
            'ezpublish.fieldtype.ezurl.converter' => 'getEzpublish_Fieldtype_Ezurl_ConverterService',
            'ezpublish.fieldtype.ezurl.externalstorage' => 'getEzpublish_Fieldtype_Ezurl_ExternalstorageService',
            'ezpublish.fieldtype.ezurl.storage_gateway' => 'getEzpublish_Fieldtype_Ezurl_StorageGatewayService',
            'ezpublish.fieldtype.ezuser' => 'getEzpublish_Fieldtype_EzuserService',
            'ezpublish.fieldtype.ezuser.converter' => 'getEzpublish_Fieldtype_Ezuser_ConverterService',
            'ezpublish.fieldtype.ezuser.externalstorage' => 'getEzpublish_Fieldtype_Ezuser_ExternalstorageService',
            'ezpublish.fieldtype.ezuser.storage_gateway' => 'getEzpublish_Fieldtype_Ezuser_StorageGatewayService',
            'ezpublish.fieldtype.indexable.ezauthor' => 'getEzpublish_Fieldtype_Indexable_EzauthorService',
            'ezpublish.fieldtype.indexable.ezbinaryfile' => 'getEzpublish_Fieldtype_Indexable_EzbinaryfileService',
            'ezpublish.fieldtype.indexable.ezboolean' => 'getEzpublish_Fieldtype_Indexable_EzbooleanService',
            'ezpublish.fieldtype.indexable.ezcountry' => 'getEzpublish_Fieldtype_Indexable_EzcountryService',
            'ezpublish.fieldtype.indexable.ezdate' => 'getEzpublish_Fieldtype_Indexable_EzdateService',
            'ezpublish.fieldtype.indexable.ezdatetime' => 'getEzpublish_Fieldtype_Indexable_EzdatetimeService',
            'ezpublish.fieldtype.indexable.ezemail' => 'getEzpublish_Fieldtype_Indexable_EzemailService',
            'ezpublish.fieldtype.indexable.ezfloat' => 'getEzpublish_Fieldtype_Indexable_EzfloatService',
            'ezpublish.fieldtype.indexable.ezgmaplocation' => 'getEzpublish_Fieldtype_Indexable_EzgmaplocationService',
            'ezpublish.fieldtype.indexable.ezimage' => 'getEzpublish_Fieldtype_Indexable_EzimageService',
            'ezpublish.fieldtype.indexable.ezinteger' => 'getEzpublish_Fieldtype_Indexable_EzintegerService',
            'ezpublish.fieldtype.indexable.ezisbn' => 'getEzpublish_Fieldtype_Indexable_EzisbnService',
            'ezpublish.fieldtype.indexable.ezmedia' => 'getEzpublish_Fieldtype_Indexable_EzmediaService',
            'ezpublish.fieldtype.indexable.ezobjectrelation' => 'getEzpublish_Fieldtype_Indexable_EzobjectrelationService',
            'ezpublish.fieldtype.indexable.ezobjectrelationlist' => 'getEzpublish_Fieldtype_Indexable_EzobjectrelationlistService',
            'ezpublish.fieldtype.indexable.ezprice' => 'getEzpublish_Fieldtype_Indexable_EzpriceService',
            'ezpublish.fieldtype.indexable.ezrichtext' => 'getEzpublish_Fieldtype_Indexable_EzrichtextService',
            'ezpublish.fieldtype.indexable.ezselection' => 'getEzpublish_Fieldtype_Indexable_EzselectionService',
            'ezpublish.fieldtype.indexable.ezstring' => 'getEzpublish_Fieldtype_Indexable_EzstringService',
            'ezpublish.fieldtype.indexable.eztext' => 'getEzpublish_Fieldtype_Indexable_EztextService',
            'ezpublish.fieldtype.indexable.eztime' => 'getEzpublish_Fieldtype_Indexable_EztimeService',
            'ezpublish.fieldtype.indexable.ezurl' => 'getEzpublish_Fieldtype_Indexable_EzurlService',
            'ezpublish.fieldtype.indexable.unindexed' => 'getEzpublish_Fieldtype_Indexable_UnindexedService',
            'ezpublish.fieldtype.metadatahandler.imagesize' => 'getEzpublish_Fieldtype_Metadatahandler_ImagesizeService',
            'ezpublish.fieldtype.parameterproviderregistry' => 'getEzpublish_Fieldtype_ParameterproviderregistryService',
            'ezpublish.fragment_listener.factory' => 'getEzpublish_FragmentListener_FactoryService',
            'ezpublish.http_cache.cache_manager' => 'getEzpublish_HttpCache_CacheManagerService',
            'ezpublish.http_cache.event_dispatcher' => 'getEzpublish_HttpCache_EventDispatcherService',
            'ezpublish.http_cache.proxy_client.varnish.factory' => 'getEzpublish_HttpCache_ProxyClient_Varnish_FactoryService',
            'ezpublish.http_cache.purge_client.fos' => 'getEzpublish_HttpCache_PurgeClient_FosService',
            'ezpublish.http_cache.purge_client.local' => 'getEzpublish_HttpCache_PurgeClient_LocalService',
            'ezpublish.http_cache.purger.instant' => 'getEzpublish_HttpCache_Purger_InstantService',
            'ezpublish.http_cache.signalslot.assign_section' => 'getEzpublish_HttpCache_Signalslot_AssignSectionService',
            'ezpublish.http_cache.signalslot.assign_user_to_user_group' => 'getEzpublish_HttpCache_Signalslot_AssignUserToUserGroupService',
            'ezpublish.http_cache.signalslot.copy_content' => 'getEzpublish_HttpCache_Signalslot_CopyContentService',
            'ezpublish.http_cache.signalslot.create_location' => 'getEzpublish_HttpCache_Signalslot_CreateLocationService',
            'ezpublish.http_cache.signalslot.delete_content' => 'getEzpublish_HttpCache_Signalslot_DeleteContentService',
            'ezpublish.http_cache.signalslot.delete_location' => 'getEzpublish_HttpCache_Signalslot_DeleteLocationService',
            'ezpublish.http_cache.signalslot.delete_version' => 'getEzpublish_HttpCache_Signalslot_DeleteVersionService',
            'ezpublish.http_cache.signalslot.hide_location' => 'getEzpublish_HttpCache_Signalslot_HideLocationService',
            'ezpublish.http_cache.signalslot.move_subtree' => 'getEzpublish_HttpCache_Signalslot_MoveSubtreeService',
            'ezpublish.http_cache.signalslot.publish_version' => 'getEzpublish_HttpCache_Signalslot_PublishVersionService',
            'ezpublish.http_cache.signalslot.set_content_state' => 'getEzpublish_HttpCache_Signalslot_SetContentStateService',
            'ezpublish.http_cache.signalslot.swap_location' => 'getEzpublish_HttpCache_Signalslot_SwapLocationService',
            'ezpublish.http_cache.signalslot.unassign_user_from_user_group' => 'getEzpublish_HttpCache_Signalslot_UnassignUserFromUserGroupService',
            'ezpublish.http_cache.signalslot.unhide_location' => 'getEzpublish_HttpCache_Signalslot_UnhideLocationService',
            'ezpublish.http_cache.signalslot.update_location' => 'getEzpublish_HttpCache_Signalslot_UpdateLocationService',
            'ezpublish.http_cache.signalslot.update_user' => 'getEzpublish_HttpCache_Signalslot_UpdateUserService',
            'ezpublish.http_cache.store' => 'getEzpublish_HttpCache_StoreService',
            'ezpublish.image_alias.imagine.alias_cleaner' => 'getEzpublish_ImageAlias_Imagine_AliasCleanerService',
            'ezpublish.image_alias.imagine.alias_generator' => 'getEzpublish_ImageAlias_Imagine_AliasGeneratorService',
            'ezpublish.image_alias.imagine.binary_loader' => 'getEzpublish_ImageAlias_Imagine_BinaryLoaderService',
            'ezpublish.image_alias.imagine.cache_resolver' => 'getEzpublish_ImageAlias_Imagine_CacheResolverService',
            'ezpublish.image_alias.imagine.filter.reduce_noise' => 'getEzpublish_ImageAlias_Imagine_Filter_ReduceNoiseService',
            'ezpublish.image_alias.variation_path_generator.alias_directory' => 'getEzpublish_ImageAlias_VariationPathGenerator_AliasDirectoryService',
            'ezpublish.image_alias.variation_path_generator.original_directory' => 'getEzpublish_ImageAlias_VariationPathGenerator_OriginalDirectoryService',
            'ezpublish.image_alias.variation_purger.io' => 'getEzpublish_ImageAlias_VariationPurger_IoService',
            'ezpublish.image_alias.variation_purger.legacy_storage_image_file' => 'getEzpublish_ImageAlias_VariationPurger_LegacyStorageImageFileService',
            'ezpublish.image_alias.variation_purger.legacy_storage_image_file.image_file_list' => 'getEzpublish_ImageAlias_VariationPurger_LegacyStorageImageFile_ImageFileListService',
            'ezpublish.image_alias.variation_purger.legacy_storage_image_file.image_file_row_reader' => 'getEzpublish_ImageAlias_VariationPurger_LegacyStorageImageFile_ImageFileRowReaderService',
            'ezpublish.locale.converter' => 'getEzpublish_Locale_ConverterService',
            'ezpublish.location_view.matcher_factory' => 'getEzpublish_LocationView_MatcherFactoryService',
            'ezpublish.location_view_provider.configured' => 'getEzpublish_LocationViewProvider_ConfiguredService',
            'ezpublish.original_request_listener' => 'getEzpublish_OriginalRequestListenerService',
            'ezpublish.param_converter.content' => 'getEzpublish_ParamConverter_ContentService',
            'ezpublish.param_converter.location' => 'getEzpublish_ParamConverter_LocationService',
            'ezpublish.persistence.connection' => 'getEzpublish_Persistence_ConnectionService',
            'ezpublish.persistence.connection.factory' => 'getEzpublish_Persistence_Connection_FactoryService',
            'ezpublish.persistence.external_storage_registry' => 'getEzpublish_Persistence_ExternalStorageRegistryService',
            'ezpublish.persistence.external_storage_registry.factory' => 'getEzpublish_Persistence_ExternalStorageRegistry_FactoryService',
            'ezpublish.persistence.field_type_registry' => 'getEzpublish_Persistence_FieldTypeRegistryService',
            'ezpublish.persistence.field_type_registry.factory' => 'getEzpublish_Persistence_FieldTypeRegistry_FactoryService',
            'ezpublish.persistence.legacy.content.gateway.exception_conversion' => 'getEzpublish_Persistence_Legacy_Content_Gateway_ExceptionConversionService',
            'ezpublish.persistence.legacy.content.gateway.inner' => 'getEzpublish_Persistence_Legacy_Content_Gateway_InnerService',
            'ezpublish.persistence.legacy.content.mapper' => 'getEzpublish_Persistence_Legacy_Content_MapperService',
            'ezpublish.persistence.legacy.content.query_builder' => 'getEzpublish_Persistence_Legacy_Content_QueryBuilderService',
            'ezpublish.persistence.legacy.content_type.content_updater' => 'getEzpublish_Persistence_Legacy_ContentType_ContentUpdaterService',
            'ezpublish.persistence.legacy.content_type.gateway.exception_conversion' => 'getEzpublish_Persistence_Legacy_ContentType_Gateway_ExceptionConversionService',
            'ezpublish.persistence.legacy.content_type.gateway.inner' => 'getEzpublish_Persistence_Legacy_ContentType_Gateway_InnerService',
            'ezpublish.persistence.legacy.content_type.mapper' => 'getEzpublish_Persistence_Legacy_ContentType_MapperService',
            'ezpublish.persistence.legacy.content_type.update_handler.basic' => 'getEzpublish_Persistence_Legacy_ContentType_UpdateHandler_BasicService',
            'ezpublish.persistence.legacy.external_storage_handler' => 'getEzpublish_Persistence_Legacy_ExternalStorageHandlerService',
            'ezpublish.persistence.legacy.field_handler' => 'getEzpublish_Persistence_Legacy_FieldHandlerService',
            'ezpublish.persistence.legacy.field_value_converter.registry' => 'getEzpublish_Persistence_Legacy_FieldValueConverter_RegistryService',
            'ezpublish.persistence.legacy.language.cache' => 'getEzpublish_Persistence_Legacy_Language_CacheService',
            'ezpublish.persistence.legacy.language.gateway.exception_conversion' => 'getEzpublish_Persistence_Legacy_Language_Gateway_ExceptionConversionService',
            'ezpublish.persistence.legacy.language.gateway.inner' => 'getEzpublish_Persistence_Legacy_Language_Gateway_InnerService',
            'ezpublish.persistence.legacy.language.mapper' => 'getEzpublish_Persistence_Legacy_Language_MapperService',
            'ezpublish.persistence.legacy.language.mask_generator' => 'getEzpublish_Persistence_Legacy_Language_MaskGeneratorService',
            'ezpublish.persistence.legacy.location.gateway.exception_conversion' => 'getEzpublish_Persistence_Legacy_Location_Gateway_ExceptionConversionService',
            'ezpublish.persistence.legacy.location.gateway.inner' => 'getEzpublish_Persistence_Legacy_Location_Gateway_InnerService',
            'ezpublish.persistence.legacy.location.mapper' => 'getEzpublish_Persistence_Legacy_Location_MapperService',
            'ezpublish.persistence.legacy.object_state.gateway.exception_conversion' => 'getEzpublish_Persistence_Legacy_ObjectState_Gateway_ExceptionConversionService',
            'ezpublish.persistence.legacy.object_state.gateway.inner' => 'getEzpublish_Persistence_Legacy_ObjectState_Gateway_InnerService',
            'ezpublish.persistence.legacy.object_state.mapper' => 'getEzpublish_Persistence_Legacy_ObjectState_MapperService',
            'ezpublish.persistence.legacy.role.gateway.exception_conversion' => 'getEzpublish_Persistence_Legacy_Role_Gateway_ExceptionConversionService',
            'ezpublish.persistence.legacy.role.gateway.inner' => 'getEzpublish_Persistence_Legacy_Role_Gateway_InnerService',
            'ezpublish.persistence.legacy.role.limitation.converter' => 'getEzpublish_Persistence_Legacy_Role_Limitation_ConverterService',
            'ezpublish.persistence.legacy.role.limitation.handler.object_state' => 'getEzpublish_Persistence_Legacy_Role_Limitation_Handler_ObjectStateService',
            'ezpublish.persistence.legacy.section.gateway.exception_conversion' => 'getEzpublish_Persistence_Legacy_Section_Gateway_ExceptionConversionService',
            'ezpublish.persistence.legacy.section.gateway.inner' => 'getEzpublish_Persistence_Legacy_Section_Gateway_InnerService',
            'ezpublish.persistence.legacy.tree_handler' => 'getEzpublish_Persistence_Legacy_TreeHandlerService',
            'ezpublish.persistence.legacy.url_alias.gateway.exception_conversion' => 'getEzpublish_Persistence_Legacy_UrlAlias_Gateway_ExceptionConversionService',
            'ezpublish.persistence.legacy.url_alias.gateway.inner' => 'getEzpublish_Persistence_Legacy_UrlAlias_Gateway_InnerService',
            'ezpublish.persistence.legacy.url_alias.mapper' => 'getEzpublish_Persistence_Legacy_UrlAlias_MapperService',
            'ezpublish.persistence.legacy.url_wildcard.gateway.exception_conversion' => 'getEzpublish_Persistence_Legacy_UrlWildcard_Gateway_ExceptionConversionService',
            'ezpublish.persistence.legacy.url_wildcard.gateway.inner' => 'getEzpublish_Persistence_Legacy_UrlWildcard_Gateway_InnerService',
            'ezpublish.persistence.legacy.url_wildcard.mapper' => 'getEzpublish_Persistence_Legacy_UrlWildcard_MapperService',
            'ezpublish.persistence.legacy.user.gateway.exception_conversion' => 'getEzpublish_Persistence_Legacy_User_Gateway_ExceptionConversionService',
            'ezpublish.persistence.legacy.user.gateway.inner' => 'getEzpublish_Persistence_Legacy_User_Gateway_InnerService',
            'ezpublish.persistence.legacy.user.mapper' => 'getEzpublish_Persistence_Legacy_User_MapperService',
            'ezpublish.persistence.slug_converter' => 'getEzpublish_Persistence_SlugConverterService',
            'ezpublish.query_type.registry' => 'getEzpublish_QueryType_RegistryService',
            'ezpublish.request_index_listener' => 'getEzpublish_RequestIndexListenerService',
            'ezpublish.request_redirect_listener' => 'getEzpublish_RequestRedirectListenerService',
            'ezpublish.route_reference.generator' => 'getEzpublish_RouteReference_GeneratorService',
            'ezpublish.route_reference.listener.content_download' => 'getEzpublish_RouteReference_Listener_ContentDownloadService',
            'ezpublish.route_reference.listener.language_switch' => 'getEzpublish_RouteReference_Listener_LanguageSwitchService',
            'ezpublish.search.common.field_name_generator' => 'getEzpublish_Search_Common_FieldNameGeneratorService',
            'ezpublish.search.common.field_name_resolver' => 'getEzpublish_Search_Common_FieldNameResolverService',
            'ezpublish.search.common.field_registry' => 'getEzpublish_Search_Common_FieldRegistryService',
            'ezpublish.search.legacy.connection.factory' => 'getEzpublish_Search_Legacy_Connection_FactoryService',
            'ezpublish.search.legacy.gateway.content.exception_conversion' => 'getEzpublish_Search_Legacy_Gateway_Content_ExceptionConversionService',
            'ezpublish.search.legacy.gateway.content.inner' => 'getEzpublish_Search_Legacy_Gateway_Content_InnerService',
            'ezpublish.search.legacy.gateway.criteria_converter.content' => 'getEzpublish_Search_Legacy_Gateway_CriteriaConverter_ContentService',
            'ezpublish.search.legacy.gateway.criteria_converter.location' => 'getEzpublish_Search_Legacy_Gateway_CriteriaConverter_LocationService',
            'ezpublish.search.legacy.gateway.criterion_field_value_converter' => 'getEzpublish_Search_Legacy_Gateway_CriterionFieldValueConverterService',
            'ezpublish.search.legacy.gateway.criterion_field_value_handler.collection.comma_separated' => 'getEzpublish_Search_Legacy_Gateway_CriterionFieldValueHandler_Collection_CommaSeparatedService',
            'ezpublish.search.legacy.gateway.criterion_field_value_handler.collection.hypen_separated' => 'getEzpublish_Search_Legacy_Gateway_CriterionFieldValueHandler_Collection_HypenSeparatedService',
            'ezpublish.search.legacy.gateway.criterion_field_value_handler.composite' => 'getEzpublish_Search_Legacy_Gateway_CriterionFieldValueHandler_CompositeService',
            'ezpublish.search.legacy.gateway.criterion_field_value_handler.registry' => 'getEzpublish_Search_Legacy_Gateway_CriterionFieldValueHandler_RegistryService',
            'ezpublish.search.legacy.gateway.criterion_field_value_handler.simple' => 'getEzpublish_Search_Legacy_Gateway_CriterionFieldValueHandler_SimpleService',
            'ezpublish.search.legacy.gateway.criterion_handler.common.content_id' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_ContentIdService',
            'ezpublish.search.legacy.gateway.criterion_handler.common.content_type_group_id' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_ContentTypeGroupIdService',
            'ezpublish.search.legacy.gateway.criterion_handler.common.content_type_id' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_ContentTypeIdService',
            'ezpublish.search.legacy.gateway.criterion_handler.common.content_type_identifier' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_ContentTypeIdentifierService',
            'ezpublish.search.legacy.gateway.criterion_handler.common.date_metadata' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_DateMetadataService',
            'ezpublish.search.legacy.gateway.criterion_handler.common.field' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_FieldService',
            'ezpublish.search.legacy.gateway.criterion_handler.common.field_relation' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_FieldRelationService',
            'ezpublish.search.legacy.gateway.criterion_handler.common.full_text' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_FullTextService',
            'ezpublish.search.legacy.gateway.criterion_handler.common.language_code' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_LanguageCodeService',
            'ezpublish.search.legacy.gateway.criterion_handler.common.logical_and' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_LogicalAndService',
            'ezpublish.search.legacy.gateway.criterion_handler.common.logical_not' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_LogicalNotService',
            'ezpublish.search.legacy.gateway.criterion_handler.common.logical_or' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_LogicalOrService',
            'ezpublish.search.legacy.gateway.criterion_handler.common.map_location_distance' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_MapLocationDistanceService',
            'ezpublish.search.legacy.gateway.criterion_handler.common.match_all' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_MatchAllService',
            'ezpublish.search.legacy.gateway.criterion_handler.common.match_none' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_MatchNoneService',
            'ezpublish.search.legacy.gateway.criterion_handler.common.object_state_id' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_ObjectStateIdService',
            'ezpublish.search.legacy.gateway.criterion_handler.common.remote_id' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_RemoteIdService',
            'ezpublish.search.legacy.gateway.criterion_handler.common.section_id' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_SectionIdService',
            'ezpublish.search.legacy.gateway.criterion_handler.common.user_metadata' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_UserMetadataService',
            'ezpublish.search.legacy.gateway.criterion_handler.content.ancestor' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Content_AncestorService',
            'ezpublish.search.legacy.gateway.criterion_handler.content.location_id' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Content_LocationIdService',
            'ezpublish.search.legacy.gateway.criterion_handler.content.location_remote_id' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Content_LocationRemoteIdService',
            'ezpublish.search.legacy.gateway.criterion_handler.content.parent_location_id' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Content_ParentLocationIdService',
            'ezpublish.search.legacy.gateway.criterion_handler.content.permission_subtree' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Content_PermissionSubtreeService',
            'ezpublish.search.legacy.gateway.criterion_handler.content.subtree' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Content_SubtreeService',
            'ezpublish.search.legacy.gateway.criterion_handler.content.visibility' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Content_VisibilityService',
            'ezpublish.search.legacy.gateway.criterion_handler.location.ancestor' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Location_AncestorService',
            'ezpublish.search.legacy.gateway.criterion_handler.location.depth' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Location_DepthService',
            'ezpublish.search.legacy.gateway.criterion_handler.location.is_main_location' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Location_IsMainLocationService',
            'ezpublish.search.legacy.gateway.criterion_handler.location.location_id' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Location_LocationIdService',
            'ezpublish.search.legacy.gateway.criterion_handler.location.location_remote_id' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Location_LocationRemoteIdService',
            'ezpublish.search.legacy.gateway.criterion_handler.location.parent_location_id' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Location_ParentLocationIdService',
            'ezpublish.search.legacy.gateway.criterion_handler.location.priority' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Location_PriorityService',
            'ezpublish.search.legacy.gateway.criterion_handler.location.subtree' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Location_SubtreeService',
            'ezpublish.search.legacy.gateway.criterion_handler.location.visibility' => 'getEzpublish_Search_Legacy_Gateway_CriterionHandler_Location_VisibilityService',
            'ezpublish.search.legacy.gateway.location.exception_conversion' => 'getEzpublish_Search_Legacy_Gateway_Location_ExceptionConversionService',
            'ezpublish.search.legacy.gateway.location.inner' => 'getEzpublish_Search_Legacy_Gateway_Location_InnerService',
            'ezpublish.search.legacy.gateway.sort_clause_converter.content' => 'getEzpublish_Search_Legacy_Gateway_SortClauseConverter_ContentService',
            'ezpublish.search.legacy.gateway.sort_clause_converter.location' => 'getEzpublish_Search_Legacy_Gateway_SortClauseConverter_LocationService',
            'ezpublish.search.legacy.gateway.sort_clause_handler.common.content_id' => 'getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Common_ContentIdService',
            'ezpublish.search.legacy.gateway.sort_clause_handler.common.content_name' => 'getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Common_ContentNameService',
            'ezpublish.search.legacy.gateway.sort_clause_handler.common.date_modified' => 'getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Common_DateModifiedService',
            'ezpublish.search.legacy.gateway.sort_clause_handler.common.date_published' => 'getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Common_DatePublishedService',
            'ezpublish.search.legacy.gateway.sort_clause_handler.common.field' => 'getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Common_FieldService',
            'ezpublish.search.legacy.gateway.sort_clause_handler.common.map_location_distance' => 'getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Common_MapLocationDistanceService',
            'ezpublish.search.legacy.gateway.sort_clause_handler.common.section_identifier' => 'getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Common_SectionIdentifierService',
            'ezpublish.search.legacy.gateway.sort_clause_handler.common.section_name' => 'getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Common_SectionNameService',
            'ezpublish.search.legacy.gateway.sort_clause_handler.location.depth' => 'getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Location_DepthService',
            'ezpublish.search.legacy.gateway.sort_clause_handler.location.id' => 'getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Location_IdService',
            'ezpublish.search.legacy.gateway.sort_clause_handler.location.is_main_location' => 'getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Location_IsMainLocationService',
            'ezpublish.search.legacy.gateway.sort_clause_handler.location.path' => 'getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Location_PathService',
            'ezpublish.search.legacy.gateway.sort_clause_handler.location.priority' => 'getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Location_PriorityService',
            'ezpublish.search.legacy.gateway.sort_clause_handler.location.visibility' => 'getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Location_VisibilityService',
            'ezpublish.search.slot.copy_content' => 'getEzpublish_Search_Slot_CopyContentService',
            'ezpublish.search.slot.copy_subtree' => 'getEzpublish_Search_Slot_CopySubtreeService',
            'ezpublish.search.slot.create_location' => 'getEzpublish_Search_Slot_CreateLocationService',
            'ezpublish.search.slot.create_user' => 'getEzpublish_Search_Slot_CreateUserService',
            'ezpublish.search.slot.create_user_group' => 'getEzpublish_Search_Slot_CreateUserGroupService',
            'ezpublish.search.slot.delete_content' => 'getEzpublish_Search_Slot_DeleteContentService',
            'ezpublish.search.slot.delete_location' => 'getEzpublish_Search_Slot_DeleteLocationService',
            'ezpublish.search.slot.delete_version' => 'getEzpublish_Search_Slot_DeleteVersionService',
            'ezpublish.search.slot.hide_location' => 'getEzpublish_Search_Slot_HideLocationService',
            'ezpublish.search.slot.move_subtree' => 'getEzpublish_Search_Slot_MoveSubtreeService',
            'ezpublish.search.slot.move_user_group' => 'getEzpublish_Search_Slot_MoveUserGroupService',
            'ezpublish.search.slot.publish_version' => 'getEzpublish_Search_Slot_PublishVersionService',
            'ezpublish.search.slot.recover' => 'getEzpublish_Search_Slot_RecoverService',
            'ezpublish.search.slot.set_content_state' => 'getEzpublish_Search_Slot_SetContentStateService',
            'ezpublish.search.slot.trash' => 'getEzpublish_Search_Slot_TrashService',
            'ezpublish.search.slot.unhide_location' => 'getEzpublish_Search_Slot_UnhideLocationService',
            'ezpublish.search.solr.core_filter.native' => 'getEzpublish_Search_Solr_CoreFilter_NativeService',
            'ezpublish.search.solr.document_mapper.native' => 'getEzpublish_Search_Solr_DocumentMapper_NativeService',
            'ezpublish.search.solr.field_value_mapper.aggregate' => 'getEzpublish_Search_Solr_FieldValueMapper_AggregateService',
            'ezpublish.search.solr.field_value_mapper.boolean' => 'getEzpublish_Search_Solr_FieldValueMapper_BooleanService',
            'ezpublish.search.solr.field_value_mapper.date' => 'getEzpublish_Search_Solr_FieldValueMapper_DateService',
            'ezpublish.search.solr.field_value_mapper.float' => 'getEzpublish_Search_Solr_FieldValueMapper_FloatService',
            'ezpublish.search.solr.field_value_mapper.geo_location' => 'getEzpublish_Search_Solr_FieldValueMapper_GeoLocationService',
            'ezpublish.search.solr.field_value_mapper.identifier' => 'getEzpublish_Search_Solr_FieldValueMapper_IdentifierService',
            'ezpublish.search.solr.field_value_mapper.integer' => 'getEzpublish_Search_Solr_FieldValueMapper_IntegerService',
            'ezpublish.search.solr.field_value_mapper.multiple_boolean' => 'getEzpublish_Search_Solr_FieldValueMapper_MultipleBooleanService',
            'ezpublish.search.solr.field_value_mapper.multiple_identifier' => 'getEzpublish_Search_Solr_FieldValueMapper_MultipleIdentifierService',
            'ezpublish.search.solr.field_value_mapper.multiple_integer' => 'getEzpublish_Search_Solr_FieldValueMapper_MultipleIntegerService',
            'ezpublish.search.solr.field_value_mapper.multiple_string' => 'getEzpublish_Search_Solr_FieldValueMapper_MultipleStringService',
            'ezpublish.search.solr.field_value_mapper.price' => 'getEzpublish_Search_Solr_FieldValueMapper_PriceService',
            'ezpublish.search.solr.field_value_mapper.string' => 'getEzpublish_Search_Solr_FieldValueMapper_StringService',
            'ezpublish.search.solr.gateway.client.http.stream' => 'getEzpublish_Search_Solr_Gateway_Client_Http_StreamService',
            'ezpublish.search.solr.gateway.endpoint_registry' => 'getEzpublish_Search_Solr_Gateway_EndpointRegistryService',
            'ezpublish.search.solr.gateway.endpoint_resolver.native' => 'getEzpublish_Search_Solr_Gateway_EndpointResolver_NativeService',
            'ezpublish.search.solr.gateway.native' => 'getEzpublish_Search_Solr_Gateway_NativeService',
            'ezpublish.search.solr.query.common.criterion_visitor.logical_and' => 'getEzpublish_Search_Solr_Query_Common_CriterionVisitor_LogicalAndService',
            'ezpublish.search.solr.query.common.criterion_visitor.logical_not' => 'getEzpublish_Search_Solr_Query_Common_CriterionVisitor_LogicalNotService',
            'ezpublish.search.solr.query.common.criterion_visitor.logical_or' => 'getEzpublish_Search_Solr_Query_Common_CriterionVisitor_LogicalOrService',
            'ezpublish.search.solr.query.common.criterion_visitor.match_all' => 'getEzpublish_Search_Solr_Query_Common_CriterionVisitor_MatchAllService',
            'ezpublish.search.solr.query.common.criterion_visitor.match_none' => 'getEzpublish_Search_Solr_Query_Common_CriterionVisitor_MatchNoneService',
            'ezpublish.search.solr.query.content.criterion_visitor.aggregate' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_AggregateService',
            'ezpublish.search.solr.query.content.criterion_visitor.ancestor' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_AncestorService',
            'ezpublish.search.solr.query.content.criterion_visitor.content_id_in' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_ContentIdInService',
            'ezpublish.search.solr.query.content.criterion_visitor.content_type_group_id_in' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_ContentTypeGroupIdInService',
            'ezpublish.search.solr.query.content.criterion_visitor.content_type_id_in' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_ContentTypeIdInService',
            'ezpublish.search.solr.query.content.criterion_visitor.content_type_identifier_in' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_ContentTypeIdentifierInService',
            'ezpublish.search.solr.query.content.criterion_visitor.custom_field_in' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_CustomFieldInService',
            'ezpublish.search.solr.query.content.criterion_visitor.custom_field_range' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_CustomFieldRangeService',
            'ezpublish.search.solr.query.content.criterion_visitor.field_in' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_FieldInService',
            'ezpublish.search.solr.query.content.criterion_visitor.field_range' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_FieldRangeService',
            'ezpublish.search.solr.query.content.criterion_visitor.full_text' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_FullTextService',
            'ezpublish.search.solr.query.content.criterion_visitor.language_code_in' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_LanguageCodeInService',
            'ezpublish.search.solr.query.content.criterion_visitor.location_id_in' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_LocationIdInService',
            'ezpublish.search.solr.query.content.criterion_visitor.location_remote_id_in' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_LocationRemoteIdInService',
            'ezpublish.search.solr.query.content.criterion_visitor.map_location_distance_in' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_MapLocationDistanceInService',
            'ezpublish.search.solr.query.content.criterion_visitor.map_location_distance_range' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_MapLocationDistanceRangeService',
            'ezpublish.search.solr.query.content.criterion_visitor.modified_between' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_ModifiedBetweenService',
            'ezpublish.search.solr.query.content.criterion_visitor.modified_in' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_ModifiedInService',
            'ezpublish.search.solr.query.content.criterion_visitor.object_state_id_in' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_ObjectStateIdInService',
            'ezpublish.search.solr.query.content.criterion_visitor.parent_location_id_in' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_ParentLocationIdInService',
            'ezpublish.search.solr.query.content.criterion_visitor.published_between' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_PublishedBetweenService',
            'ezpublish.search.solr.query.content.criterion_visitor.published_in' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_PublishedInService',
            'ezpublish.search.solr.query.content.criterion_visitor.remote_id_in' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_RemoteIdInService',
            'ezpublish.search.solr.query.content.criterion_visitor.section_in' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_SectionInService',
            'ezpublish.search.solr.query.content.criterion_visitor.subtree_in' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_SubtreeInService',
            'ezpublish.search.solr.query.content.criterion_visitor.user_metadata_in' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_UserMetadataInService',
            'ezpublish.search.solr.query.content.criterion_visitor.visibility' => 'getEzpublish_Search_Solr_Query_Content_CriterionVisitor_VisibilityService',
            'ezpublish.search.solr.query.content.facet_builder_visitor.aggregate' => 'getEzpublish_Search_Solr_Query_Content_FacetBuilderVisitor_AggregateService',
            'ezpublish.search.solr.query.content.facet_builder_visitor.content_type' => 'getEzpublish_Search_Solr_Query_Content_FacetBuilderVisitor_ContentTypeService',
            'ezpublish.search.solr.query.content.facet_builder_visitor.section' => 'getEzpublish_Search_Solr_Query_Content_FacetBuilderVisitor_SectionService',
            'ezpublish.search.solr.query.content.facet_builder_visitor.user' => 'getEzpublish_Search_Solr_Query_Content_FacetBuilderVisitor_UserService',
            'ezpublish.search.solr.query.content.sort_clause_visitor.aggregate' => 'getEzpublish_Search_Solr_Query_Content_SortClauseVisitor_AggregateService',
            'ezpublish.search.solr.query.content.sort_clause_visitor.content_id' => 'getEzpublish_Search_Solr_Query_Content_SortClauseVisitor_ContentIdService',
            'ezpublish.search.solr.query.content.sort_clause_visitor.content_name' => 'getEzpublish_Search_Solr_Query_Content_SortClauseVisitor_ContentNameService',
            'ezpublish.search.solr.query.content.sort_clause_visitor.date_modified' => 'getEzpublish_Search_Solr_Query_Content_SortClauseVisitor_DateModifiedService',
            'ezpublish.search.solr.query.content.sort_clause_visitor.date_published' => 'getEzpublish_Search_Solr_Query_Content_SortClauseVisitor_DatePublishedService',
            'ezpublish.search.solr.query.content.sort_clause_visitor.field' => 'getEzpublish_Search_Solr_Query_Content_SortClauseVisitor_FieldService',
            'ezpublish.search.solr.query.content.sort_clause_visitor.map_location_distance' => 'getEzpublish_Search_Solr_Query_Content_SortClauseVisitor_MapLocationDistanceService',
            'ezpublish.search.solr.query.content.sort_clause_visitor.section_identifier' => 'getEzpublish_Search_Solr_Query_Content_SortClauseVisitor_SectionIdentifierService',
            'ezpublish.search.solr.query.content.sort_clause_visitor.section_name' => 'getEzpublish_Search_Solr_Query_Content_SortClauseVisitor_SectionNameService',
            'ezpublish.search.solr.query.location.criterion_visitor.aggregate' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_AggregateService',
            'ezpublish.search.solr.query.location.criterion_visitor.ancestor' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_AncestorService',
            'ezpublish.search.solr.query.location.criterion_visitor.content_id_in' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_ContentIdInService',
            'ezpublish.search.solr.query.location.criterion_visitor.content_type_group_id_in' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_ContentTypeGroupIdInService',
            'ezpublish.search.solr.query.location.criterion_visitor.content_type_id_in' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_ContentTypeIdInService',
            'ezpublish.search.solr.query.location.criterion_visitor.content_type_identifier_in' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_ContentTypeIdentifierInService',
            'ezpublish.search.solr.query.location.criterion_visitor.custom_field_in' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_CustomFieldInService',
            'ezpublish.search.solr.query.location.criterion_visitor.custom_field_range' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_CustomFieldRangeService',
            'ezpublish.search.solr.query.location.criterion_visitor.depth_between' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_DepthBetweenService',
            'ezpublish.search.solr.query.location.criterion_visitor.depth_in' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_DepthInService',
            'ezpublish.search.solr.query.location.criterion_visitor.field_in' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_FieldInService',
            'ezpublish.search.solr.query.location.criterion_visitor.field_range' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_FieldRangeService',
            'ezpublish.search.solr.query.location.criterion_visitor.full_text' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_FullTextService',
            'ezpublish.search.solr.query.location.criterion_visitor.is_main_location' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_IsMainLocationService',
            'ezpublish.search.solr.query.location.criterion_visitor.language_code_in' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_LanguageCodeInService',
            'ezpublish.search.solr.query.location.criterion_visitor.location_id_in' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_LocationIdInService',
            'ezpublish.search.solr.query.location.criterion_visitor.location_remote_id_in' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_LocationRemoteIdInService',
            'ezpublish.search.solr.query.location.criterion_visitor.map_location_distance_range' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_MapLocationDistanceRangeService',
            'ezpublish.search.solr.query.location.criterion_visitor.modified_between' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_ModifiedBetweenService',
            'ezpublish.search.solr.query.location.criterion_visitor.modified_in' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_ModifiedInService',
            'ezpublish.search.solr.query.location.criterion_visitor.object_state_id_in' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_ObjectStateIdInService',
            'ezpublish.search.solr.query.location.criterion_visitor.parent_location_id_in' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_ParentLocationIdInService',
            'ezpublish.search.solr.query.location.criterion_visitor.priority_between' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_PriorityBetweenService',
            'ezpublish.search.solr.query.location.criterion_visitor.priority_in' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_PriorityInService',
            'ezpublish.search.solr.query.location.criterion_visitor.published_between' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_PublishedBetweenService',
            'ezpublish.search.solr.query.location.criterion_visitor.published_in' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_PublishedInService',
            'ezpublish.search.solr.query.location.criterion_visitor.remote_id_in' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_RemoteIdInService',
            'ezpublish.search.solr.query.location.criterion_visitor.section_in' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_SectionInService',
            'ezpublish.search.solr.query.location.criterion_visitor.subtree_in' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_SubtreeInService',
            'ezpublish.search.solr.query.location.criterion_visitor.user_metadata_in' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_UserMetadataInService',
            'ezpublish.search.solr.query.location.criterion_visitor.visibility' => 'getEzpublish_Search_Solr_Query_Location_CriterionVisitor_VisibilityService',
            'ezpublish.search.solr.query.location.facet_builder_visitor.aggregate' => 'getEzpublish_Search_Solr_Query_Location_FacetBuilderVisitor_AggregateService',
            'ezpublish.search.solr.query.location.sort_clause_visitor.aggregate' => 'getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_AggregateService',
            'ezpublish.search.solr.query.location.sort_clause_visitor.content_id' => 'getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_ContentIdService',
            'ezpublish.search.solr.query.location.sort_clause_visitor.content_name' => 'getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_ContentNameService',
            'ezpublish.search.solr.query.location.sort_clause_visitor.date_modified' => 'getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_DateModifiedService',
            'ezpublish.search.solr.query.location.sort_clause_visitor.date_published' => 'getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_DatePublishedService',
            'ezpublish.search.solr.query.location.sort_clause_visitor.depth' => 'getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_DepthService',
            'ezpublish.search.solr.query.location.sort_clause_visitor.field' => 'getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_FieldService',
            'ezpublish.search.solr.query.location.sort_clause_visitor.id' => 'getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_IdService',
            'ezpublish.search.solr.query.location.sort_clause_visitor.is_main_location' => 'getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_IsMainLocationService',
            'ezpublish.search.solr.query.location.sort_clause_visitor.map_location_distance' => 'getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_MapLocationDistanceService',
            'ezpublish.search.solr.query.location.sort_clause_visitor.path' => 'getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_PathService',
            'ezpublish.search.solr.query.location.sort_clause_visitor.priority' => 'getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_PriorityService',
            'ezpublish.search.solr.query.location.sort_clause_visitor.section_identifier' => 'getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_SectionIdentifierService',
            'ezpublish.search.solr.query.location.sort_clause_visitor.section_name' => 'getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_SectionNameService',
            'ezpublish.search.solr.query.location.sort_clause_visitor.visibility' => 'getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_VisibilityService',
            'ezpublish.search.solr.query_converter.content' => 'getEzpublish_Search_Solr_QueryConverter_ContentService',
            'ezpublish.search.solr.query_converter.location' => 'getEzpublish_Search_Solr_QueryConverter_LocationService',
            'ezpublish.search.solr.result_extractor.native' => 'getEzpublish_Search_Solr_ResultExtractor_NativeService',
            'ezpublish.security.controller' => 'getEzpublish_Security_ControllerService',
            'ezpublish.security.login_listener' => 'getEzpublish_Security_LoginListenerService',
            'ezpublish.security.user_provider' => 'getEzpublish_Security_UserProviderService',
            'ezpublish.session_init_by_post_listener' => 'getEzpublish_SessionInitByPostListenerService',
            'ezpublish.session_set_dynamic_name_listener' => 'getEzpublish_SessionSetDynamicNameListenerService',
            'ezpublish.signalslot.event_converter_slot' => 'getEzpublish_Signalslot_EventConverterSlotService',
            'ezpublish.signalslot.repository' => 'getEzpublish_Signalslot_RepositoryService',
            'ezpublish.signalslot.signal_dispatcher' => 'getEzpublish_Signalslot_SignalDispatcherService',
            'ezpublish.signalslot.signal_dispatcher_transaction_wrapper' => 'getEzpublish_Signalslot_SignalDispatcherTransactionWrapperService',
            'ezpublish.siteaccess' => 'getEzpublish_SiteaccessService',
            'ezpublish.siteaccess.matcher_builder' => 'getEzpublish_Siteaccess_MatcherBuilderService',
            'ezpublish.siteaccess_listener' => 'getEzpublish_SiteaccessListenerService',
            'ezpublish.siteaccess_listener.routing' => 'getEzpublish_SiteaccessListener_RoutingService',
            'ezpublish.siteaccess_match_listener' => 'getEzpublish_SiteaccessMatchListenerService',
            'ezpublish.siteaccess_router' => 'getEzpublish_SiteaccessRouterService',
            'ezpublish.solr.engine_factory' => 'getEzpublish_Solr_EngineFactoryService',
            'ezpublish.spi.persistence.cache' => 'getEzpublish_Spi_Persistence_CacheService',
            'ezpublish.spi.persistence.cache.contenthandler' => 'getEzpublish_Spi_Persistence_Cache_ContenthandlerService',
            'ezpublish.spi.persistence.cache.contentlanguagehandler' => 'getEzpublish_Spi_Persistence_Cache_ContentlanguagehandlerService',
            'ezpublish.spi.persistence.cache.contenttypehandler' => 'getEzpublish_Spi_Persistence_Cache_ContenttypehandlerService',
            'ezpublish.spi.persistence.cache.locationhandler' => 'getEzpublish_Spi_Persistence_Cache_LocationhandlerService',
            'ezpublish.spi.persistence.cache.objectstatehandler' => 'getEzpublish_Spi_Persistence_Cache_ObjectstatehandlerService',
            'ezpublish.spi.persistence.cache.persistencelogger' => 'getEzpublish_Spi_Persistence_Cache_PersistenceloggerService',
            'ezpublish.spi.persistence.cache.sectionhandler' => 'getEzpublish_Spi_Persistence_Cache_SectionhandlerService',
            'ezpublish.spi.persistence.cache.transactionhandler' => 'getEzpublish_Spi_Persistence_Cache_TransactionhandlerService',
            'ezpublish.spi.persistence.cache.trashhandler' => 'getEzpublish_Spi_Persistence_Cache_TrashhandlerService',
            'ezpublish.spi.persistence.cache.urlaliashandler' => 'getEzpublish_Spi_Persistence_Cache_UrlaliashandlerService',
            'ezpublish.spi.persistence.cache.userhandler' => 'getEzpublish_Spi_Persistence_Cache_UserhandlerService',
            'ezpublish.spi.persistence.content_handler' => 'getEzpublish_Spi_Persistence_ContentHandlerService',
            'ezpublish.spi.persistence.content_type_handler' => 'getEzpublish_Spi_Persistence_ContentTypeHandlerService',
            'ezpublish.spi.persistence.language_handler' => 'getEzpublish_Spi_Persistence_LanguageHandlerService',
            'ezpublish.spi.persistence.legacy' => 'getEzpublish_Spi_Persistence_LegacyService',
            'ezpublish.spi.persistence.legacy.content.handler' => 'getEzpublish_Spi_Persistence_Legacy_Content_HandlerService',
            'ezpublish.spi.persistence.legacy.content_type.handler.caching' => 'getEzpublish_Spi_Persistence_Legacy_ContentType_Handler_CachingService',
            'ezpublish.spi.persistence.legacy.content_type.handler.inner' => 'getEzpublish_Spi_Persistence_Legacy_ContentType_Handler_InnerService',
            'ezpublish.spi.persistence.legacy.language.handler.caching' => 'getEzpublish_Spi_Persistence_Legacy_Language_Handler_CachingService',
            'ezpublish.spi.persistence.legacy.language.handler.inner' => 'getEzpublish_Spi_Persistence_Legacy_Language_Handler_InnerService',
            'ezpublish.spi.persistence.legacy.location.handler' => 'getEzpublish_Spi_Persistence_Legacy_Location_HandlerService',
            'ezpublish.spi.persistence.legacy.object_state.handler' => 'getEzpublish_Spi_Persistence_Legacy_ObjectState_HandlerService',
            'ezpublish.spi.persistence.legacy.section.handler' => 'getEzpublish_Spi_Persistence_Legacy_Section_HandlerService',
            'ezpublish.spi.persistence.legacy.transactionhandler' => 'getEzpublish_Spi_Persistence_Legacy_TransactionhandlerService',
            'ezpublish.spi.persistence.legacy.trash.handler' => 'getEzpublish_Spi_Persistence_Legacy_Trash_HandlerService',
            'ezpublish.spi.persistence.legacy.url_alias.handler' => 'getEzpublish_Spi_Persistence_Legacy_UrlAlias_HandlerService',
            'ezpublish.spi.persistence.legacy.url_wildcard.handler' => 'getEzpublish_Spi_Persistence_Legacy_UrlWildcard_HandlerService',
            'ezpublish.spi.persistence.legacy.user.handler' => 'getEzpublish_Spi_Persistence_Legacy_User_HandlerService',
            'ezpublish.spi.persistence.location_handler' => 'getEzpublish_Spi_Persistence_LocationHandlerService',
            'ezpublish.spi.persistence.object_state_handler' => 'getEzpublish_Spi_Persistence_ObjectStateHandlerService',
            'ezpublish.spi.persistence.section_handler' => 'getEzpublish_Spi_Persistence_SectionHandlerService',
            'ezpublish.spi.persistence.trash_handler' => 'getEzpublish_Spi_Persistence_TrashHandlerService',
            'ezpublish.spi.persistence.url_alias_handler' => 'getEzpublish_Spi_Persistence_UrlAliasHandlerService',
            'ezpublish.spi.persistence.url_wildcard_handler' => 'getEzpublish_Spi_Persistence_UrlWildcardHandlerService',
            'ezpublish.spi.persistence.user_handler' => 'getEzpublish_Spi_Persistence_UserHandlerService',
            'ezpublish.spi.search' => 'getEzpublish_Spi_SearchService',
            'ezpublish.spi.search.legacy' => 'getEzpublish_Spi_Search_LegacyService',
            'ezpublish.spi.search.legacy.handler.content' => 'getEzpublish_Spi_Search_Legacy_Handler_ContentService',
            'ezpublish.spi.search.legacy.handler.location' => 'getEzpublish_Spi_Search_Legacy_Handler_LocationService',
            'ezpublish.spi.search.solr' => 'getEzpublish_Spi_Search_SolrService',
            'ezpublish.templating.extension.routing' => 'getEzpublish_Templating_Extension_RoutingService',
            'ezpublish.templating.field_block_renderer.twig' => 'getEzpublish_Templating_FieldBlockRenderer_TwigService',
            'ezpublish.templating.global_helper.core' => 'getEzpublish_Templating_GlobalHelper_CoreService',
            'ezpublish.translation_helper' => 'getEzpublish_TranslationHelperService',
            'ezpublish.twig.extension.content' => 'getEzpublish_Twig_Extension_ContentService',
            'ezpublish.twig.extension.core' => 'getEzpublish_Twig_Extension_CoreService',
            'ezpublish.twig.extension.field_rendering' => 'getEzpublish_Twig_Extension_FieldRenderingService',
            'ezpublish.twig.extension.filesize' => 'getEzpublish_Twig_Extension_FilesizeService',
            'ezpublish.twig.extension.image' => 'getEzpublish_Twig_Extension_ImageService',
            'ezpublish.twig.extension.rich_text' => 'getEzpublish_Twig_Extension_RichTextService',
            'ezpublish.urlalias_generator' => 'getEzpublish_UrlaliasGeneratorService',
            'ezpublish.urlalias_router' => 'getEzpublish_UrlaliasRouterService',
            'ezpublish.user.hash_generator' => 'getEzpublish_User_HashGeneratorService',
            'ezpublish.user.identity' => 'getEzpublish_User_IdentityService',
            'ezpublish.user.identity_definer.role_id' => 'getEzpublish_User_IdentityDefiner_RoleIdService',
            'ezpublish.utils.deprecation_warner' => 'getEzpublish_Utils_DeprecationWarnerService',
            'ezpublish.view.block_cache_response_listener' => 'getEzpublish_View_BlockCacheResponseListenerService',
            'ezpublish.view.builder_parameter_collector.request_attributes' => 'getEzpublish_View_BuilderParameterCollector_RequestAttributesService',
            'ezpublish.view.cache_response_listener' => 'getEzpublish_View_CacheResponseListenerService',
            'ezpublish.view.configurator' => 'getEzpublish_View_ConfiguratorService',
            'ezpublish.view.custom_location_controller_checker' => 'getEzpublish_View_CustomLocationControllerCheckerService',
            'ezpublish.view.renderer_listener' => 'getEzpublish_View_RendererListenerService',
            'ezpublish.view.template_renderer' => 'getEzpublish_View_TemplateRendererService',
            'ezpublish.view.view_parameters.injector.block.valid_content_info_items' => 'getEzpublish_View_ViewParameters_Injector_Block_ValidContentInfoItemsService',
            'ezpublish.view.view_parameters.injector.block.valid_items' => 'getEzpublish_View_ViewParameters_Injector_Block_ValidItemsService',
            'ezpublish.view.view_parameters.injector.custom_parameters' => 'getEzpublish_View_ViewParameters_Injector_CustomParametersService',
            'ezpublish.view.view_parameters.injector.dispatcher' => 'getEzpublish_View_ViewParameters_Injector_DispatcherService',
            'ezpublish.view.view_parameters.injector.embed_object_parameters' => 'getEzpublish_View_ViewParameters_Injector_EmbedObjectParametersService',
            'ezpublish.view.view_parameters.injector.no_layout' => 'getEzpublish_View_ViewParameters_Injector_NoLayoutService',
            'ezpublish.view.view_parameters.injector.value_objects_ids' => 'getEzpublish_View_ViewParameters_Injector_ValueObjectsIdsService',
            'ezpublish.view.view_parameters.injector.viewbase_layout' => 'getEzpublish_View_ViewParameters_Injector_ViewbaseLayoutService',
            'ezpublish.view_builder.block' => 'getEzpublish_ViewBuilder_BlockService',
            'ezpublish.view_builder.content' => 'getEzpublish_ViewBuilder_ContentService',
            'ezpublish.view_builder.registry' => 'getEzpublish_ViewBuilder_RegistryService',
            'ezpublish.view_controller_listener' => 'getEzpublish_ViewControllerListenerService',
            'ezpublish.view_manager' => 'getEzpublish_ViewManagerService',
            'ezpublish.view_provider.registry' => 'getEzpublish_ViewProvider_RegistryService',
            'ezpublish_debug.data_collector' => 'getEzpublishDebug_DataCollectorService',
            'ezpublish_debug.persistence_collector' => 'getEzpublishDebug_PersistenceCollectorService',
            'ezpublish_rest.controller.base' => 'getEzpublishRest_Controller_BaseService',
            'ezpublish_rest.controller.binary_content' => 'getEzpublishRest_Controller_BinaryContentService',
            'ezpublish_rest.controller.content' => 'getEzpublishRest_Controller_ContentService',
            'ezpublish_rest.controller.content_type' => 'getEzpublishRest_Controller_ContentTypeService',
            'ezpublish_rest.controller.location' => 'getEzpublishRest_Controller_LocationService',
            'ezpublish_rest.controller.object_state' => 'getEzpublishRest_Controller_ObjectStateService',
            'ezpublish_rest.controller.options' => 'getEzpublishRest_Controller_OptionsService',
            'ezpublish_rest.controller.role' => 'getEzpublishRest_Controller_RoleService',
            'ezpublish_rest.controller.root' => 'getEzpublishRest_Controller_RootService',
            'ezpublish_rest.controller.section' => 'getEzpublishRest_Controller_SectionService',
            'ezpublish_rest.controller.services' => 'getEzpublishRest_Controller_ServicesService',
            'ezpublish_rest.controller.trash' => 'getEzpublishRest_Controller_TrashService',
            'ezpublish_rest.controller.url_alias' => 'getEzpublishRest_Controller_UrlAliasService',
            'ezpublish_rest.controller.url_wildcard' => 'getEzpublishRest_Controller_UrlWildcardService',
            'ezpublish_rest.controller.user' => 'getEzpublishRest_Controller_UserService',
            'ezpublish_rest.controller.views' => 'getEzpublishRest_Controller_ViewsService',
            'ezpublish_rest.cors_option_provider' => 'getEzpublishRest_CorsOptionProviderService',
            'ezpublish_rest.csrf_listener' => 'getEzpublishRest_CsrfListenerService',
            'ezpublish_rest.factory' => 'getEzpublishRest_FactoryService',
            'ezpublish_rest.field_type_parser' => 'getEzpublishRest_FieldTypeParserService',
            'ezpublish_rest.field_type_processor.ezbinaryfile' => 'getEzpublishRest_FieldTypeProcessor_EzbinaryfileService',
            'ezpublish_rest.field_type_processor.ezdate' => 'getEzpublishRest_FieldTypeProcessor_EzdateService',
            'ezpublish_rest.field_type_processor.ezdatetime' => 'getEzpublishRest_FieldTypeProcessor_EzdatetimeService',
            'ezpublish_rest.field_type_processor.ezfloat' => 'getEzpublishRest_FieldTypeProcessor_EzfloatService',
            'ezpublish_rest.field_type_processor.ezimage' => 'getEzpublishRest_FieldTypeProcessor_EzimageService',
            'ezpublish_rest.field_type_processor.ezmedia' => 'getEzpublishRest_FieldTypeProcessor_EzmediaService',
            'ezpublish_rest.field_type_processor.ezobjectrelation' => 'getEzpublishRest_FieldTypeProcessor_EzobjectrelationService',
            'ezpublish_rest.field_type_processor.ezobjectrelationlist' => 'getEzpublishRest_FieldTypeProcessor_EzobjectrelationlistService',
            'ezpublish_rest.field_type_processor.ezpage' => 'getEzpublishRest_FieldTypeProcessor_EzpageService',
            'ezpublish_rest.field_type_processor.ezrichtext' => 'getEzpublishRest_FieldTypeProcessor_EzrichtextService',
            'ezpublish_rest.field_type_processor.eztime' => 'getEzpublishRest_FieldTypeProcessor_EztimeService',
            'ezpublish_rest.field_type_processor_registry' => 'getEzpublishRest_FieldTypeProcessorRegistryService',
            'ezpublish_rest.field_type_serializer' => 'getEzpublishRest_FieldTypeSerializerService',
            'ezpublish_rest.input.dispatcher' => 'getEzpublishRest_Input_DispatcherService',
            'ezpublish_rest.input.handler.json' => 'getEzpublishRest_Input_Handler_JsonService',
            'ezpublish_rest.input.handler.xml' => 'getEzpublishRest_Input_Handler_XmlService',
            'ezpublish_rest.input.parser.content' => 'getEzpublishRest_Input_Parser_ContentService',
            'ezpublish_rest.input.parser.contentcreate' => 'getEzpublishRest_Input_Parser_ContentcreateService',
            'ezpublish_rest.input.parser.contentinfo' => 'getEzpublishRest_Input_Parser_ContentinfoService',
            'ezpublish_rest.input.parser.contentlist' => 'getEzpublishRest_Input_Parser_ContentlistService',
            'ezpublish_rest.input.parser.contentobjectstates' => 'getEzpublishRest_Input_Parser_ContentobjectstatesService',
            'ezpublish_rest.input.parser.contenttype' => 'getEzpublishRest_Input_Parser_ContenttypeService',
            'ezpublish_rest.input.parser.contenttypecreate' => 'getEzpublishRest_Input_Parser_ContenttypecreateService',
            'ezpublish_rest.input.parser.contenttypegroup' => 'getEzpublishRest_Input_Parser_ContenttypegroupService',
            'ezpublish_rest.input.parser.contenttypegroupinput' => 'getEzpublishRest_Input_Parser_ContenttypegroupinputService',
            'ezpublish_rest.input.parser.contenttypegrouplist' => 'getEzpublishRest_Input_Parser_ContenttypegrouplistService',
            'ezpublish_rest.input.parser.contenttypegroupreflist' => 'getEzpublishRest_Input_Parser_ContenttypegroupreflistService',
            'ezpublish_rest.input.parser.contenttypelist' => 'getEzpublishRest_Input_Parser_ContenttypelistService',
            'ezpublish_rest.input.parser.contenttypeupdate' => 'getEzpublishRest_Input_Parser_ContenttypeupdateService',
            'ezpublish_rest.input.parser.contentupdate' => 'getEzpublishRest_Input_Parser_ContentupdateService',
            'ezpublish_rest.input.parser.errormessage' => 'getEzpublishRest_Input_Parser_ErrormessageService',
            'ezpublish_rest.input.parser.fielddefinition' => 'getEzpublishRest_Input_Parser_FielddefinitionService',
            'ezpublish_rest.input.parser.fielddefinitioncreate' => 'getEzpublishRest_Input_Parser_FielddefinitioncreateService',
            'ezpublish_rest.input.parser.fielddefinitionlist' => 'getEzpublishRest_Input_Parser_FielddefinitionlistService',
            'ezpublish_rest.input.parser.fielddefinitionupdate' => 'getEzpublishRest_Input_Parser_FielddefinitionupdateService',
            'ezpublish_rest.input.parser.internal.cgriterion.field' => 'getEzpublishRest_Input_Parser_Internal_Cgriterion_FieldService',
            'ezpublish_rest.input.parser.internal.criterion.ancestor' => 'getEzpublishRest_Input_Parser_Internal_Criterion_AncestorService',
            'ezpublish_rest.input.parser.internal.criterion.contentid' => 'getEzpublishRest_Input_Parser_Internal_Criterion_ContentidService',
            'ezpublish_rest.input.parser.internal.criterion.contentquery' => 'getEzpublishRest_Input_Parser_Internal_Criterion_ContentqueryService',
            'ezpublish_rest.input.parser.internal.criterion.contentremoteid' => 'getEzpublishRest_Input_Parser_Internal_Criterion_ContentremoteidService',
            'ezpublish_rest.input.parser.internal.criterion.contenttypegroupid' => 'getEzpublishRest_Input_Parser_Internal_Criterion_ContenttypegroupidService',
            'ezpublish_rest.input.parser.internal.criterion.contenttypeid' => 'getEzpublishRest_Input_Parser_Internal_Criterion_ContenttypeidService',
            'ezpublish_rest.input.parser.internal.criterion.contenttypeidentifier' => 'getEzpublishRest_Input_Parser_Internal_Criterion_ContenttypeidentifierService',
            'ezpublish_rest.input.parser.internal.criterion.datemetadata' => 'getEzpublishRest_Input_Parser_Internal_Criterion_DatemetadataService',
            'ezpublish_rest.input.parser.internal.criterion.fulltext' => 'getEzpublishRest_Input_Parser_Internal_Criterion_FulltextService',
            'ezpublish_rest.input.parser.internal.criterion.languagecode' => 'getEzpublishRest_Input_Parser_Internal_Criterion_LanguagecodeService',
            'ezpublish_rest.input.parser.internal.criterion.locationid' => 'getEzpublishRest_Input_Parser_Internal_Criterion_LocationidService',
            'ezpublish_rest.input.parser.internal.criterion.locationquery' => 'getEzpublishRest_Input_Parser_Internal_Criterion_LocationqueryService',
            'ezpublish_rest.input.parser.internal.criterion.locationremoteid' => 'getEzpublishRest_Input_Parser_Internal_Criterion_LocationremoteidService',
            'ezpublish_rest.input.parser.internal.criterion.logicaland' => 'getEzpublishRest_Input_Parser_Internal_Criterion_LogicalandService',
            'ezpublish_rest.input.parser.internal.criterion.logicalnot' => 'getEzpublishRest_Input_Parser_Internal_Criterion_LogicalnotService',
            'ezpublish_rest.input.parser.internal.criterion.logicaloperator' => 'getEzpublishRest_Input_Parser_Internal_Criterion_LogicaloperatorService',
            'ezpublish_rest.input.parser.internal.criterion.logicalor' => 'getEzpublishRest_Input_Parser_Internal_Criterion_LogicalorService',
            'ezpublish_rest.input.parser.internal.criterion.morelikethis' => 'getEzpublishRest_Input_Parser_Internal_Criterion_MorelikethisService',
            'ezpublish_rest.input.parser.internal.criterion.objectstateid' => 'getEzpublishRest_Input_Parser_Internal_Criterion_ObjectstateidService',
            'ezpublish_rest.input.parser.internal.criterion.operator' => 'getEzpublishRest_Input_Parser_Internal_Criterion_OperatorService',
            'ezpublish_rest.input.parser.internal.criterion.parentlocationid' => 'getEzpublishRest_Input_Parser_Internal_Criterion_ParentlocationidService',
            'ezpublish_rest.input.parser.internal.criterion.parentlocationremoteid' => 'getEzpublishRest_Input_Parser_Internal_Criterion_ParentlocationremoteidService',
            'ezpublish_rest.input.parser.internal.criterion.sectionid' => 'getEzpublishRest_Input_Parser_Internal_Criterion_SectionidService',
            'ezpublish_rest.input.parser.internal.criterion.sectionidentifier' => 'getEzpublishRest_Input_Parser_Internal_Criterion_SectionidentifierService',
            'ezpublish_rest.input.parser.internal.criterion.subtree' => 'getEzpublishRest_Input_Parser_Internal_Criterion_SubtreeService',
            'ezpublish_rest.input.parser.internal.criterion.usermetadata' => 'getEzpublishRest_Input_Parser_Internal_Criterion_UsermetadataService',
            'ezpublish_rest.input.parser.internal.criterion.visibility' => 'getEzpublishRest_Input_Parser_Internal_Criterion_VisibilityService',
            'ezpublish_rest.input.parser.limitation' => 'getEzpublishRest_Input_Parser_LimitationService',
            'ezpublish_rest.input.parser.location' => 'getEzpublishRest_Input_Parser_LocationService',
            'ezpublish_rest.input.parser.locationcreate' => 'getEzpublishRest_Input_Parser_LocationcreateService',
            'ezpublish_rest.input.parser.locationupdate' => 'getEzpublishRest_Input_Parser_LocationupdateService',
            'ezpublish_rest.input.parser.objectstate' => 'getEzpublishRest_Input_Parser_ObjectstateService',
            'ezpublish_rest.input.parser.objectstatecreate' => 'getEzpublishRest_Input_Parser_ObjectstatecreateService',
            'ezpublish_rest.input.parser.objectstategroup' => 'getEzpublishRest_Input_Parser_ObjectstategroupService',
            'ezpublish_rest.input.parser.objectstategroupcreate' => 'getEzpublishRest_Input_Parser_ObjectstategroupcreateService',
            'ezpublish_rest.input.parser.objectstategrouplist' => 'getEzpublishRest_Input_Parser_ObjectstategrouplistService',
            'ezpublish_rest.input.parser.objectstategroupupdate' => 'getEzpublishRest_Input_Parser_ObjectstategroupupdateService',
            'ezpublish_rest.input.parser.objectstatelist' => 'getEzpublishRest_Input_Parser_ObjectstatelistService',
            'ezpublish_rest.input.parser.objectstateupdate' => 'getEzpublishRest_Input_Parser_ObjectstateupdateService',
            'ezpublish_rest.input.parser.policy' => 'getEzpublishRest_Input_Parser_PolicyService',
            'ezpublish_rest.input.parser.policycreate' => 'getEzpublishRest_Input_Parser_PolicycreateService',
            'ezpublish_rest.input.parser.policylist' => 'getEzpublishRest_Input_Parser_PolicylistService',
            'ezpublish_rest.input.parser.policyupdate' => 'getEzpublishRest_Input_Parser_PolicyupdateService',
            'ezpublish_rest.input.parser.relation' => 'getEzpublishRest_Input_Parser_RelationService',
            'ezpublish_rest.input.parser.relationcreate' => 'getEzpublishRest_Input_Parser_RelationcreateService',
            'ezpublish_rest.input.parser.relationlist' => 'getEzpublishRest_Input_Parser_RelationlistService',
            'ezpublish_rest.input.parser.role' => 'getEzpublishRest_Input_Parser_RoleService',
            'ezpublish_rest.input.parser.roleassigninput' => 'getEzpublishRest_Input_Parser_RoleassigninputService',
            'ezpublish_rest.input.parser.roleassignment' => 'getEzpublishRest_Input_Parser_RoleassignmentService',
            'ezpublish_rest.input.parser.roleassignmentlist' => 'getEzpublishRest_Input_Parser_RoleassignmentlistService',
            'ezpublish_rest.input.parser.roleinput' => 'getEzpublishRest_Input_Parser_RoleinputService',
            'ezpublish_rest.input.parser.rolelist' => 'getEzpublishRest_Input_Parser_RolelistService',
            'ezpublish_rest.input.parser.searchhit' => 'getEzpublishRest_Input_Parser_SearchhitService',
            'ezpublish_rest.input.parser.section' => 'getEzpublishRest_Input_Parser_SectionService',
            'ezpublish_rest.input.parser.sectioninput' => 'getEzpublishRest_Input_Parser_SectioninputService',
            'ezpublish_rest.input.parser.sectionlist' => 'getEzpublishRest_Input_Parser_SectionlistService',
            'ezpublish_rest.input.parser.session' => 'getEzpublishRest_Input_Parser_SessionService',
            'ezpublish_rest.input.parser.sessioninput' => 'getEzpublishRest_Input_Parser_SessioninputService',
            'ezpublish_rest.input.parser.urlaliascreate' => 'getEzpublishRest_Input_Parser_UrlaliascreateService',
            'ezpublish_rest.input.parser.urlwildcardcreate' => 'getEzpublishRest_Input_Parser_UrlwildcardcreateService',
            'ezpublish_rest.input.parser.usercreate' => 'getEzpublishRest_Input_Parser_UsercreateService',
            'ezpublish_rest.input.parser.usergroupcreate' => 'getEzpublishRest_Input_Parser_UsergroupcreateService',
            'ezpublish_rest.input.parser.usergroupupdate' => 'getEzpublishRest_Input_Parser_UsergroupupdateService',
            'ezpublish_rest.input.parser.userlist' => 'getEzpublishRest_Input_Parser_UserlistService',
            'ezpublish_rest.input.parser.userreflist' => 'getEzpublishRest_Input_Parser_UserreflistService',
            'ezpublish_rest.input.parser.userupdate' => 'getEzpublishRest_Input_Parser_UserupdateService',
            'ezpublish_rest.input.parser.version' => 'getEzpublishRest_Input_Parser_VersionService',
            'ezpublish_rest.input.parser.versioninfo' => 'getEzpublishRest_Input_Parser_VersioninfoService',
            'ezpublish_rest.input.parser.versionupdate' => 'getEzpublishRest_Input_Parser_VersionupdateService',
            'ezpublish_rest.input.parser.view' => 'getEzpublishRest_Input_Parser_ViewService',
            'ezpublish_rest.input.parser.viewinput' => 'getEzpublishRest_Input_Parser_ViewinputService',
            'ezpublish_rest.input.parser.viewinputonedotone' => 'getEzpublishRest_Input_Parser_ViewinputonedotoneService',
            'ezpublish_rest.input.parser.viewresult' => 'getEzpublishRest_Input_Parser_ViewresultService',
            'ezpublish_rest.input.parsing_dispatcher' => 'getEzpublishRest_Input_ParsingDispatcherService',
            'ezpublish_rest.output.generator.json' => 'getEzpublishRest_Output_Generator_JsonService',
            'ezpublish_rest.output.generator.json.field_type_hash_generator' => 'getEzpublishRest_Output_Generator_Json_FieldTypeHashGeneratorService',
            'ezpublish_rest.output.generator.xml' => 'getEzpublishRest_Output_Generator_XmlService',
            'ezpublish_rest.output.generator.xml.field_type_hash_generator' => 'getEzpublishRest_Output_Generator_Xml_FieldTypeHashGeneratorService',
            'ezpublish_rest.output.value_object_visitor.badrequestexception' => 'getEzpublishRest_Output_ValueObjectVisitor_BadrequestexceptionService',
            'ezpublish_rest.output.value_object_visitor.badstateexception' => 'getEzpublishRest_Output_ValueObjectVisitor_BadstateexceptionService',
            'ezpublish_rest.output.value_object_visitor.base' => 'getEzpublishRest_Output_ValueObjectVisitor_BaseService',
            'ezpublish_rest.output.value_object_visitor.cached_value' => 'getEzpublishRest_Output_ValueObjectVisitor_CachedValueService',
            'ezpublish_rest.output.value_object_visitor.conflict' => 'getEzpublishRest_Output_ValueObjectVisitor_ConflictService',
            'ezpublish_rest.output.value_object_visitor.contentlist' => 'getEzpublishRest_Output_ValueObjectVisitor_ContentlistService',
            'ezpublish_rest.output.value_object_visitor.contentobjectstates' => 'getEzpublishRest_Output_ValueObjectVisitor_ContentobjectstatesService',
            'ezpublish_rest.output.value_object_visitor.contenttypecreatestruct' => 'getEzpublishRest_Output_ValueObjectVisitor_ContenttypecreatestructService',
            'ezpublish_rest.output.value_object_visitor.contenttypegroup' => 'getEzpublishRest_Output_ValueObjectVisitor_ContenttypegroupService',
            'ezpublish_rest.output.value_object_visitor.contenttypegroupcreatestruct' => 'getEzpublishRest_Output_ValueObjectVisitor_ContenttypegroupcreatestructService',
            'ezpublish_rest.output.value_object_visitor.contenttypegrouplist' => 'getEzpublishRest_Output_ValueObjectVisitor_ContenttypegrouplistService',
            'ezpublish_rest.output.value_object_visitor.contenttypegroupreflist' => 'getEzpublishRest_Output_ValueObjectVisitor_ContenttypegroupreflistService',
            'ezpublish_rest.output.value_object_visitor.contenttypegroupupdatestruct' => 'getEzpublishRest_Output_ValueObjectVisitor_ContenttypegroupupdatestructService',
            'ezpublish_rest.output.value_object_visitor.contenttypeinfolist' => 'getEzpublishRest_Output_ValueObjectVisitor_ContenttypeinfolistService',
            'ezpublish_rest.output.value_object_visitor.contenttypelist' => 'getEzpublishRest_Output_ValueObjectVisitor_ContenttypelistService',
            'ezpublish_rest.output.value_object_visitor.countrylist' => 'getEzpublishRest_Output_ValueObjectVisitor_CountrylistService',
            'ezpublish_rest.output.value_object_visitor.createdcontent' => 'getEzpublishRest_Output_ValueObjectVisitor_CreatedcontentService',
            'ezpublish_rest.output.value_object_visitor.createdcontenttype' => 'getEzpublishRest_Output_ValueObjectVisitor_CreatedcontenttypeService',
            'ezpublish_rest.output.value_object_visitor.createdcontenttypegroup' => 'getEzpublishRest_Output_ValueObjectVisitor_CreatedcontenttypegroupService',
            'ezpublish_rest.output.value_object_visitor.createdfielddefinition' => 'getEzpublishRest_Output_ValueObjectVisitor_CreatedfielddefinitionService',
            'ezpublish_rest.output.value_object_visitor.createdlocation' => 'getEzpublishRest_Output_ValueObjectVisitor_CreatedlocationService',
            'ezpublish_rest.output.value_object_visitor.createdobjectstate' => 'getEzpublishRest_Output_ValueObjectVisitor_CreatedobjectstateService',
            'ezpublish_rest.output.value_object_visitor.createdobjectstategroup' => 'getEzpublishRest_Output_ValueObjectVisitor_CreatedobjectstategroupService',
            'ezpublish_rest.output.value_object_visitor.createdpolicy' => 'getEzpublishRest_Output_ValueObjectVisitor_CreatedpolicyService',
            'ezpublish_rest.output.value_object_visitor.createdrelation' => 'getEzpublishRest_Output_ValueObjectVisitor_CreatedrelationService',
            'ezpublish_rest.output.value_object_visitor.createdrole' => 'getEzpublishRest_Output_ValueObjectVisitor_CreatedroleService',
            'ezpublish_rest.output.value_object_visitor.createdsection' => 'getEzpublishRest_Output_ValueObjectVisitor_CreatedsectionService',
            'ezpublish_rest.output.value_object_visitor.createdurlalias' => 'getEzpublishRest_Output_ValueObjectVisitor_CreatedurlaliasService',
            'ezpublish_rest.output.value_object_visitor.createdurlwildcard' => 'getEzpublishRest_Output_ValueObjectVisitor_CreatedurlwildcardService',
            'ezpublish_rest.output.value_object_visitor.createduser' => 'getEzpublishRest_Output_ValueObjectVisitor_CreateduserService',
            'ezpublish_rest.output.value_object_visitor.createdusergroup' => 'getEzpublishRest_Output_ValueObjectVisitor_CreatedusergroupService',
            'ezpublish_rest.output.value_object_visitor.createdversion' => 'getEzpublishRest_Output_ValueObjectVisitor_CreatedversionService',
            'ezpublish_rest.output.value_object_visitor.dispatcher' => 'getEzpublishRest_Output_ValueObjectVisitor_DispatcherService',
            'ezpublish_rest.output.value_object_visitor.exception' => 'getEzpublishRest_Output_ValueObjectVisitor_ExceptionService',
            'ezpublish_rest.output.value_object_visitor.exception.invalidargumentexception' => 'getEzpublishRest_Output_ValueObjectVisitor_Exception_InvalidargumentexceptionService',
            'ezpublish_rest.output.value_object_visitor.fielddefinitioncreatestruct' => 'getEzpublishRest_Output_ValueObjectVisitor_FielddefinitioncreatestructService',
            'ezpublish_rest.output.value_object_visitor.fielddefinitionlist' => 'getEzpublishRest_Output_ValueObjectVisitor_FielddefinitionlistService',
            'ezpublish_rest.output.value_object_visitor.forbiddenexception' => 'getEzpublishRest_Output_ValueObjectVisitor_ForbiddenexceptionService',
            'ezpublish_rest.output.value_object_visitor.imagevariation' => 'getEzpublishRest_Output_ValueObjectVisitor_ImagevariationService',
            'ezpublish_rest.output.value_object_visitor.invalidargumentexception' => 'getEzpublishRest_Output_ValueObjectVisitor_InvalidargumentexceptionService',
            'ezpublish_rest.output.value_object_visitor.limitation' => 'getEzpublishRest_Output_ValueObjectVisitor_LimitationService',
            'ezpublish_rest.output.value_object_visitor.location' => 'getEzpublishRest_Output_ValueObjectVisitor_LocationService',
            'ezpublish_rest.output.value_object_visitor.locationcreatestruct' => 'getEzpublishRest_Output_ValueObjectVisitor_LocationcreatestructService',
            'ezpublish_rest.output.value_object_visitor.locationlist' => 'getEzpublishRest_Output_ValueObjectVisitor_LocationlistService',
            'ezpublish_rest.output.value_object_visitor.locationupdatestruct' => 'getEzpublishRest_Output_ValueObjectVisitor_LocationupdatestructService',
            'ezpublish_rest.output.value_object_visitor.nocontent' => 'getEzpublishRest_Output_ValueObjectVisitor_NocontentService',
            'ezpublish_rest.output.value_object_visitor.notfoundexception' => 'getEzpublishRest_Output_ValueObjectVisitor_NotfoundexceptionService',
            'ezpublish_rest.output.value_object_visitor.notimplementedexception' => 'getEzpublishRest_Output_ValueObjectVisitor_NotimplementedexceptionService',
            'ezpublish_rest.output.value_object_visitor.objectstatecreatestruct' => 'getEzpublishRest_Output_ValueObjectVisitor_ObjectstatecreatestructService',
            'ezpublish_rest.output.value_object_visitor.objectstategroup' => 'getEzpublishRest_Output_ValueObjectVisitor_ObjectstategroupService',
            'ezpublish_rest.output.value_object_visitor.objectstategroupcreatestruct' => 'getEzpublishRest_Output_ValueObjectVisitor_ObjectstategroupcreatestructService',
            'ezpublish_rest.output.value_object_visitor.objectstategrouplist' => 'getEzpublishRest_Output_ValueObjectVisitor_ObjectstategrouplistService',
            'ezpublish_rest.output.value_object_visitor.objectstategroupupdatastruct' => 'getEzpublishRest_Output_ValueObjectVisitor_ObjectstategroupupdatastructService',
            'ezpublish_rest.output.value_object_visitor.objectstatelist' => 'getEzpublishRest_Output_ValueObjectVisitor_ObjectstatelistService',
            'ezpublish_rest.output.value_object_visitor.objectstateupdatestruct' => 'getEzpublishRest_Output_ValueObjectVisitor_ObjectstateupdatestructService',
            'ezpublish_rest.output.value_object_visitor.ok' => 'getEzpublishRest_Output_ValueObjectVisitor_OkService',
            'ezpublish_rest.output.value_object_visitor.options' => 'getEzpublishRest_Output_ValueObjectVisitor_OptionsService',
            'ezpublish_rest.output.value_object_visitor.permanentredirect' => 'getEzpublishRest_Output_ValueObjectVisitor_PermanentredirectService',
            'ezpublish_rest.output.value_object_visitor.policy' => 'getEzpublishRest_Output_ValueObjectVisitor_PolicyService',
            'ezpublish_rest.output.value_object_visitor.policycreatestruct' => 'getEzpublishRest_Output_ValueObjectVisitor_PolicycreatestructService',
            'ezpublish_rest.output.value_object_visitor.policylist' => 'getEzpublishRest_Output_ValueObjectVisitor_PolicylistService',
            'ezpublish_rest.output.value_object_visitor.policyupdatestruct' => 'getEzpublishRest_Output_ValueObjectVisitor_PolicyupdatestructService',
            'ezpublish_rest.output.value_object_visitor.relationlist' => 'getEzpublishRest_Output_ValueObjectVisitor_RelationlistService',
            'ezpublish_rest.output.value_object_visitor.resourcecreated' => 'getEzpublishRest_Output_ValueObjectVisitor_ResourcecreatedService',
            'ezpublish_rest.output.value_object_visitor.restcontent' => 'getEzpublishRest_Output_ValueObjectVisitor_RestcontentService',
            'ezpublish_rest.output.value_object_visitor.restcontentcreatestruct' => 'getEzpublishRest_Output_ValueObjectVisitor_RestcontentcreatestructService',
            'ezpublish_rest.output.value_object_visitor.restcontenttype' => 'getEzpublishRest_Output_ValueObjectVisitor_RestcontenttypeService',
            'ezpublish_rest.output.value_object_visitor.restexecutedview' => 'getEzpublishRest_Output_ValueObjectVisitor_RestexecutedviewService',
            'ezpublish_rest.output.value_object_visitor.restfielddefinition' => 'getEzpublishRest_Output_ValueObjectVisitor_RestfielddefinitionService',
            'ezpublish_rest.output.value_object_visitor.restlocation' => 'getEzpublishRest_Output_ValueObjectVisitor_RestlocationService',
            'ezpublish_rest.output.value_object_visitor.restobjectstate' => 'getEzpublishRest_Output_ValueObjectVisitor_RestobjectstateService',
            'ezpublish_rest.output.value_object_visitor.restrelation' => 'getEzpublishRest_Output_ValueObjectVisitor_RestrelationService',
            'ezpublish_rest.output.value_object_visitor.resttrashitem' => 'getEzpublishRest_Output_ValueObjectVisitor_ResttrashitemService',
            'ezpublish_rest.output.value_object_visitor.restuser' => 'getEzpublishRest_Output_ValueObjectVisitor_RestuserService',
            'ezpublish_rest.output.value_object_visitor.restusergroup' => 'getEzpublishRest_Output_ValueObjectVisitor_RestusergroupService',
            'ezpublish_rest.output.value_object_visitor.restusergrouproleassignment' => 'getEzpublishRest_Output_ValueObjectVisitor_RestusergrouproleassignmentService',
            'ezpublish_rest.output.value_object_visitor.restuserroleassignment' => 'getEzpublishRest_Output_ValueObjectVisitor_RestuserroleassignmentService',
            'ezpublish_rest.output.value_object_visitor.role' => 'getEzpublishRest_Output_ValueObjectVisitor_RoleService',
            'ezpublish_rest.output.value_object_visitor.roleassignment' => 'getEzpublishRest_Output_ValueObjectVisitor_RoleassignmentService',
            'ezpublish_rest.output.value_object_visitor.roleassignmentlist' => 'getEzpublishRest_Output_ValueObjectVisitor_RoleassignmentlistService',
            'ezpublish_rest.output.value_object_visitor.rolecreatestruct' => 'getEzpublishRest_Output_ValueObjectVisitor_RolecreatestructService',
            'ezpublish_rest.output.value_object_visitor.rolelist' => 'getEzpublishRest_Output_ValueObjectVisitor_RolelistService',
            'ezpublish_rest.output.value_object_visitor.roleupdatestruct' => 'getEzpublishRest_Output_ValueObjectVisitor_RoleupdatestructService',
            'ezpublish_rest.output.value_object_visitor.root' => 'getEzpublishRest_Output_ValueObjectVisitor_RootService',
            'ezpublish_rest.output.value_object_visitor.section' => 'getEzpublishRest_Output_ValueObjectVisitor_SectionService',
            'ezpublish_rest.output.value_object_visitor.sectioncreatestruct' => 'getEzpublishRest_Output_ValueObjectVisitor_SectioncreatestructService',
            'ezpublish_rest.output.value_object_visitor.sectionlist' => 'getEzpublishRest_Output_ValueObjectVisitor_SectionlistService',
            'ezpublish_rest.output.value_object_visitor.sectionupdatestruct' => 'getEzpublishRest_Output_ValueObjectVisitor_SectionupdatestructService',
            'ezpublish_rest.output.value_object_visitor.seeother' => 'getEzpublishRest_Output_ValueObjectVisitor_SeeotherService',
            'ezpublish_rest.output.value_object_visitor.sessioninput' => 'getEzpublishRest_Output_ValueObjectVisitor_SessioninputService',
            'ezpublish_rest.output.value_object_visitor.temporaryredirect' => 'getEzpublishRest_Output_ValueObjectVisitor_TemporaryredirectService',
            'ezpublish_rest.output.value_object_visitor.trash' => 'getEzpublishRest_Output_ValueObjectVisitor_TrashService',
            'ezpublish_rest.output.value_object_visitor.unauthorizedexception' => 'getEzpublishRest_Output_ValueObjectVisitor_UnauthorizedexceptionService',
            'ezpublish_rest.output.value_object_visitor.urlalias' => 'getEzpublishRest_Output_ValueObjectVisitor_UrlaliasService',
            'ezpublish_rest.output.value_object_visitor.urlaliaslist' => 'getEzpublishRest_Output_ValueObjectVisitor_UrlaliaslistService',
            'ezpublish_rest.output.value_object_visitor.urlaliasreflist' => 'getEzpublishRest_Output_ValueObjectVisitor_UrlaliasreflistService',
            'ezpublish_rest.output.value_object_visitor.urlwildcard' => 'getEzpublishRest_Output_ValueObjectVisitor_UrlwildcardService',
            'ezpublish_rest.output.value_object_visitor.urlwildcardlist' => 'getEzpublishRest_Output_ValueObjectVisitor_UrlwildcardlistService',
            'ezpublish_rest.output.value_object_visitor.usergrouplist' => 'getEzpublishRest_Output_ValueObjectVisitor_UsergrouplistService',
            'ezpublish_rest.output.value_object_visitor.usergroupreflist' => 'getEzpublishRest_Output_ValueObjectVisitor_UsergroupreflistService',
            'ezpublish_rest.output.value_object_visitor.userlist' => 'getEzpublishRest_Output_ValueObjectVisitor_UserlistService',
            'ezpublish_rest.output.value_object_visitor.userreflist' => 'getEzpublishRest_Output_ValueObjectVisitor_UserreflistService',
            'ezpublish_rest.output.value_object_visitor.usersession' => 'getEzpublishRest_Output_ValueObjectVisitor_UsersessionService',
            'ezpublish_rest.output.value_object_visitor.usersessiondeleted' => 'getEzpublishRest_Output_ValueObjectVisitor_UsersessiondeletedService',
            'ezpublish_rest.output.value_object_visitor.version' => 'getEzpublishRest_Output_ValueObjectVisitor_VersionService',
            'ezpublish_rest.output.value_object_visitor.versioninfo' => 'getEzpublishRest_Output_ValueObjectVisitor_VersioninfoService',
            'ezpublish_rest.output.value_object_visitor.versionlist' => 'getEzpublishRest_Output_ValueObjectVisitor_VersionlistService',
            'ezpublish_rest.output.value_object_visitor.versionupdate' => 'getEzpublishRest_Output_ValueObjectVisitor_VersionupdateService',
            'ezpublish_rest.output.value_object_visitor.viewinput' => 'getEzpublishRest_Output_ValueObjectVisitor_ViewinputService',
            'ezpublish_rest.output.visitor.dispatcher' => 'getEzpublishRest_Output_Visitor_DispatcherService',
            'ezpublish_rest.output.visitor.json' => 'getEzpublishRest_Output_Visitor_JsonService',
            'ezpublish_rest.output.visitor.xml' => 'getEzpublishRest_Output_Visitor_XmlService',
            'ezpublish_rest.parser_tools' => 'getEzpublishRest_ParserToolsService',
            'ezpublish_rest.request_listener' => 'getEzpublishRest_RequestListenerService',
            'ezpublish_rest.request_parser' => 'getEzpublishRest_RequestParserService',
            'ezpublish_rest.response_listener' => 'getEzpublishRest_ResponseListenerService',
            'ezpublish_rest.routing.options_loader' => 'getEzpublishRest_Routing_OptionsLoaderService',
            'ezpublish_rest.routing.options_loader.mapper' => 'getEzpublishRest_Routing_OptionsLoader_MapperService',
            'ezpublish_rest.routing.options_loader.route_collection_mapper' => 'getEzpublishRest_Routing_OptionsLoader_RouteCollectionMapperService',
            'ezpublish_rest.security.authentication.listener.session.ezpublish_front' => 'getEzpublishRest_Security_Authentication_Listener_Session_EzpublishFrontService',
            'ezpublish_rest.security.authentication.logout_handler' => 'getEzpublishRest_Security_Authentication_LogoutHandlerService',
            'ezpublish_rest.templated_router' => 'getEzpublishRest_TemplatedRouterService',
            'ezrepoforms.action_dispatcher.content_type' => 'getEzrepoforms_ActionDispatcher_ContentTypeService',
            'ezrepoforms.action_dispatcher.content_type.group' => 'getEzrepoforms_ActionDispatcher_ContentType_GroupService',
            'ezrepoforms.action_dispatcher.language' => 'getEzrepoforms_ActionDispatcher_LanguageService',
            'ezrepoforms.action_dispatcher.policy' => 'getEzrepoforms_ActionDispatcher_PolicyService',
            'ezrepoforms.action_dispatcher.role' => 'getEzrepoforms_ActionDispatcher_RoleService',
            'ezrepoforms.action_dispatcher.section' => 'getEzrepoforms_ActionDispatcher_SectionService',
            'ezrepoforms.content_type.update.form_type' => 'getEzrepoforms_ContentType_Update_FormTypeService',
            'ezrepoforms.field_definition.form_type' => 'getEzrepoforms_FieldDefinition_FormTypeService',
            'ezrepoforms.field_type.form_mapper.ezbinaryfile' => 'getEzrepoforms_FieldType_FormMapper_EzbinaryfileService',
            'ezrepoforms.field_type.form_mapper.ezcountry' => 'getEzrepoforms_FieldType_FormMapper_EzcountryService',
            'ezrepoforms.field_type.form_mapper.ezdate' => 'getEzrepoforms_FieldType_FormMapper_EzdateService',
            'ezrepoforms.field_type.form_mapper.ezdatetime' => 'getEzrepoforms_FieldType_FormMapper_EzdatetimeService',
            'ezrepoforms.field_type.form_mapper.ezfloat' => 'getEzrepoforms_FieldType_FormMapper_EzfloatService',
            'ezrepoforms.field_type.form_mapper.ezimage' => 'getEzrepoforms_FieldType_FormMapper_EzimageService',
            'ezrepoforms.field_type.form_mapper.ezinteger' => 'getEzrepoforms_FieldType_FormMapper_EzintegerService',
            'ezrepoforms.field_type.form_mapper.ezisbn' => 'getEzrepoforms_FieldType_FormMapper_EzisbnService',
            'ezrepoforms.field_type.form_mapper.ezmedia' => 'getEzrepoforms_FieldType_FormMapper_EzmediaService',
            'ezrepoforms.field_type.form_mapper.ezobjectrelation' => 'getEzrepoforms_FieldType_FormMapper_EzobjectrelationService',
            'ezrepoforms.field_type.form_mapper.ezobjectrelationlist' => 'getEzrepoforms_FieldType_FormMapper_EzobjectrelationlistService',
            'ezrepoforms.field_type.form_mapper.ezpage' => 'getEzrepoforms_FieldType_FormMapper_EzpageService',
            'ezrepoforms.field_type.form_mapper.ezrichtext' => 'getEzrepoforms_FieldType_FormMapper_EzrichtextService',
            'ezrepoforms.field_type.form_mapper.ezselection' => 'getEzrepoforms_FieldType_FormMapper_EzselectionService',
            'ezrepoforms.field_type.form_mapper.ezstring' => 'getEzrepoforms_FieldType_FormMapper_EzstringService',
            'ezrepoforms.field_type.form_mapper.eztext' => 'getEzrepoforms_FieldType_FormMapper_EztextService',
            'ezrepoforms.field_type.form_mapper.eztime' => 'getEzrepoforms_FieldType_FormMapper_EztimeService',
            'ezrepoforms.field_type_form_mapper.registry' => 'getEzrepoforms_FieldTypeFormMapper_RegistryService',
            'ezrepoforms.form_processor.content_type' => 'getEzrepoforms_FormProcessor_ContentTypeService',
            'ezrepoforms.form_processor.content_type_group' => 'getEzrepoforms_FormProcessor_ContentTypeGroupService',
            'ezrepoforms.form_processor.language' => 'getEzrepoforms_FormProcessor_LanguageService',
            'ezrepoforms.form_processor.policy' => 'getEzrepoforms_FormProcessor_PolicyService',
            'ezrepoforms.form_processor.role' => 'getEzrepoforms_FormProcessor_RoleService',
            'ezrepoforms.form_processor.section' => 'getEzrepoforms_FormProcessor_SectionService',
            'ezrepoforms.limitation.form_mapper.contenttype' => 'getEzrepoforms_Limitation_FormMapper_ContenttypeService',
            'ezrepoforms.limitation.form_mapper.group' => 'getEzrepoforms_Limitation_FormMapper_GroupService',
            'ezrepoforms.limitation.form_mapper.language' => 'getEzrepoforms_Limitation_FormMapper_LanguageService',
            'ezrepoforms.limitation.form_mapper.newobjectstate' => 'getEzrepoforms_Limitation_FormMapper_NewobjectstateService',
            'ezrepoforms.limitation.form_mapper.newsection' => 'getEzrepoforms_Limitation_FormMapper_NewsectionService',
            'ezrepoforms.limitation.form_mapper.null' => 'getEzrepoforms_Limitation_FormMapper_NullService',
            'ezrepoforms.limitation.form_mapper.objectstate' => 'getEzrepoforms_Limitation_FormMapper_ObjectstateService',
            'ezrepoforms.limitation.form_mapper.owner' => 'getEzrepoforms_Limitation_FormMapper_OwnerService',
            'ezrepoforms.limitation.form_mapper.parentcontenttype' => 'getEzrepoforms_Limitation_FormMapper_ParentcontenttypeService',
            'ezrepoforms.limitation.form_mapper.parentdepth' => 'getEzrepoforms_Limitation_FormMapper_ParentdepthService',
            'ezrepoforms.limitation.form_mapper.parentgroup' => 'getEzrepoforms_Limitation_FormMapper_ParentgroupService',
            'ezrepoforms.limitation.form_mapper.parentowner' => 'getEzrepoforms_Limitation_FormMapper_ParentownerService',
            'ezrepoforms.limitation.form_mapper.section' => 'getEzrepoforms_Limitation_FormMapper_SectionService',
            'ezrepoforms.limitation.form_mapper.siteaccess' => 'getEzrepoforms_Limitation_FormMapper_SiteaccessService',
            'ezrepoforms.limitation_form_mapper.registry' => 'getEzrepoforms_LimitationFormMapper_RegistryService',
            'ezrepoforms.policy.edit.form' => 'getEzrepoforms_Policy_Edit_FormService',
            'ezrepoforms.policy.limitation.form' => 'getEzrepoforms_Policy_Limitation_FormService',
            'ezrepoforms.twig.field_edit_rendering_extension' => 'getEzrepoforms_Twig_FieldEditRenderingExtensionService',
            'ezrepoforms.validator.default_field_value' => 'getEzrepoforms_Validator_DefaultFieldValueService',
            'ezrepoforms.validator.field_settings' => 'getEzrepoforms_Validator_FieldSettingsService',
            'ezrepoforms.validator.unique_content_type_identifier' => 'getEzrepoforms_Validator_UniqueContentTypeIdentifierService',
            'ezrepoforms.validator.unique_language_code' => 'getEzrepoforms_Validator_UniqueLanguageCodeService',
            'ezrepoforms.validator.unique_role_identifier' => 'getEzrepoforms_Validator_UniqueRoleIdentifierService',
            'ezrepoforms.validator.unique_section_identifier' => 'getEzrepoforms_Validator_UniqueSectionIdentifierService',
            'ezrepoforms.validator.validator_configuration' => 'getEzrepoforms_Validator_ValidatorConfigurationService',
            'ezsystems.platformui.application_config.aggregator' => 'getEzsystems_Platformui_ApplicationConfig_AggregatorService',
            'ezsystems.platformui.application_config.provider.anonymous_user_id' => 'getEzsystems_Platformui_ApplicationConfig_Provider_AnonymousUserIdService',
            'ezsystems.platformui.application_config.provider.countries_info' => 'getEzsystems_Platformui_ApplicationConfig_Provider_CountriesInfoService',
            'ezsystems.platformui.application_config.provider.languages' => 'getEzsystems_Platformui_ApplicationConfig_Provider_LanguagesService',
            'ezsystems.platformui.application_config.provider.root_info' => 'getEzsystems_Platformui_ApplicationConfig_Provider_RootInfoService',
            'ezsystems.platformui.application_config.provider.session_info' => 'getEzsystems_Platformui_ApplicationConfig_Provider_SessionInfoService',
            'ezsystems.platformui.controller' => 'getEzsystems_Platformui_ControllerService',
            'ezsystems.platformui.controller.content_type' => 'getEzsystems_Platformui_Controller_ContentTypeService',
            'ezsystems.platformui.controller.dashboard' => 'getEzsystems_Platformui_Controller_DashboardService',
            'ezsystems.platformui.controller.exception' => 'getEzsystems_Platformui_Controller_ExceptionService',
            'ezsystems.platformui.controller.language' => 'getEzsystems_Platformui_Controller_LanguageService',
            'ezsystems.platformui.controller.role' => 'getEzsystems_Platformui_Controller_RoleService',
            'ezsystems.platformui.controller.section' => 'getEzsystems_Platformui_Controller_SectionService',
            'ezsystems.platformui.controller.systeminfo' => 'getEzsystems_Platformui_Controller_SysteminfoService',
            'ezsystems.platformui.controller.template' => 'getEzsystems_Platformui_Controller_TemplateService',
            'ezsystems.platformui.exception_listener' => 'getEzsystems_Platformui_ExceptionListenerService',
            'ezsystems.platformui.form_processor.content_type' => 'getEzsystems_Platformui_FormProcessor_ContentTypeService',
            'ezsystems.platformui.form_processor.content_type_group' => 'getEzsystems_Platformui_FormProcessor_ContentTypeGroupService',
            'ezsystems.platformui.form_processor.language' => 'getEzsystems_Platformui_FormProcessor_LanguageService',
            'ezsystems.platformui.form_processor.policy' => 'getEzsystems_Platformui_FormProcessor_PolicyService',
            'ezsystems.platformui.form_processor.role' => 'getEzsystems_Platformui_FormProcessor_RoleService',
            'ezsystems.platformui.form_processor.section' => 'getEzsystems_Platformui_FormProcessor_SectionService',
            'ezsystems.platformui.helper.systeminfo' => 'getEzsystems_Platformui_Helper_SysteminfoService',
            'ezsystems.platformui.loader.combo_loader' => 'getEzsystems_Platformui_Loader_ComboLoaderService',
            'ezsystems.platformui.notification_pool' => 'getEzsystems_Platformui_NotificationPoolService',
            'ezsystems.platformui.rest.user_field_type_processor' => 'getEzsystems_Platformui_Rest_UserFieldTypeProcessorService',
            'ezsystems.platformui.twig.yui_extension' => 'getEzsystems_Platformui_Twig_YuiExtensionService',
            'file_locator' => 'getFileLocatorService',
            'filesystem' => 'getFilesystemService',
            'form.csrf_provider' => 'getForm_CsrfProviderService',
            'form.factory' => 'getForm_FactoryService',
            'form.registry' => 'getForm_RegistryService',
            'form.resolved_type_factory' => 'getForm_ResolvedTypeFactoryService',
            'form.type.birthday' => 'getForm_Type_BirthdayService',
            'form.type.button' => 'getForm_Type_ButtonService',
            'form.type.checkbox' => 'getForm_Type_CheckboxService',
            'form.type.choice' => 'getForm_Type_ChoiceService',
            'form.type.collection' => 'getForm_Type_CollectionService',
            'form.type.country' => 'getForm_Type_CountryService',
            'form.type.currency' => 'getForm_Type_CurrencyService',
            'form.type.date' => 'getForm_Type_DateService',
            'form.type.datetime' => 'getForm_Type_DatetimeService',
            'form.type.email' => 'getForm_Type_EmailService',
            'form.type.file' => 'getForm_Type_FileService',
            'form.type.form' => 'getForm_Type_FormService',
            'form.type.hidden' => 'getForm_Type_HiddenService',
            'form.type.integer' => 'getForm_Type_IntegerService',
            'form.type.language' => 'getForm_Type_LanguageService',
            'form.type.locale' => 'getForm_Type_LocaleService',
            'form.type.money' => 'getForm_Type_MoneyService',
            'form.type.number' => 'getForm_Type_NumberService',
            'form.type.password' => 'getForm_Type_PasswordService',
            'form.type.percent' => 'getForm_Type_PercentService',
            'form.type.radio' => 'getForm_Type_RadioService',
            'form.type.repeated' => 'getForm_Type_RepeatedService',
            'form.type.reset' => 'getForm_Type_ResetService',
            'form.type.search' => 'getForm_Type_SearchService',
            'form.type.submit' => 'getForm_Type_SubmitService',
            'form.type.text' => 'getForm_Type_TextService',
            'form.type.textarea' => 'getForm_Type_TextareaService',
            'form.type.time' => 'getForm_Type_TimeService',
            'form.type.timezone' => 'getForm_Type_TimezoneService',
            'form.type.url' => 'getForm_Type_UrlService',
            'form.type_extension.csrf' => 'getForm_TypeExtension_CsrfService',
            'form.type_extension.form.data_collector' => 'getForm_TypeExtension_Form_DataCollectorService',
            'form.type_extension.form.http_foundation' => 'getForm_TypeExtension_Form_HttpFoundationService',
            'form.type_extension.form.validator' => 'getForm_TypeExtension_Form_ValidatorService',
            'form.type_extension.repeated.validator' => 'getForm_TypeExtension_Repeated_ValidatorService',
            'form.type_extension.submit.validator' => 'getForm_TypeExtension_Submit_ValidatorService',
            'form.type_guesser.validator' => 'getForm_TypeGuesser_ValidatorService',
            'fos_http_cache.cache_manager' => 'getFosHttpCache_CacheManagerService',
            'fos_http_cache.command.invalidate_path' => 'getFosHttpCache_Command_InvalidatePathService',
            'fos_http_cache.command.invalidate_regex' => 'getFosHttpCache_Command_InvalidateRegexService',
            'fos_http_cache.command.invalidate_tag' => 'getFosHttpCache_Command_InvalidateTagService',
            'fos_http_cache.command.refresh_path' => 'getFosHttpCache_Command_RefreshPathService',
            'fos_http_cache.event_listener.cache_control' => 'getFosHttpCache_EventListener_CacheControlService',
            'fos_http_cache.event_listener.invalidation' => 'getFosHttpCache_EventListener_InvalidationService',
            'fos_http_cache.event_listener.log' => 'getFosHttpCache_EventListener_LogService',
            'fos_http_cache.event_listener.tag' => 'getFosHttpCache_EventListener_TagService',
            'fos_http_cache.event_listener.user_context' => 'getFosHttpCache_EventListener_UserContextService',
            'fos_http_cache.handler.tag_handler' => 'getFosHttpCache_Handler_TagHandlerService',
            'fos_http_cache.proxy_client.varnish' => 'getFosHttpCache_ProxyClient_VarnishService',
            'fos_http_cache.twig.tag_extension' => 'getFosHttpCache_Twig_TagExtensionService',
            'fos_http_cache.user_context.hash_generator' => 'getFosHttpCache_UserContext_HashGeneratorService',
            'fos_http_cache.user_context.logout_handler' => 'getFosHttpCache_UserContext_LogoutHandlerService',
            'fos_http_cache.user_context.request_matcher' => 'getFosHttpCache_UserContext_RequestMatcherService',
            'fragment.handler' => 'getFragment_HandlerService',
            'fragment.listener' => 'getFragment_ListenerService',
            'fragment.renderer.esi' => 'getFragment_Renderer_EsiService',
            'fragment.renderer.hinclude' => 'getFragment_Renderer_HincludeService',
            'fragment.renderer.inline' => 'getFragment_Renderer_InlineService',
            'fragment.renderer.ssi' => 'getFragment_Renderer_SsiService',
            'hautelook.router.template' => 'getHautelook_Router_TemplateService',
            'http_kernel' => 'getHttpKernelService',
            'kernel' => 'getKernelService',
            'liip_imagine' => 'getLiipImagineService',
            'liip_imagine.binary.loader.default' => 'getLiipImagine_Binary_Loader_DefaultService',
            'liip_imagine.binary.loader.prototype.filesystem' => 'getLiipImagine_Binary_Loader_Prototype_FilesystemService',
            'liip_imagine.binary.loader.prototype.stream' => 'getLiipImagine_Binary_Loader_Prototype_StreamService',
            'liip_imagine.binary.mime_type_guesser' => 'getLiipImagine_Binary_MimeTypeGuesserService',
            'liip_imagine.cache.manager' => 'getLiipImagine_Cache_ManagerService',
            'liip_imagine.cache.resolver.default' => 'getLiipImagine_Cache_Resolver_DefaultService',
            'liip_imagine.cache.resolver.no_cache_web_path' => 'getLiipImagine_Cache_Resolver_NoCacheWebPathService',
            'liip_imagine.cache.signer' => 'getLiipImagine_Cache_SignerService',
            'liip_imagine.controller' => 'getLiipImagine_ControllerService',
            'liip_imagine.data.manager' => 'getLiipImagine_Data_ManagerService',
            'liip_imagine.extension_guesser' => 'getLiipImagine_ExtensionGuesserService',
            'liip_imagine.filter.configuration' => 'getLiipImagine_Filter_ConfigurationService',
            'liip_imagine.filter.loader.auto_rotate' => 'getLiipImagine_Filter_Loader_AutoRotateService',
            'liip_imagine.filter.loader.background' => 'getLiipImagine_Filter_Loader_BackgroundService',
            'liip_imagine.filter.loader.crop' => 'getLiipImagine_Filter_Loader_CropService',
            'liip_imagine.filter.loader.interlace' => 'getLiipImagine_Filter_Loader_InterlaceService',
            'liip_imagine.filter.loader.paste' => 'getLiipImagine_Filter_Loader_PasteService',
            'liip_imagine.filter.loader.relative_resize' => 'getLiipImagine_Filter_Loader_RelativeResizeService',
            'liip_imagine.filter.loader.resize' => 'getLiipImagine_Filter_Loader_ResizeService',
            'liip_imagine.filter.loader.rotate' => 'getLiipImagine_Filter_Loader_RotateService',
            'liip_imagine.filter.loader.strip' => 'getLiipImagine_Filter_Loader_StripService',
            'liip_imagine.filter.loader.thumbnail' => 'getLiipImagine_Filter_Loader_ThumbnailService',
            'liip_imagine.filter.loader.upscale' => 'getLiipImagine_Filter_Loader_UpscaleService',
            'liip_imagine.filter.loader.watermark' => 'getLiipImagine_Filter_Loader_WatermarkService',
            'liip_imagine.filter.manager' => 'getLiipImagine_Filter_ManagerService',
            'liip_imagine.filter.post_processor.jpegoptim' => 'getLiipImagine_Filter_PostProcessor_JpegoptimService',
            'liip_imagine.form.type.image' => 'getLiipImagine_Form_Type_ImageService',
            'liip_imagine.mime_type_guesser' => 'getLiipImagine_MimeTypeGuesserService',
            'liip_imagine.templating.helper' => 'getLiipImagine_Templating_HelperService',
            'locale_listener' => 'getLocaleListenerService',
            'logger' => 'getLoggerService',
            'monolog.handler.console' => 'getMonolog_Handler_ConsoleService',
            'monolog.handler.console_very_verbose' => 'getMonolog_Handler_ConsoleVeryVerboseService',
            'monolog.handler.debug' => 'getMonolog_Handler_DebugService',
            'monolog.handler.main' => 'getMonolog_Handler_MainService',
            'monolog.logger.assetic' => 'getMonolog_Logger_AsseticService',
            'monolog.logger.doctrine' => 'getMonolog_Logger_DoctrineService',
            'monolog.logger.event' => 'getMonolog_Logger_EventService',
            'monolog.logger.php' => 'getMonolog_Logger_PhpService',
            'monolog.logger.profiler' => 'getMonolog_Logger_ProfilerService',
            'monolog.logger.request' => 'getMonolog_Logger_RequestService',
            'monolog.logger.router' => 'getMonolog_Logger_RouterService',
            'monolog.logger.security' => 'getMonolog_Logger_SecurityService',
            'monolog.logger.templating' => 'getMonolog_Logger_TemplatingService',
            'monolog.logger.translation' => 'getMonolog_Logger_TranslationService',
            'nelmio_cors.cors_listener' => 'getNelmioCors_CorsListenerService',
            'nelmio_cors.options_provider.config' => 'getNelmioCors_OptionsProvider_ConfigService',
            'oneup_flysystem.mount_manager' => 'getOneupFlysystem_MountManagerService',
            'pagerfanta.convert_not_valid_current_page_to_not_found_listener' => 'getPagerfanta_ConvertNotValidCurrentPageToNotFoundListenerService',
            'pagerfanta.convert_not_valid_max_per_page_to_not_found_listener' => 'getPagerfanta_ConvertNotValidMaxPerPageToNotFoundListenerService',
            'profiler' => 'getProfilerService',
            'profiler_listener' => 'getProfilerListenerService',
            'property_accessor' => 'getPropertyAccessorService',
            'request' => 'getRequestService',
            'request_stack' => 'getRequestStackService',
            'response_listener' => 'getResponseListenerService',
            'router.default' => 'getRouter_DefaultService',
            'router.request_context' => 'getRouter_RequestContextService',
            'router_listener' => 'getRouterListenerService',
            'routing.loader' => 'getRouting_LoaderService',
            'security.access.decision_manager' => 'getSecurity_Access_DecisionManagerService',
            'security.access_listener' => 'getSecurity_AccessListenerService',
            'security.access_map' => 'getSecurity_AccessMapService',
            'security.authentication.manager' => 'getSecurity_Authentication_ManagerService',
            'security.authentication.trust_resolver' => 'getSecurity_Authentication_TrustResolverService',
            'security.authentication_utils' => 'getSecurity_AuthenticationUtilsService',
            'security.authorization_checker' => 'getSecurity_AuthorizationCheckerService',
            'security.channel_listener' => 'getSecurity_ChannelListenerService',
            'security.context' => 'getSecurity_ContextService',
            'security.csrf.token_manager' => 'getSecurity_Csrf_TokenManagerService',
            'security.encoder_factory' => 'getSecurity_EncoderFactoryService',
            'security.firewall' => 'getSecurity_FirewallService',
            'security.firewall.map.context.default' => 'getSecurity_Firewall_Map_Context_DefaultService',
            'security.firewall.map.context.dev' => 'getSecurity_Firewall_Map_Context_DevService',
            'security.firewall.map.context.ezpublish_front' => 'getSecurity_Firewall_Map_Context_EzpublishFrontService',
            'security.http_utils' => 'getSecurity_HttpUtilsService',
            'security.logout.handler.session' => 'getSecurity_Logout_Handler_SessionService',
            'security.logout_url_generator' => 'getSecurity_LogoutUrlGeneratorService',
            'security.password_encoder' => 'getSecurity_PasswordEncoderService',
            'security.rememberme.response_listener' => 'getSecurity_Rememberme_ResponseListenerService',
            'security.role_hierarchy' => 'getSecurity_RoleHierarchyService',
            'security.secure_random' => 'getSecurity_SecureRandomService',
            'security.token_storage' => 'getSecurity_TokenStorageService',
            'security.validator.user_password' => 'getSecurity_Validator_UserPasswordService',
            'sensio_distribution.security_checker' => 'getSensioDistribution_SecurityCheckerService',
            'sensio_distribution.security_checker.command' => 'getSensioDistribution_SecurityChecker_CommandService',
            'sensio_distribution.webconfigurator' => 'getSensioDistribution_WebconfiguratorService',
            'sensio_framework_extra.cache.listener' => 'getSensioFrameworkExtra_Cache_ListenerService',
            'sensio_framework_extra.controller.listener' => 'getSensioFrameworkExtra_Controller_ListenerService',
            'sensio_framework_extra.converter.datetime' => 'getSensioFrameworkExtra_Converter_DatetimeService',
            'sensio_framework_extra.converter.doctrine.orm' => 'getSensioFrameworkExtra_Converter_Doctrine_OrmService',
            'sensio_framework_extra.converter.listener' => 'getSensioFrameworkExtra_Converter_ListenerService',
            'sensio_framework_extra.converter.manager' => 'getSensioFrameworkExtra_Converter_ManagerService',
            'sensio_framework_extra.security.listener' => 'getSensioFrameworkExtra_Security_ListenerService',
            'sensio_framework_extra.view.guesser' => 'getSensioFrameworkExtra_View_GuesserService',
            'sensio_framework_extra.view.listener' => 'getSensioFrameworkExtra_View_ListenerService',
            'service_container' => 'getServiceContainerService',
            'session' => 'getSessionService',
            'session.attribute_bag' => 'getSession_AttributeBagService',
            'session.save_listener' => 'getSession_SaveListenerService',
            'session.storage.filesystem' => 'getSession_Storage_FilesystemService',
            'session.storage.metadata_bag' => 'getSession_Storage_MetadataBagService',
            'session.storage.native' => 'getSession_Storage_NativeService',
            'session.storage.php_bridge' => 'getSession_Storage_PhpBridgeService',
            'session_listener' => 'getSessionListenerService',
            'stash.default_cache' => 'getStash_DefaultCacheService',
            'stash.driver.default_cache' => 'getStash_Driver_DefaultCacheService',
            'stash.tracker.default_cache' => 'getStash_Tracker_DefaultCacheService',
            'streamed_response_listener' => 'getStreamedResponseListenerService',
            'swiftmailer.email_sender.listener' => 'getSwiftmailer_EmailSender_ListenerService',
            'swiftmailer.mailer.default' => 'getSwiftmailer_Mailer_DefaultService',
            'swiftmailer.mailer.default.plugin.messagelogger' => 'getSwiftmailer_Mailer_Default_Plugin_MessageloggerService',
            'swiftmailer.mailer.default.spool' => 'getSwiftmailer_Mailer_Default_SpoolService',
            'swiftmailer.mailer.default.transport' => 'getSwiftmailer_Mailer_Default_TransportService',
            'swiftmailer.mailer.default.transport.eventdispatcher' => 'getSwiftmailer_Mailer_Default_Transport_EventdispatcherService',
            'swiftmailer.mailer.default.transport.real' => 'getSwiftmailer_Mailer_Default_Transport_RealService',
            'templating' => 'getTemplatingService',
            'templating.filename_parser' => 'getTemplating_FilenameParserService',
            'templating.helper.assets' => 'getTemplating_Helper_AssetsService',
            'templating.helper.logout_url' => 'getTemplating_Helper_LogoutUrlService',
            'templating.helper.router' => 'getTemplating_Helper_RouterService',
            'templating.helper.security' => 'getTemplating_Helper_SecurityService',
            'templating.loader' => 'getTemplating_LoaderService',
            'templating.locator' => 'getTemplating_LocatorService',
            'templating.name_parser' => 'getTemplating_NameParserService',
            'translation.dumper.csv' => 'getTranslation_Dumper_CsvService',
            'translation.dumper.ini' => 'getTranslation_Dumper_IniService',
            'translation.dumper.json' => 'getTranslation_Dumper_JsonService',
            'translation.dumper.mo' => 'getTranslation_Dumper_MoService',
            'translation.dumper.php' => 'getTranslation_Dumper_PhpService',
            'translation.dumper.po' => 'getTranslation_Dumper_PoService',
            'translation.dumper.qt' => 'getTranslation_Dumper_QtService',
            'translation.dumper.res' => 'getTranslation_Dumper_ResService',
            'translation.dumper.xliff' => 'getTranslation_Dumper_XliffService',
            'translation.dumper.yml' => 'getTranslation_Dumper_YmlService',
            'translation.extractor' => 'getTranslation_ExtractorService',
            'translation.extractor.php' => 'getTranslation_Extractor_PhpService',
            'translation.loader' => 'getTranslation_LoaderService',
            'translation.loader.csv' => 'getTranslation_Loader_CsvService',
            'translation.loader.dat' => 'getTranslation_Loader_DatService',
            'translation.loader.ini' => 'getTranslation_Loader_IniService',
            'translation.loader.json' => 'getTranslation_Loader_JsonService',
            'translation.loader.mo' => 'getTranslation_Loader_MoService',
            'translation.loader.php' => 'getTranslation_Loader_PhpService',
            'translation.loader.po' => 'getTranslation_Loader_PoService',
            'translation.loader.qt' => 'getTranslation_Loader_QtService',
            'translation.loader.res' => 'getTranslation_Loader_ResService',
            'translation.loader.xliff' => 'getTranslation_Loader_XliffService',
            'translation.loader.yml' => 'getTranslation_Loader_YmlService',
            'translation.writer' => 'getTranslation_WriterService',
            'translator' => 'getTranslatorService',
            'translator.default' => 'getTranslator_DefaultService',
            'translator_listener' => 'getTranslatorListenerService',
            'twig' => 'getTwigService',
            'twig.controller.exception' => 'getTwig_Controller_ExceptionService',
            'twig.controller.preview_error' => 'getTwig_Controller_PreviewErrorService',
            'twig.exception_listener' => 'getTwig_ExceptionListenerService',
            'twig.extension.intl' => 'getTwig_Extension_IntlService',
            'twig.loader' => 'getTwig_LoaderService',
            'twig.profile' => 'getTwig_ProfileService',
            'twig.translation.extractor' => 'getTwig_Translation_ExtractorService',
            'uri_signer' => 'getUriSignerService',
            'validator' => 'getValidatorService',
            'validator.builder' => 'getValidator_BuilderService',
            'validator.email' => 'getValidator_EmailService',
            'validator.expression' => 'getValidator_ExpressionService',
            'var_dumper.cli_dumper' => 'getVarDumper_CliDumperService',
            'var_dumper.cloner' => 'getVarDumper_ClonerService',
            'web_profiler.controller.exception' => 'getWebProfiler_Controller_ExceptionService',
            'web_profiler.controller.profiler' => 'getWebProfiler_Controller_ProfilerService',
            'web_profiler.controller.router' => 'getWebProfiler_Controller_RouterService',
            'web_profiler.debug_toolbar' => 'getWebProfiler_DebugToolbarService',
            'white_october_pagerfanta.view_factory' => 'getWhiteOctoberPagerfanta_ViewFactoryService',
        );
        $this->aliases = array(
            'console.command.ezsystems_platforminstallerbundle_command_installplatformcommand' => 'ezplatform.installer.install_command',
            'console.command.fos_httpcachebundle_command_invalidatepathcommand' => 'fos_http_cache.command.invalidate_path',
            'console.command.fos_httpcachebundle_command_invalidateregexcommand' => 'fos_http_cache.command.invalidate_regex',
            'console.command.fos_httpcachebundle_command_invalidatetagcommand' => 'fos_http_cache.command.invalidate_tag',
            'console.command.fos_httpcachebundle_command_refreshpathcommand' => 'fos_http_cache.command.refresh_path',
            'console.command.sensiolabs_security_command_securitycheckercommand' => 'sensio_distribution.security_checker.command',
            'database_connection' => 'doctrine.dbal.default_connection',
            'event_dispatcher' => 'debug.event_dispatcher',
            'ez_content' => 'ezpublish.controller.content.view',
            'ez_page' => 'ezpublish.controller.page.view',
            'ezpublish.api.persistence_handler' => 'ezpublish.spi.persistence.cache',
            'ezpublish.api.repository' => 'ezpublish.signalslot.repository',
            'ezpublish.api.storage_engine.legacy' => 'ezpublish.spi.persistence.legacy',
            'ezpublish.api.storage_engine.legacy.connection' => 'ezpublish.persistence.connection',
            'ezpublish.config.resolver' => 'ezpublish.config.resolver.chain',
            'ezpublish.connection' => 'ezpublish.api.storage_engine.legacy.dbhandler',
            'ezpublish.controller.content.preview' => 'ezpublish.controller.content.preview.core',
            'ezpublish.core.io.default_url_decorator' => 'ezpublish.core.io.prefix_url_decorator',
            'ezpublish.core.io.mimetypedetector' => 'ezpublish.core.io.mimetypedetector.fileinfo',
            'ezpublish.fieldtype.ezimage.variation_service' => 'ezpublish.image_alias.imagine.alias_generator',
            'ezpublish.http_cache.purge_client' => 'ezpublish.http_cache.purge_client.local',
            'ezpublish.http_cache.purger' => 'ezpublish.http_cache.purger.instant',
            'ezpublish.image_alias.imagine.filter.swirl' => 'ezpublish.image_alias.imagine.filter.reduce_noise',
            'ezpublish.image_alias.variation_path_generator' => 'ezpublish.image_alias.variation_path_generator.alias_directory',
            'ezpublish.image_alias.variation_purger' => 'ezpublish.image_alias.variation_purger.io',
            'ezpublish.persistence.legacy.content.gateway' => 'ezpublish.persistence.legacy.content.gateway.exception_conversion',
            'ezpublish.persistence.legacy.content_type.gateway' => 'ezpublish.persistence.legacy.content_type.gateway.exception_conversion',
            'ezpublish.persistence.legacy.content_type.update_handler' => 'ezpublish.persistence.legacy.content_type.update_handler.basic',
            'ezpublish.persistence.legacy.language.gateway' => 'ezpublish.persistence.legacy.language.gateway.exception_conversion',
            'ezpublish.persistence.legacy.location.gateway' => 'ezpublish.persistence.legacy.location.gateway.exception_conversion',
            'ezpublish.persistence.legacy.object_state.gateway' => 'ezpublish.persistence.legacy.object_state.gateway.exception_conversion',
            'ezpublish.persistence.legacy.role.gateway' => 'ezpublish.persistence.legacy.role.gateway.exception_conversion',
            'ezpublish.persistence.legacy.section.gateway' => 'ezpublish.persistence.legacy.section.gateway.exception_conversion',
            'ezpublish.persistence.legacy.url_alias.gateway' => 'ezpublish.persistence.legacy.url_alias.gateway.exception_conversion',
            'ezpublish.persistence.legacy.url_wildcard.gateway' => 'ezpublish.persistence.legacy.url_wildcard.gateway.exception_conversion',
            'ezpublish.persistence.legacy.user.gateway' => 'ezpublish.persistence.legacy.user.gateway.exception_conversion',
            'ezpublish.search.legacy.gateway.content' => 'ezpublish.search.legacy.gateway.content.exception_conversion',
            'ezpublish.search.legacy.gateway.criterion_field_value_handler.default' => 'ezpublish.search.legacy.gateway.criterion_field_value_handler.composite',
            'ezpublish.search.legacy.gateway.location' => 'ezpublish.search.legacy.gateway.location.exception_conversion',
            'ezpublish.search.solr.core_filter' => 'ezpublish.search.solr.core_filter.native',
            'ezpublish.search.solr.document_mapper' => 'ezpublish.search.solr.document_mapper.native',
            'ezpublish.search.solr.gateway' => 'ezpublish.search.solr.gateway.native',
            'ezpublish.search.solr.gateway.endpoint_resolver' => 'ezpublish.search.solr.gateway.endpoint_resolver.native',
            'ezpublish.search.solr.result_extractor' => 'ezpublish.search.solr.result_extractor.native',
            'ezpublish.spi.persistence.legacy.content_type.handler' => 'ezpublish.spi.persistence.legacy.content_type.handler.caching',
            'ezpublish.spi.persistence.legacy.language.handler' => 'ezpublish.spi.persistence.legacy.language.handler.caching',
            'ezpublish.templating.field_block_renderer' => 'ezpublish.templating.field_block_renderer.twig',
            'ezpublish.templating.global_helper' => 'ezpublish.templating.global_helper.core',
            'ezpublish_rest.session_authenticator' => 'ezpublish_rest.security.authentication.listener.session.ezpublish_front',
            'fos_http_cache.default_proxy_client' => 'fos_http_cache.proxy_client.varnish',
            'mailer' => 'swiftmailer.mailer.default',
            'router' => 'ezpublish.chain_router',
            'sensio.distribution.webconfigurator' => 'sensio_distribution.webconfigurator',
            'session.storage' => 'session.storage.native',
            'stash' => 'stash.default_cache',
            'swiftmailer.mailer' => 'swiftmailer.mailer.default',
            'swiftmailer.plugin.messagelogger' => 'swiftmailer.mailer.default.plugin.messagelogger',
            'swiftmailer.spool' => 'swiftmailer.mailer.default.spool',
            'swiftmailer.transport' => 'swiftmailer.mailer.default.transport',
            'swiftmailer.transport.real' => 'swiftmailer.mailer.default.transport.real',
        );
    }

    /**
     * {@inheritdoc}
     */
    public function compile()
    {
        throw new LogicException('You cannot compile a dumped frozen container.');
    }

    /**
     * Gets the 'annotation_reader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Annotations\FileCacheReader A Doctrine\Common\Annotations\FileCacheReader instance.
     */
    protected function getAnnotationReaderService()
    {
        return $this->services['annotation_reader'] = new \Doctrine\Common\Annotations\FileCacheReader(new \Doctrine\Common\Annotations\AnnotationReader(), (__DIR__.'/annotations'), true);
    }

    /**
     * Gets the 'assetic.asset_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Assetic\Factory\LazyAssetManager A Assetic\Factory\LazyAssetManager instance.
     */
    protected function getAssetic_AssetManagerService()
    {
        $a = $this->get('templating.loader');

        $this->services['assetic.asset_manager'] = $instance = new \Assetic\Factory\LazyAssetManager($this->get('assetic.asset_factory'), array('twig' => new \Assetic\Factory\Loader\CachedFormulaLoader(new \Assetic\Extension\Twig\TwigFormulaLoader($this->get('twig'), $this->get('monolog.logger.assetic', ContainerInterface::NULL_ON_INVALID_REFERENCE)), new \Assetic\Cache\ConfigCache((__DIR__.'/assetic/config')), true)));

        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'eZPlatformUIBundle', ($this->targetDirs[2].'/Resources/eZPlatformUIBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'eZPlatformUIBundle', '/app/vendor/ezsystems/platform-ui-bundle/Resources/views', '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, '', ($this->targetDirs[2].'/Resources/views'), '/\\.[^.]+\\.twig$/'), 'twig');

        return $instance;
    }

    /**
     * Gets the 'assetic.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\AsseticBundle\Controller\AsseticController A Symfony\Bundle\AsseticBundle\Controller\AsseticController instance.
     */
    protected function getAssetic_ControllerService()
    {
        return $this->services['assetic.controller'] = new \Symfony\Bundle\AsseticBundle\Controller\AsseticController($this->get('assetic.asset_manager'), new \Assetic\Cache\FilesystemCache((__DIR__.'/assetic/assets')), false, $this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'assetic.filter.cssrewrite' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Assetic\Filter\CssRewriteFilter A Assetic\Filter\CssRewriteFilter instance.
     */
    protected function getAssetic_Filter_CssrewriteService()
    {
        return $this->services['assetic.filter.cssrewrite'] = new \Assetic\Filter\CssRewriteFilter();
    }

    /**
     * Gets the 'assetic.filter_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\AsseticBundle\FilterManager A Symfony\Bundle\AsseticBundle\FilterManager instance.
     */
    protected function getAssetic_FilterManagerService()
    {
        return $this->services['assetic.filter_manager'] = new \Symfony\Bundle\AsseticBundle\FilterManager($this, array('cssrewrite' => 'assetic.filter.cssrewrite'));
    }

    /**
     * Gets the 'assetic.request_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\AsseticBundle\EventListener\RequestListener A Symfony\Bundle\AsseticBundle\EventListener\RequestListener instance.
     */
    protected function getAssetic_RequestListenerService()
    {
        return $this->services['assetic.request_listener'] = new \Symfony\Bundle\AsseticBundle\EventListener\RequestListener();
    }

    /**
     * Gets the 'assets.context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Asset\Context\RequestStackContext A Symfony\Component\Asset\Context\RequestStackContext instance.
     */
    protected function getAssets_ContextService()
    {
        return $this->services['assets.context'] = new \Symfony\Component\Asset\Context\RequestStackContext($this->get('request_stack'));
    }

    /**
     * Gets the 'assets.packages' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Asset\Packages A Symfony\Component\Asset\Packages instance.
     */
    protected function getAssets_PackagesService()
    {
        return $this->services['assets.packages'] = new \Symfony\Component\Asset\Packages(new \Symfony\Component\Asset\PathPackage('', new \Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy(), $this->get('assets.context')), array());
    }

    /**
     * Gets the 'cache_clearer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer A Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer instance.
     */
    protected function getCacheClearerService()
    {
        return $this->services['cache_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer(array(0 => $this->get('ezpublish.http_cache.purger.instant')));
    }

    /**
     * Gets the 'cache_warmer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate A Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate instance.
     */
    protected function getCacheWarmerService()
    {
        $a = $this->get('kernel');
        $b = $this->get('templating.filename_parser');

        $c = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TemplateFinder($a, $b, ($this->targetDirs[2].'/Resources'));

        return $this->services['cache_warmer'] = new \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate(array(0 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TemplatePathsCacheWarmer($c, $this->get('templating.locator')), 1 => new \Symfony\Bundle\AsseticBundle\CacheWarmer\AssetManagerCacheWarmer($this), 2 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TranslationsCacheWarmer($this->get('translator.default')), 3 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer($this->get('ezpublish.chain_router')), 4 => new \Symfony\Bundle\TwigBundle\CacheWarmer\TemplateCacheCacheWarmer($this, $c)));
    }

    /**
     * Gets the 'data_collector.dump' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\DataCollector\DumpDataCollector A Symfony\Component\HttpKernel\DataCollector\DumpDataCollector instance.
     */
    protected function getDataCollector_DumpService()
    {
        return $this->services['data_collector.dump'] = new \Symfony\Component\HttpKernel\DataCollector\DumpDataCollector($this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE), NULL, 'UTF-8', $this->get('request_stack'), NULL);
    }

    /**
     * Gets the 'data_collector.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\FormDataCollector A Symfony\Component\Form\Extension\DataCollector\FormDataCollector instance.
     */
    protected function getDataCollector_FormService()
    {
        return $this->services['data_collector.form'] = new \Symfony\Component\Form\Extension\DataCollector\FormDataCollector($this->get('data_collector.form.extractor'));
    }

    /**
     * Gets the 'data_collector.form.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\FormDataExtractor A Symfony\Component\Form\Extension\DataCollector\FormDataExtractor instance.
     */
    protected function getDataCollector_Form_ExtractorService()
    {
        return $this->services['data_collector.form.extractor'] = new \Symfony\Component\Form\Extension\DataCollector\FormDataExtractor();
    }

    /**
     * Gets the 'data_collector.request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\DataCollector\RequestDataCollector A Symfony\Component\HttpKernel\DataCollector\RequestDataCollector instance.
     */
    protected function getDataCollector_RequestService()
    {
        return $this->services['data_collector.request'] = new \Symfony\Component\HttpKernel\DataCollector\RequestDataCollector();
    }

    /**
     * Gets the 'data_collector.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector A Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector instance.
     */
    protected function getDataCollector_RouterService()
    {
        return $this->services['data_collector.router'] = new \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector();
    }

    /**
     * Gets the 'data_collector.stash' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Tedivm\StashBundle\Collector\CacheDataCollector A Tedivm\StashBundle\Collector\CacheDataCollector instance.
     */
    protected function getDataCollector_StashService()
    {
        $this->services['data_collector.stash'] = $instance = new \Tedivm\StashBundle\Collector\CacheDataCollector('default', array('default' => 'stash.default_cache'), array('default' => array('drivers' => array(0 => 'FileSystem'), 'inMemory' => true, 'registerDoctrineAdapter' => false, 'registerSessionHandler' => false, 'BlackHole' => array(), 'Ephemeral' => array(), 'FileSystem' => array('dirSplit' => 2, 'path' => (__DIR__.'/stash'), 'filePermissions' => 432, 'dirPermissions' => 504, 'memKeyLimit' => 200, 'keyHashFunction' => 'md5', 'encoder' => 'Native'), 'SQLite' => array('filePermissions' => 432, 'dirPermissions' => 504, 'busyTimeout' => 500, 'nesting' => 0, 'subhandler' => 'PDO', 'version' => NULL, 'path' => (__DIR__.'/stash')))));

        $instance->addTracker($this->get('stash.tracker.default_cache'));

        return $instance;
    }

    /**
     * Gets the 'data_collector.translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\DataCollector\TranslationDataCollector A Symfony\Component\Translation\DataCollector\TranslationDataCollector instance.
     */
    protected function getDataCollector_TranslationService()
    {
        return $this->services['data_collector.translation'] = new \Symfony\Component\Translation\DataCollector\TranslationDataCollector($this->get('translator'));
    }

    /**
     * Gets the 'debug.controller_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver A Symfony\Component\HttpKernel\Controller\TraceableControllerResolver instance.
     */
    protected function getDebug_ControllerResolverService()
    {
        return $this->services['debug.controller_resolver'] = new \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver($this->get('controller_resolver'), $this->get('debug.stopwatch'));
    }

    /**
     * Gets the 'debug.debug_handlers_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener A Symfony\Component\HttpKernel\EventListener\DebugHandlersListener instance.
     */
    protected function getDebug_DebugHandlersListenerService()
    {
        return $this->services['debug.debug_handlers_listener'] = new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, $this->get('monolog.logger.php', ContainerInterface::NULL_ON_INVALID_REFERENCE), NULL, NULL, true, NULL);
    }

    /**
     * Gets the 'debug.dump_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DumpListener A Symfony\Component\HttpKernel\EventListener\DumpListener instance.
     */
    protected function getDebug_DumpListenerService()
    {
        return $this->services['debug.dump_listener'] = new \Symfony\Component\HttpKernel\EventListener\DumpListener($this->get('var_dumper.cloner'), $this->get('data_collector.dump'));
    }

    /**
     * Gets the 'debug.event_dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher A Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher instance.
     */
    protected function getDebug_EventDispatcherService()
    {
        $this->services['debug.event_dispatcher'] = $instance = new \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher(new \Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher($this), $this->get('debug.stopwatch'), $this->get('monolog.logger.event', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->addListenerService('kernel.controller', array(0 => 'data_collector.router', 1 => 'onKernelController'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'assetic.request_listener', 1 => 'onKernelRequest'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'nelmio_cors.cors_listener', 1 => 'onKernelRequest'), 10000);
        $instance->addSubscriberService('response_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener');
        $instance->addSubscriberService('streamed_response_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener');
        $instance->addSubscriberService('locale_listener', 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\LocaleListener');
        $instance->addSubscriberService('translator_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\TranslatorListener');
        $instance->addSubscriberService('session_listener', 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\SessionListener');
        $instance->addSubscriberService('session.save_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener');
        $instance->addSubscriberService('esi_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\SurrogateListener');
        $instance->addSubscriberService('fragment.listener', 'Symfony\\Component\\HttpKernel\\EventListener\\FragmentListener');
        $instance->addSubscriberService('profiler_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener');
        $instance->addSubscriberService('data_collector.request', 'Symfony\\Component\\HttpKernel\\DataCollector\\RequestDataCollector');
        $instance->addSubscriberService('router_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener');
        $instance->addSubscriberService('debug.debug_handlers_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener');
        $instance->addSubscriberService('security.firewall', 'Symfony\\Component\\Security\\Http\\Firewall');
        $instance->addSubscriberService('security.rememberme.response_listener', 'Symfony\\Component\\Security\\Http\\RememberMe\\ResponseListener');
        $instance->addSubscriberService('twig.exception_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener');
        $instance->addSubscriberService('monolog.handler.console', 'Symfony\\Bridge\\Monolog\\Handler\\ConsoleHandler');
        $instance->addSubscriberService('monolog.handler.console_very_verbose', 'Symfony\\Bridge\\Monolog\\Handler\\ConsoleHandler');
        $instance->addSubscriberService('swiftmailer.email_sender.listener', 'Symfony\\Bundle\\SwiftmailerBundle\\EventListener\\EmailSenderListener');
        $instance->addSubscriberService('sensio_framework_extra.controller.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener');
        $instance->addSubscriberService('sensio_framework_extra.converter.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener');
        $instance->addSubscriberService('sensio_framework_extra.view.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener');
        $instance->addSubscriberService('sensio_framework_extra.cache.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener');
        $instance->addSubscriberService('sensio_framework_extra.security.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\SecurityListener');
        $instance->addSubscriberService('fos_http_cache.event_listener.cache_control', 'FOS\\HttpCacheBundle\\EventListener\\CacheControlSubscriber');
        $instance->addSubscriberService('fos_http_cache.event_listener.tag', 'FOS\\HttpCacheBundle\\EventListener\\TagSubscriber');
        $instance->addSubscriberService('fos_http_cache.event_listener.invalidation', 'FOS\\HttpCacheBundle\\EventListener\\InvalidationSubscriber');
        $instance->addSubscriberService('fos_http_cache.event_listener.user_context', 'FOS\\HttpCacheBundle\\EventListener\\UserContextSubscriber');
        $instance->addSubscriberService('ezpublish.console_event_listener', 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\ConsoleCommandListener');
        $instance->addSubscriberService('ezpublish.view_controller_listener', 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\ViewControllerListener');
        $instance->addSubscriberService('ezpublish.exception_listener', 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\ExceptionListener');
        $instance->addSubscriberService('ezpublish.security.login_listener', 'eZ\\Publish\\Core\\MVC\\Symfony\\Security\\EventListener\\SecurityListener');
        $instance->addSubscriberService('ezpublish.siteaccess_match_listener', 'eZ\\Publish\\Core\\MVC\\Symfony\\EventListener\\SiteAccessMatchListener');
        $instance->addSubscriberService('ezpublish.siteaccess_listener', 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\SiteAccessListener');
        $instance->addSubscriberService('ezpublish.siteaccess_listener.routing', 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\RoutingListener');
        $instance->addSubscriberService('ezpublish.request_redirect_listener', 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\RequestEventListener');
        $instance->addSubscriberService('ezpublish.request_index_listener', 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\IndexRequestListener');
        $instance->addSubscriberService('ezpublish.route_reference.listener.language_switch', 'eZ\\Publish\\Core\\MVC\\Symfony\\EventListener\\LanguageSwitchListener');
        $instance->addSubscriberService('ezpublish.original_request_listener', 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\OriginalRequestListener');
        $instance->addSubscriberService('ezpublish.route_reference.listener.content_download', 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\ContentDownloadRouteReferenceListener');
        $instance->addSubscriberService('ezpublish.view.builder_parameter_collector.request_attributes', 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\Builder\\ParametersFilter\\RequestAttributes');
        $instance->addSubscriberService('ezpublish.view.renderer_listener', 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\ViewRendererListener');
        $instance->addSubscriberService('ezpublish.view.view_parameters.injector.custom_parameters', 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\ParametersInjector\\CustomParameters');
        $instance->addSubscriberService('ezpublish.view.view_parameters.injector.embed_object_parameters', 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\ParametersInjector\\EmbedObjectParameters');
        $instance->addSubscriberService('ezpublish.view.view_parameters.injector.no_layout', 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\ParametersInjector\\NoLayout');
        $instance->addSubscriberService('ezpublish.view.view_parameters.injector.value_objects_ids', 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\ParametersInjector\\ValueObjectsIds');
        $instance->addSubscriberService('ezpublish.view.view_parameters.injector.viewbase_layout', 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\ParametersInjector\\ViewbaseLayout');
        $instance->addSubscriberService('ezpublish.view.view_parameters.injector.block.valid_items', 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\ParametersInjector\\Block\\ValidItems');
        $instance->addSubscriberService('ezpublish.view.view_parameters.injector.block.valid_content_info_items', 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\BlockValidContentInfoItemsListener');
        $instance->addSubscriberService('ezpublish.view.cache_response_listener', 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\CacheViewResponseListener');
        $instance->addSubscriberService('ezpublish.view.block_cache_response_listener', 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\BlockCacheResponseListener');
        $instance->addSubscriberService('ezpublish.session_set_dynamic_name_listener', 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\SessionSetDynamicNameListener');
        $instance->addSubscriberService('ezpublish.session_init_by_post_listener', 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\SessionInitByPostListener');
        $instance->addSubscriberService('ezpublish.config_scope_listener', 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\ConfigScopeListener');
        $instance->addSubscriberService('ezpublish.dynamic_settings_listener', 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\DynamicSettingsListener');
        $instance->addSubscriberService('ezpublish.core.io.stream_file_listener', 'eZ\\Bundle\\EzPublishIOBundle\\EventListener\\StreamFileListener');
        $instance->addSubscriberService('ezpublish_rest.request_listener', 'eZ\\Bundle\\EzPublishRestBundle\\EventListener\\RequestListener');
        $instance->addSubscriberService('ezpublish_rest.response_listener', 'eZ\\Bundle\\EzPublishRestBundle\\EventListener\\ResponseListener');
        $instance->addSubscriberService('ezpublish_rest.csrf_listener', 'eZ\\Bundle\\EzPublishRestBundle\\EventListener\\CsrfListener');
        $instance->addSubscriberService('ezsystems.platformui.notification_pool', 'EzSystems\\PlatformUIBundle\\Notification\\NotificationPool');
        $instance->addSubscriberService('ezsystems.platformui.form_processor.content_type', 'EzSystems\\PlatformUIBundle\\Form\\Processor\\ContentTypeFormProcessor');
        $instance->addSubscriberService('ezsystems.platformui.form_processor.content_type_group', 'EzSystems\\PlatformUIBundle\\Form\\Processor\\ContentTypeGroupFormProcessor');
        $instance->addSubscriberService('ezsystems.platformui.form_processor.role', 'EzSystems\\PlatformUIBundle\\Form\\Processor\\RoleFormProcessor');
        $instance->addSubscriberService('ezsystems.platformui.form_processor.policy', 'EzSystems\\PlatformUIBundle\\Form\\Processor\\PolicyFormProcessor');
        $instance->addSubscriberService('ezsystems.platformui.exception_listener', 'EzSystems\\PlatformUIBundle\\EventListener\\ExceptionListener');
        $instance->addSubscriberService('ezsystems.platformui.form_processor.section', 'EzSystems\\PlatformUIBundle\\Form\\Processor\\SectionFormProcessor');
        $instance->addSubscriberService('ezsystems.platformui.form_processor.language', 'EzSystems\\PlatformUIBundle\\Form\\Processor\\LanguageFormProcessor');
        $instance->addSubscriberService('pagerfanta.convert_not_valid_max_per_page_to_not_found_listener', 'WhiteOctober\\PagerfantaBundle\\EventListener\\ConvertNotValidMaxPerPageToNotFoundListener');
        $instance->addSubscriberService('pagerfanta.convert_not_valid_current_page_to_not_found_listener', 'WhiteOctober\\PagerfantaBundle\\EventListener\\ConvertNotValidCurrentPageToNotFoundListener');
        $instance->addSubscriberService('ezrepoforms.form_processor.language', 'EzSystems\\RepositoryForms\\Form\\Processor\\LanguageFormProcessor');
        $instance->addSubscriberService('ezrepoforms.form_processor.section', 'EzSystems\\RepositoryForms\\Form\\Processor\\SectionFormProcessor');
        $instance->addSubscriberService('ezrepoforms.form_processor.role', 'EzSystems\\RepositoryForms\\Form\\Processor\\RoleFormProcessor');
        $instance->addSubscriberService('ezrepoforms.form_processor.policy', 'EzSystems\\RepositoryForms\\Form\\Processor\\PolicyFormProcessor');
        $instance->addSubscriberService('ezrepoforms.form_processor.content_type', 'EzSystems\\RepositoryForms\\Form\\Processor\\ContentTypeFormProcessor');
        $instance->addSubscriberService('ezrepoforms.form_processor.content_type_group', 'EzSystems\\RepositoryForms\\Form\\Processor\\ContentTypeGroupFormProcessor');
        $instance->addSubscriberService('debug.dump_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\DumpListener');
        $instance->addSubscriberService('web_profiler.debug_toolbar', 'Symfony\\Bundle\\WebProfilerBundle\\EventListener\\WebDebugToolbarListener');

        return $instance;
    }

    /**
     * Gets the 'debug.stopwatch' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Stopwatch\Stopwatch A Symfony\Component\Stopwatch\Stopwatch instance.
     */
    protected function getDebug_StopwatchService()
    {
        return $this->services['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch();
    }

    /**
     * Gets the 'doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Registry A Doctrine\Bundle\DoctrineBundle\Registry instance.
     */
    protected function getDoctrineService()
    {
        return $this->services['doctrine'] = new \Doctrine\Bundle\DoctrineBundle\Registry($this, array('default' => 'doctrine.dbal.default_connection'), array(), 'default', '');
    }

    /**
     * Gets the 'doctrine.dbal.connection_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ConnectionFactory A Doctrine\Bundle\DoctrineBundle\ConnectionFactory instance.
     */
    protected function getDoctrine_Dbal_ConnectionFactoryService()
    {
        return $this->services['doctrine.dbal.connection_factory'] = new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory(array());
    }

    /**
     * Gets the 'doctrine.dbal.default_connection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\DBAL\Connection A Doctrine\DBAL\Connection instance.
     */
    protected function getDoctrine_Dbal_DefaultConnectionService()
    {
        $a = new \Doctrine\DBAL\Logging\LoggerChain();
        $a->addLogger(new \Symfony\Bridge\Doctrine\Logger\DbalLogger($this->get('monolog.logger.doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
        $a->addLogger($this->get('doctrine.dbal.logger.profiling.default'));

        $b = new \Doctrine\DBAL\Configuration();
        $b->setSQLLogger($a);

        return $this->services['doctrine.dbal.default_connection'] = $this->get('doctrine.dbal.connection_factory')->createConnection(array('driver' => 'pdo_mysql', 'host' => 'dockerezpublish_mysql_1.mysql.docker', 'port' => 3306, 'user' => 'ezuser', 'password' => 'ezpass', 'dbname' => 'ezplatform', 'charset' => 'UTF8', 'driverOptions' => array(), 'defaultTableOptions' => array()), $b, new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this), array());
    }

    /**
     * Gets the 'esi' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\HttpCache\Esi A Symfony\Component\HttpKernel\HttpCache\Esi instance.
     */
    protected function getEsiService()
    {
        return $this->services['esi'] = new \Symfony\Component\HttpKernel\HttpCache\Esi();
    }

    /**
     * Gets the 'esi_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SurrogateListener A Symfony\Component\HttpKernel\EventListener\SurrogateListener instance.
     */
    protected function getEsiListenerService()
    {
        return $this->services['esi_listener'] = new \Symfony\Component\HttpKernel\EventListener\SurrogateListener($this->get('esi', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'ez_search_engine_solr.connection.default.core_filter_id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\CoreFilter\NativeCoreFilter A EzSystems\EzPlatformSolrSearchEngine\CoreFilter\NativeCoreFilter instance.
     */
    protected function getEzSearchEngineSolr_Connection_Default_CoreFilterIdService()
    {
        return $this->services['ez_search_engine_solr.connection.default.core_filter_id'] = new \EzSystems\EzPlatformSolrSearchEngine\CoreFilter\NativeCoreFilter($this->get('ez_search_engine_solr.connection.default.endpoint_resolver_id'));
    }

    /**
     * Gets the 'ez_search_engine_solr.connection.default.endpoint_resolver_id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Gateway\EndpointResolver\NativeEndpointResolver A EzSystems\EzPlatformSolrSearchEngine\Gateway\EndpointResolver\NativeEndpointResolver instance.
     */
    protected function getEzSearchEngineSolr_Connection_Default_EndpointResolverIdService()
    {
        return $this->services['ez_search_engine_solr.connection.default.endpoint_resolver_id'] = new \EzSystems\EzPlatformSolrSearchEngine\Gateway\EndpointResolver\NativeEndpointResolver(array(0 => 'endpoint0'), array(), 'endpoint0', NULL);
    }

    /**
     * Gets the 'ez_search_engine_solr.connection.default.gateway_id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Gateway\Native A EzSystems\EzPlatformSolrSearchEngine\Gateway\Native instance.
     */
    protected function getEzSearchEngineSolr_Connection_Default_GatewayIdService()
    {
        return $this->services['ez_search_engine_solr.connection.default.gateway_id'] = new \EzSystems\EzPlatformSolrSearchEngine\Gateway\Native($this->get('ezpublish.search.solr.gateway.client.http.stream'), $this->get('ez_search_engine_solr.connection.default.endpoint_resolver_id'), $this->get('ezpublish.search.solr.gateway.endpoint_registry'), $this->get('ezpublish.search.solr.query_converter.content'), $this->get('ezpublish.search.solr.query_converter.location'), $this->get('ezpublish.search.solr.field_value_mapper.aggregate'), $this->get('ezpublish.search.common.field_name_generator'));
    }

    /**
     * Gets the 'ez_search_engine_solr.endpoints.endpoint0' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Gateway\Endpoint A EzSystems\EzPlatformSolrSearchEngine\Gateway\Endpoint instance.
     */
    protected function getEzSearchEngineSolr_Endpoints_Endpoint0Service()
    {
        return $this->services['ez_search_engine_solr.endpoints.endpoint0'] = new \EzSystems\EzPlatformSolrSearchEngine\Gateway\Endpoint(array('core' => 'collection1', 'scheme' => 'http', 'host' => 'localhost', 'port' => 8983, 'path' => '/solr', 'user' => NULL, 'pass' => NULL));
    }

    /**
     * Gets the 'ezplatform.installer.clean_installer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformInstallerBundle\Installer\CleanInstaller A EzSystems\PlatformInstallerBundle\Installer\CleanInstaller instance.
     */
    protected function getEzplatform_Installer_CleanInstallerService()
    {
        return $this->services['ezplatform.installer.clean_installer'] = new \EzSystems\PlatformInstallerBundle\Installer\CleanInstaller($this->get('doctrine.dbal.default_connection'));
    }

    /**
     * Gets the 'ezplatform.installer.install_command' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformInstallerBundle\Command\InstallPlatformCommand A EzSystems\PlatformInstallerBundle\Command\InstallPlatformCommand instance.
     */
    protected function getEzplatform_Installer_InstallCommandService()
    {
        return $this->services['ezplatform.installer.install_command'] = new \EzSystems\PlatformInstallerBundle\Command\InstallPlatformCommand($this->get('doctrine.dbal.default_connection'), array('clean' => $this->get('ezplatform.installer.clean_installer')), $this->get('cache_clearer'), $this->get('filesystem'), __DIR__, 'dev', 'legacy');
    }

    /**
     * Gets the 'ezpublish.api.inner_repository' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Repository\Repository A eZ\Publish\Core\Repository\Repository instance.
     */
    public function getEzpublish_Api_InnerRepositoryService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.api.inner_repository'] = new eZPublishCoreRepositoryRepository_0000000010d7753d00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Api_InnerRepositoryService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return $this->get('ezpublish.api.repository.factory')->buildRepository($this->get('ezpublish.spi.persistence.cache'), $this->get('ezpublish.spi.search'));
    }

    /**
     * Gets the 'ezpublish.api.repository.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\ApiLoader\RepositoryFactory A eZ\Bundle\EzPublishCoreBundle\ApiLoader\RepositoryFactory instance.
     */
    protected function getEzpublish_Api_Repository_FactoryService()
    {
        $this->services['ezpublish.api.repository.factory'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\ApiLoader\RepositoryFactory($this->get('ezpublish.config.resolver.chain'), $this->get('ezpublish.field_type_collection.factory'), 'eZ\\Publish\\Core\\Repository\\Repository', array('content' => array('read' => array('Class' => true, 'Section' => true, 'Owner' => true, 'Group' => true, 'Node' => true, 'Subtree' => true, 'State' => true), 'diff' => array('Class' => true, 'Section' => true, 'Owner' => true, 'Node' => true, 'Subtree' => true), 'view_embed' => array('Class' => true, 'Section' => true, 'Owner' => true, 'Node' => true, 'Subtree' => true), 'create' => array('Class' => true, 'Section' => true, 'ParentOwner' => true, 'ParentGroup' => true, 'ParentClass' => true, 'ParentDepth' => true, 'Node' => true, 'Subtree' => true, 'Language' => true), 'edit' => array('Class' => true, 'Section' => true, 'Owner' => true, 'Group' => true, 'Node' => true, 'Subtree' => true, 'Language' => true, 'State' => true), 'manage_locations' => array('Class' => true, 'Section' => true, 'Owner' => true, 'Subtree' => true), 'hide' => array('Class' => true, 'Section' => true, 'Owner' => true, 'Group' => true, 'Node' => true, 'Subtree' => true, 'Language' => true), 'reverserelatedlist' => array(), 'translate' => array('Class' => true, 'Section' => true, 'Owner' => true, 'Node' => true, 'Subtree' => true, 'Language' => true), 'remove' => array('Class' => true, 'Section' => true, 'Owner' => true, 'Node' => true, 'Subtree' => true, 'State' => true), 'versionread' => array('Class' => true, 'Section' => true, 'Owner' => true, 'Node' => true, 'Subtree' => true), 'versionremove' => array('Class' => true, 'Section' => true, 'Owner' => true, 'Node' => true, 'Subtree' => true), 'translations' => array(), 'urltranslator' => array(), 'pendinglist' => array(), 'restore' => array(), 'cleantrash' => array()), 'class' => array('update' => array(), 'create' => array(), 'delete' => array()), 'state' => array('assign' => array('Class' => true, 'Section' => true, 'Owner' => true, 'Group' => true, 'Node' => true, 'Subtree' => true, 'NewState' => true), 'administrate' => array()), 'role' => array('assign' => array(), 'update' => array(), 'create' => array(), 'delete' => array(), 'read' => array()), 'section' => array('assign' => array('Class' => true, 'Section' => true, 'Owner' => true, 'NewSection' => true), 'edit' => array(), 'view' => array()), 'setup' => array('administrate' => array(), 'install' => array(), 'setup' => array(), 'system_info' => array()), 'user' => array('login' => array('SiteAccess' => true), 'password' => array(), 'preferences' => array(), 'register' => array(), 'selfedit' => array(), 'activation' => array())));

        $instance->setContainer($this);
        $instance->registerLimitationType('Class', $this->get('ezpublish.api.role.limitation_type.content_type'));
        $instance->registerLimitationType('Language', $this->get('ezpublish.api.role.limitation_type.language'));
        $instance->registerLimitationType('Node', $this->get('ezpublish.api.role.limitation_type.location'));
        $instance->registerLimitationType('Owner', $this->get('ezpublish.api.role.limitation_type.owner'));
        $instance->registerLimitationType('ParentClass', $this->get('ezpublish.api.role.limitation_type.parent_content_type'));
        $instance->registerLimitationType('ParentDepth', $this->get('ezpublish.api.role.limitation_type.parent_depth'));
        $instance->registerLimitationType('ParentOwner', $this->get('ezpublish.api.role.limitation_type.parent_owner'));
        $instance->registerLimitationType('ParentGroup', $this->get('ezpublish.api.role.limitation_type.parent_group'));
        $instance->registerLimitationType('Section', $this->get('ezpublish.api.role.limitation_type.section'));
        $instance->registerLimitationType('NewSection', $this->get('ezpublish.api.role.limitation_type.new_section'));
        $instance->registerLimitationType('SiteAccess', $this->get('ezpublish.api.role.limitation_type.siteaccess'));
        $instance->registerLimitationType('State', $this->get('ezpublish.api.role.limitation_type.state'));
        $instance->registerLimitationType('NewState', $this->get('ezpublish.api.role.limitation_type.new_state'));
        $instance->registerLimitationType('Subtree', $this->get('ezpublish.api.role.limitation_type.subtree'));
        $instance->registerLimitationType('Group', $this->get('ezpublish.api.role.limitation_type.user_group'));
        $instance->registerLimitationType('Status', $this->get('ezpublish.api.role.limitation_type.status'));
        $instance->registerLimitationType('FunctionList', $this->get('ezpublish.api.role.limitation_type.function_list'));
        $instance->registerLimitationType('ContentSection', $this->get('ezpublish.api.role.limitation_type.ezcomments.content_section'));
        $instance->registerLimitationType('CommentCreator', $this->get('ezpublish.api.role.limitation_type.ezcomments.comment_creator'));
        $instance->registerLimitationType('AntiSpam', $this->get('ezpublish.api.role.limitation_type.ezcomments.anti_spam'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.api.repository.lazy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Closure A Closure instance.
     */
    protected function getEzpublish_Api_Repository_LazyService()
    {
        return $this->services['ezpublish.api.repository.lazy'] = $this->get('ezpublish.api.repository.lazy_factory')->buildRepository();
    }

    /**
     * Gets the 'ezpublish.api.repository.lazy_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\ApiLoader\LazyRepositoryFactory A eZ\Bundle\EzPublishCoreBundle\ApiLoader\LazyRepositoryFactory instance.
     */
    protected function getEzpublish_Api_Repository_LazyFactoryService()
    {
        return $this->services['ezpublish.api.repository.lazy_factory'] = new \eZ\Bundle\EzPublishCoreBundle\ApiLoader\LazyRepositoryFactory($this->get('ezpublish.signalslot.repository'));
    }

    /**
     * Gets the 'ezpublish.api.repository_configuration_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\ApiLoader\RepositoryConfigurationProvider A eZ\Bundle\EzPublishCoreBundle\ApiLoader\RepositoryConfigurationProvider instance.
     */
    protected function getEzpublish_Api_RepositoryConfigurationProviderService()
    {
        return $this->services['ezpublish.api.repository_configuration_provider'] = new \eZ\Bundle\EzPublishCoreBundle\ApiLoader\RepositoryConfigurationProvider($this->get('ezpublish.config.resolver.chain'), array('default' => array('storage' => array('engine' => 'legacy', 'connection' => NULL, 'config' => array()), 'search' => array('engine' => 'legacy', 'connection' => 'default', 'config' => array()))));
    }

    /**
     * Gets the 'ezpublish.api.role.limitation_type.content_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Limitation\ContentTypeLimitationType A eZ\Publish\Core\Limitation\ContentTypeLimitationType instance.
     */
    protected function getEzpublish_Api_Role_LimitationType_ContentTypeService()
    {
        return $this->services['ezpublish.api.role.limitation_type.content_type'] = new \eZ\Publish\Core\Limitation\ContentTypeLimitationType($this->get('ezpublish.spi.persistence.cache'));
    }

    /**
     * Gets the 'ezpublish.api.role.limitation_type.ezcomments.anti_spam' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Limitation\BlockingLimitationType A eZ\Publish\Core\Limitation\BlockingLimitationType instance.
     */
    protected function getEzpublish_Api_Role_LimitationType_Ezcomments_AntiSpamService()
    {
        return $this->services['ezpublish.api.role.limitation_type.ezcomments.anti_spam'] = new \eZ\Publish\Core\Limitation\BlockingLimitationType('AntiSpam');
    }

    /**
     * Gets the 'ezpublish.api.role.limitation_type.ezcomments.comment_creator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Limitation\BlockingLimitationType A eZ\Publish\Core\Limitation\BlockingLimitationType instance.
     */
    protected function getEzpublish_Api_Role_LimitationType_Ezcomments_CommentCreatorService()
    {
        return $this->services['ezpublish.api.role.limitation_type.ezcomments.comment_creator'] = new \eZ\Publish\Core\Limitation\BlockingLimitationType('CommentCreator');
    }

    /**
     * Gets the 'ezpublish.api.role.limitation_type.ezcomments.content_section' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Limitation\BlockingLimitationType A eZ\Publish\Core\Limitation\BlockingLimitationType instance.
     */
    protected function getEzpublish_Api_Role_LimitationType_Ezcomments_ContentSectionService()
    {
        return $this->services['ezpublish.api.role.limitation_type.ezcomments.content_section'] = new \eZ\Publish\Core\Limitation\BlockingLimitationType('ContentSection');
    }

    /**
     * Gets the 'ezpublish.api.role.limitation_type.function_list' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Limitation\BlockingLimitationType A eZ\Publish\Core\Limitation\BlockingLimitationType instance.
     */
    protected function getEzpublish_Api_Role_LimitationType_FunctionListService()
    {
        return $this->services['ezpublish.api.role.limitation_type.function_list'] = new \eZ\Publish\Core\Limitation\BlockingLimitationType('FunctionList');
    }

    /**
     * Gets the 'ezpublish.api.role.limitation_type.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Limitation\LanguageLimitationType A eZ\Publish\Core\Limitation\LanguageLimitationType instance.
     */
    protected function getEzpublish_Api_Role_LimitationType_LanguageService()
    {
        return $this->services['ezpublish.api.role.limitation_type.language'] = new \eZ\Publish\Core\Limitation\LanguageLimitationType($this->get('ezpublish.spi.persistence.cache'));
    }

    /**
     * Gets the 'ezpublish.api.role.limitation_type.location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Limitation\LocationLimitationType A eZ\Publish\Core\Limitation\LocationLimitationType instance.
     */
    protected function getEzpublish_Api_Role_LimitationType_LocationService()
    {
        return $this->services['ezpublish.api.role.limitation_type.location'] = new \eZ\Publish\Core\Limitation\LocationLimitationType($this->get('ezpublish.spi.persistence.cache'));
    }

    /**
     * Gets the 'ezpublish.api.role.limitation_type.new_section' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Limitation\NewSectionLimitationType A eZ\Publish\Core\Limitation\NewSectionLimitationType instance.
     */
    protected function getEzpublish_Api_Role_LimitationType_NewSectionService()
    {
        return $this->services['ezpublish.api.role.limitation_type.new_section'] = new \eZ\Publish\Core\Limitation\NewSectionLimitationType($this->get('ezpublish.spi.persistence.cache'));
    }

    /**
     * Gets the 'ezpublish.api.role.limitation_type.new_state' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Limitation\NewObjectStateLimitationType A eZ\Publish\Core\Limitation\NewObjectStateLimitationType instance.
     */
    protected function getEzpublish_Api_Role_LimitationType_NewStateService()
    {
        return $this->services['ezpublish.api.role.limitation_type.new_state'] = new \eZ\Publish\Core\Limitation\NewObjectStateLimitationType($this->get('ezpublish.spi.persistence.cache'));
    }

    /**
     * Gets the 'ezpublish.api.role.limitation_type.owner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Limitation\OwnerLimitationType A eZ\Publish\Core\Limitation\OwnerLimitationType instance.
     */
    protected function getEzpublish_Api_Role_LimitationType_OwnerService()
    {
        return $this->services['ezpublish.api.role.limitation_type.owner'] = new \eZ\Publish\Core\Limitation\OwnerLimitationType($this->get('ezpublish.spi.persistence.cache'));
    }

    /**
     * Gets the 'ezpublish.api.role.limitation_type.parent_content_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Limitation\ParentContentTypeLimitationType A eZ\Publish\Core\Limitation\ParentContentTypeLimitationType instance.
     */
    protected function getEzpublish_Api_Role_LimitationType_ParentContentTypeService()
    {
        return $this->services['ezpublish.api.role.limitation_type.parent_content_type'] = new \eZ\Publish\Core\Limitation\ParentContentTypeLimitationType($this->get('ezpublish.spi.persistence.cache'));
    }

    /**
     * Gets the 'ezpublish.api.role.limitation_type.parent_depth' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Limitation\ParentDepthLimitationType A eZ\Publish\Core\Limitation\ParentDepthLimitationType instance.
     */
    protected function getEzpublish_Api_Role_LimitationType_ParentDepthService()
    {
        return $this->services['ezpublish.api.role.limitation_type.parent_depth'] = new \eZ\Publish\Core\Limitation\ParentDepthLimitationType($this->get('ezpublish.spi.persistence.cache'));
    }

    /**
     * Gets the 'ezpublish.api.role.limitation_type.parent_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Limitation\ParentUserGroupLimitationType A eZ\Publish\Core\Limitation\ParentUserGroupLimitationType instance.
     */
    protected function getEzpublish_Api_Role_LimitationType_ParentGroupService()
    {
        return $this->services['ezpublish.api.role.limitation_type.parent_group'] = new \eZ\Publish\Core\Limitation\ParentUserGroupLimitationType($this->get('ezpublish.spi.persistence.cache'));
    }

    /**
     * Gets the 'ezpublish.api.role.limitation_type.parent_owner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Limitation\ParentOwnerLimitationType A eZ\Publish\Core\Limitation\ParentOwnerLimitationType instance.
     */
    protected function getEzpublish_Api_Role_LimitationType_ParentOwnerService()
    {
        return $this->services['ezpublish.api.role.limitation_type.parent_owner'] = new \eZ\Publish\Core\Limitation\ParentOwnerLimitationType($this->get('ezpublish.spi.persistence.cache'));
    }

    /**
     * Gets the 'ezpublish.api.role.limitation_type.section' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Limitation\SectionLimitationType A eZ\Publish\Core\Limitation\SectionLimitationType instance.
     */
    protected function getEzpublish_Api_Role_LimitationType_SectionService()
    {
        return $this->services['ezpublish.api.role.limitation_type.section'] = new \eZ\Publish\Core\Limitation\SectionLimitationType($this->get('ezpublish.spi.persistence.cache'));
    }

    /**
     * Gets the 'ezpublish.api.role.limitation_type.siteaccess' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Limitation\SiteAccessLimitationType A eZ\Publish\Core\Limitation\SiteAccessLimitationType instance.
     */
    protected function getEzpublish_Api_Role_LimitationType_SiteaccessService()
    {
        return $this->services['ezpublish.api.role.limitation_type.siteaccess'] = new \eZ\Publish\Core\Limitation\SiteAccessLimitationType(array(0 => 'site'));
    }

    /**
     * Gets the 'ezpublish.api.role.limitation_type.state' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Limitation\ObjectStateLimitationType A eZ\Publish\Core\Limitation\ObjectStateLimitationType instance.
     */
    protected function getEzpublish_Api_Role_LimitationType_StateService()
    {
        return $this->services['ezpublish.api.role.limitation_type.state'] = new \eZ\Publish\Core\Limitation\ObjectStateLimitationType($this->get('ezpublish.spi.persistence.cache'));
    }

    /**
     * Gets the 'ezpublish.api.role.limitation_type.status' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Limitation\StatusLimitationType A eZ\Publish\Core\Limitation\StatusLimitationType instance.
     */
    protected function getEzpublish_Api_Role_LimitationType_StatusService()
    {
        return $this->services['ezpublish.api.role.limitation_type.status'] = new \eZ\Publish\Core\Limitation\StatusLimitationType();
    }

    /**
     * Gets the 'ezpublish.api.role.limitation_type.subtree' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Limitation\SubtreeLimitationType A eZ\Publish\Core\Limitation\SubtreeLimitationType instance.
     */
    protected function getEzpublish_Api_Role_LimitationType_SubtreeService()
    {
        return $this->services['ezpublish.api.role.limitation_type.subtree'] = new \eZ\Publish\Core\Limitation\SubtreeLimitationType($this->get('ezpublish.spi.persistence.cache'));
    }

    /**
     * Gets the 'ezpublish.api.role.limitation_type.user_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Limitation\UserGroupLimitationType A eZ\Publish\Core\Limitation\UserGroupLimitationType instance.
     */
    protected function getEzpublish_Api_Role_LimitationType_UserGroupService()
    {
        return $this->services['ezpublish.api.role.limitation_type.user_group'] = new \eZ\Publish\Core\Limitation\UserGroupLimitationType($this->get('ezpublish.spi.persistence.cache'));
    }

    /**
     * Gets the 'ezpublish.api.search_engine.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\ApiLoader\SearchEngineFactory A eZ\Bundle\EzPublishCoreBundle\ApiLoader\SearchEngineFactory instance.
     */
    protected function getEzpublish_Api_SearchEngine_FactoryService()
    {
        $this->services['ezpublish.api.search_engine.factory'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\ApiLoader\SearchEngineFactory($this->get('ezpublish.api.repository_configuration_provider'));

        $instance->registerSearchEngine($this->get('ezpublish.spi.search.legacy'), 'legacy');
        $instance->registerSearchEngine($this->get('ezpublish.spi.search.solr'), 'solr');

        return $instance;
    }

    /**
     * Gets the 'ezpublish.api.search_engine.legacy.connection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Doctrine\DBAL\Driver\Connection A Doctrine\DBAL\Driver\Connection instance.
     */
    protected function getEzpublish_Api_SearchEngine_Legacy_ConnectionService($lazyLoad = true)
    {
        return $this->services['ezpublish.api.search_engine.legacy.connection'] = $this->get('ezpublish.search.legacy.connection.factory')->getConnection();
    }

    /**
     * Gets the 'ezpublish.api.search_engine.legacy.dbhandler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Persistence\Doctrine\ConnectionHandler A eZ\Publish\Core\Persistence\Doctrine\ConnectionHandler instance.
     */
    public function getEzpublish_Api_SearchEngine_Legacy_DbhandlerService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.api.search_engine.legacy.dbhandler'] = new eZPublishCorePersistenceDoctrineConnectionHandler_0000000010d7705300007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Api_SearchEngine_Legacy_DbhandlerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return \eZ\Publish\Core\Persistence\Doctrine\ConnectionHandler::createFromConnection($this->get('ezpublish.api.search_engine.legacy.connection'));
    }

    /**
     * Gets the 'ezpublish.api.service.content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Repository\ContentService A eZ\Publish\Core\Repository\ContentService instance.
     */
    public function getEzpublish_Api_Service_ContentService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.api.service.content'] = new eZPublishCoreRepositoryContentService_0000000010d7753100007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Api_Service_ContentService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return $this->get('ezpublish.api.repository.factory')->buildService($this->get('ezpublish.signalslot.repository'), 'Content');
    }

    /**
     * Gets the 'ezpublish.api.service.content_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Repository\ContentTypeService A eZ\Publish\Core\Repository\ContentTypeService instance.
     */
    public function getEzpublish_Api_Service_ContentTypeService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.api.service.content_type'] = new eZPublishCoreRepositoryContentTypeService_0000000010d7753400007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Api_Service_ContentTypeService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return $this->get('ezpublish.api.repository.factory')->buildService($this->get('ezpublish.signalslot.repository'), 'ContentType');
    }

    /**
     * Gets the 'ezpublish.api.service.field_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Repository\FieldTypeService A eZ\Publish\Core\Repository\FieldTypeService instance.
     */
    public function getEzpublish_Api_Service_FieldTypeService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.api.service.field_type'] = new eZPublishCoreRepositoryFieldTypeService_0000000010d7753700007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Api_Service_FieldTypeService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return $this->get('ezpublish.api.repository.factory')->buildService($this->get('ezpublish.signalslot.repository'), 'FieldType');
    }

    /**
     * Gets the 'ezpublish.api.service.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Repository\LanguageService A eZ\Publish\Core\Repository\LanguageService instance.
     */
    public function getEzpublish_Api_Service_LanguageService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.api.service.language'] = new eZPublishCoreRepositoryLanguageService_0000000010d7726b00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Api_Service_LanguageService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return $this->get('ezpublish.api.repository.factory')->buildService($this->get('ezpublish.signalslot.repository'), 'ContentLanguage');
    }

    /**
     * Gets the 'ezpublish.api.service.location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Repository\LocationService A eZ\Publish\Core\Repository\LocationService instance.
     */
    public function getEzpublish_Api_Service_LocationService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.api.service.location'] = new eZPublishCoreRepositoryLocationService_0000000010d7726900007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Api_Service_LocationService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return $this->get('ezpublish.api.repository.factory')->buildService($this->get('ezpublish.signalslot.repository'), 'Location');
    }

    /**
     * Gets the 'ezpublish.api.service.object_state' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Repository\ObjectStateService A eZ\Publish\Core\Repository\ObjectStateService instance.
     */
    public function getEzpublish_Api_Service_ObjectStateService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.api.service.object_state'] = new eZPublishCoreRepositoryObjectStateService_0000000010d7752d00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Api_Service_ObjectStateService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return $this->get('ezpublish.api.repository.factory')->buildService($this->get('ezpublish.signalslot.repository'), 'ObjectState');
    }

    /**
     * Gets the 'ezpublish.api.service.role' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Repository\RoleService A eZ\Publish\Core\Repository\RoleService instance.
     */
    public function getEzpublish_Api_Service_RoleService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.api.service.role'] = new eZPublishCoreRepositoryRoleService_0000000010d7752a00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Api_Service_RoleService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return $this->get('ezpublish.api.repository.factory')->buildService($this->get('ezpublish.signalslot.repository'), 'Role');
    }

    /**
     * Gets the 'ezpublish.api.service.search' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Repository\SearchService A eZ\Publish\Core\Repository\SearchService instance.
     */
    public function getEzpublish_Api_Service_SearchService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.api.service.search'] = new eZPublishCoreRepositorySearchService_0000000010d7727e00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Api_Service_SearchService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return $this->get('ezpublish.api.repository.factory')->buildService($this->get('ezpublish.signalslot.repository'), 'Search');
    }

    /**
     * Gets the 'ezpublish.api.service.section' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Repository\SectionService A eZ\Publish\Core\Repository\SectionService instance.
     */
    public function getEzpublish_Api_Service_SectionService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.api.service.section'] = new eZPublishCoreRepositorySectionService_0000000010d7726800007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Api_Service_SectionService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return $this->get('ezpublish.api.repository.factory')->buildService($this->get('ezpublish.signalslot.repository'), 'Section');
    }

    /**
     * Gets the 'ezpublish.api.service.trash' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Repository\TrashService A eZ\Publish\Core\Repository\TrashService instance.
     */
    public function getEzpublish_Api_Service_TrashService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.api.service.trash'] = new eZPublishCoreRepositoryTrashService_0000000010d773ad00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Api_Service_TrashService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return $this->get('ezpublish.api.repository.factory')->buildService($this->get('ezpublish.signalslot.repository'), 'Trash');
    }

    /**
     * Gets the 'ezpublish.api.service.url_alias' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Repository\URLAliasService A eZ\Publish\Core\Repository\URLAliasService instance.
     */
    public function getEzpublish_Api_Service_UrlAliasService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.api.service.url_alias'] = new eZPublishCoreRepositoryURLAliasService_0000000010d773b700007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Api_Service_UrlAliasService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return $this->get('ezpublish.api.repository.factory')->buildService($this->get('ezpublish.signalslot.repository'), 'URLAlias');
    }

    /**
     * Gets the 'ezpublish.api.service.url_wildcard' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Repository\URLWildcardService A eZ\Publish\Core\Repository\URLWildcardService instance.
     */
    public function getEzpublish_Api_Service_UrlWildcardService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.api.service.url_wildcard'] = new eZPublishCoreRepositoryURLWildcardService_0000000010d7752000007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Api_Service_UrlWildcardService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return $this->get('ezpublish.api.repository.factory')->buildService($this->get('ezpublish.signalslot.repository'), 'URLWildcard');
    }

    /**
     * Gets the 'ezpublish.api.service.user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Repository\UserService A eZ\Publish\Core\Repository\UserService instance.
     */
    public function getEzpublish_Api_Service_UserService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.api.service.user'] = new eZPublishCoreRepositoryUserService_0000000010d773a800007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Api_Service_UserService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return $this->get('ezpublish.api.repository.factory')->buildService($this->get('ezpublish.signalslot.repository'), 'User');
    }

    /**
     * Gets the 'ezpublish.api.storage_engine.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\ApiLoader\StorageEngineFactory A eZ\Bundle\EzPublishCoreBundle\ApiLoader\StorageEngineFactory instance.
     */
    protected function getEzpublish_Api_StorageEngine_FactoryService()
    {
        $this->services['ezpublish.api.storage_engine.factory'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\ApiLoader\StorageEngineFactory($this->get('ezpublish.api.repository_configuration_provider'));

        $instance->registerStorageEngine($this->get('ezpublish.spi.persistence.legacy'), 'legacy');

        return $instance;
    }

    /**
     * Gets the 'ezpublish.api.storage_engine.legacy.dbhandler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Persistence\Doctrine\ConnectionHandler A eZ\Publish\Core\Persistence\Doctrine\ConnectionHandler instance.
     */
    public function getEzpublish_Api_StorageEngine_Legacy_DbhandlerService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.api.storage_engine.legacy.dbhandler'] = new eZPublishCorePersistenceDoctrineConnectionHandler_0000000010d772cb00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Api_StorageEngine_Legacy_DbhandlerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return \eZ\Publish\Core\Persistence\Doctrine\ConnectionHandler::createFromConnection($this->get('ezpublish.persistence.connection'));
    }

    /**
     * Gets the 'ezpublish.api.storage_engine.pcre_compiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\TransformationProcessor\PcreCompiler A eZ\Publish\Core\Persistence\TransformationProcessor\PcreCompiler instance.
     */
    protected function getEzpublish_Api_StorageEngine_PcreCompilerService()
    {
        return $this->services['ezpublish.api.storage_engine.pcre_compiler'] = new \eZ\Publish\Core\Persistence\TransformationProcessor\PcreCompiler($this->get('ezpublish.api.storage_engine.transformation_converter'));
    }

    /**
     * Gets the 'ezpublish.api.storage_engine.transformation_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Utf8Converter A eZ\Publish\Core\Persistence\Utf8Converter instance.
     */
    protected function getEzpublish_Api_StorageEngine_TransformationConverterService()
    {
        return $this->services['ezpublish.api.storage_engine.transformation_converter'] = new \eZ\Publish\Core\Persistence\Utf8Converter();
    }

    /**
     * Gets the 'ezpublish.api.storage_engine.transformation_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\TransformationProcessor\DefinitionBased\Parser A eZ\Publish\Core\Persistence\TransformationProcessor\DefinitionBased\Parser instance.
     */
    protected function getEzpublish_Api_StorageEngine_TransformationParserService()
    {
        return $this->services['ezpublish.api.storage_engine.transformation_parser'] = new \eZ\Publish\Core\Persistence\TransformationProcessor\DefinitionBased\Parser();
    }

    /**
     * Gets the 'ezpublish.api.storage_engine.transformation_processor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\TransformationProcessor\PreprocessedBased A eZ\Publish\Core\Persistence\TransformationProcessor\PreprocessedBased instance.
     */
    protected function getEzpublish_Api_StorageEngine_TransformationProcessorService()
    {
        return $this->services['ezpublish.api.storage_engine.transformation_processor'] = new \eZ\Publish\Core\Persistence\TransformationProcessor\PreprocessedBased($this->get('ezpublish.api.storage_engine.pcre_compiler'), array(0 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/Persistence/Tests/TransformationProcessor/_fixtures/transformations/ascii.tr.result'), 1 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/Persistence/Tests/TransformationProcessor/_fixtures/transformations/basic.tr.result'), 2 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/Persistence/Tests/TransformationProcessor/_fixtures/transformations/cyrillic.tr.result'), 3 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/Persistence/Tests/TransformationProcessor/_fixtures/transformations/greek.tr.result'), 4 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/Persistence/Tests/TransformationProcessor/_fixtures/transformations/hebrew.tr.result'), 5 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/Persistence/Tests/TransformationProcessor/_fixtures/transformations/latin.tr.result'), 6 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/Persistence/Tests/TransformationProcessor/_fixtures/transformations/search.tr.result')));
    }

    /**
     * Gets the 'ezpublish.block_view.default_matcher_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Matcher\ServiceAwareMatcherFactory A eZ\Bundle\EzPublishCoreBundle\Matcher\ServiceAwareMatcherFactory instance.
     */
    protected function getEzpublish_BlockView_DefaultMatcherFactoryService()
    {
        $this->services['ezpublish.block_view.default_matcher_factory'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\Matcher\ServiceAwareMatcherFactory($this->get('ezpublish.signalslot.repository'));

        $instance->setContainer($this);
        $instance->setMatchConfig($this->get("ezpublish.config.resolver")->getParameter("block_view_defaults", null, null));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.block_view.matcher_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Matcher\ServiceAwareMatcherFactory A eZ\Bundle\EzPublishCoreBundle\Matcher\ServiceAwareMatcherFactory instance.
     */
    protected function getEzpublish_BlockView_MatcherFactoryService()
    {
        $this->services['ezpublish.block_view.matcher_factory'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\Matcher\ServiceAwareMatcherFactory($this->get('ezpublish.signalslot.repository'), 'eZ\\Publish\\Core\\MVC\\Symfony\\Matcher\\Block');

        $instance->setContainer($this);
        $instance->setMatchConfig($this->get("ezpublish.config.resolver")->getParameter("block_view", null, null));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.block_view_provider.configured' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\View\Provider\Configured A eZ\Bundle\EzPublishCoreBundle\View\Provider\Configured instance.
     */
    protected function getEzpublish_BlockViewProvider_ConfiguredService()
    {
        return $this->services['ezpublish.block_view_provider.configured'] = new \eZ\Bundle\EzPublishCoreBundle\View\Provider\Configured($this->get('ezpublish.block_view.matcher_factory'));
    }

    /**
     * Gets the 'ezpublish.block_view_provider.default_configured' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\View\Provider\Configured A eZ\Bundle\EzPublishCoreBundle\View\Provider\Configured instance.
     */
    protected function getEzpublish_BlockViewProvider_DefaultConfiguredService()
    {
        return $this->services['ezpublish.block_view_provider.default_configured'] = new \eZ\Bundle\EzPublishCoreBundle\View\Provider\Configured($this->get('ezpublish.block_view.default_matcher_factory'));
    }

    /**
     * Gets the 'ezpublish.cache_clear.content.base_locations_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Cache\Http\EventListener\AssignedLocationsListener A eZ\Publish\Core\MVC\Symfony\Cache\Http\EventListener\AssignedLocationsListener instance.
     */
    protected function getEzpublish_CacheClear_Content_BaseLocationsListenerService()
    {
        return $this->services['ezpublish.cache_clear.content.base_locations_listener'] = new \eZ\Publish\Core\MVC\Symfony\Cache\Http\EventListener\AssignedLocationsListener($this->get('ezpublish.api.service.location'));
    }

    /**
     * Gets the 'ezpublish.cache_clear.content.parent_locations_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Cache\Http\EventListener\ParentLocationsListener A eZ\Publish\Core\MVC\Symfony\Cache\Http\EventListener\ParentLocationsListener instance.
     */
    protected function getEzpublish_CacheClear_Content_ParentLocationsListenerService()
    {
        return $this->services['ezpublish.cache_clear.content.parent_locations_listener'] = new \eZ\Publish\Core\MVC\Symfony\Cache\Http\EventListener\ParentLocationsListener($this->get('ezpublish.api.service.location'));
    }

    /**
     * Gets the 'ezpublish.cache_clear.content.related_locations_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Cache\Http\EventListener\RelatedLocationsListener A eZ\Publish\Core\MVC\Symfony\Cache\Http\EventListener\RelatedLocationsListener instance.
     */
    protected function getEzpublish_CacheClear_Content_RelatedLocationsListenerService()
    {
        return $this->services['ezpublish.cache_clear.content.related_locations_listener'] = new \eZ\Publish\Core\MVC\Symfony\Cache\Http\EventListener\RelatedLocationsListener($this->get('ezpublish.signalslot.repository'));
    }

    /**
     * Gets the 'ezpublish.cache_pool' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Stash\Pool A Stash\Pool instance.
     */
    protected function getEzpublish_CachePoolService()
    {
        return $this->services['ezpublish.cache_pool'] = $this->get('ezpublish.cache_pool.factory')->getCachePool($this->get('ezpublish.config.resolver.chain'));
    }

    /**
     * Gets the 'ezpublish.cache_pool.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\ApiLoader\CacheFactory A eZ\Bundle\EzPublishCoreBundle\ApiLoader\CacheFactory instance.
     */
    protected function getEzpublish_CachePool_FactoryService()
    {
        $this->services['ezpublish.cache_pool.factory'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\ApiLoader\CacheFactory();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'ezpublish.cache_pool.spi.cache.decorator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Cache\CacheServiceDecorator A eZ\Publish\Core\Persistence\Cache\CacheServiceDecorator instance.
     */
    protected function getEzpublish_CachePool_Spi_Cache_DecoratorService()
    {
        return $this->services['ezpublish.cache_pool.spi.cache.decorator'] = new \eZ\Publish\Core\Persistence\Cache\CacheServiceDecorator($this->get('ezpublish.cache_pool'));
    }

    /**
     * Gets the 'ezpublish.chain_router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Routing\ChainRouter A eZ\Publish\Core\MVC\Symfony\Routing\ChainRouter instance.
     */
    protected function getEzpublish_ChainRouterService()
    {
        $this->services['ezpublish.chain_router'] = $instance = new \eZ\Publish\Core\MVC\Symfony\Routing\ChainRouter($this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->setContext($this->get('router.request_context'));
        $instance->add($this->get('router.default'), 255);
        $instance->add($this->get('ezpublish.urlalias_router'), 200);

        return $instance;
    }

    /**
     * Gets the 'ezpublish.config.complex_setting_value.resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\DependencyInjection\Configuration\ComplexSettings\ComplexSettingValueResolver A eZ\Bundle\EzPublishCoreBundle\DependencyInjection\Configuration\ComplexSettings\ComplexSettingValueResolver instance.
     */
    protected function getEzpublish_Config_ComplexSettingValue_ResolverService()
    {
        return $this->services['ezpublish.config.complex_setting_value.resolver'] = new \eZ\Bundle\EzPublishCoreBundle\DependencyInjection\Configuration\ComplexSettings\ComplexSettingValueResolver();
    }

    /**
     * Gets the 'ezpublish.config.dynamic_setting.parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\DependencyInjection\Configuration\SiteAccessAware\DynamicSettingParser A eZ\Bundle\EzPublishCoreBundle\DependencyInjection\Configuration\SiteAccessAware\DynamicSettingParser instance.
     */
    protected function getEzpublish_Config_DynamicSetting_ParserService()
    {
        return $this->services['ezpublish.config.dynamic_setting.parser'] = new \eZ\Bundle\EzPublishCoreBundle\DependencyInjection\Configuration\SiteAccessAware\DynamicSettingParser();
    }

    /**
     * Gets the 'ezpublish.config.resolver.chain' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\DependencyInjection\Configuration\ChainConfigResolver A eZ\Bundle\EzPublishCoreBundle\DependencyInjection\Configuration\ChainConfigResolver instance.
     */
    protected function getEzpublish_Config_Resolver_ChainService()
    {
        $this->services['ezpublish.config.resolver.chain'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\DependencyInjection\Configuration\ChainConfigResolver();

        $instance->addResolver($this->get('ezpublish.config.resolver.core'), 200);

        return $instance;
    }

    /**
     * Gets the 'ezpublish.config.resolver.core' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\DependencyInjection\Configuration\ConfigResolver A eZ\Bundle\EzPublishCoreBundle\DependencyInjection\Configuration\ConfigResolver instance.
     */
    public function getEzpublish_Config_Resolver_CoreService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.config.resolver.core'] = new eZBundleEzPublishCoreBundleDependencyInjectionConfigurationConfigResolver_0000000010d7745e00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Config_Resolver_CoreService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        $instance = new \eZ\Bundle\EzPublishCoreBundle\DependencyInjection\Configuration\ConfigResolver(array('site' => array(0 => 'site_group')), 'ezsettings');

        $instance->setSiteAccess($this->get('ezpublish.siteaccess'));
        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'ezpublish.config_scope_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\EventListener\ConfigScopeListener A eZ\Bundle\EzPublishCoreBundle\EventListener\ConfigScopeListener instance.
     */
    protected function getEzpublish_ConfigScopeListenerService()
    {
        $this->services['ezpublish.config_scope_listener'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\EventListener\ConfigScopeListener($this->get('ezpublish.config.resolver.core'), $this->get('ezpublish.view_manager'));

        $instance->setViewProviders(array(0 => $this->get('ezpublish.content_view_provider.configured'), 1 => $this->get('ezpublish.location_view_provider.configured'), 2 => $this->get('ezpublish.content_view_provider.default_configured'), 3 => $this->get('ezpublish.block_view_provider.configured'), 4 => $this->get('ezpublish.block_view_provider.default_configured')));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.console_event_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\EventListener\ConsoleCommandListener A eZ\Bundle\EzPublishCoreBundle\EventListener\ConsoleCommandListener instance.
     */
    protected function getEzpublish_ConsoleEventListenerService()
    {
        $this->services['ezpublish.console_event_listener'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\EventListener\ConsoleCommandListener('site', array(0 => 'site'), $this->get('debug.event_dispatcher'));

        $instance->setSiteAccess($this->get('ezpublish.siteaccess'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.content_preview.location_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Helper\PreviewLocationProvider A eZ\Publish\Core\Helper\PreviewLocationProvider instance.
     */
    protected function getEzpublish_ContentPreview_LocationProviderService()
    {
        return $this->services['ezpublish.content_preview.location_provider'] = new \eZ\Publish\Core\Helper\PreviewLocationProvider($this->get('ezpublish.api.service.location'), $this->get('ezpublish.api.service.content'), $this->get('ezpublish.spi.persistence.cache.locationhandler'));
    }

    /**
     * Gets the 'ezpublish.content_preview_helper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Helper\ContentPreviewHelper A eZ\Publish\Core\Helper\ContentPreviewHelper instance.
     */
    protected function getEzpublish_ContentPreviewHelperService()
    {
        $this->services['ezpublish.content_preview_helper'] = $instance = new \eZ\Publish\Core\Helper\ContentPreviewHelper($this->get('debug.event_dispatcher'), $this->get('ezpublish.siteaccess_router'));

        $instance->setSiteAccess($this->get('ezpublish.siteaccess'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.content_view.default_matcher_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Matcher\ServiceAwareMatcherFactory A eZ\Bundle\EzPublishCoreBundle\Matcher\ServiceAwareMatcherFactory instance.
     */
    protected function getEzpublish_ContentView_DefaultMatcherFactoryService()
    {
        $this->services['ezpublish.content_view.default_matcher_factory'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\Matcher\ServiceAwareMatcherFactory($this->get('ezpublish.signalslot.repository'), 'eZ\\Publish\\Core\\MVC\\Symfony\\Matcher\\ContentBased');

        $instance->setContainer($this);
        $instance->setMatchConfig($this->get("ezpublish.config.resolver")->getParameter("content_view_defaults", null, null));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.content_view.matcher_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Matcher\ServiceAwareMatcherFactory A eZ\Bundle\EzPublishCoreBundle\Matcher\ServiceAwareMatcherFactory instance.
     */
    protected function getEzpublish_ContentView_MatcherFactoryService()
    {
        $this->services['ezpublish.content_view.matcher_factory'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\Matcher\ServiceAwareMatcherFactory($this->get('ezpublish.signalslot.repository'), 'eZ\\Publish\\Core\\MVC\\Symfony\\Matcher\\ContentBased');

        $instance->setContainer($this);
        $instance->setMatchConfig($this->get("ezpublish.config.resolver")->getParameter("content_view", null, null));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.content_view_provider.configured' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\View\Provider\Configured A eZ\Bundle\EzPublishCoreBundle\View\Provider\Configured instance.
     */
    protected function getEzpublish_ContentViewProvider_ConfiguredService()
    {
        return $this->services['ezpublish.content_view_provider.configured'] = new \eZ\Bundle\EzPublishCoreBundle\View\Provider\Configured($this->get('ezpublish.content_view.matcher_factory'));
    }

    /**
     * Gets the 'ezpublish.content_view_provider.default_configured' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\View\Provider\Configured A eZ\Bundle\EzPublishCoreBundle\View\Provider\Configured instance.
     */
    protected function getEzpublish_ContentViewProvider_DefaultConfiguredService()
    {
        return $this->services['ezpublish.content_view_provider.default_configured'] = new \eZ\Bundle\EzPublishCoreBundle\View\Provider\Configured($this->get('ezpublish.content_view.default_matcher_factory'));
    }

    /**
     * Gets the 'ezpublish.controller.content.download' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Controller\Content\DownloadController A eZ\Publish\Core\MVC\Symfony\Controller\Content\DownloadController instance.
     */
    protected function getEzpublish_Controller_Content_DownloadService()
    {
        $this->services['ezpublish.controller.content.download'] = $instance = new \eZ\Publish\Core\MVC\Symfony\Controller\Content\DownloadController($this->get('ezpublish.api.service.content'), $this->get('ezpublish.fieldtype.ezbinaryfile.io_service'), $this->get('ezpublish.translation_helper'), $this->get('ezpublish.chain_router'), $this->get('ezpublish.route_reference.generator'));

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'ezpublish.controller.content.download_redirection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Controller\Content\DownloadRedirectionController A eZ\Publish\Core\MVC\Symfony\Controller\Content\DownloadRedirectionController instance.
     */
    protected function getEzpublish_Controller_Content_DownloadRedirectionService()
    {
        $this->services['ezpublish.controller.content.download_redirection'] = $instance = new \eZ\Publish\Core\MVC\Symfony\Controller\Content\DownloadRedirectionController($this->get('ezpublish.api.service.content'), $this->get('ezpublish.chain_router'), $this->get('ezpublish.route_reference.generator'));

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'ezpublish.controller.content.preview.core' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Controller\Content\PreviewController A eZ\Publish\Core\MVC\Symfony\Controller\Content\PreviewController instance.
     */
    protected function getEzpublish_Controller_Content_Preview_CoreService()
    {
        return $this->services['ezpublish.controller.content.preview.core'] = new \eZ\Publish\Core\MVC\Symfony\Controller\Content\PreviewController($this->get('ezpublish.api.service.content'), $this->get('http_kernel'), $this->get('ezpublish.content_preview_helper'), $this->get('security.authorization_checker'), $this->get('ezpublish.content_preview.location_provider'), $this->get('ezpublish.view.custom_location_controller_checker'));
    }

    /**
     * Gets the 'ezpublish.controller.content.view' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Controller\Content\ViewController A eZ\Publish\Core\MVC\Symfony\Controller\Content\ViewController instance.
     */
    protected function getEzpublish_Controller_Content_ViewService()
    {
        $this->services['ezpublish.controller.content.view'] = $instance = new \eZ\Publish\Core\MVC\Symfony\Controller\Content\ViewController($this->get('ezpublish.view_manager'), $this->get('security.authorization_checker'));

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'ezpublish.controller.page.view' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Controller\PageController A eZ\Bundle\EzPublishCoreBundle\Controller\PageController instance.
     * 
     * @throws InactiveScopeException when the 'ezpublish.controller.page.view' service is requested while the 'request' scope is not active
     */
    protected function getEzpublish_Controller_Page_ViewService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('ezpublish.controller.page.view', 'request');
        }

        $this->services['ezpublish.controller.page.view'] = $this->scopedServices['request']['ezpublish.controller.page.view'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\Controller\PageController($this->get('ezpublish.view_manager'), $this->get('ezpublish.fieldtype.ezpage.pageservice'));

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'ezpublish.core.io.binarydata_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\IO\IOBinarydataHandler A eZ\Publish\Core\IO\IOBinarydataHandler instance.
     */
    protected function getEzpublish_Core_Io_BinarydataHandlerService()
    {
        return $this->services['ezpublish.core.io.binarydata_handler'] = $this->get('ezpublish.core.io.binarydata_handler.factory')->getConfiguredHandler($this->get("ezpublish.config.resolver")->getParameter("io.binarydata_handler", null, null));
    }

    /**
     * Gets the 'ezpublish.core.io.binarydata_handler.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishIOBundle\ApiLoader\HandlerFactory A eZ\Bundle\EzPublishIOBundle\ApiLoader\HandlerFactory instance.
     */
    protected function getEzpublish_Core_Io_BinarydataHandler_FactoryService()
    {
        $this->services['ezpublish.core.io.binarydata_handler.factory'] = $instance = new \eZ\Bundle\EzPublishIOBundle\ApiLoader\HandlerFactory();

        $instance->setContainer($this);
        $instance->setHandlersMap(array('default' => 'ezpublish.core.io.binarydata_handler.flysystem.default'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.core.io.binarydata_handler.flysystem.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\IO\IOBinarydataHandler\Flysystem A eZ\Publish\Core\IO\IOBinarydataHandler\Flysystem instance.
     */
    protected function getEzpublish_Core_Io_BinarydataHandler_Flysystem_DefaultService()
    {
        return $this->services['ezpublish.core.io.binarydata_handler.flysystem.default'] = new \eZ\Publish\Core\IO\IOBinarydataHandler\Flysystem($this->get('ezpublish.core.io.flysystem.default_filesystem'), $this->get('ezpublish.core.io.prefix_url_decorator'));
    }

    /**
     * Gets the 'ezpublish.core.io.flysystem.default_adapter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \League\Flysystem\Adapter\Local A League\Flysystem\Adapter\Local instance.
     */
    protected function getEzpublish_Core_Io_Flysystem_DefaultAdapterService()
    {
        return $this->services['ezpublish.core.io.flysystem.default_adapter'] = new \League\Flysystem\Adapter\Local($this->get("ezpublish.config.resolver")->getParameter("io.root_dir", null, null));
    }

    /**
     * Gets the 'ezpublish.core.io.flysystem.default_filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \League\Flysystem\Filesystem A League\Flysystem\Filesystem instance.
     */
    protected function getEzpublish_Core_Io_Flysystem_DefaultFilesystemService()
    {
        return $this->services['ezpublish.core.io.flysystem.default_filesystem'] = new \League\Flysystem\Filesystem($this->get('ezpublish.core.io.flysystem.default_adapter'));
    }

    /**
     * Gets the 'ezpublish.core.io.image_fieldtype.legacy_url_decorator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\IO\UrlDecorator\Prefix A eZ\Publish\Core\IO\UrlDecorator\Prefix instance.
     */
    protected function getEzpublish_Core_Io_ImageFieldtype_LegacyUrlDecoratorService()
    {
        $this->services['ezpublish.core.io.image_fieldtype.legacy_url_decorator'] = $instance = new \eZ\Publish\Core\IO\UrlDecorator\Prefix();

        $instance->setPrefix($this->get("ezpublish.config.resolver")->getParameter("io.legacy_url_prefix", null, null));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.core.io.image_fieldtype.legacy_url_redecorator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\IO\UrlRedecorator A eZ\Publish\Core\IO\UrlRedecorator instance.
     */
    protected function getEzpublish_Core_Io_ImageFieldtype_LegacyUrlRedecoratorService()
    {
        return $this->services['ezpublish.core.io.image_fieldtype.legacy_url_redecorator'] = new \eZ\Publish\Core\IO\UrlRedecorator($this->get('ezpublish.core.io.prefix_url_decorator'), $this->get('ezpublish.core.io.image_fieldtype.legacy_url_decorator'));
    }

    /**
     * Gets the 'ezpublish.core.io.metadata_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\IO\IOMetadataHandler A eZ\Publish\Core\IO\IOMetadataHandler instance.
     */
    protected function getEzpublish_Core_Io_MetadataHandlerService()
    {
        return $this->services['ezpublish.core.io.metadata_handler'] = $this->get('ezpublish.core.io.metadata_handler.factory')->getConfiguredHandler($this->get("ezpublish.config.resolver")->getParameter("io.metadata_handler", null, null));
    }

    /**
     * Gets the 'ezpublish.core.io.metadata_handler.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishIOBundle\ApiLoader\HandlerFactory A eZ\Bundle\EzPublishIOBundle\ApiLoader\HandlerFactory instance.
     */
    protected function getEzpublish_Core_Io_MetadataHandler_FactoryService()
    {
        $this->services['ezpublish.core.io.metadata_handler.factory'] = $instance = new \eZ\Bundle\EzPublishIOBundle\ApiLoader\HandlerFactory();

        $instance->setContainer($this);
        $instance->setHandlersMap(array('default' => 'ezpublish.core.io.metadata_handler.flysystem.default'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.core.io.metadata_handler.flysystem.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\IO\IOMetadataHandler\Flysystem A eZ\Publish\Core\IO\IOMetadataHandler\Flysystem instance.
     */
    protected function getEzpublish_Core_Io_MetadataHandler_Flysystem_DefaultService()
    {
        return $this->services['ezpublish.core.io.metadata_handler.flysystem.default'] = new \eZ\Publish\Core\IO\IOMetadataHandler\Flysystem($this->get('ezpublish.core.io.flysystem.default_filesystem'));
    }

    /**
     * Gets the 'ezpublish.core.io.mimetypedetector.fileinfo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\IO\MimeTypeDetector\FileInfo A eZ\Publish\Core\IO\MimeTypeDetector\FileInfo instance.
     */
    protected function getEzpublish_Core_Io_Mimetypedetector_FileinfoService()
    {
        return $this->services['ezpublish.core.io.mimetypedetector.fileinfo'] = new \eZ\Publish\Core\IO\MimeTypeDetector\FileInfo();
    }

    /**
     * Gets the 'ezpublish.core.io.prefix_url_decorator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\IO\UrlDecorator\AbsolutePrefix A eZ\Publish\Core\IO\UrlDecorator\AbsolutePrefix instance.
     */
    protected function getEzpublish_Core_Io_PrefixUrlDecoratorService()
    {
        $this->services['ezpublish.core.io.prefix_url_decorator'] = $instance = new \eZ\Publish\Core\IO\UrlDecorator\AbsolutePrefix();

        $instance->setPrefix($this->get("ezpublish.config.resolver")->getParameter("io.url_prefix", null, null));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.core.io.service' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\IO\TolerantIOService A eZ\Publish\Core\IO\TolerantIOService instance.
     */
    public function getEzpublish_Core_Io_ServiceService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.core.io.service'] = new eZPublishCoreIOTolerantIOService_0000000010d7735500007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Core_Io_ServiceService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        $instance = new \eZ\Publish\Core\IO\TolerantIOService($this->get('ezpublish.core.io.metadata_handler'), $this->get('ezpublish.core.io.binarydata_handler'), $this->get('ezpublish.core.io.mimetypedetector.fileinfo'));

        if ($this->has('logger')) {
            $instance->setLogger($this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }

        return $instance;
    }

    /**
     * Gets the 'ezpublish.core.io.stream_file_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishIOBundle\EventListener\StreamFileListener A eZ\Bundle\EzPublishIOBundle\EventListener\StreamFileListener instance.
     */
    protected function getEzpublish_Core_Io_StreamFileListenerService()
    {
        return $this->services['ezpublish.core.io.stream_file_listener'] = new \eZ\Bundle\EzPublishIOBundle\EventListener\StreamFileListener($this->get('ezpublish.fieldtype.ezimage.io_service'), $this->get('ezpublish.config.resolver.chain'));
    }

    /**
     * Gets the 'ezpublish.dynamic_settings_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\EventListener\DynamicSettingsListener A eZ\Bundle\EzPublishCoreBundle\EventListener\DynamicSettingsListener instance.
     */
    protected function getEzpublish_DynamicSettingsListenerService()
    {
        $this->services['ezpublish.dynamic_settings_listener'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\EventListener\DynamicSettingsListener(array(0 => 'ezpublish.core.io.flysystem.default_adapter', 1 => 'ezpublish.view.cache_response_listener', 2 => 'ezpublish.image_alias.variation_purger.legacy_storage_image_file.image_file_list', 3 => 'ezpublish.core.io.metadata_handler', 4 => 'ezpublish.core.io.binarydata_handler', 5 => 'ezsystems.platformui.application_config.provider.anonymous_user_id', 6 => 'ezsystems.platformui.loader.combo_loader', 7 => 'ezpublish.core.io.service', 8 => 'ezpublish.core.io.flysystem.default_filesystem', 9 => 'ezpublish.image_alias.variation_purger.legacy_storage_image_file', 10 => 'ezsystems.platformui.controller'), array('ezpublish.core.io.prefix_url_decorator' => array(0 => array(0 => 'setPrefix', 1 => 'service("ezpublish.config.resolver").getParameter("io.url_prefix", null, null)')), 'ezpublish.core.io.image_fieldtype.legacy_url_decorator' => array(0 => array(0 => 'setPrefix', 1 => 'service("ezpublish.config.resolver").getParameter("io.legacy_url_prefix", null, null)')), 'ezpublish.fieldtype.ezimage.io_service.options_provider' => array(0 => array(0 => 'setVarDir', 1 => 'service("ezpublish.config.resolver").getParameter("var_dir", null, null)'), 1 => array(0 => 'setStorageDir', 1 => 'service("ezpublish.config.resolver").getParameter("storage_dir", null, null)'), 2 => array(0 => 'setDraftImagesDir', 1 => 'service("ezpublish.config.resolver").getParameter("image.versioned_images_dir", null, null)'), 3 => array(0 => 'setPublishedImagesDir', 1 => 'service("ezpublish.config.resolver").getParameter("image.published_images_dir", null, null)')), 'ezpublish.fieldtype.ezimage.io_service.published' => array(0 => array(0 => 'setPrefix', 1 => 'service("ezpublish.config.resolver").getParameter("image.published_images_dir", null, null)')), 'ezpublish.fieldtype.ezimage.io_service.draft' => array(0 => array(0 => 'setPrefix', 1 => 'service("ezpublish.config.resolver").getParameter("image.versioned_images_dir", null, null)')), 'ezpublish.fieldtype.ezbinaryfile.io_service' => array(0 => array(0 => 'setPrefix', 1 => 'service("ezpublish.config.resolver").getParameter("binary_dir", null, null)')), 'ezpublish.content_view.matcher_factory' => array(0 => array(0 => 'setMatchConfig', 1 => 'service("ezpublish.config.resolver").getParameter("content_view", null, null)')), 'ezpublish.content_view.default_matcher_factory' => array(0 => array(0 => 'setMatchConfig', 1 => 'service("ezpublish.config.resolver").getParameter("content_view_defaults", null, null)')), 'ezpublish.location_view.matcher_factory' => array(0 => array(0 => 'setMatchConfig', 1 => 'service("ezpublish.config.resolver").getParameter("location_view", null, null)')), 'ezpublish.block_view.matcher_factory' => array(0 => array(0 => 'setMatchConfig', 1 => 'service("ezpublish.config.resolver").getParameter("block_view", null, null)')), 'ezpublish.block_view.default_matcher_factory' => array(0 => array(0 => 'setMatchConfig', 1 => 'service("ezpublish.config.resolver").getParameter("block_view_defaults", null, null)')), 'ezpublish.templating.field_block_renderer.twig' => array(0 => array(0 => 'setFieldViewResources', 1 => 'service("ezpublish.config.resolver").getParameter("field_templates", null, null)'), 1 => array(0 => 'setFieldEditResources', 1 => 'service("ezpublish.config.resolver").getParameter("field_edit_templates", null, null)'), 2 => array(0 => 'setFieldDefinitionViewResources', 1 => 'service("ezpublish.config.resolver").getParameter("fielddefinition_settings_templates", null, null)'), 3 => array(0 => 'setFieldDefinitionEditResources', 1 => 'service("ezpublish.config.resolver").getParameter("fielddefinition_edit_templates", null, null)')), 'ezpublish.view.block_cache_response_listener' => array(0 => array(0 => 'setEnableViewCache', 1 => 'service("ezpublish.config.resolver").getParameter("content.view_cache", null, null)')), 'ezsystems.platformui.controller.content_type' => array(0 => array(0 => 'setPrioritizedLanguages', 1 => 'service("ezpublish.config.resolver").getParameter("languages", null, null)'))));

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'ezpublish.exception_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\EventListener\ExceptionListener A eZ\Bundle\EzPublishCoreBundle\EventListener\ExceptionListener instance.
     */
    protected function getEzpublish_ExceptionListenerService()
    {
        return $this->services['ezpublish.exception_listener'] = new \eZ\Bundle\EzPublishCoreBundle\EventListener\ExceptionListener($this->get('translator'));
    }

    /**
     * Gets the 'ezpublish.field_helper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Helper\FieldHelper A eZ\Publish\Core\Helper\FieldHelper instance.
     */
    protected function getEzpublish_FieldHelperService()
    {
        return $this->services['ezpublish.field_helper'] = new \eZ\Publish\Core\Helper\FieldHelper($this->get('ezpublish.translation_helper'), $this->get('ezpublish.api.service.content_type'), $this->get('ezpublish.api.service.field_type'));
    }

    /**
     * Gets the 'ezpublish.field_type_collection.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Base\Container\ApiLoader\FieldTypeCollectionFactory A eZ\Publish\Core\Base\Container\ApiLoader\FieldTypeCollectionFactory instance.
     */
    protected function getEzpublish_FieldTypeCollection_FactoryService()
    {
        $this->services['ezpublish.field_type_collection.factory'] = $instance = new \eZ\Publish\Core\Base\Container\ApiLoader\FieldTypeCollectionFactory();

        $instance->setContainer($this);
        $instance->registerFieldType('ezpublish.fieldtype.ezauthor', 'ezauthor');
        $instance->registerConcreteFieldTypeIdentifier('ezauthor');
        $instance->registerFieldType('ezpublish.fieldtype.ezbinaryfile', 'ezbinaryfile');
        $instance->registerConcreteFieldTypeIdentifier('ezbinaryfile');
        $instance->registerFieldType('ezpublish.fieldtype.ezboolean', 'ezboolean');
        $instance->registerConcreteFieldTypeIdentifier('ezboolean');
        $instance->registerFieldType('ezpublish.fieldtype.ezcountry', 'ezcountry');
        $instance->registerConcreteFieldTypeIdentifier('ezcountry');
        $instance->registerFieldType('ezpublish.fieldtype.ezdatetime', 'ezdatetime');
        $instance->registerConcreteFieldTypeIdentifier('ezdatetime');
        $instance->registerFieldType('ezpublish.fieldtype.ezemail', 'ezemail');
        $instance->registerConcreteFieldTypeIdentifier('ezemail');
        $instance->registerFieldType('ezpublish.fieldtype.ezfloat', 'ezfloat');
        $instance->registerConcreteFieldTypeIdentifier('ezfloat');
        $instance->registerFieldType('ezpublish.fieldtype.ezinteger', 'ezinteger');
        $instance->registerConcreteFieldTypeIdentifier('ezinteger');
        $instance->registerFieldType('ezpublish.fieldtype.ezimage', 'ezimage');
        $instance->registerConcreteFieldTypeIdentifier('ezimage');
        $instance->registerFieldType('ezpublish.fieldtype.ezisbn', 'ezisbn');
        $instance->registerConcreteFieldTypeIdentifier('ezisbn');
        $instance->registerFieldType('ezpublish.fieldtype.ezkeyword', 'ezkeyword');
        $instance->registerConcreteFieldTypeIdentifier('ezkeyword');
        $instance->registerFieldType('ezpublish.fieldtype.ezmedia', 'ezmedia');
        $instance->registerConcreteFieldTypeIdentifier('ezmedia');
        $instance->registerFieldType('ezpublish.fieldtype.ezobjectrelation', 'ezobjectrelation');
        $instance->registerConcreteFieldTypeIdentifier('ezobjectrelation');
        $instance->registerFieldType('ezpublish.fieldtype.ezsrrating', 'ezsrrating');
        $instance->registerConcreteFieldTypeIdentifier('ezsrrating');
        $instance->registerFieldType('ezpublish.fieldtype.ezselection', 'ezselection');
        $instance->registerConcreteFieldTypeIdentifier('ezselection');
        $instance->registerFieldType('ezpublish.fieldtype.eztext', 'eztext');
        $instance->registerConcreteFieldTypeIdentifier('eztext');
        $instance->registerFieldType('ezpublish.fieldtype.ezstring', 'ezstring');
        $instance->registerConcreteFieldTypeIdentifier('ezstring');
        $instance->registerFieldType('ezpublish.fieldtype.ezurl', 'ezurl');
        $instance->registerConcreteFieldTypeIdentifier('ezurl');
        $instance->registerFieldType('ezpublish.fieldtype.ezrichtext', 'ezrichtext');
        $instance->registerConcreteFieldTypeIdentifier('ezrichtext');
        $instance->registerFieldType('ezpublish.fieldtype.ezpage', 'ezpage');
        $instance->registerConcreteFieldTypeIdentifier('ezpage');
        $instance->registerFieldType('ezpublish.fieldtype.ezgmaplocation', 'ezgmaplocation');
        $instance->registerConcreteFieldTypeIdentifier('ezgmaplocation');
        $instance->registerFieldType('ezpublish.fieldtype.ezobjectrelationlist', 'ezobjectrelationlist');
        $instance->registerConcreteFieldTypeIdentifier('ezobjectrelationlist');
        $instance->registerFieldType('ezpublish.fieldtype.ezuser', 'ezuser');
        $instance->registerConcreteFieldTypeIdentifier('ezuser');
        $instance->registerFieldType('ezpublish.fieldtype.ezdate', 'ezdate');
        $instance->registerConcreteFieldTypeIdentifier('ezdate');
        $instance->registerFieldType('ezpublish.fieldtype.ezenum', 'ezenum');
        $instance->registerFieldType('ezpublish.fieldtype.ezidentifier', 'ezidentifier');
        $instance->registerFieldType('ezpublish.fieldtype.ezinisetting', 'ezinisetting');
        $instance->registerFieldType('ezpublish.fieldtype.ezmatrix', 'ezmatrix');
        $instance->registerFieldType('ezpublish.fieldtype.ezmultioption', 'ezmultioption');
        $instance->registerFieldType('ezpublish.fieldtype.ezmultioption2', 'ezmultioption2');
        $instance->registerFieldType('ezpublish.fieldtype.ezmultiprice', 'ezmultiprice');
        $instance->registerFieldType('ezpublish.fieldtype.ezoption', 'ezoption');
        $instance->registerFieldType('ezpublish.fieldtype.ezpackage', 'ezpackage');
        $instance->registerFieldType('ezpublish.fieldtype.ezprice', 'ezprice');
        $instance->registerFieldType('ezpublish.fieldtype.ezproductcategory', 'ezproductcategory');
        $instance->registerFieldType('ezpublish.fieldtype.ezrangeoption', 'ezrangeoption');
        $instance->registerFieldType('ezpublish.fieldtype.ezsubtreesubscription', 'ezsubtreesubscription');
        $instance->registerFieldType('ezpublish.fieldtype.eztime', 'eztime');
        $instance->registerConcreteFieldTypeIdentifier('eztime');
        $instance->registerFieldType('ezpublish.fieldtype.ezcomcomments', 'ezcomcomments');
        $instance->registerFieldType('ezpublish.fieldtype.ezpaex', 'ezpaex');
        $instance->registerFieldType('ezpublish.fieldtype.ezsurvey', 'ezsurvey');
        $instance->registerFieldType('ezpublish.fieldtype.eztags', 'eztags');
        $instance->registerFieldType('ezpublish.fieldtype.ezrecommendation', 'ezrecommendation');

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.externalstoragehandler.ezgmaplocation.gateway' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\MapLocation\MapLocationStorage\Gateway\LegacyStorage A eZ\Publish\Core\FieldType\MapLocation\MapLocationStorage\Gateway\LegacyStorage instance.
     */
    protected function getEzpublish_Fieldtype_Externalstoragehandler_Ezgmaplocation_GatewayService()
    {
        return $this->services['ezpublish.fieldtype.externalstoragehandler.ezgmaplocation.gateway'] = new \eZ\Publish\Core\FieldType\MapLocation\MapLocationStorage\Gateway\LegacyStorage();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezauthor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Author\Type A eZ\Publish\Core\FieldType\Author\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzauthorService()
    {
        $this->services['ezpublish.fieldtype.ezauthor'] = $instance = new \eZ\Publish\Core\FieldType\Author\Type();

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezauthor.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\AuthorConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\AuthorConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezauthor_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezauthor.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\AuthorConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezbinarybase.download_url_generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\FieldType\BinaryBase\ContentDownloadUrlGenerator A eZ\Publish\Core\MVC\Symfony\FieldType\BinaryBase\ContentDownloadUrlGenerator instance.
     */
    protected function getEzpublish_Fieldtype_Ezbinarybase_DownloadUrlGeneratorService()
    {
        return $this->services['ezpublish.fieldtype.ezbinarybase.download_url_generator'] = new \eZ\Publish\Core\MVC\Symfony\FieldType\BinaryBase\ContentDownloadUrlGenerator($this->get('ezpublish.chain_router'));
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezbinaryfile' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\BinaryFile\Type A eZ\Publish\Core\FieldType\BinaryFile\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzbinaryfileService()
    {
        $this->services['ezpublish.fieldtype.ezbinaryfile'] = $instance = new \eZ\Publish\Core\FieldType\BinaryFile\Type();

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezbinaryfile.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\BinaryFileConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\BinaryFileConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezbinaryfile_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezbinaryfile.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\BinaryFileConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezbinaryfile.externalstorage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\BinaryFile\BinaryFileStorage A eZ\Publish\Core\FieldType\BinaryFile\BinaryFileStorage instance.
     */
    protected function getEzpublish_Fieldtype_Ezbinaryfile_ExternalstorageService()
    {
        $this->services['ezpublish.fieldtype.ezbinaryfile.externalstorage'] = $instance = new \eZ\Publish\Core\FieldType\BinaryFile\BinaryFileStorage(array(), $this->get('ezpublish.fieldtype.ezbinaryfile.io_service'), $this->get('ezpublish.fieldtype.ezbinaryfile.pathgenerator'), $this->get('ezpublish.core.io.mimetypedetector.fileinfo'));

        $instance->setDownloadUrlGenerator($this->get('ezpublish.fieldtype.ezbinarybase.download_url_generator'));
        $instance->addGateway('LegacyStorage', $this->get('ezpublish.fieldtype.ezbinaryfile.storage_gateway'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezbinaryfile.io_service' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\IO\TolerantIOService A eZ\Publish\Core\IO\TolerantIOService instance.
     */
    public function getEzpublish_Fieldtype_Ezbinaryfile_IoServiceService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.fieldtype.ezbinaryfile.io_service'] = new eZPublishCoreIOTolerantIOService_0000000010d767be00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Fieldtype_Ezbinaryfile_IoServiceService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        $instance = new \eZ\Publish\Core\IO\TolerantIOService($this->get('ezpublish.core.io.metadata_handler'), $this->get('ezpublish.core.io.binarydata_handler'), $this->get('ezpublish.core.io.mimetypedetector.fileinfo'));

        if ($this->has('logger')) {
            $instance->setLogger($this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }
        $instance->setPrefix($this->get("ezpublish.config.resolver")->getParameter("binary_dir", null, null));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezbinaryfile.pathgenerator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\BinaryBase\PathGenerator\LegacyPathGenerator A eZ\Publish\Core\FieldType\BinaryBase\PathGenerator\LegacyPathGenerator instance.
     */
    protected function getEzpublish_Fieldtype_Ezbinaryfile_PathgeneratorService()
    {
        return $this->services['ezpublish.fieldtype.ezbinaryfile.pathgenerator'] = new \eZ\Publish\Core\FieldType\BinaryBase\PathGenerator\LegacyPathGenerator();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezbinaryfile.storage_gateway' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\BinaryFile\BinaryFileStorage\Gateway\LegacyStorage A eZ\Publish\Core\FieldType\BinaryFile\BinaryFileStorage\Gateway\LegacyStorage instance.
     */
    protected function getEzpublish_Fieldtype_Ezbinaryfile_StorageGatewayService()
    {
        return $this->services['ezpublish.fieldtype.ezbinaryfile.storage_gateway'] = new \eZ\Publish\Core\FieldType\BinaryFile\BinaryFileStorage\Gateway\LegacyStorage();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezboolean' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Checkbox\Type A eZ\Publish\Core\FieldType\Checkbox\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzbooleanService()
    {
        $this->services['ezpublish.fieldtype.ezboolean'] = $instance = new \eZ\Publish\Core\FieldType\Checkbox\Type();

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezboolean.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\CheckboxConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\CheckboxConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezboolean_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezboolean.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\CheckboxConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezcomcomments' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Null\Type A eZ\Publish\Core\FieldType\Null\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzcomcommentsService()
    {
        $this->services['ezpublish.fieldtype.ezcomcomments'] = $instance = new \eZ\Publish\Core\FieldType\Null\Type('ezcomcomments');

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezcomcomments.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezcomcomments_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezcomcomments.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezcountry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Country\Type A eZ\Publish\Core\FieldType\Country\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzcountryService()
    {
        $this->services['ezpublish.fieldtype.ezcountry'] = $instance = new \eZ\Publish\Core\FieldType\Country\Type(array('AF' => array('Name' => 'Afghanistan', 'Alpha2' => 'AF', 'Alpha3' => 'AFG', 'IDC' => '93'), 'AX' => array('Name' => 'Åland', 'Alpha2' => 'AX', 'Alpha3' => 'ALA', 'IDC' => '358'), 'AL' => array('Name' => 'Albania', 'Alpha2' => 'AL', 'Alpha3' => 'ALB', 'IDC' => '355'), 'DZ' => array('Name' => 'Algeria', 'Alpha2' => 'DZ', 'Alpha3' => 'DZA', 'IDC' => '213'), 'AS' => array('Name' => 'American Samoa', 'Alpha2' => 'AS', 'Alpha3' => 'ASM', 'IDC' => '1684'), 'AD' => array('Name' => 'Andorra', 'Alpha2' => 'AD', 'Alpha3' => 'AND', 'IDC' => '376'), 'AO' => array('Name' => 'Angola', 'Alpha2' => 'AO', 'Alpha3' => 'AGO', 'IDC' => '244'), 'AI' => array('Name' => 'Anguilla', 'Alpha2' => 'AI', 'Alpha3' => 'AIA', 'IDC' => '1264'), 'AQ' => array('Name' => 'Antarctica', 'Alpha2' => 'AQ', 'Alpha3' => 'ATA', 'IDC' => '672'), 'AG' => array('Name' => 'Antigua and Barbuda', 'Alpha2' => 'AG', 'Alpha3' => 'ATG', 'IDC' => '1268'), 'AR' => array('Name' => 'Argentina', 'Alpha2' => 'AR', 'Alpha3' => 'ARG', 'IDC' => '54'), 'AM' => array('Name' => 'Armenia', 'Alpha2' => 'AM', 'Alpha3' => 'ARM', 'IDC' => '374'), 'AW' => array('Name' => 'Aruba', 'Alpha2' => 'AW', 'Alpha3' => 'ABW', 'IDC' => '297'), 'AU' => array('Name' => 'Australia', 'Alpha2' => 'AU', 'Alpha3' => 'AUS', 'IDC' => '61'), 'AT' => array('Name' => 'Austria', 'Alpha2' => 'AT', 'Alpha3' => 'AUT', 'IDC' => '43'), 'AZ' => array('Name' => 'Azerbaijan', 'Alpha2' => 'AZ', 'Alpha3' => 'AZE', 'IDC' => '994'), 'BS' => array('Name' => 'Bahamas', 'Alpha2' => 'BS', 'Alpha3' => 'BHS', 'IDC' => '1242'), 'BH' => array('Name' => 'Bahrain', 'Alpha2' => 'BH', 'Alpha3' => 'BHR', 'IDC' => '973'), 'BD' => array('Name' => 'Bangladesh', 'Alpha2' => 'BD', 'Alpha3' => 'BGD', 'IDC' => '880'), 'BB' => array('Name' => 'Barbados', 'Alpha2' => 'BB', 'Alpha3' => 'BRB', 'IDC' => '1246'), 'BY' => array('Name' => 'Belarus', 'Alpha2' => 'BY', 'Alpha3' => 'BLR', 'IDC' => '375'), 'BE' => array('Name' => 'Belgium', 'Alpha2' => 'BE', 'Alpha3' => 'BEL', 'IDC' => '32'), 'BZ' => array('Name' => 'Belize', 'Alpha2' => 'BZ', 'Alpha3' => 'BLZ', 'IDC' => '501'), 'BJ' => array('Name' => 'Benin', 'Alpha2' => 'BJ', 'Alpha3' => 'BEN', 'IDC' => '229'), 'BM' => array('Name' => 'Bermuda', 'Alpha2' => 'BM', 'Alpha3' => 'BMU', 'IDC' => '1441'), 'BT' => array('Name' => 'Bhutan', 'Alpha2' => 'BT', 'Alpha3' => 'BTN', 'IDC' => '975'), 'BO' => array('Name' => 'Bolivia', 'Alpha2' => 'BO', 'Alpha3' => 'BOL', 'IDC' => '591'), 'BA' => array('Name' => 'Bosnia and Herzegovina', 'Alpha2' => 'BA', 'Alpha3' => 'BIH', 'IDC' => '387'), 'BW' => array('Name' => 'Botswana', 'Alpha2' => 'BW', 'Alpha3' => 'BWA', 'IDC' => '267'), 'BV' => array('Name' => 'Bouvet Island', 'Alpha2' => 'BV', 'Alpha3' => 'BVT', 'IDC' => '47'), 'BR' => array('Name' => 'Brazil', 'Alpha2' => 'BR', 'Alpha3' => 'BRA', 'IDC' => '55'), 'IO' => array('Name' => 'British Indian Ocean Territory', 'Alpha2' => 'IO', 'Alpha3' => 'IOT', 'IDC' => '246'), 'BN' => array('Name' => 'Brunei Darussalam', 'Alpha2' => 'BN', 'Alpha3' => 'BRN', 'IDC' => '673'), 'BG' => array('Name' => 'Bulgaria', 'Alpha2' => 'BG', 'Alpha3' => 'BGR', 'IDC' => '359'), 'BF' => array('Name' => 'Burkina Faso', 'Alpha2' => 'BF', 'Alpha3' => 'BFA', 'IDC' => '226'), 'BI' => array('Name' => 'Burundi', 'Alpha2' => 'BI', 'Alpha3' => 'BDI', 'IDC' => '257'), 'KH' => array('Name' => 'Cambodia', 'Alpha2' => 'KH', 'Alpha3' => 'KHM', 'IDC' => '855'), 'CM' => array('Name' => 'Cameroon', 'Alpha2' => 'CM', 'Alpha3' => 'CMR', 'IDC' => '237'), 'CA' => array('Name' => 'Canada', 'Alpha2' => 'CA', 'Alpha3' => 'CAN', 'IDC' => '1'), 'CV' => array('Name' => 'Cape Verde', 'Alpha2' => 'CV', 'Alpha3' => 'CPV', 'IDC' => '238'), 'KY' => array('Name' => 'Cayman Islands', 'Alpha2' => 'KY', 'Alpha3' => 'CYM', 'IDC' => '1345'), 'CF' => array('Name' => 'Central African Republic', 'Alpha2' => 'CF', 'Alpha3' => 'CAF', 'IDC' => '236'), 'TD' => array('Name' => 'Chad', 'Alpha2' => 'TD', 'Alpha3' => 'TCD', 'IDC' => '235'), 'CL' => array('Name' => 'Chile', 'Alpha2' => 'CL', 'Alpha3' => 'CHL', 'IDC' => '56'), 'CN' => array('Name' => 'China', 'Alpha2' => 'CN', 'Alpha3' => 'CHN', 'IDC' => '86'), 'CX' => array('Name' => 'Christmas Island', 'Alpha2' => 'CX', 'Alpha3' => 'CXR', 'IDC' => '61'), 'CC' => array('Name' => 'Cocos (Keeling) Islands', 'Alpha2' => 'CC', 'Alpha3' => 'CCK', 'IDC' => '61'), 'CO' => array('Name' => 'Colombia', 'Alpha2' => 'CO', 'Alpha3' => 'COL', 'IDC' => '57'), 'KM' => array('Name' => 'Comoros', 'Alpha2' => 'KM', 'Alpha3' => 'COM', 'IDC' => '269'), 'CG' => array('Name' => 'Congo', 'Alpha2' => 'CG', 'Alpha3' => 'COG', 'IDC' => '242'), 'CD' => array('Name' => 'Congo, The Democratic Republic Of The', 'Alpha2' => 'CD', 'Alpha3' => 'COD', 'IDC' => '243'), 'CK' => array('Name' => 'Cook Islands', 'Alpha2' => 'CK', 'Alpha3' => 'COK', 'IDC' => '682'), 'CR' => array('Name' => 'Costa Rica', 'Alpha2' => 'CR', 'Alpha3' => 'CRI', 'IDC' => '506'), 'CI' => array('Name' => 'Côte d\'Ivoire', 'Alpha2' => 'CI', 'Alpha3' => 'CIV', 'IDC' => '225'), 'HR' => array('Name' => 'Croatia', 'Alpha2' => 'HR', 'Alpha3' => 'HRV', 'IDC' => '385'), 'CU' => array('Name' => 'Cuba', 'Alpha2' => 'CU', 'Alpha3' => 'CUB', 'IDC' => '53'), 'CY' => array('Name' => 'Cyprus', 'Alpha2' => 'CY', 'Alpha3' => 'CYP', 'IDC' => '357'), 'CZ' => array('Name' => 'Czech Republic', 'Alpha2' => 'CZ', 'Alpha3' => 'CZE', 'IDC' => '420'), 'DK' => array('Name' => 'Denmark', 'Alpha2' => 'DK', 'Alpha3' => 'DNK', 'IDC' => '45'), 'DJ' => array('Name' => 'Djibouti', 'Alpha2' => 'DJ', 'Alpha3' => 'DJI', 'IDC' => '253'), 'DM' => array('Name' => 'Dominica', 'Alpha2' => 'DM', 'Alpha3' => 'DMA', 'IDC' => '1767'), 'DO' => array('Name' => 'Dominican Republic', 'Alpha2' => 'DO', 'Alpha3' => 'DOM', 'IDC' => '1809'), 'EC' => array('Name' => 'Ecuador', 'Alpha2' => 'EC', 'Alpha3' => 'ECU', 'IDC' => '593'), 'EG' => array('Name' => 'Egypt', 'Alpha2' => 'EG', 'Alpha3' => 'EGY', 'IDC' => '20'), 'SV' => array('Name' => 'El Salvador', 'Alpha2' => 'SV', 'Alpha3' => 'SLV', 'IDC' => '503'), 'GQ' => array('Name' => 'Equatorial Guinea', 'Alpha2' => 'GQ', 'Alpha3' => 'GNQ', 'IDC' => '240'), 'ER' => array('Name' => 'Eritrea', 'Alpha2' => 'ER', 'Alpha3' => 'ERI', 'IDC' => '291'), 'EE' => array('Name' => 'Estonia', 'Alpha2' => 'EE', 'Alpha3' => 'EST', 'IDC' => '372'), 'ET' => array('Name' => 'Ethiopia', 'Alpha2' => 'ET', 'Alpha3' => 'ETH', 'IDC' => '251'), 'FK' => array('Name' => 'Falkland Islands (Malvinas)', 'Alpha2' => 'FK', 'Alpha3' => 'FLK', 'IDC' => '500'), 'FO' => array('Name' => 'Faroe Islands', 'Alpha2' => 'FO', 'Alpha3' => 'FRO', 'IDC' => '298'), 'FJ' => array('Name' => 'Fiji', 'Alpha2' => 'FJ', 'Alpha3' => 'FJI', 'IDC' => '679'), 'FI' => array('Name' => 'Finland', 'Alpha2' => 'FI', 'Alpha3' => 'FIN', 'IDC' => '358'), 'FR' => array('Name' => 'France', 'Alpha2' => 'FR', 'Alpha3' => 'FRA', 'IDC' => '33'), 'GF' => array('Name' => 'French Guiana', 'Alpha2' => 'GF', 'Alpha3' => 'GUF', 'IDC' => '594'), 'PF' => array('Name' => 'French Polynesia', 'Alpha2' => 'PF', 'Alpha3' => 'PYF', 'IDC' => '689'), 'TF' => array('Name' => 'French Southern Territories', 'Alpha2' => 'TF', 'Alpha3' => 'ATF', 'IDC' => '0'), 'GA' => array('Name' => 'Gabon', 'Alpha2' => 'GA', 'Alpha3' => 'GAB', 'IDC' => '241'), 'GM' => array('Name' => 'Gambia', 'Alpha2' => 'GM', 'Alpha3' => 'GMB', 'IDC' => '220'), 'GE' => array('Name' => 'Georgia', 'Alpha2' => 'GE', 'Alpha3' => 'GEO', 'IDC' => '995'), 'DE' => array('Name' => 'Germany', 'Alpha2' => 'DE', 'Alpha3' => 'DEU', 'IDC' => '49'), 'GH' => array('Name' => 'Ghana', 'Alpha2' => 'GH', 'Alpha3' => 'GHA', 'IDC' => '233'), 'GI' => array('Name' => 'Gibraltar', 'Alpha2' => 'GI', 'Alpha3' => 'GIB', 'IDC' => '350'), 'GR' => array('Name' => 'Greece', 'Alpha2' => 'GR', 'Alpha3' => 'GRC', 'IDC' => '30'), 'GL' => array('Name' => 'Greenland', 'Alpha2' => 'GL', 'Alpha3' => 'GRL', 'IDC' => '299'), 'GD' => array('Name' => 'Grenada', 'Alpha2' => 'GD', 'Alpha3' => 'GRD', 'IDC' => '1473'), 'GP' => array('Name' => 'Guadeloupe', 'Alpha2' => 'GP', 'Alpha3' => 'GLP', 'IDC' => '590'), 'GU' => array('Name' => 'Guam', 'Alpha2' => 'GU', 'Alpha3' => 'GUM', 'IDC' => '1671'), 'GT' => array('Name' => 'Guatemala', 'Alpha2' => 'GT', 'Alpha3' => 'GTM', 'IDC' => '502'), 'GG' => array('Name' => 'Guernsey', 'Alpha2' => 'GG', 'Alpha3' => 'GGY', 'IDC' => '44'), 'GN' => array('Name' => 'Guinea', 'Alpha2' => 'GN', 'Alpha3' => 'GIN', 'IDC' => '224'), 'GW' => array('Name' => 'Guinea-Bissau', 'Alpha2' => 'GW', 'Alpha3' => 'GNB', 'IDC' => '245'), 'GY' => array('Name' => 'Guyana', 'Alpha2' => 'GY', 'Alpha3' => 'GUY', 'IDC' => '592'), 'HT' => array('Name' => 'Haiti', 'Alpha2' => 'HT', 'Alpha3' => 'HTI', 'IDC' => '509'), 'HM' => array('Name' => 'Heard Island and McDonald Islands', 'Alpha2' => 'HM', 'Alpha3' => 'HMD', 'IDC' => '672'), 'HN' => array('Name' => 'Honduras', 'Alpha2' => 'HN', 'Alpha3' => 'HND', 'IDC' => '504'), 'HK' => array('Name' => 'Hong Kong', 'Alpha2' => 'HK', 'Alpha3' => 'HKG', 'IDC' => '852'), 'HU' => array('Name' => 'Hungary', 'Alpha2' => 'HU', 'Alpha3' => 'HUN', 'IDC' => '36'), 'IS' => array('Name' => 'Iceland', 'Alpha2' => 'IS', 'Alpha3' => 'ISL', 'IDC' => '354'), 'IN' => array('Name' => 'India', 'Alpha2' => 'IN', 'Alpha3' => 'IND', 'IDC' => '91'), 'ID' => array('Name' => 'Indonesia', 'Alpha2' => 'ID', 'Alpha3' => 'IDN', 'IDC' => '62'), 'IR' => array('Name' => 'Iran, Islamic Republic of', 'Alpha2' => 'IR', 'Alpha3' => 'IRN', 'IDC' => '98'), 'IQ' => array('Name' => 'Iraq', 'Alpha2' => 'IQ', 'Alpha3' => 'IRQ', 'IDC' => '964'), 'IE' => array('Name' => 'Ireland', 'Alpha2' => 'IE', 'Alpha3' => 'IRL', 'IDC' => '353'), 'IM' => array('Name' => 'Isle of Man', 'Alpha2' => 'IM', 'Alpha3' => 'IMN', 'IDC' => '44'), 'IL' => array('Name' => 'Israel', 'Alpha2' => 'IL', 'Alpha3' => 'ISR', 'IDC' => '972'), 'IT' => array('Name' => 'Italy', 'Alpha2' => 'IT', 'Alpha3' => 'ITA', 'IDC' => '39'), 'JM' => array('Name' => 'Jamaica', 'Alpha2' => 'JM', 'Alpha3' => 'JAM', 'IDC' => '1876'), 'JP' => array('Name' => 'Japan', 'Alpha2' => 'JP', 'Alpha3' => 'JPN', 'IDC' => '81'), 'JE' => array('Name' => 'Jersey', 'Alpha2' => 'JE', 'Alpha3' => 'JEY', 'IDC' => '44'), 'JO' => array('Name' => 'Jordan', 'Alpha2' => 'JO', 'Alpha3' => 'JOR', 'IDC' => '962'), 'KZ' => array('Name' => 'Kazakhstan', 'Alpha2' => 'KZ', 'Alpha3' => 'KAZ', 'IDC' => '7'), 'KE' => array('Name' => 'Kenya', 'Alpha2' => 'KE', 'Alpha3' => 'KEN', 'IDC' => '254'), 'KI' => array('Name' => 'Kiribati', 'Alpha2' => 'KI', 'Alpha3' => 'KIR', 'IDC' => '686'), 'KP' => array('Name' => 'Korea, Democratic People\'s Republic of', 'Alpha2' => 'KP', 'Alpha3' => 'PRK', 'IDC' => '850'), 'KR' => array('Name' => 'Korea, Republic of', 'Alpha2' => 'KR', 'Alpha3' => 'KOR', 'IDC' => '82'), 'KW' => array('Name' => 'Kuwait', 'Alpha2' => 'KW', 'Alpha3' => 'KWT', 'IDC' => '965'), 'KG' => array('Name' => 'Kyrgyzstan', 'Alpha2' => 'KG', 'Alpha3' => 'KGZ', 'IDC' => '996'), 'LA' => array('Name' => 'Lao People\'s Democratic Republic', 'Alpha2' => 'LA', 'Alpha3' => 'LAO', 'IDC' => '856'), 'LV' => array('Name' => 'Latvia', 'Alpha2' => 'LV', 'Alpha3' => 'LVA', 'IDC' => '371'), 'LB' => array('Name' => 'Lebanon', 'Alpha2' => 'LB', 'Alpha3' => 'LBN', 'IDC' => '961'), 'LS' => array('Name' => 'Lesotho', 'Alpha2' => 'LS', 'Alpha3' => 'LSO', 'IDC' => '266'), 'LR' => array('Name' => 'Liberia', 'Alpha2' => 'LR', 'Alpha3' => 'LBR', 'IDC' => '231'), 'LY' => array('Name' => 'Libyan Arab Jamahiriya', 'Alpha2' => 'LY', 'Alpha3' => 'LBY', 'IDC' => '218'), 'LI' => array('Name' => 'Liechtenstein', 'Alpha2' => 'LI', 'Alpha3' => 'LIE', 'IDC' => '423'), 'LT' => array('Name' => 'Lithuania', 'Alpha2' => 'LT', 'Alpha3' => 'LTU', 'IDC' => '370'), 'LU' => array('Name' => 'Luxembourg', 'Alpha2' => 'LU', 'Alpha3' => 'LUX', 'IDC' => '352'), 'MO' => array('Name' => 'Macau', 'Alpha2' => 'MO', 'Alpha3' => 'MAC', 'IDC' => '853'), 'MK' => array('Name' => 'Macedonia, The Former Yugoslav Republic of', 'Alpha2' => 'MK', 'Alpha3' => 'MKD', 'IDC' => '389'), 'MG' => array('Name' => 'Madagascar', 'Alpha2' => 'MG', 'Alpha3' => 'MDG', 'IDC' => '261'), 'MW' => array('Name' => 'Malawi', 'Alpha2' => 'MW', 'Alpha3' => 'MWI', 'IDC' => '265'), 'MY' => array('Name' => 'Malaysia', 'Alpha2' => 'MY', 'Alpha3' => 'MYS', 'IDC' => '60'), 'MV' => array('Name' => 'Maldives', 'Alpha2' => 'MV', 'Alpha3' => 'MDV', 'IDC' => '960'), 'ML' => array('Name' => 'Mali', 'Alpha2' => 'ML', 'Alpha3' => 'MLI', 'IDC' => '223'), 'MT' => array('Name' => 'Malta', 'Alpha2' => 'MT', 'Alpha3' => 'MLT', 'IDC' => '356'), 'MH' => array('Name' => 'Marshall Islands', 'Alpha2' => 'MH', 'Alpha3' => 'MHL', 'IDC' => '692'), 'MQ' => array('Name' => 'Martinique', 'Alpha2' => 'MQ', 'Alpha3' => 'MTQ', 'IDC' => '596'), 'MR' => array('Name' => 'Mauritania', 'Alpha2' => 'MR', 'Alpha3' => 'MRT', 'IDC' => '222'), 'MU' => array('Name' => 'Mauritius', 'Alpha2' => 'MU', 'Alpha3' => 'MUS', 'IDC' => '230'), 'YT' => array('Name' => 'Mayotte', 'Alpha2' => 'YT', 'Alpha3' => 'MYT', 'IDC' => '262'), 'MX' => array('Name' => 'Mexico', 'Alpha2' => 'MX', 'Alpha3' => 'MEX', 'IDC' => '52'), 'FM' => array('Name' => 'Micronesia, Federated States of', 'Alpha2' => 'FM', 'Alpha3' => 'FSM', 'IDC' => '691'), 'MD' => array('Name' => 'Moldova, Republic of', 'Alpha2' => 'MD', 'Alpha3' => 'MDA', 'IDC' => '373'), 'MC' => array('Name' => 'Monaco', 'Alpha2' => 'MC', 'Alpha3' => 'MCO', 'IDC' => '377'), 'MN' => array('Name' => 'Mongolia', 'Alpha2' => 'MN', 'Alpha3' => 'MNG', 'IDC' => '976'), 'ME' => array('Name' => 'Montenegro', 'Alpha2' => 'ME', 'Alpha3' => 'MNE', 'IDC' => '382'), 'MS' => array('Name' => 'Montserrat', 'Alpha2' => 'MS', 'Alpha3' => 'MSR', 'IDC' => '1664'), 'MA' => array('Name' => 'Morocco', 'Alpha2' => 'MA', 'Alpha3' => 'MAR', 'IDC' => '212'), 'MZ' => array('Name' => 'Mozambique', 'Alpha2' => 'MZ', 'Alpha3' => 'MOZ', 'IDC' => '258'), 'MM' => array('Name' => 'Myanmar', 'Alpha2' => 'MM', 'Alpha3' => 'MMR', 'IDC' => '95'), 'NA' => array('Name' => 'Namibia', 'Alpha2' => 'NA', 'Alpha3' => 'NAM', 'IDC' => '264'), 'NR' => array('Name' => 'Nauru', 'Alpha2' => 'NR', 'Alpha3' => 'NRU', 'IDC' => '674'), 'NP' => array('Name' => 'Nepal', 'Alpha2' => 'NP', 'Alpha3' => 'NPL', 'IDC' => '977'), 'NL' => array('Name' => 'Netherlands', 'Alpha2' => 'NL', 'Alpha3' => 'NLD', 'IDC' => '31'), 'AN' => array('Name' => 'Netherlands Antilles', 'Alpha2' => 'AN', 'Alpha3' => 'ANT', 'IDC' => '599'), 'NC' => array('Name' => 'New Caledonia', 'Alpha2' => 'NC', 'Alpha3' => 'NCL', 'IDC' => '687'), 'NZ' => array('Name' => 'New Zealand', 'Alpha2' => 'NZ', 'Alpha3' => 'NZL', 'IDC' => '64'), 'NI' => array('Name' => 'Nicaragua', 'Alpha2' => 'NI', 'Alpha3' => 'NIC', 'IDC' => '505'), 'NE' => array('Name' => 'Niger', 'Alpha2' => 'NE', 'Alpha3' => 'NER', 'IDC' => '227'), 'NG' => array('Name' => 'Nigeria', 'Alpha2' => 'NG', 'Alpha3' => 'NGA', 'IDC' => '234'), 'NU' => array('Name' => 'Niue', 'Alpha2' => 'NU', 'Alpha3' => 'NIU', 'IDC' => '683'), 'NF' => array('Name' => 'Norfolk Island', 'Alpha2' => 'NF', 'Alpha3' => 'NFK', 'IDC' => '6723'), 'MP' => array('Name' => 'Northern Mariana Islands', 'Alpha2' => 'MP', 'Alpha3' => 'MNP', 'IDC' => '1670'), 'NO' => array('Name' => 'Norway', 'Alpha2' => 'NO', 'Alpha3' => 'NOR', 'IDC' => '47'), 'OM' => array('Name' => 'Oman', 'Alpha2' => 'OM', 'Alpha3' => 'OMN', 'IDC' => '968'), 'PK' => array('Name' => 'Pakistan', 'Alpha2' => 'PK', 'Alpha3' => 'PAK', 'IDC' => '92'), 'PW' => array('Name' => 'Palau', 'Alpha2' => 'PW', 'Alpha3' => 'PLW', 'IDC' => '680'), 'PS' => array('Name' => 'Palestinian Territory, Occupied', 'Alpha2' => 'PS', 'Alpha3' => 'PSE', 'IDC' => '970'), 'PA' => array('Name' => 'Panama', 'Alpha2' => 'PA', 'Alpha3' => 'PAN', 'IDC' => '507'), 'PG' => array('Name' => 'Papua New Guinea', 'Alpha2' => 'PG', 'Alpha3' => 'PNG', 'IDC' => '675'), 'PY' => array('Name' => 'Paraguay', 'Alpha2' => 'PY', 'Alpha3' => 'PRY', 'IDC' => '595'), 'PE' => array('Name' => 'Peru', 'Alpha2' => 'PE', 'Alpha3' => 'PER', 'IDC' => '51'), 'PH' => array('Name' => 'Philippines', 'Alpha2' => 'PH', 'Alpha3' => 'PHL', 'IDC' => '63'), 'PN' => array('Name' => 'Pitcairn', 'Alpha2' => 'PN', 'Alpha3' => 'PCN', 'IDC' => '64'), 'PL' => array('Name' => 'Poland', 'Alpha2' => 'PL', 'Alpha3' => 'POL', 'IDC' => '48'), 'PT' => array('Name' => 'Portugal', 'Alpha2' => 'PT', 'Alpha3' => 'PRT', 'IDC' => '351'), 'PR' => array('Name' => 'Puerto Rico', 'Alpha2' => 'PR', 'Alpha3' => 'PRI', 'IDC' => '1787'), 'QA' => array('Name' => 'Qatar', 'Alpha2' => 'QA', 'Alpha3' => 'QAT', 'IDC' => '974'), 'RE' => array('Name' => 'Reunion', 'Alpha2' => 'RE', 'Alpha3' => 'REU', 'IDC' => '262'), 'RO' => array('Name' => 'Romania', 'Alpha2' => 'RO', 'Alpha3' => 'ROU', 'IDC' => '40'), 'RU' => array('Name' => 'Russian Federation', 'Alpha2' => 'RU', 'Alpha3' => 'RUS', 'IDC' => '7'), 'RW' => array('Name' => 'Rwanda', 'Alpha2' => 'RW', 'Alpha3' => 'RWA', 'IDC' => '250'), 'BL' => array('Name' => 'Saint Barthélemy', 'Alpha2' => 'BL', 'Alpha3' => 'BLM', 'IDC' => '590'), 'SH' => array('Name' => 'Saint Helena', 'Alpha2' => 'SH', 'Alpha3' => 'SHN', 'IDC' => '290'), 'KN' => array('Name' => 'Saint Kitts and Nevis', 'Alpha2' => 'KN', 'Alpha3' => 'KNA', 'IDC' => '1869'), 'LC' => array('Name' => 'Saint Lucia', 'Alpha2' => 'LC', 'Alpha3' => 'LCA', 'IDC' => '1758'), 'MF' => array('Name' => 'Saint Martin', 'Alpha2' => 'MF', 'Alpha3' => 'MAF', 'IDC' => '590'), 'PM' => array('Name' => 'Saint Pierre and Miquelon', 'Alpha2' => 'PM', 'Alpha3' => 'SPM', 'IDC' => '508'), 'VC' => array('Name' => 'Saint Vincent and The Grenadines', 'Alpha2' => 'VC', 'Alpha3' => 'VCT', 'IDC' => '1784'), 'WS' => array('Name' => 'Samoa', 'Alpha2' => 'WS', 'Alpha3' => 'WSM', 'IDC' => '685'), 'SM' => array('Name' => 'San Marino', 'Alpha2' => 'SM', 'Alpha3' => 'SMR', 'IDC' => '378'), 'ST' => array('Name' => 'Sao Tome and Principe', 'Alpha2' => 'ST', 'Alpha3' => 'STP', 'IDC' => '239'), 'SA' => array('Name' => 'Saudi Arabia', 'Alpha2' => 'SA', 'Alpha3' => 'SAU', 'IDC' => '966'), 'SN' => array('Name' => 'Senegal', 'Alpha2' => 'SN', 'Alpha3' => 'SEN', 'IDC' => '221'), 'RS' => array('Name' => 'Serbia', 'Alpha2' => 'RS', 'Alpha3' => 'SRB', 'IDC' => '381'), 'SC' => array('Name' => 'Seychelles', 'Alpha2' => 'SC', 'Alpha3' => 'SYC', 'IDC' => '248'), 'SL' => array('Name' => 'Sierra Leone', 'Alpha2' => 'SL', 'Alpha3' => 'SLE', 'IDC' => '232'), 'SG' => array('Name' => 'Singapore', 'Alpha2' => 'SG', 'Alpha3' => 'SGP', 'IDC' => '65'), 'SK' => array('Name' => 'Slovakia', 'Alpha2' => 'SK', 'Alpha3' => 'SVK', 'IDC' => '421'), 'SI' => array('Name' => 'Slovenia', 'Alpha2' => 'SI', 'Alpha3' => 'SVN', 'IDC' => '386'), 'SB' => array('Name' => 'Solomon Islands', 'Alpha2' => 'SB', 'Alpha3' => 'SLB', 'IDC' => '677'), 'SO' => array('Name' => 'Somalia', 'Alpha2' => 'SO', 'Alpha3' => 'SOM', 'IDC' => '252'), 'ZA' => array('Name' => 'South Africa', 'Alpha2' => 'ZA', 'Alpha3' => 'ZAF', 'IDC' => '27'), 'GS' => array('Name' => 'South Georgia and The South Sandwich Islands', 'Alpha2' => 'GS', 'Alpha3' => 'SGS', 'IDC' => '500'), 'ES' => array('Name' => 'Spain', 'Alpha2' => 'ES', 'Alpha3' => 'ESP', 'IDC' => '34'), 'LK' => array('Name' => 'Sri Lanka', 'Alpha2' => 'LK', 'Alpha3' => 'LKA', 'IDC' => '94'), 'SD' => array('Name' => 'Sudan', 'Alpha2' => 'SD', 'Alpha3' => 'SDN', 'IDC' => '249'), 'SR' => array('Name' => 'Suriname', 'Alpha2' => 'SR', 'Alpha3' => 'SUR', 'IDC' => '597'), 'SJ' => array('Name' => 'Svalbard and Jan Mayen', 'Alpha2' => 'SJ', 'Alpha3' => 'SJM', 'IDC' => '47'), 'SZ' => array('Name' => 'Swaziland', 'Alpha2' => 'SZ', 'Alpha3' => 'SWZ', 'IDC' => '268'), 'SE' => array('Name' => 'Sweden', 'Alpha2' => 'SE', 'Alpha3' => 'SWE', 'IDC' => '46'), 'CH' => array('Name' => 'Switzerland', 'Alpha2' => 'CH', 'Alpha3' => 'CHE', 'IDC' => '41'), 'SY' => array('Name' => 'Syrian Arab Republic', 'Alpha2' => 'SY', 'Alpha3' => 'SYR', 'IDC' => '963'), 'TW' => array('Name' => 'Taiwan', 'Alpha2' => 'TW', 'Alpha3' => 'TWN', 'IDC' => '886'), 'TJ' => array('Name' => 'Tajikistan', 'Alpha2' => 'TJ', 'Alpha3' => 'TJK', 'IDC' => '992'), 'TZ' => array('Name' => 'Tanzania, United Republic of', 'Alpha2' => 'TZ', 'Alpha3' => 'TZA', 'IDC' => '255'), 'TH' => array('Name' => 'Thailand', 'Alpha2' => 'TH', 'Alpha3' => 'THA', 'IDC' => '66'), 'TL' => array('Name' => 'Timor-Leste', 'Alpha2' => 'TL', 'Alpha3' => 'TLS', 'IDC' => '670'), 'TG' => array('Name' => 'Togo', 'Alpha2' => 'TG', 'Alpha3' => 'TGO', 'IDC' => '228'), 'TK' => array('Name' => 'Tokelau', 'Alpha2' => 'TK', 'Alpha3' => 'TKL', 'IDC' => '690'), 'TO' => array('Name' => 'Tonga', 'Alpha2' => 'TO', 'Alpha3' => 'TON', 'IDC' => '676'), 'TT' => array('Name' => 'Trinidad and Tobago', 'Alpha2' => 'TT', 'Alpha3' => 'TTO', 'IDC' => '1868'), 'TN' => array('Name' => 'Tunisia', 'Alpha2' => 'TN', 'Alpha3' => 'TUN', 'IDC' => '216'), 'TR' => array('Name' => 'Turkey', 'Alpha2' => 'TR', 'Alpha3' => 'TUR', 'IDC' => '90'), 'TM' => array('Name' => 'Turkmenistan', 'Alpha2' => 'TM', 'Alpha3' => 'TKM', 'IDC' => '993'), 'TC' => array('Name' => 'Turks and Caicos Islands', 'Alpha2' => 'TC', 'Alpha3' => 'TCA', 'IDC' => '1649'), 'TV' => array('Name' => 'Tuvalu', 'Alpha2' => 'TV', 'Alpha3' => 'TUV', 'IDC' => '688'), 'UG' => array('Name' => 'Uganda', 'Alpha2' => 'UG', 'Alpha3' => 'UGA', 'IDC' => '256'), 'UA' => array('Name' => 'Ukraine', 'Alpha2' => 'UA', 'Alpha3' => 'UKR', 'IDC' => '380'), 'AE' => array('Name' => 'United Arab Emirates', 'Alpha2' => 'AE', 'Alpha3' => 'ARE', 'IDC' => '971'), 'GB' => array('Name' => 'United Kingdom', 'Alpha2' => 'GB', 'Alpha3' => 'GBR', 'IDC' => '44'), 'UM' => array('Name' => 'United States Minor Outlying Islands', 'Alpha2' => 'UM', 'Alpha3' => 'UMI', 'IDC' => '1'), 'US' => array('Name' => 'United States of America', 'Alpha2' => 'US', 'Alpha3' => 'USA', 'IDC' => '1'), 'UY' => array('Name' => 'Uruguay', 'Alpha2' => 'UY', 'Alpha3' => 'URY', 'IDC' => '598'), 'UZ' => array('Name' => 'Uzbekistan', 'Alpha2' => 'UZ', 'Alpha3' => 'UZB', 'IDC' => '998'), 'VU' => array('Name' => 'Vanuatu', 'Alpha2' => 'VU', 'Alpha3' => 'VUT', 'IDC' => '678'), 'VA' => array('Name' => 'Holy See (Vatican City State)', 'Alpha2' => 'VA', 'Alpha3' => 'VAT', 'IDC' => '3906'), 'VE' => array('Name' => 'Venezuela', 'Alpha2' => 'VE', 'Alpha3' => 'VEN', 'IDC' => '58'), 'VN' => array('Name' => 'Viet Nam', 'Alpha2' => 'VN', 'Alpha3' => 'VNM', 'IDC' => '84'), 'VG' => array('Name' => 'Virgin Islands, British', 'Alpha2' => 'VG', 'Alpha3' => 'VGB', 'IDC' => '1284'), 'VI' => array('Name' => 'Virgin Islands, U.S.', 'Alpha2' => 'VI', 'Alpha3' => 'VIR', 'IDC' => '1340'), 'WF' => array('Name' => 'Wallis and Futuna', 'Alpha2' => 'WF', 'Alpha3' => 'WLF', 'IDC' => '681'), 'EH' => array('Name' => 'Western Sahara', 'Alpha2' => 'EH', 'Alpha3' => 'ESH', 'IDC' => '212'), 'YE' => array('Name' => 'Yemen', 'Alpha2' => 'YE', 'Alpha3' => 'YEM', 'IDC' => '967'), 'ZM' => array('Name' => 'Zambia', 'Alpha2' => 'ZM', 'Alpha3' => 'ZMB', 'IDC' => '260'), 'ZW' => array('Name' => 'Zimbabwe', 'Alpha2' => 'ZW', 'Alpha3' => 'ZWE', 'IDC' => '263')));

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezcountry.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\CountryConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\CountryConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezcountry_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezcountry.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\CountryConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezdate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Date\Type A eZ\Publish\Core\FieldType\Date\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzdateService()
    {
        $this->services['ezpublish.fieldtype.ezdate'] = $instance = new \eZ\Publish\Core\FieldType\Date\Type('ezdate');

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezdate.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\DateConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\DateConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezdate_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezdate.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\DateConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezdatetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\DateAndTime\Type A eZ\Publish\Core\FieldType\DateAndTime\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzdatetimeService()
    {
        $this->services['ezpublish.fieldtype.ezdatetime'] = $instance = new \eZ\Publish\Core\FieldType\DateAndTime\Type();

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezdatetime.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\DateAndTimeConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\DateAndTimeConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezdatetime_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezdatetime.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\DateAndTimeConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezdatetime.parameterprovider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\FieldType\View\ParameterProvider\LocaleParameterProvider A eZ\Publish\Core\MVC\Symfony\FieldType\View\ParameterProvider\LocaleParameterProvider instance.
     */
    protected function getEzpublish_Fieldtype_Ezdatetime_ParameterproviderService()
    {
        $this->services['ezpublish.fieldtype.ezdatetime.parameterprovider'] = $instance = new \eZ\Publish\Core\MVC\Symfony\FieldType\View\ParameterProvider\LocaleParameterProvider($this->get('ezpublish.locale.converter'));

        $instance->setRequestStack($this->get('request_stack'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezemail' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\EmailAddress\Type A eZ\Publish\Core\FieldType\EmailAddress\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzemailService()
    {
        $this->services['ezpublish.fieldtype.ezemail'] = $instance = new \eZ\Publish\Core\FieldType\EmailAddress\Type();

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezemail.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\EmailAddressConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\EmailAddressConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezemail_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezemail.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\EmailAddressConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezenum' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Null\Type A eZ\Publish\Core\FieldType\Null\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzenumService()
    {
        $this->services['ezpublish.fieldtype.ezenum'] = $instance = new \eZ\Publish\Core\FieldType\Null\Type('ezenum');

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezenum.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezenum_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezenum.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezfloat' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Float\Type A eZ\Publish\Core\FieldType\Float\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzfloatService()
    {
        $this->services['ezpublish.fieldtype.ezfloat'] = $instance = new \eZ\Publish\Core\FieldType\Float\Type();

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezfloat.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\FloatConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\FloatConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezfloat_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezfloat.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\FloatConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezgmaplocation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\MapLocation\Type A eZ\Publish\Core\FieldType\MapLocation\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzgmaplocationService()
    {
        $this->services['ezpublish.fieldtype.ezgmaplocation'] = $instance = new \eZ\Publish\Core\FieldType\MapLocation\Type();

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezgmaplocation.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\MapLocationConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\MapLocationConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezgmaplocation_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezgmaplocation.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\MapLocationConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezgmaplocation.externalstorage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\MapLocation\MapLocationStorage A eZ\Publish\Core\FieldType\MapLocation\MapLocationStorage instance.
     */
    protected function getEzpublish_Fieldtype_Ezgmaplocation_ExternalstorageService()
    {
        $this->services['ezpublish.fieldtype.ezgmaplocation.externalstorage'] = $instance = new \eZ\Publish\Core\FieldType\MapLocation\MapLocationStorage();

        $instance->addGateway('LegacyStorage', $this->get('ezpublish.fieldtype.externalstoragehandler.ezgmaplocation.gateway'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezidentifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Null\Type A eZ\Publish\Core\FieldType\Null\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzidentifierService()
    {
        $this->services['ezpublish.fieldtype.ezidentifier'] = $instance = new \eZ\Publish\Core\FieldType\Null\Type('ezidentifier');

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezidentifier.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezidentifier_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezidentifier.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezimage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Image\Type A eZ\Publish\Core\FieldType\Image\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzimageService()
    {
        $this->services['ezpublish.fieldtype.ezimage'] = $instance = new \eZ\Publish\Core\FieldType\Image\Type();

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezimage.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\ImageConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\ImageConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezimage_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezimage.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\ImageConverter($this->get('ezpublish.fieldtype.ezimage.io_service'), $this->get('ezpublish.core.io.image_fieldtype.legacy_url_redecorator'));
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezimage.externalstorage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Image\ImageStorage A eZ\Publish\Core\FieldType\Image\ImageStorage instance.
     */
    protected function getEzpublish_Fieldtype_Ezimage_ExternalstorageService()
    {
        $this->services['ezpublish.fieldtype.ezimage.externalstorage'] = $instance = new \eZ\Publish\Core\FieldType\Image\ImageStorage(array(), $this->get('ezpublish.fieldtype.ezimage.io_service'), $this->get('ezpublish.fieldtype.ezimage.pathgenerator'), $this->get('ezpublish.fieldtype.metadatahandler.imagesize'), $this->get('ezpublish.utils.deprecation_warner'), $this->get('ezpublish.image_alias.imagine.alias_cleaner', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->addGateway('LegacyStorage', $this->get('ezpublish.fieldtype.ezimage.storage_gateway'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezimage.io_service' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\FieldType\Image\IO\Legacy A eZ\Publish\Core\FieldType\Image\IO\Legacy instance.
     */
    public function getEzpublish_Fieldtype_Ezimage_IoServiceService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.fieldtype.ezimage.io_service'] = new eZPublishCoreFieldTypeImageIOLegacy_0000000010d7706800007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Fieldtype_Ezimage_IoServiceService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \eZ\Publish\Core\FieldType\Image\IO\Legacy($this->get('ezpublish.fieldtype.ezimage.io_service.published'), $this->get('ezpublish.fieldtype.ezimage.io_service.draft'), $this->get('ezpublish.fieldtype.ezimage.io_service.options_provider'));
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezimage.io_service.draft' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\IO\TolerantIOService A eZ\Publish\Core\IO\TolerantIOService instance.
     */
    public function getEzpublish_Fieldtype_Ezimage_IoService_DraftService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.fieldtype.ezimage.io_service.draft'] = new eZPublishCoreIOTolerantIOService_0000000010d767bf00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Fieldtype_Ezimage_IoService_DraftService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        $instance = new \eZ\Publish\Core\IO\TolerantIOService($this->get('ezpublish.core.io.metadata_handler'), $this->get('ezpublish.core.io.binarydata_handler'), $this->get('ezpublish.core.io.mimetypedetector.fileinfo'));

        if ($this->has('logger')) {
            $instance->setLogger($this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }
        $instance->setPrefix($this->get("ezpublish.config.resolver")->getParameter("image.versioned_images_dir", null, null));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezimage.io_service.options_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Image\IO\OptionsProvider A eZ\Publish\Core\FieldType\Image\IO\OptionsProvider instance.
     */
    protected function getEzpublish_Fieldtype_Ezimage_IoService_OptionsProviderService()
    {
        $this->services['ezpublish.fieldtype.ezimage.io_service.options_provider'] = $instance = new \eZ\Publish\Core\FieldType\Image\IO\OptionsProvider();

        $instance->setVarDir($this->get("ezpublish.config.resolver")->getParameter("var_dir", null, null));
        $instance->setStorageDir($this->get("ezpublish.config.resolver")->getParameter("storage_dir", null, null));
        $instance->setDraftImagesDir($this->get("ezpublish.config.resolver")->getParameter("image.versioned_images_dir", null, null));
        $instance->setPublishedImagesDir($this->get("ezpublish.config.resolver")->getParameter("image.published_images_dir", null, null));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezimage.io_service.published' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\IO\TolerantIOService A eZ\Publish\Core\IO\TolerantIOService instance.
     */
    public function getEzpublish_Fieldtype_Ezimage_IoService_PublishedService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.fieldtype.ezimage.io_service.published'] = new eZPublishCoreIOTolerantIOService_0000000010d767bd00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Fieldtype_Ezimage_IoService_PublishedService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        $instance = new \eZ\Publish\Core\IO\TolerantIOService($this->get('ezpublish.core.io.metadata_handler'), $this->get('ezpublish.core.io.binarydata_handler'), $this->get('ezpublish.core.io.mimetypedetector.fileinfo'));

        if ($this->has('logger')) {
            $instance->setLogger($this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }
        $instance->setPrefix($this->get("ezpublish.config.resolver")->getParameter("image.published_images_dir", null, null));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezimage.pathgenerator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Image\PathGenerator\LegacyPathGenerator A eZ\Publish\Core\FieldType\Image\PathGenerator\LegacyPathGenerator instance.
     */
    protected function getEzpublish_Fieldtype_Ezimage_PathgeneratorService()
    {
        return $this->services['ezpublish.fieldtype.ezimage.pathgenerator'] = new \eZ\Publish\Core\FieldType\Image\PathGenerator\LegacyPathGenerator();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezimage.storage_gateway' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Image\ImageStorage\Gateway\LegacyStorage A eZ\Publish\Core\FieldType\Image\ImageStorage\Gateway\LegacyStorage instance.
     */
    protected function getEzpublish_Fieldtype_Ezimage_StorageGatewayService()
    {
        return $this->services['ezpublish.fieldtype.ezimage.storage_gateway'] = new \eZ\Publish\Core\FieldType\Image\ImageStorage\Gateway\LegacyStorage($this->get('ezpublish.core.io.image_fieldtype.legacy_url_redecorator'));
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezinisetting' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Null\Type A eZ\Publish\Core\FieldType\Null\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzinisettingService()
    {
        $this->services['ezpublish.fieldtype.ezinisetting'] = $instance = new \eZ\Publish\Core\FieldType\Null\Type('ezinisetting');

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezinisetting.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezinisetting_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezinisetting.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezinteger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Integer\Type A eZ\Publish\Core\FieldType\Integer\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzintegerService()
    {
        $this->services['ezpublish.fieldtype.ezinteger'] = $instance = new \eZ\Publish\Core\FieldType\Integer\Type();

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezinteger.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\IntegerConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\IntegerConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezinteger_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezinteger.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\IntegerConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezisbn' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\ISBN\Type A eZ\Publish\Core\FieldType\ISBN\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzisbnService()
    {
        $this->services['ezpublish.fieldtype.ezisbn'] = $instance = new \eZ\Publish\Core\FieldType\ISBN\Type();

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezisbn.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\ISBNConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\ISBNConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezisbn_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezisbn.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\ISBNConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezkeyword' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Keyword\Type A eZ\Publish\Core\FieldType\Keyword\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzkeywordService()
    {
        $this->services['ezpublish.fieldtype.ezkeyword'] = $instance = new \eZ\Publish\Core\FieldType\Keyword\Type();

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezkeyword.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\KeywordConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\KeywordConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezkeyword_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezkeyword.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\KeywordConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezkeyword.externalstorage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Keyword\KeywordStorage A eZ\Publish\Core\FieldType\Keyword\KeywordStorage instance.
     */
    protected function getEzpublish_Fieldtype_Ezkeyword_ExternalstorageService()
    {
        $this->services['ezpublish.fieldtype.ezkeyword.externalstorage'] = $instance = new \eZ\Publish\Core\FieldType\Keyword\KeywordStorage();

        $instance->addGateway('LegacyStorage', $this->get('ezpublish.fieldtype.ezkeyword.storage_gateway'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezkeyword.storage_gateway' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Keyword\KeywordStorage\Gateway\LegacyStorage A eZ\Publish\Core\FieldType\Keyword\KeywordStorage\Gateway\LegacyStorage instance.
     */
    protected function getEzpublish_Fieldtype_Ezkeyword_StorageGatewayService()
    {
        return $this->services['ezpublish.fieldtype.ezkeyword.storage_gateway'] = new \eZ\Publish\Core\FieldType\Keyword\KeywordStorage\Gateway\LegacyStorage();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezmatrix' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Null\Type A eZ\Publish\Core\FieldType\Null\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzmatrixService()
    {
        $this->services['ezpublish.fieldtype.ezmatrix'] = $instance = new \eZ\Publish\Core\FieldType\Null\Type('ezmatrix');

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezmatrix.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezmatrix_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezmatrix.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezmedia' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Media\Type A eZ\Publish\Core\FieldType\Media\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzmediaService()
    {
        $this->services['ezpublish.fieldtype.ezmedia'] = $instance = new \eZ\Publish\Core\FieldType\Media\Type();

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezmedia.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\MediaConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\MediaConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezmedia_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezmedia.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\MediaConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezmedia.externalstorage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Media\MediaStorage A eZ\Publish\Core\FieldType\Media\MediaStorage instance.
     */
    protected function getEzpublish_Fieldtype_Ezmedia_ExternalstorageService()
    {
        $this->services['ezpublish.fieldtype.ezmedia.externalstorage'] = $instance = new \eZ\Publish\Core\FieldType\Media\MediaStorage(array(), $this->get('ezpublish.fieldtype.ezbinaryfile.io_service'), $this->get('ezpublish.fieldtype.ezbinaryfile.pathgenerator'), $this->get('ezpublish.core.io.mimetypedetector.fileinfo'));

        $instance->setDownloadUrlGenerator($this->get('ezpublish.fieldtype.ezbinarybase.download_url_generator'));
        $instance->addGateway('LegacyStorage', $this->get('ezpublish.fieldtype.ezmedia.storage_gateway'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezmedia.storage_gateway' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Media\MediaStorage\Gateway\LegacyStorage A eZ\Publish\Core\FieldType\Media\MediaStorage\Gateway\LegacyStorage instance.
     */
    protected function getEzpublish_Fieldtype_Ezmedia_StorageGatewayService()
    {
        return $this->services['ezpublish.fieldtype.ezmedia.storage_gateway'] = new \eZ\Publish\Core\FieldType\Media\MediaStorage\Gateway\LegacyStorage();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezmultioption' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Null\Type A eZ\Publish\Core\FieldType\Null\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzmultioptionService()
    {
        $this->services['ezpublish.fieldtype.ezmultioption'] = $instance = new \eZ\Publish\Core\FieldType\Null\Type('ezmultioption');

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezmultioption.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezmultioption_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezmultioption.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezmultioption2' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Null\Type A eZ\Publish\Core\FieldType\Null\Type instance.
     */
    protected function getEzpublish_Fieldtype_Ezmultioption2Service()
    {
        $this->services['ezpublish.fieldtype.ezmultioption2'] = $instance = new \eZ\Publish\Core\FieldType\Null\Type('ezmultioption2');

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezmultioption2.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezmultioption2_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezmultioption2.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezmultiprice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Null\Type A eZ\Publish\Core\FieldType\Null\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzmultipriceService()
    {
        $this->services['ezpublish.fieldtype.ezmultiprice'] = $instance = new \eZ\Publish\Core\FieldType\Null\Type('ezmultiprice');

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezmultiprice.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezmultiprice_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezmultiprice.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezobjectrelation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Relation\Type A eZ\Publish\Core\FieldType\Relation\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzobjectrelationService()
    {
        $this->services['ezpublish.fieldtype.ezobjectrelation'] = $instance = new \eZ\Publish\Core\FieldType\Relation\Type();

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezobjectrelation.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\RelationConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\RelationConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezobjectrelation_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezobjectrelation.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\RelationConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezobjectrelationlist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\RelationList\Type A eZ\Publish\Core\FieldType\RelationList\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzobjectrelationlistService()
    {
        $this->services['ezpublish.fieldtype.ezobjectrelationlist'] = $instance = new \eZ\Publish\Core\FieldType\RelationList\Type();

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezobjectrelationlist.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\RelationListConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\RelationListConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezobjectrelationlist_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezobjectrelationlist.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\RelationListConverter($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezoption' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Null\Type A eZ\Publish\Core\FieldType\Null\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzoptionService()
    {
        $this->services['ezpublish.fieldtype.ezoption'] = $instance = new \eZ\Publish\Core\FieldType\Null\Type('ezoption');

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezoption.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezoption_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezoption.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezpackage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Null\Type A eZ\Publish\Core\FieldType\Null\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzpackageService()
    {
        $this->services['ezpublish.fieldtype.ezpackage'] = $instance = new \eZ\Publish\Core\FieldType\Null\Type('ezpackage');

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezpackage.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezpackage_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezpackage.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezpaex' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Null\Type A eZ\Publish\Core\FieldType\Null\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzpaexService()
    {
        $this->services['ezpublish.fieldtype.ezpaex'] = $instance = new \eZ\Publish\Core\FieldType\Null\Type('ezpaex');

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezpaex.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezpaex_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezpaex.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezpage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Page\Type A eZ\Publish\Core\FieldType\Page\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzpageService()
    {
        $this->services['ezpublish.fieldtype.ezpage'] = $instance = new \eZ\Publish\Core\FieldType\Page\Type($this->get('ezpublish.fieldtype.ezpage.pageservice'), $this->get('ezpublish.fieldtype.ezpage.hashconverter'));

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezpage.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\PageConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\PageConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezpage_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezpage.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\PageConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezpage.hashconverter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Page\HashConverter A eZ\Publish\Core\FieldType\Page\HashConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezpage_HashconverterService()
    {
        return $this->services['ezpublish.fieldtype.ezpage.hashconverter'] = new \eZ\Publish\Core\FieldType\Page\HashConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezpage.pageservice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\FieldType\Page\PageService A eZ\Bundle\EzPublishCoreBundle\FieldType\Page\PageService instance.
     */
    public function getEzpublish_Fieldtype_Ezpage_PageserviceService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.fieldtype.ezpage.pageservice'] = new eZBundleEzPublishCoreBundleFieldTypePagePageService_0000000010d76fda00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Fieldtype_Ezpage_PageserviceService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return $this->get('ezpublish.fieldtype.ezpage.pageservice.factory')->buildService('eZ\\Bundle\\EzPublishCoreBundle\\FieldType\\Page\\PageService', $this->get('ezpublish.config.resolver.chain'), $this->get('ezpublish.fieldtype.ezpage.storage_gateway'), $this->get('ezpublish.api.service.content'));
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezpage.pageservice.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\FieldType\Page\PageServiceFactory A eZ\Publish\Core\MVC\Symfony\FieldType\Page\PageServiceFactory instance.
     */
    protected function getEzpublish_Fieldtype_Ezpage_Pageservice_FactoryService()
    {
        return $this->services['ezpublish.fieldtype.ezpage.pageservice.factory'] = new \eZ\Publish\Core\MVC\Symfony\FieldType\Page\PageServiceFactory();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezpage.parameterprovider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\FieldType\Page\ParameterProvider A eZ\Publish\Core\MVC\Symfony\FieldType\Page\ParameterProvider instance.
     */
    protected function getEzpublish_Fieldtype_Ezpage_ParameterproviderService()
    {
        return $this->services['ezpublish.fieldtype.ezpage.parameterprovider'] = new \eZ\Publish\Core\MVC\Symfony\FieldType\Page\ParameterProvider($this->get('ezpublish.fieldtype.ezpage.pageservice'));
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezpage.storage_gateway' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Page\PageStorage\Gateway\LegacyStorage A eZ\Publish\Core\FieldType\Page\PageStorage\Gateway\LegacyStorage instance.
     */
    protected function getEzpublish_Fieldtype_Ezpage_StorageGatewayService()
    {
        $this->services['ezpublish.fieldtype.ezpage.storage_gateway'] = $instance = new \eZ\Publish\Core\FieldType\Page\PageStorage\Gateway\LegacyStorage();

        $instance->setConnection($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezprice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Null\Type A eZ\Publish\Core\FieldType\Null\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzpriceService()
    {
        $this->services['ezpublish.fieldtype.ezprice'] = $instance = new \eZ\Publish\Core\FieldType\Null\Type('ezprice');

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezprice.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezprice_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezprice.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezproductcategory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Null\Type A eZ\Publish\Core\FieldType\Null\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzproductcategoryService()
    {
        $this->services['ezpublish.fieldtype.ezproductcategory'] = $instance = new \eZ\Publish\Core\FieldType\Null\Type('ezproductcategory');

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezproductcategory.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezproductcategory_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezproductcategory.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezrangeoption' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Null\Type A eZ\Publish\Core\FieldType\Null\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzrangeoptionService()
    {
        $this->services['ezpublish.fieldtype.ezrangeoption'] = $instance = new \eZ\Publish\Core\FieldType\Null\Type('ezrangeoption');

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezrangeoption.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezrangeoption_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezrangeoption.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezrecommendation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Null\Type A eZ\Publish\Core\FieldType\Null\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzrecommendationService()
    {
        $this->services['ezpublish.fieldtype.ezrecommendation'] = $instance = new \eZ\Publish\Core\FieldType\Null\Type('ezrecommendation');

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezrecommendation.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezrecommendation_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezrecommendation.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezrichtext' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\RichText\Type A eZ\Publish\Core\FieldType\RichText\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzrichtextService()
    {
        $this->services['ezpublish.fieldtype.ezrichtext'] = $instance = new \eZ\Publish\Core\FieldType\RichText\Type($this->get('ezpublish.fieldtype.ezrichtext.validator.docbook'), $this->get('ezpublish.fieldtype.ezrichtext.converter.input.dispatcher'), $this->get('ezpublish.fieldtype.ezrichtext.normalizer.input'), $this->get('ezpublish.fieldtype.ezrichtext.validator.input.dispatcher'));

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezrichtext.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\RichTextConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\RichTextConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezrichtext_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezrichtext.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\RichTextConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezrichtext.converter.edit.xhtml5' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\FieldType\RichText\Converter\Html5Edit A eZ\Bundle\EzPublishCoreBundle\FieldType\RichText\Converter\Html5Edit instance.
     */
    protected function getEzpublish_Fieldtype_Ezrichtext_Converter_Edit_Xhtml5Service()
    {
        return $this->services['ezpublish.fieldtype.ezrichtext.converter.edit.xhtml5'] = new \eZ\Bundle\EzPublishCoreBundle\FieldType\RichText\Converter\Html5Edit(($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/FieldType/RichText/Resources/stylesheets/docbook/xhtml5/edit/xhtml5.xsl'), $this->get('ezpublish.config.resolver.chain'));
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezrichtext.converter.embed' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\RichText\Converter\Render\Embed A eZ\Publish\Core\FieldType\RichText\Converter\Render\Embed instance.
     */
    protected function getEzpublish_Fieldtype_Ezrichtext_Converter_EmbedService()
    {
        return $this->services['ezpublish.fieldtype.ezrichtext.converter.embed'] = new \eZ\Publish\Core\FieldType\RichText\Converter\Render\Embed($this->get('ezpublish.fieldtype.ezrichtext.renderer'), $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezrichtext.converter.input.dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\RichText\ConverterDispatcher A eZ\Publish\Core\FieldType\RichText\ConverterDispatcher instance.
     */
    protected function getEzpublish_Fieldtype_Ezrichtext_Converter_Input_DispatcherService()
    {
        return $this->services['ezpublish.fieldtype.ezrichtext.converter.input.dispatcher'] = new \eZ\Publish\Core\FieldType\RichText\ConverterDispatcher(array('http://docbook.org/ns/docbook' => NULL, 'http://ez.no/namespaces/ezpublish5/xhtml5/edit' => $this->get('ezpublish.fieldtype.ezrichtext.converter.input.xhtml5')));
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezrichtext.converter.input.xhtml5' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\FieldType\RichText\Converter\Html5Input A eZ\Bundle\EzPublishCoreBundle\FieldType\RichText\Converter\Html5Input instance.
     */
    protected function getEzpublish_Fieldtype_Ezrichtext_Converter_Input_Xhtml5Service()
    {
        return $this->services['ezpublish.fieldtype.ezrichtext.converter.input.xhtml5'] = new \eZ\Bundle\EzPublishCoreBundle\FieldType\RichText\Converter\Html5Input(($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/FieldType/RichText/Resources/stylesheets/xhtml5/edit/docbook.xsl'), $this->get('ezpublish.config.resolver.chain'));
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezrichtext.converter.link' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\RichText\Converter\Link A eZ\Publish\Core\FieldType\RichText\Converter\Link instance.
     */
    protected function getEzpublish_Fieldtype_Ezrichtext_Converter_LinkService()
    {
        return $this->services['ezpublish.fieldtype.ezrichtext.converter.link'] = new \eZ\Publish\Core\FieldType\RichText\Converter\Link($this->get('ezpublish.api.service.location'), $this->get('ezpublish.api.service.content'), $this->get('ezpublish.urlalias_router'), $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezrichtext.converter.output.xhtml5' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\FieldType\RichText\Converter\Aggregate A eZ\Publish\Core\FieldType\RichText\Converter\Aggregate instance.
     */
    public function getEzpublish_Fieldtype_Ezrichtext_Converter_Output_Xhtml5Service($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.fieldtype.ezrichtext.converter.output.xhtml5'] = new eZPublishCoreFieldTypeRichTextConverterAggregate_0000000010d7707900007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Fieldtype_Ezrichtext_Converter_Output_Xhtml5Service(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \eZ\Publish\Core\FieldType\RichText\Converter\Aggregate(array(0 => $this->get('ezpublish.fieldtype.ezrichtext.converter.link'), 1 => $this->get('ezpublish.fieldtype.ezrichtext.converter.template'), 2 => $this->get('ezpublish.fieldtype.ezrichtext.converter.embed'), 3 => $this->get('ezpublish.fieldtype.ezrichtext.converter.output.xhtml5.core'), 4 => $this->get('ezpublish.fieldtype.ezrichtext.converter.output.xhtml5.fragment')));
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezrichtext.converter.output.xhtml5.core' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\FieldType\RichText\Converter\Html5 A eZ\Bundle\EzPublishCoreBundle\FieldType\RichText\Converter\Html5 instance.
     */
    protected function getEzpublish_Fieldtype_Ezrichtext_Converter_Output_Xhtml5_CoreService()
    {
        return $this->services['ezpublish.fieldtype.ezrichtext.converter.output.xhtml5.core'] = new \eZ\Bundle\EzPublishCoreBundle\FieldType\RichText\Converter\Html5(($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/FieldType/RichText/Resources/stylesheets/docbook/xhtml5/output/xhtml5.xsl'), $this->get('ezpublish.config.resolver.chain'));
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezrichtext.converter.output.xhtml5.fragment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\RichText\Converter\Xslt A eZ\Publish\Core\FieldType\RichText\Converter\Xslt instance.
     */
    protected function getEzpublish_Fieldtype_Ezrichtext_Converter_Output_Xhtml5_FragmentService()
    {
        return $this->services['ezpublish.fieldtype.ezrichtext.converter.output.xhtml5.fragment'] = new \eZ\Publish\Core\FieldType\RichText\Converter\Xslt(($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/FieldType/RichText/Resources/stylesheets/xhtml5/output/fragment.xsl'));
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezrichtext.converter.template' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\RichText\Converter\Render\Template A eZ\Publish\Core\FieldType\RichText\Converter\Render\Template instance.
     */
    protected function getEzpublish_Fieldtype_Ezrichtext_Converter_TemplateService()
    {
        return $this->services['ezpublish.fieldtype.ezrichtext.converter.template'] = new \eZ\Publish\Core\FieldType\RichText\Converter\Render\Template($this->get('ezpublish.fieldtype.ezrichtext.renderer'));
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezrichtext.externalstorage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\RichText\RichTextStorage A eZ\Publish\Core\FieldType\RichText\RichTextStorage instance.
     */
    protected function getEzpublish_Fieldtype_Ezrichtext_ExternalstorageService()
    {
        $this->services['ezpublish.fieldtype.ezrichtext.externalstorage'] = $instance = new \eZ\Publish\Core\FieldType\RichText\RichTextStorage();

        $instance->addGateway('LegacyStorage', $this->get('ezpublish.fieldtype.ezrichtext.storage_gateway'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezrichtext.normalizer.input' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\RichText\Normalizer\DocumentTypeDefinition A eZ\Publish\Core\FieldType\RichText\Normalizer\DocumentTypeDefinition instance.
     */
    protected function getEzpublish_Fieldtype_Ezrichtext_Normalizer_InputService()
    {
        return $this->services['ezpublish.fieldtype.ezrichtext.normalizer.input'] = new \eZ\Publish\Core\FieldType\RichText\Normalizer\DocumentTypeDefinition('section', 'http://ez.no/namespaces/ezpublish5/xhtml5/edit', ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/FieldType/RichText/Resources/dtd/ezxhtml5_edit_html_character_entities.dtd'));
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezrichtext.renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\FieldType\RichText\Renderer A eZ\Publish\Core\MVC\Symfony\FieldType\RichText\Renderer instance.
     */
    protected function getEzpublish_Fieldtype_Ezrichtext_RendererService()
    {
        return $this->services['ezpublish.fieldtype.ezrichtext.renderer'] = new \eZ\Publish\Core\MVC\Symfony\FieldType\RichText\Renderer($this->get('ezpublish.signalslot.repository'), $this->get('security.authorization_checker'), $this->get('ezpublish.config.resolver.chain'), $this->get('templating'), 'fieldtypes.ezrichtext.tags', 'fieldtypes.ezrichtext.embed', $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezrichtext.storage_gateway' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\RichText\RichTextStorage\Gateway\LegacyStorage A eZ\Publish\Core\FieldType\RichText\RichTextStorage\Gateway\LegacyStorage instance.
     */
    protected function getEzpublish_Fieldtype_Ezrichtext_StorageGatewayService()
    {
        return $this->services['ezpublish.fieldtype.ezrichtext.storage_gateway'] = new \eZ\Publish\Core\FieldType\RichText\RichTextStorage\Gateway\LegacyStorage($this->get('ezpublish.fieldtype.ezurl.storage_gateway'));
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezrichtext.validator.docbook' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\RichText\Validator A eZ\Publish\Core\FieldType\RichText\Validator instance.
     */
    protected function getEzpublish_Fieldtype_Ezrichtext_Validator_DocbookService()
    {
        return $this->services['ezpublish.fieldtype.ezrichtext.validator.docbook'] = new \eZ\Publish\Core\FieldType\RichText\Validator(array(0 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/FieldType/RichText/Resources/schemas/docbook/ezpublish.rng'), 1 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/FieldType/RichText/Resources/schemas/docbook/docbook.iso.sch.xsl')));
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezrichtext.validator.input.dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\RichText\ValidatorDispatcher A eZ\Publish\Core\FieldType\RichText\ValidatorDispatcher instance.
     */
    protected function getEzpublish_Fieldtype_Ezrichtext_Validator_Input_DispatcherService()
    {
        return $this->services['ezpublish.fieldtype.ezrichtext.validator.input.dispatcher'] = new \eZ\Publish\Core\FieldType\RichText\ValidatorDispatcher(array('http://docbook.org/ns/docbook' => NULL, 'http://ez.no/namespaces/ezpublish5/xhtml5/edit' => NULL, 'http://ez.no/namespaces/ezpublish5/xhtml5' => $this->get('ezpublish.fieldtype.ezrichtext.validator.output.ezxhtml5')));
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezrichtext.validator.output.ezxhtml5' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\RichText\Validator A eZ\Publish\Core\FieldType\RichText\Validator instance.
     */
    protected function getEzpublish_Fieldtype_Ezrichtext_Validator_Output_Ezxhtml5Service()
    {
        return $this->services['ezpublish.fieldtype.ezrichtext.validator.output.ezxhtml5'] = new \eZ\Publish\Core\FieldType\RichText\Validator(array(0 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/FieldType/RichText/Resources/schemas/ezxhtml5/output/ezxhtml5.xsd')));
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezselection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Selection\Type A eZ\Publish\Core\FieldType\Selection\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzselectionService()
    {
        $this->services['ezpublish.fieldtype.ezselection'] = $instance = new \eZ\Publish\Core\FieldType\Selection\Type();

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezselection.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\SelectionConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\SelectionConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezselection_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezselection.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\SelectionConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezsrrating' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Rating\Type A eZ\Publish\Core\FieldType\Rating\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzsrratingService()
    {
        $this->services['ezpublish.fieldtype.ezsrrating'] = $instance = new \eZ\Publish\Core\FieldType\Rating\Type();

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezsrrating.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\RatingConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\RatingConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezsrrating_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezsrrating.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\RatingConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezstring' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\TextLine\Type A eZ\Publish\Core\FieldType\TextLine\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzstringService()
    {
        $this->services['ezpublish.fieldtype.ezstring'] = $instance = new \eZ\Publish\Core\FieldType\TextLine\Type();

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezstring.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\TextLineConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\TextLineConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezstring_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezstring.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\TextLineConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezsubtreesubscription' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Null\Type A eZ\Publish\Core\FieldType\Null\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzsubtreesubscriptionService()
    {
        $this->services['ezpublish.fieldtype.ezsubtreesubscription'] = $instance = new \eZ\Publish\Core\FieldType\Null\Type('ezsubtreesubscription');

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezsubtreesubscription.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezsubtreesubscription_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezsubtreesubscription.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezsurvey' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Null\Type A eZ\Publish\Core\FieldType\Null\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzsurveyService()
    {
        $this->services['ezpublish.fieldtype.ezsurvey'] = $instance = new \eZ\Publish\Core\FieldType\Null\Type('ezsurvey');

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezsurvey.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezsurvey_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezsurvey.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.eztags' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Null\Type A eZ\Publish\Core\FieldType\Null\Type instance.
     */
    protected function getEzpublish_Fieldtype_EztagsService()
    {
        $this->services['ezpublish.fieldtype.eztags'] = $instance = new \eZ\Publish\Core\FieldType\Null\Type('eztags');

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.eztags.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter instance.
     */
    protected function getEzpublish_Fieldtype_Eztags_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.eztags.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.eztext' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\TextBlock\Type A eZ\Publish\Core\FieldType\TextBlock\Type instance.
     */
    protected function getEzpublish_Fieldtype_EztextService()
    {
        $this->services['ezpublish.fieldtype.eztext'] = $instance = new \eZ\Publish\Core\FieldType\TextBlock\Type();

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.eztext.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\TextBlockConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\TextBlockConverter instance.
     */
    protected function getEzpublish_Fieldtype_Eztext_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.eztext.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\TextBlockConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.eztime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Time\Type A eZ\Publish\Core\FieldType\Time\Type instance.
     */
    protected function getEzpublish_Fieldtype_EztimeService()
    {
        $this->services['ezpublish.fieldtype.eztime'] = $instance = new \eZ\Publish\Core\FieldType\Time\Type('eztime');

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.eztime.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\TimeConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\TimeConverter instance.
     */
    protected function getEzpublish_Fieldtype_Eztime_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.eztime.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\TimeConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezurl' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Url\Type A eZ\Publish\Core\FieldType\Url\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzurlService()
    {
        $this->services['ezpublish.fieldtype.ezurl'] = $instance = new \eZ\Publish\Core\FieldType\Url\Type();

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezurl.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\UrlConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\UrlConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezurl_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezurl.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\UrlConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezurl.externalstorage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Url\UrlStorage A eZ\Publish\Core\FieldType\Url\UrlStorage instance.
     */
    protected function getEzpublish_Fieldtype_Ezurl_ExternalstorageService()
    {
        $this->services['ezpublish.fieldtype.ezurl.externalstorage'] = $instance = new \eZ\Publish\Core\FieldType\Url\UrlStorage(array(), $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->addGateway('LegacyStorage', $this->get('ezpublish.fieldtype.ezurl.storage_gateway'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezurl.storage_gateway' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Url\UrlStorage\Gateway\LegacyStorage A eZ\Publish\Core\FieldType\Url\UrlStorage\Gateway\LegacyStorage instance.
     */
    protected function getEzpublish_Fieldtype_Ezurl_StorageGatewayService()
    {
        return $this->services['ezpublish.fieldtype.ezurl.storage_gateway'] = new \eZ\Publish\Core\FieldType\Url\UrlStorage\Gateway\LegacyStorage();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezuser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\User\Type A eZ\Publish\Core\FieldType\User\Type instance.
     */
    protected function getEzpublish_Fieldtype_EzuserService()
    {
        $this->services['ezpublish.fieldtype.ezuser'] = $instance = new \eZ\Publish\Core\FieldType\User\Type();

        $instance->setTransformationProcessor($this->get('ezpublish.api.storage_engine.transformation_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezuser.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter instance.
     */
    protected function getEzpublish_Fieldtype_Ezuser_ConverterService()
    {
        return $this->services['ezpublish.fieldtype.ezuser.converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter\NullConverter();
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezuser.externalstorage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\User\UserStorage A eZ\Publish\Core\FieldType\User\UserStorage instance.
     */
    protected function getEzpublish_Fieldtype_Ezuser_ExternalstorageService()
    {
        $this->services['ezpublish.fieldtype.ezuser.externalstorage'] = $instance = new \eZ\Publish\Core\FieldType\User\UserStorage();

        $instance->addGateway('LegacyStorage', $this->get('ezpublish.fieldtype.ezuser.storage_gateway'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fieldtype.ezuser.storage_gateway' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\User\UserStorage\Gateway\LegacyStorage A eZ\Publish\Core\FieldType\User\UserStorage\Gateway\LegacyStorage instance.
     */
    protected function getEzpublish_Fieldtype_Ezuser_StorageGatewayService()
    {
        return $this->services['ezpublish.fieldtype.ezuser.storage_gateway'] = new \eZ\Publish\Core\FieldType\User\UserStorage\Gateway\LegacyStorage();
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.ezauthor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Author\SearchField A eZ\Publish\Core\FieldType\Author\SearchField instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_EzauthorService()
    {
        return $this->services['ezpublish.fieldtype.indexable.ezauthor'] = new \eZ\Publish\Core\FieldType\Author\SearchField();
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.ezbinaryfile' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\BinaryFile\SearchField A eZ\Publish\Core\FieldType\BinaryFile\SearchField instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_EzbinaryfileService()
    {
        return $this->services['ezpublish.fieldtype.indexable.ezbinaryfile'] = new \eZ\Publish\Core\FieldType\BinaryFile\SearchField();
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.ezboolean' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Checkbox\SearchField A eZ\Publish\Core\FieldType\Checkbox\SearchField instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_EzbooleanService()
    {
        return $this->services['ezpublish.fieldtype.indexable.ezboolean'] = new \eZ\Publish\Core\FieldType\Checkbox\SearchField();
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.ezcountry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Country\SearchField A eZ\Publish\Core\FieldType\Country\SearchField instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_EzcountryService()
    {
        return $this->services['ezpublish.fieldtype.indexable.ezcountry'] = new \eZ\Publish\Core\FieldType\Country\SearchField(array('AF' => array('Name' => 'Afghanistan', 'Alpha2' => 'AF', 'Alpha3' => 'AFG', 'IDC' => '93'), 'AX' => array('Name' => 'Åland', 'Alpha2' => 'AX', 'Alpha3' => 'ALA', 'IDC' => '358'), 'AL' => array('Name' => 'Albania', 'Alpha2' => 'AL', 'Alpha3' => 'ALB', 'IDC' => '355'), 'DZ' => array('Name' => 'Algeria', 'Alpha2' => 'DZ', 'Alpha3' => 'DZA', 'IDC' => '213'), 'AS' => array('Name' => 'American Samoa', 'Alpha2' => 'AS', 'Alpha3' => 'ASM', 'IDC' => '1684'), 'AD' => array('Name' => 'Andorra', 'Alpha2' => 'AD', 'Alpha3' => 'AND', 'IDC' => '376'), 'AO' => array('Name' => 'Angola', 'Alpha2' => 'AO', 'Alpha3' => 'AGO', 'IDC' => '244'), 'AI' => array('Name' => 'Anguilla', 'Alpha2' => 'AI', 'Alpha3' => 'AIA', 'IDC' => '1264'), 'AQ' => array('Name' => 'Antarctica', 'Alpha2' => 'AQ', 'Alpha3' => 'ATA', 'IDC' => '672'), 'AG' => array('Name' => 'Antigua and Barbuda', 'Alpha2' => 'AG', 'Alpha3' => 'ATG', 'IDC' => '1268'), 'AR' => array('Name' => 'Argentina', 'Alpha2' => 'AR', 'Alpha3' => 'ARG', 'IDC' => '54'), 'AM' => array('Name' => 'Armenia', 'Alpha2' => 'AM', 'Alpha3' => 'ARM', 'IDC' => '374'), 'AW' => array('Name' => 'Aruba', 'Alpha2' => 'AW', 'Alpha3' => 'ABW', 'IDC' => '297'), 'AU' => array('Name' => 'Australia', 'Alpha2' => 'AU', 'Alpha3' => 'AUS', 'IDC' => '61'), 'AT' => array('Name' => 'Austria', 'Alpha2' => 'AT', 'Alpha3' => 'AUT', 'IDC' => '43'), 'AZ' => array('Name' => 'Azerbaijan', 'Alpha2' => 'AZ', 'Alpha3' => 'AZE', 'IDC' => '994'), 'BS' => array('Name' => 'Bahamas', 'Alpha2' => 'BS', 'Alpha3' => 'BHS', 'IDC' => '1242'), 'BH' => array('Name' => 'Bahrain', 'Alpha2' => 'BH', 'Alpha3' => 'BHR', 'IDC' => '973'), 'BD' => array('Name' => 'Bangladesh', 'Alpha2' => 'BD', 'Alpha3' => 'BGD', 'IDC' => '880'), 'BB' => array('Name' => 'Barbados', 'Alpha2' => 'BB', 'Alpha3' => 'BRB', 'IDC' => '1246'), 'BY' => array('Name' => 'Belarus', 'Alpha2' => 'BY', 'Alpha3' => 'BLR', 'IDC' => '375'), 'BE' => array('Name' => 'Belgium', 'Alpha2' => 'BE', 'Alpha3' => 'BEL', 'IDC' => '32'), 'BZ' => array('Name' => 'Belize', 'Alpha2' => 'BZ', 'Alpha3' => 'BLZ', 'IDC' => '501'), 'BJ' => array('Name' => 'Benin', 'Alpha2' => 'BJ', 'Alpha3' => 'BEN', 'IDC' => '229'), 'BM' => array('Name' => 'Bermuda', 'Alpha2' => 'BM', 'Alpha3' => 'BMU', 'IDC' => '1441'), 'BT' => array('Name' => 'Bhutan', 'Alpha2' => 'BT', 'Alpha3' => 'BTN', 'IDC' => '975'), 'BO' => array('Name' => 'Bolivia', 'Alpha2' => 'BO', 'Alpha3' => 'BOL', 'IDC' => '591'), 'BA' => array('Name' => 'Bosnia and Herzegovina', 'Alpha2' => 'BA', 'Alpha3' => 'BIH', 'IDC' => '387'), 'BW' => array('Name' => 'Botswana', 'Alpha2' => 'BW', 'Alpha3' => 'BWA', 'IDC' => '267'), 'BV' => array('Name' => 'Bouvet Island', 'Alpha2' => 'BV', 'Alpha3' => 'BVT', 'IDC' => '47'), 'BR' => array('Name' => 'Brazil', 'Alpha2' => 'BR', 'Alpha3' => 'BRA', 'IDC' => '55'), 'IO' => array('Name' => 'British Indian Ocean Territory', 'Alpha2' => 'IO', 'Alpha3' => 'IOT', 'IDC' => '246'), 'BN' => array('Name' => 'Brunei Darussalam', 'Alpha2' => 'BN', 'Alpha3' => 'BRN', 'IDC' => '673'), 'BG' => array('Name' => 'Bulgaria', 'Alpha2' => 'BG', 'Alpha3' => 'BGR', 'IDC' => '359'), 'BF' => array('Name' => 'Burkina Faso', 'Alpha2' => 'BF', 'Alpha3' => 'BFA', 'IDC' => '226'), 'BI' => array('Name' => 'Burundi', 'Alpha2' => 'BI', 'Alpha3' => 'BDI', 'IDC' => '257'), 'KH' => array('Name' => 'Cambodia', 'Alpha2' => 'KH', 'Alpha3' => 'KHM', 'IDC' => '855'), 'CM' => array('Name' => 'Cameroon', 'Alpha2' => 'CM', 'Alpha3' => 'CMR', 'IDC' => '237'), 'CA' => array('Name' => 'Canada', 'Alpha2' => 'CA', 'Alpha3' => 'CAN', 'IDC' => '1'), 'CV' => array('Name' => 'Cape Verde', 'Alpha2' => 'CV', 'Alpha3' => 'CPV', 'IDC' => '238'), 'KY' => array('Name' => 'Cayman Islands', 'Alpha2' => 'KY', 'Alpha3' => 'CYM', 'IDC' => '1345'), 'CF' => array('Name' => 'Central African Republic', 'Alpha2' => 'CF', 'Alpha3' => 'CAF', 'IDC' => '236'), 'TD' => array('Name' => 'Chad', 'Alpha2' => 'TD', 'Alpha3' => 'TCD', 'IDC' => '235'), 'CL' => array('Name' => 'Chile', 'Alpha2' => 'CL', 'Alpha3' => 'CHL', 'IDC' => '56'), 'CN' => array('Name' => 'China', 'Alpha2' => 'CN', 'Alpha3' => 'CHN', 'IDC' => '86'), 'CX' => array('Name' => 'Christmas Island', 'Alpha2' => 'CX', 'Alpha3' => 'CXR', 'IDC' => '61'), 'CC' => array('Name' => 'Cocos (Keeling) Islands', 'Alpha2' => 'CC', 'Alpha3' => 'CCK', 'IDC' => '61'), 'CO' => array('Name' => 'Colombia', 'Alpha2' => 'CO', 'Alpha3' => 'COL', 'IDC' => '57'), 'KM' => array('Name' => 'Comoros', 'Alpha2' => 'KM', 'Alpha3' => 'COM', 'IDC' => '269'), 'CG' => array('Name' => 'Congo', 'Alpha2' => 'CG', 'Alpha3' => 'COG', 'IDC' => '242'), 'CD' => array('Name' => 'Congo, The Democratic Republic Of The', 'Alpha2' => 'CD', 'Alpha3' => 'COD', 'IDC' => '243'), 'CK' => array('Name' => 'Cook Islands', 'Alpha2' => 'CK', 'Alpha3' => 'COK', 'IDC' => '682'), 'CR' => array('Name' => 'Costa Rica', 'Alpha2' => 'CR', 'Alpha3' => 'CRI', 'IDC' => '506'), 'CI' => array('Name' => 'Côte d\'Ivoire', 'Alpha2' => 'CI', 'Alpha3' => 'CIV', 'IDC' => '225'), 'HR' => array('Name' => 'Croatia', 'Alpha2' => 'HR', 'Alpha3' => 'HRV', 'IDC' => '385'), 'CU' => array('Name' => 'Cuba', 'Alpha2' => 'CU', 'Alpha3' => 'CUB', 'IDC' => '53'), 'CY' => array('Name' => 'Cyprus', 'Alpha2' => 'CY', 'Alpha3' => 'CYP', 'IDC' => '357'), 'CZ' => array('Name' => 'Czech Republic', 'Alpha2' => 'CZ', 'Alpha3' => 'CZE', 'IDC' => '420'), 'DK' => array('Name' => 'Denmark', 'Alpha2' => 'DK', 'Alpha3' => 'DNK', 'IDC' => '45'), 'DJ' => array('Name' => 'Djibouti', 'Alpha2' => 'DJ', 'Alpha3' => 'DJI', 'IDC' => '253'), 'DM' => array('Name' => 'Dominica', 'Alpha2' => 'DM', 'Alpha3' => 'DMA', 'IDC' => '1767'), 'DO' => array('Name' => 'Dominican Republic', 'Alpha2' => 'DO', 'Alpha3' => 'DOM', 'IDC' => '1809'), 'EC' => array('Name' => 'Ecuador', 'Alpha2' => 'EC', 'Alpha3' => 'ECU', 'IDC' => '593'), 'EG' => array('Name' => 'Egypt', 'Alpha2' => 'EG', 'Alpha3' => 'EGY', 'IDC' => '20'), 'SV' => array('Name' => 'El Salvador', 'Alpha2' => 'SV', 'Alpha3' => 'SLV', 'IDC' => '503'), 'GQ' => array('Name' => 'Equatorial Guinea', 'Alpha2' => 'GQ', 'Alpha3' => 'GNQ', 'IDC' => '240'), 'ER' => array('Name' => 'Eritrea', 'Alpha2' => 'ER', 'Alpha3' => 'ERI', 'IDC' => '291'), 'EE' => array('Name' => 'Estonia', 'Alpha2' => 'EE', 'Alpha3' => 'EST', 'IDC' => '372'), 'ET' => array('Name' => 'Ethiopia', 'Alpha2' => 'ET', 'Alpha3' => 'ETH', 'IDC' => '251'), 'FK' => array('Name' => 'Falkland Islands (Malvinas)', 'Alpha2' => 'FK', 'Alpha3' => 'FLK', 'IDC' => '500'), 'FO' => array('Name' => 'Faroe Islands', 'Alpha2' => 'FO', 'Alpha3' => 'FRO', 'IDC' => '298'), 'FJ' => array('Name' => 'Fiji', 'Alpha2' => 'FJ', 'Alpha3' => 'FJI', 'IDC' => '679'), 'FI' => array('Name' => 'Finland', 'Alpha2' => 'FI', 'Alpha3' => 'FIN', 'IDC' => '358'), 'FR' => array('Name' => 'France', 'Alpha2' => 'FR', 'Alpha3' => 'FRA', 'IDC' => '33'), 'GF' => array('Name' => 'French Guiana', 'Alpha2' => 'GF', 'Alpha3' => 'GUF', 'IDC' => '594'), 'PF' => array('Name' => 'French Polynesia', 'Alpha2' => 'PF', 'Alpha3' => 'PYF', 'IDC' => '689'), 'TF' => array('Name' => 'French Southern Territories', 'Alpha2' => 'TF', 'Alpha3' => 'ATF', 'IDC' => '0'), 'GA' => array('Name' => 'Gabon', 'Alpha2' => 'GA', 'Alpha3' => 'GAB', 'IDC' => '241'), 'GM' => array('Name' => 'Gambia', 'Alpha2' => 'GM', 'Alpha3' => 'GMB', 'IDC' => '220'), 'GE' => array('Name' => 'Georgia', 'Alpha2' => 'GE', 'Alpha3' => 'GEO', 'IDC' => '995'), 'DE' => array('Name' => 'Germany', 'Alpha2' => 'DE', 'Alpha3' => 'DEU', 'IDC' => '49'), 'GH' => array('Name' => 'Ghana', 'Alpha2' => 'GH', 'Alpha3' => 'GHA', 'IDC' => '233'), 'GI' => array('Name' => 'Gibraltar', 'Alpha2' => 'GI', 'Alpha3' => 'GIB', 'IDC' => '350'), 'GR' => array('Name' => 'Greece', 'Alpha2' => 'GR', 'Alpha3' => 'GRC', 'IDC' => '30'), 'GL' => array('Name' => 'Greenland', 'Alpha2' => 'GL', 'Alpha3' => 'GRL', 'IDC' => '299'), 'GD' => array('Name' => 'Grenada', 'Alpha2' => 'GD', 'Alpha3' => 'GRD', 'IDC' => '1473'), 'GP' => array('Name' => 'Guadeloupe', 'Alpha2' => 'GP', 'Alpha3' => 'GLP', 'IDC' => '590'), 'GU' => array('Name' => 'Guam', 'Alpha2' => 'GU', 'Alpha3' => 'GUM', 'IDC' => '1671'), 'GT' => array('Name' => 'Guatemala', 'Alpha2' => 'GT', 'Alpha3' => 'GTM', 'IDC' => '502'), 'GG' => array('Name' => 'Guernsey', 'Alpha2' => 'GG', 'Alpha3' => 'GGY', 'IDC' => '44'), 'GN' => array('Name' => 'Guinea', 'Alpha2' => 'GN', 'Alpha3' => 'GIN', 'IDC' => '224'), 'GW' => array('Name' => 'Guinea-Bissau', 'Alpha2' => 'GW', 'Alpha3' => 'GNB', 'IDC' => '245'), 'GY' => array('Name' => 'Guyana', 'Alpha2' => 'GY', 'Alpha3' => 'GUY', 'IDC' => '592'), 'HT' => array('Name' => 'Haiti', 'Alpha2' => 'HT', 'Alpha3' => 'HTI', 'IDC' => '509'), 'HM' => array('Name' => 'Heard Island and McDonald Islands', 'Alpha2' => 'HM', 'Alpha3' => 'HMD', 'IDC' => '672'), 'HN' => array('Name' => 'Honduras', 'Alpha2' => 'HN', 'Alpha3' => 'HND', 'IDC' => '504'), 'HK' => array('Name' => 'Hong Kong', 'Alpha2' => 'HK', 'Alpha3' => 'HKG', 'IDC' => '852'), 'HU' => array('Name' => 'Hungary', 'Alpha2' => 'HU', 'Alpha3' => 'HUN', 'IDC' => '36'), 'IS' => array('Name' => 'Iceland', 'Alpha2' => 'IS', 'Alpha3' => 'ISL', 'IDC' => '354'), 'IN' => array('Name' => 'India', 'Alpha2' => 'IN', 'Alpha3' => 'IND', 'IDC' => '91'), 'ID' => array('Name' => 'Indonesia', 'Alpha2' => 'ID', 'Alpha3' => 'IDN', 'IDC' => '62'), 'IR' => array('Name' => 'Iran, Islamic Republic of', 'Alpha2' => 'IR', 'Alpha3' => 'IRN', 'IDC' => '98'), 'IQ' => array('Name' => 'Iraq', 'Alpha2' => 'IQ', 'Alpha3' => 'IRQ', 'IDC' => '964'), 'IE' => array('Name' => 'Ireland', 'Alpha2' => 'IE', 'Alpha3' => 'IRL', 'IDC' => '353'), 'IM' => array('Name' => 'Isle of Man', 'Alpha2' => 'IM', 'Alpha3' => 'IMN', 'IDC' => '44'), 'IL' => array('Name' => 'Israel', 'Alpha2' => 'IL', 'Alpha3' => 'ISR', 'IDC' => '972'), 'IT' => array('Name' => 'Italy', 'Alpha2' => 'IT', 'Alpha3' => 'ITA', 'IDC' => '39'), 'JM' => array('Name' => 'Jamaica', 'Alpha2' => 'JM', 'Alpha3' => 'JAM', 'IDC' => '1876'), 'JP' => array('Name' => 'Japan', 'Alpha2' => 'JP', 'Alpha3' => 'JPN', 'IDC' => '81'), 'JE' => array('Name' => 'Jersey', 'Alpha2' => 'JE', 'Alpha3' => 'JEY', 'IDC' => '44'), 'JO' => array('Name' => 'Jordan', 'Alpha2' => 'JO', 'Alpha3' => 'JOR', 'IDC' => '962'), 'KZ' => array('Name' => 'Kazakhstan', 'Alpha2' => 'KZ', 'Alpha3' => 'KAZ', 'IDC' => '7'), 'KE' => array('Name' => 'Kenya', 'Alpha2' => 'KE', 'Alpha3' => 'KEN', 'IDC' => '254'), 'KI' => array('Name' => 'Kiribati', 'Alpha2' => 'KI', 'Alpha3' => 'KIR', 'IDC' => '686'), 'KP' => array('Name' => 'Korea, Democratic People\'s Republic of', 'Alpha2' => 'KP', 'Alpha3' => 'PRK', 'IDC' => '850'), 'KR' => array('Name' => 'Korea, Republic of', 'Alpha2' => 'KR', 'Alpha3' => 'KOR', 'IDC' => '82'), 'KW' => array('Name' => 'Kuwait', 'Alpha2' => 'KW', 'Alpha3' => 'KWT', 'IDC' => '965'), 'KG' => array('Name' => 'Kyrgyzstan', 'Alpha2' => 'KG', 'Alpha3' => 'KGZ', 'IDC' => '996'), 'LA' => array('Name' => 'Lao People\'s Democratic Republic', 'Alpha2' => 'LA', 'Alpha3' => 'LAO', 'IDC' => '856'), 'LV' => array('Name' => 'Latvia', 'Alpha2' => 'LV', 'Alpha3' => 'LVA', 'IDC' => '371'), 'LB' => array('Name' => 'Lebanon', 'Alpha2' => 'LB', 'Alpha3' => 'LBN', 'IDC' => '961'), 'LS' => array('Name' => 'Lesotho', 'Alpha2' => 'LS', 'Alpha3' => 'LSO', 'IDC' => '266'), 'LR' => array('Name' => 'Liberia', 'Alpha2' => 'LR', 'Alpha3' => 'LBR', 'IDC' => '231'), 'LY' => array('Name' => 'Libyan Arab Jamahiriya', 'Alpha2' => 'LY', 'Alpha3' => 'LBY', 'IDC' => '218'), 'LI' => array('Name' => 'Liechtenstein', 'Alpha2' => 'LI', 'Alpha3' => 'LIE', 'IDC' => '423'), 'LT' => array('Name' => 'Lithuania', 'Alpha2' => 'LT', 'Alpha3' => 'LTU', 'IDC' => '370'), 'LU' => array('Name' => 'Luxembourg', 'Alpha2' => 'LU', 'Alpha3' => 'LUX', 'IDC' => '352'), 'MO' => array('Name' => 'Macau', 'Alpha2' => 'MO', 'Alpha3' => 'MAC', 'IDC' => '853'), 'MK' => array('Name' => 'Macedonia, The Former Yugoslav Republic of', 'Alpha2' => 'MK', 'Alpha3' => 'MKD', 'IDC' => '389'), 'MG' => array('Name' => 'Madagascar', 'Alpha2' => 'MG', 'Alpha3' => 'MDG', 'IDC' => '261'), 'MW' => array('Name' => 'Malawi', 'Alpha2' => 'MW', 'Alpha3' => 'MWI', 'IDC' => '265'), 'MY' => array('Name' => 'Malaysia', 'Alpha2' => 'MY', 'Alpha3' => 'MYS', 'IDC' => '60'), 'MV' => array('Name' => 'Maldives', 'Alpha2' => 'MV', 'Alpha3' => 'MDV', 'IDC' => '960'), 'ML' => array('Name' => 'Mali', 'Alpha2' => 'ML', 'Alpha3' => 'MLI', 'IDC' => '223'), 'MT' => array('Name' => 'Malta', 'Alpha2' => 'MT', 'Alpha3' => 'MLT', 'IDC' => '356'), 'MH' => array('Name' => 'Marshall Islands', 'Alpha2' => 'MH', 'Alpha3' => 'MHL', 'IDC' => '692'), 'MQ' => array('Name' => 'Martinique', 'Alpha2' => 'MQ', 'Alpha3' => 'MTQ', 'IDC' => '596'), 'MR' => array('Name' => 'Mauritania', 'Alpha2' => 'MR', 'Alpha3' => 'MRT', 'IDC' => '222'), 'MU' => array('Name' => 'Mauritius', 'Alpha2' => 'MU', 'Alpha3' => 'MUS', 'IDC' => '230'), 'YT' => array('Name' => 'Mayotte', 'Alpha2' => 'YT', 'Alpha3' => 'MYT', 'IDC' => '262'), 'MX' => array('Name' => 'Mexico', 'Alpha2' => 'MX', 'Alpha3' => 'MEX', 'IDC' => '52'), 'FM' => array('Name' => 'Micronesia, Federated States of', 'Alpha2' => 'FM', 'Alpha3' => 'FSM', 'IDC' => '691'), 'MD' => array('Name' => 'Moldova, Republic of', 'Alpha2' => 'MD', 'Alpha3' => 'MDA', 'IDC' => '373'), 'MC' => array('Name' => 'Monaco', 'Alpha2' => 'MC', 'Alpha3' => 'MCO', 'IDC' => '377'), 'MN' => array('Name' => 'Mongolia', 'Alpha2' => 'MN', 'Alpha3' => 'MNG', 'IDC' => '976'), 'ME' => array('Name' => 'Montenegro', 'Alpha2' => 'ME', 'Alpha3' => 'MNE', 'IDC' => '382'), 'MS' => array('Name' => 'Montserrat', 'Alpha2' => 'MS', 'Alpha3' => 'MSR', 'IDC' => '1664'), 'MA' => array('Name' => 'Morocco', 'Alpha2' => 'MA', 'Alpha3' => 'MAR', 'IDC' => '212'), 'MZ' => array('Name' => 'Mozambique', 'Alpha2' => 'MZ', 'Alpha3' => 'MOZ', 'IDC' => '258'), 'MM' => array('Name' => 'Myanmar', 'Alpha2' => 'MM', 'Alpha3' => 'MMR', 'IDC' => '95'), 'NA' => array('Name' => 'Namibia', 'Alpha2' => 'NA', 'Alpha3' => 'NAM', 'IDC' => '264'), 'NR' => array('Name' => 'Nauru', 'Alpha2' => 'NR', 'Alpha3' => 'NRU', 'IDC' => '674'), 'NP' => array('Name' => 'Nepal', 'Alpha2' => 'NP', 'Alpha3' => 'NPL', 'IDC' => '977'), 'NL' => array('Name' => 'Netherlands', 'Alpha2' => 'NL', 'Alpha3' => 'NLD', 'IDC' => '31'), 'AN' => array('Name' => 'Netherlands Antilles', 'Alpha2' => 'AN', 'Alpha3' => 'ANT', 'IDC' => '599'), 'NC' => array('Name' => 'New Caledonia', 'Alpha2' => 'NC', 'Alpha3' => 'NCL', 'IDC' => '687'), 'NZ' => array('Name' => 'New Zealand', 'Alpha2' => 'NZ', 'Alpha3' => 'NZL', 'IDC' => '64'), 'NI' => array('Name' => 'Nicaragua', 'Alpha2' => 'NI', 'Alpha3' => 'NIC', 'IDC' => '505'), 'NE' => array('Name' => 'Niger', 'Alpha2' => 'NE', 'Alpha3' => 'NER', 'IDC' => '227'), 'NG' => array('Name' => 'Nigeria', 'Alpha2' => 'NG', 'Alpha3' => 'NGA', 'IDC' => '234'), 'NU' => array('Name' => 'Niue', 'Alpha2' => 'NU', 'Alpha3' => 'NIU', 'IDC' => '683'), 'NF' => array('Name' => 'Norfolk Island', 'Alpha2' => 'NF', 'Alpha3' => 'NFK', 'IDC' => '6723'), 'MP' => array('Name' => 'Northern Mariana Islands', 'Alpha2' => 'MP', 'Alpha3' => 'MNP', 'IDC' => '1670'), 'NO' => array('Name' => 'Norway', 'Alpha2' => 'NO', 'Alpha3' => 'NOR', 'IDC' => '47'), 'OM' => array('Name' => 'Oman', 'Alpha2' => 'OM', 'Alpha3' => 'OMN', 'IDC' => '968'), 'PK' => array('Name' => 'Pakistan', 'Alpha2' => 'PK', 'Alpha3' => 'PAK', 'IDC' => '92'), 'PW' => array('Name' => 'Palau', 'Alpha2' => 'PW', 'Alpha3' => 'PLW', 'IDC' => '680'), 'PS' => array('Name' => 'Palestinian Territory, Occupied', 'Alpha2' => 'PS', 'Alpha3' => 'PSE', 'IDC' => '970'), 'PA' => array('Name' => 'Panama', 'Alpha2' => 'PA', 'Alpha3' => 'PAN', 'IDC' => '507'), 'PG' => array('Name' => 'Papua New Guinea', 'Alpha2' => 'PG', 'Alpha3' => 'PNG', 'IDC' => '675'), 'PY' => array('Name' => 'Paraguay', 'Alpha2' => 'PY', 'Alpha3' => 'PRY', 'IDC' => '595'), 'PE' => array('Name' => 'Peru', 'Alpha2' => 'PE', 'Alpha3' => 'PER', 'IDC' => '51'), 'PH' => array('Name' => 'Philippines', 'Alpha2' => 'PH', 'Alpha3' => 'PHL', 'IDC' => '63'), 'PN' => array('Name' => 'Pitcairn', 'Alpha2' => 'PN', 'Alpha3' => 'PCN', 'IDC' => '64'), 'PL' => array('Name' => 'Poland', 'Alpha2' => 'PL', 'Alpha3' => 'POL', 'IDC' => '48'), 'PT' => array('Name' => 'Portugal', 'Alpha2' => 'PT', 'Alpha3' => 'PRT', 'IDC' => '351'), 'PR' => array('Name' => 'Puerto Rico', 'Alpha2' => 'PR', 'Alpha3' => 'PRI', 'IDC' => '1787'), 'QA' => array('Name' => 'Qatar', 'Alpha2' => 'QA', 'Alpha3' => 'QAT', 'IDC' => '974'), 'RE' => array('Name' => 'Reunion', 'Alpha2' => 'RE', 'Alpha3' => 'REU', 'IDC' => '262'), 'RO' => array('Name' => 'Romania', 'Alpha2' => 'RO', 'Alpha3' => 'ROU', 'IDC' => '40'), 'RU' => array('Name' => 'Russian Federation', 'Alpha2' => 'RU', 'Alpha3' => 'RUS', 'IDC' => '7'), 'RW' => array('Name' => 'Rwanda', 'Alpha2' => 'RW', 'Alpha3' => 'RWA', 'IDC' => '250'), 'BL' => array('Name' => 'Saint Barthélemy', 'Alpha2' => 'BL', 'Alpha3' => 'BLM', 'IDC' => '590'), 'SH' => array('Name' => 'Saint Helena', 'Alpha2' => 'SH', 'Alpha3' => 'SHN', 'IDC' => '290'), 'KN' => array('Name' => 'Saint Kitts and Nevis', 'Alpha2' => 'KN', 'Alpha3' => 'KNA', 'IDC' => '1869'), 'LC' => array('Name' => 'Saint Lucia', 'Alpha2' => 'LC', 'Alpha3' => 'LCA', 'IDC' => '1758'), 'MF' => array('Name' => 'Saint Martin', 'Alpha2' => 'MF', 'Alpha3' => 'MAF', 'IDC' => '590'), 'PM' => array('Name' => 'Saint Pierre and Miquelon', 'Alpha2' => 'PM', 'Alpha3' => 'SPM', 'IDC' => '508'), 'VC' => array('Name' => 'Saint Vincent and The Grenadines', 'Alpha2' => 'VC', 'Alpha3' => 'VCT', 'IDC' => '1784'), 'WS' => array('Name' => 'Samoa', 'Alpha2' => 'WS', 'Alpha3' => 'WSM', 'IDC' => '685'), 'SM' => array('Name' => 'San Marino', 'Alpha2' => 'SM', 'Alpha3' => 'SMR', 'IDC' => '378'), 'ST' => array('Name' => 'Sao Tome and Principe', 'Alpha2' => 'ST', 'Alpha3' => 'STP', 'IDC' => '239'), 'SA' => array('Name' => 'Saudi Arabia', 'Alpha2' => 'SA', 'Alpha3' => 'SAU', 'IDC' => '966'), 'SN' => array('Name' => 'Senegal', 'Alpha2' => 'SN', 'Alpha3' => 'SEN', 'IDC' => '221'), 'RS' => array('Name' => 'Serbia', 'Alpha2' => 'RS', 'Alpha3' => 'SRB', 'IDC' => '381'), 'SC' => array('Name' => 'Seychelles', 'Alpha2' => 'SC', 'Alpha3' => 'SYC', 'IDC' => '248'), 'SL' => array('Name' => 'Sierra Leone', 'Alpha2' => 'SL', 'Alpha3' => 'SLE', 'IDC' => '232'), 'SG' => array('Name' => 'Singapore', 'Alpha2' => 'SG', 'Alpha3' => 'SGP', 'IDC' => '65'), 'SK' => array('Name' => 'Slovakia', 'Alpha2' => 'SK', 'Alpha3' => 'SVK', 'IDC' => '421'), 'SI' => array('Name' => 'Slovenia', 'Alpha2' => 'SI', 'Alpha3' => 'SVN', 'IDC' => '386'), 'SB' => array('Name' => 'Solomon Islands', 'Alpha2' => 'SB', 'Alpha3' => 'SLB', 'IDC' => '677'), 'SO' => array('Name' => 'Somalia', 'Alpha2' => 'SO', 'Alpha3' => 'SOM', 'IDC' => '252'), 'ZA' => array('Name' => 'South Africa', 'Alpha2' => 'ZA', 'Alpha3' => 'ZAF', 'IDC' => '27'), 'GS' => array('Name' => 'South Georgia and The South Sandwich Islands', 'Alpha2' => 'GS', 'Alpha3' => 'SGS', 'IDC' => '500'), 'ES' => array('Name' => 'Spain', 'Alpha2' => 'ES', 'Alpha3' => 'ESP', 'IDC' => '34'), 'LK' => array('Name' => 'Sri Lanka', 'Alpha2' => 'LK', 'Alpha3' => 'LKA', 'IDC' => '94'), 'SD' => array('Name' => 'Sudan', 'Alpha2' => 'SD', 'Alpha3' => 'SDN', 'IDC' => '249'), 'SR' => array('Name' => 'Suriname', 'Alpha2' => 'SR', 'Alpha3' => 'SUR', 'IDC' => '597'), 'SJ' => array('Name' => 'Svalbard and Jan Mayen', 'Alpha2' => 'SJ', 'Alpha3' => 'SJM', 'IDC' => '47'), 'SZ' => array('Name' => 'Swaziland', 'Alpha2' => 'SZ', 'Alpha3' => 'SWZ', 'IDC' => '268'), 'SE' => array('Name' => 'Sweden', 'Alpha2' => 'SE', 'Alpha3' => 'SWE', 'IDC' => '46'), 'CH' => array('Name' => 'Switzerland', 'Alpha2' => 'CH', 'Alpha3' => 'CHE', 'IDC' => '41'), 'SY' => array('Name' => 'Syrian Arab Republic', 'Alpha2' => 'SY', 'Alpha3' => 'SYR', 'IDC' => '963'), 'TW' => array('Name' => 'Taiwan', 'Alpha2' => 'TW', 'Alpha3' => 'TWN', 'IDC' => '886'), 'TJ' => array('Name' => 'Tajikistan', 'Alpha2' => 'TJ', 'Alpha3' => 'TJK', 'IDC' => '992'), 'TZ' => array('Name' => 'Tanzania, United Republic of', 'Alpha2' => 'TZ', 'Alpha3' => 'TZA', 'IDC' => '255'), 'TH' => array('Name' => 'Thailand', 'Alpha2' => 'TH', 'Alpha3' => 'THA', 'IDC' => '66'), 'TL' => array('Name' => 'Timor-Leste', 'Alpha2' => 'TL', 'Alpha3' => 'TLS', 'IDC' => '670'), 'TG' => array('Name' => 'Togo', 'Alpha2' => 'TG', 'Alpha3' => 'TGO', 'IDC' => '228'), 'TK' => array('Name' => 'Tokelau', 'Alpha2' => 'TK', 'Alpha3' => 'TKL', 'IDC' => '690'), 'TO' => array('Name' => 'Tonga', 'Alpha2' => 'TO', 'Alpha3' => 'TON', 'IDC' => '676'), 'TT' => array('Name' => 'Trinidad and Tobago', 'Alpha2' => 'TT', 'Alpha3' => 'TTO', 'IDC' => '1868'), 'TN' => array('Name' => 'Tunisia', 'Alpha2' => 'TN', 'Alpha3' => 'TUN', 'IDC' => '216'), 'TR' => array('Name' => 'Turkey', 'Alpha2' => 'TR', 'Alpha3' => 'TUR', 'IDC' => '90'), 'TM' => array('Name' => 'Turkmenistan', 'Alpha2' => 'TM', 'Alpha3' => 'TKM', 'IDC' => '993'), 'TC' => array('Name' => 'Turks and Caicos Islands', 'Alpha2' => 'TC', 'Alpha3' => 'TCA', 'IDC' => '1649'), 'TV' => array('Name' => 'Tuvalu', 'Alpha2' => 'TV', 'Alpha3' => 'TUV', 'IDC' => '688'), 'UG' => array('Name' => 'Uganda', 'Alpha2' => 'UG', 'Alpha3' => 'UGA', 'IDC' => '256'), 'UA' => array('Name' => 'Ukraine', 'Alpha2' => 'UA', 'Alpha3' => 'UKR', 'IDC' => '380'), 'AE' => array('Name' => 'United Arab Emirates', 'Alpha2' => 'AE', 'Alpha3' => 'ARE', 'IDC' => '971'), 'GB' => array('Name' => 'United Kingdom', 'Alpha2' => 'GB', 'Alpha3' => 'GBR', 'IDC' => '44'), 'UM' => array('Name' => 'United States Minor Outlying Islands', 'Alpha2' => 'UM', 'Alpha3' => 'UMI', 'IDC' => '1'), 'US' => array('Name' => 'United States of America', 'Alpha2' => 'US', 'Alpha3' => 'USA', 'IDC' => '1'), 'UY' => array('Name' => 'Uruguay', 'Alpha2' => 'UY', 'Alpha3' => 'URY', 'IDC' => '598'), 'UZ' => array('Name' => 'Uzbekistan', 'Alpha2' => 'UZ', 'Alpha3' => 'UZB', 'IDC' => '998'), 'VU' => array('Name' => 'Vanuatu', 'Alpha2' => 'VU', 'Alpha3' => 'VUT', 'IDC' => '678'), 'VA' => array('Name' => 'Holy See (Vatican City State)', 'Alpha2' => 'VA', 'Alpha3' => 'VAT', 'IDC' => '3906'), 'VE' => array('Name' => 'Venezuela', 'Alpha2' => 'VE', 'Alpha3' => 'VEN', 'IDC' => '58'), 'VN' => array('Name' => 'Viet Nam', 'Alpha2' => 'VN', 'Alpha3' => 'VNM', 'IDC' => '84'), 'VG' => array('Name' => 'Virgin Islands, British', 'Alpha2' => 'VG', 'Alpha3' => 'VGB', 'IDC' => '1284'), 'VI' => array('Name' => 'Virgin Islands, U.S.', 'Alpha2' => 'VI', 'Alpha3' => 'VIR', 'IDC' => '1340'), 'WF' => array('Name' => 'Wallis and Futuna', 'Alpha2' => 'WF', 'Alpha3' => 'WLF', 'IDC' => '681'), 'EH' => array('Name' => 'Western Sahara', 'Alpha2' => 'EH', 'Alpha3' => 'ESH', 'IDC' => '212'), 'YE' => array('Name' => 'Yemen', 'Alpha2' => 'YE', 'Alpha3' => 'YEM', 'IDC' => '967'), 'ZM' => array('Name' => 'Zambia', 'Alpha2' => 'ZM', 'Alpha3' => 'ZMB', 'IDC' => '260'), 'ZW' => array('Name' => 'Zimbabwe', 'Alpha2' => 'ZW', 'Alpha3' => 'ZWE', 'IDC' => '263')));
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.ezdate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Date\SearchField A eZ\Publish\Core\FieldType\Date\SearchField instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_EzdateService()
    {
        return $this->services['ezpublish.fieldtype.indexable.ezdate'] = new \eZ\Publish\Core\FieldType\Date\SearchField();
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.ezdatetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\DateAndTime\SearchField A eZ\Publish\Core\FieldType\DateAndTime\SearchField instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_EzdatetimeService()
    {
        return $this->services['ezpublish.fieldtype.indexable.ezdatetime'] = new \eZ\Publish\Core\FieldType\DateAndTime\SearchField();
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.ezemail' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\EmailAddress\SearchField A eZ\Publish\Core\FieldType\EmailAddress\SearchField instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_EzemailService()
    {
        return $this->services['ezpublish.fieldtype.indexable.ezemail'] = new \eZ\Publish\Core\FieldType\EmailAddress\SearchField();
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.ezfloat' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Float\SearchField A eZ\Publish\Core\FieldType\Float\SearchField instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_EzfloatService()
    {
        return $this->services['ezpublish.fieldtype.indexable.ezfloat'] = new \eZ\Publish\Core\FieldType\Float\SearchField();
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.ezgmaplocation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\MapLocation\SearchField A eZ\Publish\Core\FieldType\MapLocation\SearchField instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_EzgmaplocationService()
    {
        return $this->services['ezpublish.fieldtype.indexable.ezgmaplocation'] = new \eZ\Publish\Core\FieldType\MapLocation\SearchField();
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.ezimage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Image\SearchField A eZ\Publish\Core\FieldType\Image\SearchField instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_EzimageService()
    {
        return $this->services['ezpublish.fieldtype.indexable.ezimage'] = new \eZ\Publish\Core\FieldType\Image\SearchField();
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.ezinteger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Integer\SearchField A eZ\Publish\Core\FieldType\Integer\SearchField instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_EzintegerService()
    {
        return $this->services['ezpublish.fieldtype.indexable.ezinteger'] = new \eZ\Publish\Core\FieldType\Integer\SearchField();
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.ezisbn' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\ISBN\SearchField A eZ\Publish\Core\FieldType\ISBN\SearchField instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_EzisbnService()
    {
        return $this->services['ezpublish.fieldtype.indexable.ezisbn'] = new \eZ\Publish\Core\FieldType\ISBN\SearchField();
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.ezmedia' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Media\SearchField A eZ\Publish\Core\FieldType\Media\SearchField instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_EzmediaService()
    {
        return $this->services['ezpublish.fieldtype.indexable.ezmedia'] = new \eZ\Publish\Core\FieldType\Media\SearchField();
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.ezobjectrelation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Relation\SearchField A eZ\Publish\Core\FieldType\Relation\SearchField instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_EzobjectrelationService()
    {
        return $this->services['ezpublish.fieldtype.indexable.ezobjectrelation'] = new \eZ\Publish\Core\FieldType\Relation\SearchField();
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.ezobjectrelationlist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\RelationList\SearchField A eZ\Publish\Core\FieldType\RelationList\SearchField instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_EzobjectrelationlistService()
    {
        return $this->services['ezpublish.fieldtype.indexable.ezobjectrelationlist'] = new \eZ\Publish\Core\FieldType\RelationList\SearchField();
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.ezprice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Price\SearchField A eZ\Publish\Core\FieldType\Price\SearchField instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_EzpriceService()
    {
        return $this->services['ezpublish.fieldtype.indexable.ezprice'] = new \eZ\Publish\Core\FieldType\Price\SearchField();
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.ezrichtext' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\RichText\SearchField A eZ\Publish\Core\FieldType\RichText\SearchField instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_EzrichtextService()
    {
        return $this->services['ezpublish.fieldtype.indexable.ezrichtext'] = new \eZ\Publish\Core\FieldType\RichText\SearchField();
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.ezselection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Selection\SearchField A eZ\Publish\Core\FieldType\Selection\SearchField instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_EzselectionService()
    {
        return $this->services['ezpublish.fieldtype.indexable.ezselection'] = new \eZ\Publish\Core\FieldType\Selection\SearchField();
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.ezstring' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\TextLine\SearchField A eZ\Publish\Core\FieldType\TextLine\SearchField instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_EzstringService()
    {
        return $this->services['ezpublish.fieldtype.indexable.ezstring'] = new \eZ\Publish\Core\FieldType\TextLine\SearchField();
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.eztext' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\TextBlock\SearchField A eZ\Publish\Core\FieldType\TextBlock\SearchField instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_EztextService()
    {
        return $this->services['ezpublish.fieldtype.indexable.eztext'] = new \eZ\Publish\Core\FieldType\TextBlock\SearchField();
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.eztime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Time\SearchField A eZ\Publish\Core\FieldType\Time\SearchField instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_EztimeService()
    {
        return $this->services['ezpublish.fieldtype.indexable.eztime'] = new \eZ\Publish\Core\FieldType\Time\SearchField();
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.ezurl' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Url\SearchField A eZ\Publish\Core\FieldType\Url\SearchField instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_EzurlService()
    {
        return $this->services['ezpublish.fieldtype.indexable.ezurl'] = new \eZ\Publish\Core\FieldType\Url\SearchField();
    }

    /**
     * Gets the 'ezpublish.fieldtype.indexable.unindexed' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\FieldType\Unindexed A eZ\Publish\Core\FieldType\Unindexed instance.
     */
    protected function getEzpublish_Fieldtype_Indexable_UnindexedService()
    {
        return $this->services['ezpublish.fieldtype.indexable.unindexed'] = new \eZ\Publish\Core\FieldType\Unindexed();
    }

    /**
     * Gets the 'ezpublish.fieldtype.metadatahandler.imagesize' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\IO\MetadataHandler\ImageSize A eZ\Publish\Core\IO\MetadataHandler\ImageSize instance.
     */
    protected function getEzpublish_Fieldtype_Metadatahandler_ImagesizeService()
    {
        return $this->services['ezpublish.fieldtype.metadatahandler.imagesize'] = new \eZ\Publish\Core\IO\MetadataHandler\ImageSize();
    }

    /**
     * Gets the 'ezpublish.fieldtype.parameterproviderregistry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\FieldType\View\ParameterProviderRegistry A eZ\Publish\Core\MVC\Symfony\FieldType\View\ParameterProviderRegistry instance.
     */
    protected function getEzpublish_Fieldtype_ParameterproviderregistryService()
    {
        $a = $this->get('ezpublish.fieldtype.ezdatetime.parameterprovider');

        $this->services['ezpublish.fieldtype.parameterproviderregistry'] = $instance = new \eZ\Publish\Core\MVC\Symfony\FieldType\View\ParameterProviderRegistry();

        $instance->setParameterProvider($a, 'ezdatetime');
        $instance->setParameterProvider($a, 'ezdate');
        $instance->setParameterProvider($a, 'eztime');
        $instance->setParameterProvider($this->get('ezpublish.fieldtype.ezpage.parameterprovider'), 'ezpage');

        return $instance;
    }

    /**
     * Gets the 'ezpublish.fragment_listener.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Fragment\FragmentListenerFactory A eZ\Bundle\EzPublishCoreBundle\Fragment\FragmentListenerFactory instance.
     */
    protected function getEzpublish_FragmentListener_FactoryService()
    {
        $this->services['ezpublish.fragment_listener.factory'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\Fragment\FragmentListenerFactory('/_fragment');

        $instance->setRequestStack($this->get('request_stack'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.http_cache.cache_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\HttpCacheBundle\CacheManager A FOS\HttpCacheBundle\CacheManager instance.
     */
    protected function getEzpublish_HttpCache_CacheManagerService()
    {
        $this->services['ezpublish.http_cache.cache_manager'] = $instance = new \FOS\HttpCacheBundle\CacheManager($this->get('fos_http_cache.proxy_client.varnish'), $this->get('ezpublish.chain_router'));

        if ($this->has('debug.event_dispatcher')) {
            $instance->setEventDispatcher($this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }
        $instance->setGenerateUrlType(true);
        $instance->setTagsHeader('X-Cache-Tags');
        $instance->addSubscriber(new \FOS\HttpCache\EventListener\LogSubscriber($this->get('logger')));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.http_cache.event_dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher A Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher instance.
     */
    protected function getEzpublish_HttpCache_EventDispatcherService()
    {
        $this->services['ezpublish.http_cache.event_dispatcher'] = $instance = new \Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher($this);

        $instance->addSubscriberService('ezpublish.cache_clear.content.base_locations_listener', 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\EventListener\\AssignedLocationsListener');
        $instance->addSubscriberService('ezpublish.cache_clear.content.parent_locations_listener', 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\EventListener\\ParentLocationsListener');
        $instance->addSubscriberService('ezpublish.cache_clear.content.related_locations_listener', 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\EventListener\\RelatedLocationsListener');

        return $instance;
    }

    /**
     * Gets the 'ezpublish.http_cache.proxy_client.varnish.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Cache\Http\VarnishProxyClientFactory A eZ\Bundle\EzPublishCoreBundle\Cache\Http\VarnishProxyClientFactory instance.
     */
    protected function getEzpublish_HttpCache_ProxyClient_Varnish_FactoryService()
    {
        return $this->services['ezpublish.http_cache.proxy_client.varnish.factory'] = new \eZ\Bundle\EzPublishCoreBundle\Cache\Http\VarnishProxyClientFactory($this->get('ezpublish.config.resolver.chain'), $this->get('ezpublish.config.dynamic_setting.parser'), 'FOS\\HttpCache\\ProxyClient\\Varnish');
    }

    /**
     * Gets the 'ezpublish.http_cache.purge_client.fos' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Cache\Http\FOSPurgeClient A eZ\Publish\Core\MVC\Symfony\Cache\Http\FOSPurgeClient instance.
     */
    protected function getEzpublish_HttpCache_PurgeClient_FosService()
    {
        return $this->services['ezpublish.http_cache.purge_client.fos'] = new \eZ\Publish\Core\MVC\Symfony\Cache\Http\FOSPurgeClient($this->get('ezpublish.http_cache.cache_manager'));
    }

    /**
     * Gets the 'ezpublish.http_cache.purge_client.local' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Cache\Http\LocalPurgeClient A eZ\Publish\Core\MVC\Symfony\Cache\Http\LocalPurgeClient instance.
     */
    protected function getEzpublish_HttpCache_PurgeClient_LocalService()
    {
        return $this->services['ezpublish.http_cache.purge_client.local'] = new \eZ\Publish\Core\MVC\Symfony\Cache\Http\LocalPurgeClient($this->get('ezpublish.http_cache.store'));
    }

    /**
     * Gets the 'ezpublish.http_cache.purger.instant' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Cache\Http\InstantCachePurger A eZ\Bundle\EzPublishCoreBundle\Cache\Http\InstantCachePurger instance.
     */
    protected function getEzpublish_HttpCache_Purger_InstantService()
    {
        return $this->services['ezpublish.http_cache.purger.instant'] = new \eZ\Bundle\EzPublishCoreBundle\Cache\Http\InstantCachePurger($this->get('ezpublish.http_cache.purge_client.local'), $this->get('ezpublish.api.service.content'), $this->get('ezpublish.http_cache.event_dispatcher'));
    }

    /**
     * Gets the 'ezpublish.http_cache.signalslot.assign_section' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\AssignSectionSlot A eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\AssignSectionSlot instance.
     */
    protected function getEzpublish_HttpCache_Signalslot_AssignSectionService()
    {
        return $this->services['ezpublish.http_cache.signalslot.assign_section'] = new \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\AssignSectionSlot($this->get('ezpublish.http_cache.purger.instant'));
    }

    /**
     * Gets the 'ezpublish.http_cache.signalslot.assign_user_to_user_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\AssignUserToUserGroupSlot A eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\AssignUserToUserGroupSlot instance.
     */
    protected function getEzpublish_HttpCache_Signalslot_AssignUserToUserGroupService()
    {
        return $this->services['ezpublish.http_cache.signalslot.assign_user_to_user_group'] = new \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\AssignUserToUserGroupSlot($this->get('ezpublish.http_cache.purger.instant'));
    }

    /**
     * Gets the 'ezpublish.http_cache.signalslot.copy_content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\CopyContentSlot A eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\CopyContentSlot instance.
     */
    protected function getEzpublish_HttpCache_Signalslot_CopyContentService()
    {
        return $this->services['ezpublish.http_cache.signalslot.copy_content'] = new \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\CopyContentSlot($this->get('ezpublish.http_cache.purger.instant'));
    }

    /**
     * Gets the 'ezpublish.http_cache.signalslot.create_location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\CreateLocationSlot A eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\CreateLocationSlot instance.
     */
    protected function getEzpublish_HttpCache_Signalslot_CreateLocationService()
    {
        return $this->services['ezpublish.http_cache.signalslot.create_location'] = new \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\CreateLocationSlot($this->get('ezpublish.http_cache.purger.instant'));
    }

    /**
     * Gets the 'ezpublish.http_cache.signalslot.delete_content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\DeleteContentSlot A eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\DeleteContentSlot instance.
     */
    protected function getEzpublish_HttpCache_Signalslot_DeleteContentService()
    {
        return $this->services['ezpublish.http_cache.signalslot.delete_content'] = new \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\DeleteContentSlot($this->get('ezpublish.http_cache.purger.instant'));
    }

    /**
     * Gets the 'ezpublish.http_cache.signalslot.delete_location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\DeleteLocationSlot A eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\DeleteLocationSlot instance.
     */
    protected function getEzpublish_HttpCache_Signalslot_DeleteLocationService()
    {
        return $this->services['ezpublish.http_cache.signalslot.delete_location'] = new \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\DeleteLocationSlot($this->get('ezpublish.http_cache.purger.instant'));
    }

    /**
     * Gets the 'ezpublish.http_cache.signalslot.delete_version' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\DeleteVersionSlot A eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\DeleteVersionSlot instance.
     */
    protected function getEzpublish_HttpCache_Signalslot_DeleteVersionService()
    {
        return $this->services['ezpublish.http_cache.signalslot.delete_version'] = new \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\DeleteVersionSlot($this->get('ezpublish.http_cache.purger.instant'));
    }

    /**
     * Gets the 'ezpublish.http_cache.signalslot.hide_location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\HideLocationSlot A eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\HideLocationSlot instance.
     */
    protected function getEzpublish_HttpCache_Signalslot_HideLocationService()
    {
        return $this->services['ezpublish.http_cache.signalslot.hide_location'] = new \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\HideLocationSlot($this->get('ezpublish.http_cache.purger.instant'));
    }

    /**
     * Gets the 'ezpublish.http_cache.signalslot.move_subtree' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\MoveSubtreeSlot A eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\MoveSubtreeSlot instance.
     */
    protected function getEzpublish_HttpCache_Signalslot_MoveSubtreeService()
    {
        return $this->services['ezpublish.http_cache.signalslot.move_subtree'] = new \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\MoveSubtreeSlot($this->get('ezpublish.http_cache.purger.instant'));
    }

    /**
     * Gets the 'ezpublish.http_cache.signalslot.publish_version' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\PublishVersionSlot A eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\PublishVersionSlot instance.
     */
    protected function getEzpublish_HttpCache_Signalslot_PublishVersionService()
    {
        return $this->services['ezpublish.http_cache.signalslot.publish_version'] = new \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\PublishVersionSlot($this->get('ezpublish.http_cache.purger.instant'));
    }

    /**
     * Gets the 'ezpublish.http_cache.signalslot.set_content_state' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\SetContentStateSlot A eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\SetContentStateSlot instance.
     */
    protected function getEzpublish_HttpCache_Signalslot_SetContentStateService()
    {
        return $this->services['ezpublish.http_cache.signalslot.set_content_state'] = new \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\SetContentStateSlot($this->get('ezpublish.http_cache.purger.instant'));
    }

    /**
     * Gets the 'ezpublish.http_cache.signalslot.swap_location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\SwapLocationSlot A eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\SwapLocationSlot instance.
     */
    protected function getEzpublish_HttpCache_Signalslot_SwapLocationService()
    {
        return $this->services['ezpublish.http_cache.signalslot.swap_location'] = new \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\SwapLocationSlot($this->get('ezpublish.http_cache.purger.instant'));
    }

    /**
     * Gets the 'ezpublish.http_cache.signalslot.unassign_user_from_user_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\UnassignUserFromUserGroupSlot A eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\UnassignUserFromUserGroupSlot instance.
     */
    protected function getEzpublish_HttpCache_Signalslot_UnassignUserFromUserGroupService()
    {
        return $this->services['ezpublish.http_cache.signalslot.unassign_user_from_user_group'] = new \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\UnassignUserFromUserGroupSlot($this->get('ezpublish.http_cache.purger.instant'));
    }

    /**
     * Gets the 'ezpublish.http_cache.signalslot.unhide_location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\UnhideLocationSlot A eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\UnhideLocationSlot instance.
     */
    protected function getEzpublish_HttpCache_Signalslot_UnhideLocationService()
    {
        return $this->services['ezpublish.http_cache.signalslot.unhide_location'] = new \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\UnhideLocationSlot($this->get('ezpublish.http_cache.purger.instant'));
    }

    /**
     * Gets the 'ezpublish.http_cache.signalslot.update_location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\UpdateLocationSlot A eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\UpdateLocationSlot instance.
     */
    protected function getEzpublish_HttpCache_Signalslot_UpdateLocationService()
    {
        return $this->services['ezpublish.http_cache.signalslot.update_location'] = new \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\UpdateLocationSlot($this->get('ezpublish.http_cache.purger.instant'));
    }

    /**
     * Gets the 'ezpublish.http_cache.signalslot.update_user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\UpdateUserSlot A eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\UpdateUserSlot instance.
     */
    protected function getEzpublish_HttpCache_Signalslot_UpdateUserService()
    {
        return $this->services['ezpublish.http_cache.signalslot.update_user'] = new \eZ\Publish\Core\MVC\Symfony\Cache\Http\SignalSlot\UpdateUserSlot($this->get('ezpublish.http_cache.purger.instant'));
    }

    /**
     * Gets the 'ezpublish.http_cache.store' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Cache\Http\LocationAwareStore A eZ\Publish\Core\MVC\Symfony\Cache\Http\LocationAwareStore instance.
     */
    protected function getEzpublish_HttpCache_StoreService()
    {
        return $this->services['ezpublish.http_cache.store'] = new \eZ\Publish\Core\MVC\Symfony\Cache\Http\LocationAwareStore((__DIR__.'/http_cache'));
    }

    /**
     * Gets the 'ezpublish.image_alias.imagine.alias_cleaner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Imagine\AliasCleaner A eZ\Bundle\EzPublishCoreBundle\Imagine\AliasCleaner instance.
     */
    public function getEzpublish_ImageAlias_Imagine_AliasCleanerService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.image_alias.imagine.alias_cleaner'] = new eZBundleEzPublishCoreBundleImagineAliasCleaner_0000000010d770ca00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_ImageAlias_Imagine_AliasCleanerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \eZ\Bundle\EzPublishCoreBundle\Imagine\AliasCleaner($this->get('ezpublish.image_alias.imagine.cache_resolver'));
    }

    /**
     * Gets the 'ezpublish.image_alias.imagine.alias_generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Imagine\AliasGenerator A eZ\Bundle\EzPublishCoreBundle\Imagine\AliasGenerator instance.
     */
    protected function getEzpublish_ImageAlias_Imagine_AliasGeneratorService()
    {
        return $this->services['ezpublish.image_alias.imagine.alias_generator'] = new \eZ\Bundle\EzPublishCoreBundle\Imagine\AliasGenerator($this->get('ezpublish.image_alias.imagine.binary_loader'), $this->get('liip_imagine.filter.manager'), $this->get('ezpublish.image_alias.imagine.cache_resolver'), $this->get('liip_imagine.filter.configuration'), $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'ezpublish.image_alias.imagine.binary_loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Imagine\BinaryLoader A eZ\Bundle\EzPublishCoreBundle\Imagine\BinaryLoader instance.
     */
    protected function getEzpublish_ImageAlias_Imagine_BinaryLoaderService()
    {
        return $this->services['ezpublish.image_alias.imagine.binary_loader'] = new \eZ\Bundle\EzPublishCoreBundle\Imagine\BinaryLoader($this->get('ezpublish.fieldtype.ezimage.io_service'), $this->get('liip_imagine.extension_guesser'));
    }

    /**
     * Gets the 'ezpublish.image_alias.imagine.cache_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Imagine\IORepositoryResolver A eZ\Bundle\EzPublishCoreBundle\Imagine\IORepositoryResolver instance.
     */
    protected function getEzpublish_ImageAlias_Imagine_CacheResolverService()
    {
        return $this->services['ezpublish.image_alias.imagine.cache_resolver'] = new \eZ\Bundle\EzPublishCoreBundle\Imagine\IORepositoryResolver($this->get('ezpublish.fieldtype.ezimage.io_service'), $this->get('router.request_context'), $this->get('liip_imagine.filter.configuration'), $this->get('ezpublish.image_alias.variation_purger.io'), $this->get('ezpublish.image_alias.variation_path_generator.alias_directory'));
    }

    /**
     * Gets the 'ezpublish.image_alias.imagine.filter.reduce_noise' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Imagine\Filter\UnsupportedFilter A eZ\Bundle\EzPublishCoreBundle\Imagine\Filter\UnsupportedFilter instance.
     */
    protected function getEzpublish_ImageAlias_Imagine_Filter_ReduceNoiseService()
    {
        return $this->services['ezpublish.image_alias.imagine.filter.reduce_noise'] = new \eZ\Bundle\EzPublishCoreBundle\Imagine\Filter\UnsupportedFilter();
    }

    /**
     * Gets the 'ezpublish.image_alias.variation_path_generator.alias_directory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Imagine\VariationPathGenerator\AliasDirectoryVariationPathGenerator A eZ\Bundle\EzPublishCoreBundle\Imagine\VariationPathGenerator\AliasDirectoryVariationPathGenerator instance.
     */
    protected function getEzpublish_ImageAlias_VariationPathGenerator_AliasDirectoryService()
    {
        return $this->services['ezpublish.image_alias.variation_path_generator.alias_directory'] = new \eZ\Bundle\EzPublishCoreBundle\Imagine\VariationPathGenerator\AliasDirectoryVariationPathGenerator();
    }

    /**
     * Gets the 'ezpublish.image_alias.variation_path_generator.original_directory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Imagine\VariationPathGenerator\OriginalDirectoryVariationPathGenerator A eZ\Bundle\EzPublishCoreBundle\Imagine\VariationPathGenerator\OriginalDirectoryVariationPathGenerator instance.
     */
    protected function getEzpublish_ImageAlias_VariationPathGenerator_OriginalDirectoryService()
    {
        return $this->services['ezpublish.image_alias.variation_path_generator.original_directory'] = new \eZ\Bundle\EzPublishCoreBundle\Imagine\VariationPathGenerator\OriginalDirectoryVariationPathGenerator();
    }

    /**
     * Gets the 'ezpublish.image_alias.variation_purger.io' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Imagine\VariationPurger\IOVariationPurger A eZ\Bundle\EzPublishCoreBundle\Imagine\VariationPurger\IOVariationPurger instance.
     */
    protected function getEzpublish_ImageAlias_VariationPurger_IoService()
    {
        $this->services['ezpublish.image_alias.variation_purger.io'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\Imagine\VariationPurger\IOVariationPurger($this->get('ezpublish.fieldtype.ezimage.io_service'), $this->get('ezpublish.image_alias.variation_path_generator.alias_directory'));

        if ($this->has('logger')) {
            $instance->setLogger($this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }

        return $instance;
    }

    /**
     * Gets the 'ezpublish.image_alias.variation_purger.legacy_storage_image_file' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Imagine\VariationPurger\ImageFileVariationPurger A eZ\Bundle\EzPublishCoreBundle\Imagine\VariationPurger\ImageFileVariationPurger instance.
     */
    protected function getEzpublish_ImageAlias_VariationPurger_LegacyStorageImageFileService()
    {
        $this->services['ezpublish.image_alias.variation_purger.legacy_storage_image_file'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\Imagine\VariationPurger\ImageFileVariationPurger($this->get('ezpublish.image_alias.variation_purger.legacy_storage_image_file.image_file_list'), $this->get('ezpublish.fieldtype.ezimage.io_service'), $this->get('ezpublish.image_alias.variation_path_generator.original_directory'));

        if ($this->has('logger')) {
            $instance->setLogger($this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }

        return $instance;
    }

    /**
     * Gets the 'ezpublish.image_alias.variation_purger.legacy_storage_image_file.image_file_list' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Imagine\VariationPurger\LegacyStorageImageFileList A eZ\Bundle\EzPublishCoreBundle\Imagine\VariationPurger\LegacyStorageImageFileList instance.
     */
    protected function getEzpublish_ImageAlias_VariationPurger_LegacyStorageImageFile_ImageFileListService()
    {
        return $this->services['ezpublish.image_alias.variation_purger.legacy_storage_image_file.image_file_list'] = new \eZ\Bundle\EzPublishCoreBundle\Imagine\VariationPurger\LegacyStorageImageFileList($this->get('ezpublish.image_alias.variation_purger.legacy_storage_image_file.image_file_row_reader'), $this->get("ezpublish.config.resolver")->getParameter("io.legacy_url_prefix", null, null), $this->get("ezpublish.config.resolver")->getParameter("image.published_images_dir", null, null));
    }

    /**
     * Gets the 'ezpublish.image_alias.variation_purger.legacy_storage_image_file.image_file_row_reader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Imagine\VariationPurger\LegacyStorageImageFileRowReader A eZ\Bundle\EzPublishCoreBundle\Imagine\VariationPurger\LegacyStorageImageFileRowReader instance.
     */
    protected function getEzpublish_ImageAlias_VariationPurger_LegacyStorageImageFile_ImageFileRowReaderService()
    {
        return $this->services['ezpublish.image_alias.variation_purger.legacy_storage_image_file.image_file_row_reader'] = new \eZ\Bundle\EzPublishCoreBundle\Imagine\VariationPurger\LegacyStorageImageFileRowReader($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.locale.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Locale\LocaleConverter A eZ\Publish\Core\MVC\Symfony\Locale\LocaleConverter instance.
     */
    protected function getEzpublish_Locale_ConverterService()
    {
        return $this->services['ezpublish.locale.converter'] = new \eZ\Publish\Core\MVC\Symfony\Locale\LocaleConverter(array('ara-SA' => 'ar_SA', 'cat-ES' => 'ca_ES', 'chi-CN' => 'zh_CN', 'chi-HK' => 'zh_HK', 'chi-TW' => 'zh_TW', 'cro-HR' => 'hr_HR', 'cze-CZ' => 'cs_CZ', 'dan-DK' => 'da_DK', 'dut-NL' => 'nl_NL', 'ell-GR' => 'el_GR', 'eng-AU' => 'en_AU', 'eng-CA' => 'en_CA', 'eng-GB' => 'en_GB', 'eng-NZ' => 'en_NZ', 'eng-US' => 'en_US', 'epo-EO' => 'eo', 'esl-ES' => 'es_ES', 'esl-MX' => 'es_MX', 'fin-FI' => 'fi_FI', 'fre-BE' => 'fr_BE', 'fre-CA' => 'fr_CA', 'fre-FR' => 'fr_FR', 'ger-DE' => 'de_DE', 'heb-IL' => 'he_IL', 'hin-IN' => 'hi_IN', 'hun-HU' => 'hu_HU', 'ind-ID' => 'id_ID', 'ita-IT' => 'it_IT', 'jpn-JP' => 'ja_JP', 'kor-KR' => 'ko_KR', 'nno-NO' => 'nn_NO', 'nor-NO' => 'no_NO', 'pol-PL' => 'pl_PL', 'por-BR' => 'pt_BR', 'por-MZ' => 'pt_MZ', 'por-PT' => 'pt_PT', 'rus-RU' => 'ru_RI', 'ser-SR' => 'sr_RS', 'slk-SK' => 'sk_SK', 'srp-RS' => 'sr_RS', 'swe-SE' => 'sv_SE', 'tur-TR' => 'tr_TR', 'ukr-UA' => 'uk_UA'), $this->get('logger'));
    }

    /**
     * Gets the 'ezpublish.location_view.matcher_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Matcher\ServiceAwareMatcherFactory A eZ\Bundle\EzPublishCoreBundle\Matcher\ServiceAwareMatcherFactory instance.
     */
    protected function getEzpublish_LocationView_MatcherFactoryService()
    {
        $this->services['ezpublish.location_view.matcher_factory'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\Matcher\ServiceAwareMatcherFactory($this->get('ezpublish.signalslot.repository'), 'eZ\\Publish\\Core\\MVC\\Symfony\\Matcher\\ContentBased');

        $instance->setContainer($this);
        $instance->setMatchConfig($this->get("ezpublish.config.resolver")->getParameter("location_view", null, null));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.location_view_provider.configured' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\View\Provider\Configured A eZ\Bundle\EzPublishCoreBundle\View\Provider\Configured instance.
     */
    protected function getEzpublish_LocationViewProvider_ConfiguredService()
    {
        return $this->services['ezpublish.location_view_provider.configured'] = new \eZ\Bundle\EzPublishCoreBundle\View\Provider\Configured($this->get('ezpublish.location_view.matcher_factory'));
    }

    /**
     * Gets the 'ezpublish.original_request_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\EventListener\OriginalRequestListener A eZ\Bundle\EzPublishCoreBundle\EventListener\OriginalRequestListener instance.
     */
    protected function getEzpublish_OriginalRequestListenerService()
    {
        return $this->services['ezpublish.original_request_listener'] = new \eZ\Bundle\EzPublishCoreBundle\EventListener\OriginalRequestListener();
    }

    /**
     * Gets the 'ezpublish.param_converter.content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Converter\ContentParamConverter A eZ\Bundle\EzPublishCoreBundle\Converter\ContentParamConverter instance.
     */
    protected function getEzpublish_ParamConverter_ContentService()
    {
        return $this->services['ezpublish.param_converter.content'] = new \eZ\Bundle\EzPublishCoreBundle\Converter\ContentParamConverter($this->get('ezpublish.api.service.content'));
    }

    /**
     * Gets the 'ezpublish.param_converter.location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Converter\LocationParamConverter A eZ\Bundle\EzPublishCoreBundle\Converter\LocationParamConverter instance.
     */
    protected function getEzpublish_ParamConverter_LocationService()
    {
        return $this->services['ezpublish.param_converter.location'] = new \eZ\Bundle\EzPublishCoreBundle\Converter\LocationParamConverter($this->get('ezpublish.api.service.location'));
    }

    /**
     * Gets the 'ezpublish.persistence.connection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Doctrine\DBAL\Driver\Connection A Doctrine\DBAL\Driver\Connection instance.
     */
    protected function getEzpublish_Persistence_ConnectionService($lazyLoad = true)
    {
        return $this->services['ezpublish.persistence.connection'] = $this->get('ezpublish.persistence.connection.factory')->getConnection();
    }

    /**
     * Gets the 'ezpublish.persistence.connection.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\ApiLoader\StorageConnectionFactory A eZ\Bundle\EzPublishCoreBundle\ApiLoader\StorageConnectionFactory instance.
     */
    protected function getEzpublish_Persistence_Connection_FactoryService()
    {
        $this->services['ezpublish.persistence.connection.factory'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\ApiLoader\StorageConnectionFactory($this->get('ezpublish.api.repository_configuration_provider'));

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'ezpublish.persistence.external_storage_registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\StorageRegistry A eZ\Publish\Core\Persistence\Legacy\Content\StorageRegistry instance.
     */
    protected function getEzpublish_Persistence_ExternalStorageRegistryService()
    {
        return $this->services['ezpublish.persistence.external_storage_registry'] = $this->get('ezpublish.persistence.external_storage_registry.factory')->buildExternalStorageRegistry('eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\StorageRegistry');
    }

    /**
     * Gets the 'ezpublish.persistence.external_storage_registry.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Base\Container\ApiLoader\Storage\ExternalStorageRegistryFactory A eZ\Publish\Core\Base\Container\ApiLoader\Storage\ExternalStorageRegistryFactory instance.
     */
    protected function getEzpublish_Persistence_ExternalStorageRegistry_FactoryService()
    {
        $this->services['ezpublish.persistence.external_storage_registry.factory'] = $instance = new \eZ\Publish\Core\Base\Container\ApiLoader\Storage\ExternalStorageRegistryFactory();

        $instance->setContainer($this);
        $instance->registerExternalStorageHandler('ezpublish.fieldtype.ezbinaryfile.externalstorage', 'ezbinaryfile');
        $instance->registerExternalStorageHandler('ezpublish.fieldtype.ezimage.externalstorage', 'ezimage');
        $instance->registerExternalStorageHandler('ezpublish.fieldtype.ezkeyword.externalstorage', 'ezkeyword');
        $instance->registerExternalStorageHandler('ezpublish.fieldtype.ezmedia.externalstorage', 'ezmedia');
        $instance->registerExternalStorageHandler('ezpublish.fieldtype.ezurl.externalstorage', 'ezurl');
        $instance->registerExternalStorageHandler('ezpublish.fieldtype.ezrichtext.externalstorage', 'ezrichtext');
        $instance->registerExternalStorageHandler('ezpublish.fieldtype.ezgmaplocation.externalstorage', 'ezgmaplocation');
        $instance->registerExternalStorageHandler('ezpublish.fieldtype.ezuser.externalstorage', 'ezuser');

        return $instance;
    }

    /**
     * Gets the 'ezpublish.persistence.field_type_registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\FieldTypeRegistry A eZ\Publish\Core\Persistence\FieldTypeRegistry instance.
     */
    protected function getEzpublish_Persistence_FieldTypeRegistryService()
    {
        return $this->services['ezpublish.persistence.field_type_registry'] = $this->get('ezpublish.persistence.field_type_registry.factory')->buildFieldTypeRegistry('eZ\\Publish\\Core\\Persistence\\FieldTypeRegistry', $this->get('ezpublish.field_type_collection.factory'));
    }

    /**
     * Gets the 'ezpublish.persistence.field_type_registry.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Base\Container\ApiLoader\Storage\FieldTypeRegistryFactory A eZ\Publish\Core\Base\Container\ApiLoader\Storage\FieldTypeRegistryFactory instance.
     */
    protected function getEzpublish_Persistence_FieldTypeRegistry_FactoryService()
    {
        return $this->services['ezpublish.persistence.field_type_registry.factory'] = new \eZ\Publish\Core\Base\Container\ApiLoader\Storage\FieldTypeRegistryFactory();
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.content.gateway.exception_conversion' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Gateway\ExceptionConversion A eZ\Publish\Core\Persistence\Legacy\Content\Gateway\ExceptionConversion instance.
     */
    protected function getEzpublish_Persistence_Legacy_Content_Gateway_ExceptionConversionService()
    {
        return $this->services['ezpublish.persistence.legacy.content.gateway.exception_conversion'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Gateway\ExceptionConversion($this->get('ezpublish.persistence.legacy.content.gateway.inner'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.content.gateway.inner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Gateway\DoctrineDatabase A eZ\Publish\Core\Persistence\Legacy\Content\Gateway\DoctrineDatabase instance.
     */
    protected function getEzpublish_Persistence_Legacy_Content_Gateway_InnerService()
    {
        return $this->services['ezpublish.persistence.legacy.content.gateway.inner'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Gateway\DoctrineDatabase($this->get('ezpublish.api.storage_engine.legacy.dbhandler'), $this->get('ezpublish.persistence.legacy.content.query_builder'), $this->get('ezpublish.spi.persistence.legacy.language.handler.caching'), $this->get('ezpublish.persistence.legacy.language.mask_generator'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.content.mapper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Mapper A eZ\Publish\Core\Persistence\Legacy\Content\Mapper instance.
     */
    protected function getEzpublish_Persistence_Legacy_Content_MapperService()
    {
        return $this->services['ezpublish.persistence.legacy.content.mapper'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Mapper($this->get('ezpublish.persistence.legacy.field_value_converter.registry'), $this->get('ezpublish.spi.persistence.legacy.language.handler.caching'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.content.query_builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Gateway\DoctrineDatabase\QueryBuilder A eZ\Publish\Core\Persistence\Legacy\Content\Gateway\DoctrineDatabase\QueryBuilder instance.
     */
    protected function getEzpublish_Persistence_Legacy_Content_QueryBuilderService()
    {
        return $this->services['ezpublish.persistence.legacy.content.query_builder'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Gateway\DoctrineDatabase\QueryBuilder($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.content_type.content_updater' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Type\ContentUpdater A eZ\Publish\Core\Persistence\Legacy\Content\Type\ContentUpdater instance.
     */
    protected function getEzpublish_Persistence_Legacy_ContentType_ContentUpdaterService()
    {
        return $this->services['ezpublish.persistence.legacy.content_type.content_updater'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Type\ContentUpdater($this->get('ezpublish.persistence.legacy.content.gateway.exception_conversion'), $this->get('ezpublish.persistence.legacy.field_value_converter.registry'), $this->get('ezpublish.persistence.legacy.external_storage_handler'), $this->get('ezpublish.persistence.legacy.content.mapper'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.content_type.gateway.exception_conversion' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Type\Gateway\ExceptionConversion A eZ\Publish\Core\Persistence\Legacy\Content\Type\Gateway\ExceptionConversion instance.
     */
    protected function getEzpublish_Persistence_Legacy_ContentType_Gateway_ExceptionConversionService()
    {
        return $this->services['ezpublish.persistence.legacy.content_type.gateway.exception_conversion'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Type\Gateway\ExceptionConversion($this->get('ezpublish.persistence.legacy.content_type.gateway.inner'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.content_type.gateway.inner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Type\Gateway\DoctrineDatabase A eZ\Publish\Core\Persistence\Legacy\Content\Type\Gateway\DoctrineDatabase instance.
     */
    protected function getEzpublish_Persistence_Legacy_ContentType_Gateway_InnerService()
    {
        return $this->services['ezpublish.persistence.legacy.content_type.gateway.inner'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Type\Gateway\DoctrineDatabase($this->get('ezpublish.api.storage_engine.legacy.dbhandler'), $this->get('ezpublish.persistence.legacy.language.mask_generator'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.content_type.mapper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Type\Mapper A eZ\Publish\Core\Persistence\Legacy\Content\Type\Mapper instance.
     */
    protected function getEzpublish_Persistence_Legacy_ContentType_MapperService()
    {
        return $this->services['ezpublish.persistence.legacy.content_type.mapper'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Type\Mapper($this->get('ezpublish.persistence.legacy.field_value_converter.registry'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.content_type.update_handler.basic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Type\Update\Handler\DoctrineDatabase A eZ\Publish\Core\Persistence\Legacy\Content\Type\Update\Handler\DoctrineDatabase instance.
     */
    protected function getEzpublish_Persistence_Legacy_ContentType_UpdateHandler_BasicService()
    {
        return $this->services['ezpublish.persistence.legacy.content_type.update_handler.basic'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Type\Update\Handler\DoctrineDatabase($this->get('ezpublish.persistence.legacy.content_type.gateway.exception_conversion'), $this->get('ezpublish.persistence.legacy.content_type.content_updater'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.external_storage_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\StorageHandler A eZ\Publish\Core\Persistence\Legacy\Content\StorageHandler instance.
     */
    protected function getEzpublish_Persistence_Legacy_ExternalStorageHandlerService()
    {
        return $this->services['ezpublish.persistence.legacy.external_storage_handler'] = new \eZ\Publish\Core\Persistence\Legacy\Content\StorageHandler($this->get('ezpublish.persistence.external_storage_registry'), array('identifier' => 'LegacyStorage', 'connection' => $this->get('ezpublish.api.storage_engine.legacy.dbhandler')));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.field_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldHandler A eZ\Publish\Core\Persistence\Legacy\Content\FieldHandler instance.
     */
    public function getEzpublish_Persistence_Legacy_FieldHandlerService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.persistence.legacy.field_handler'] = new eZPublishCorePersistenceLegacyContentFieldHandler_0000000010d7740100007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Persistence_Legacy_FieldHandlerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \eZ\Publish\Core\Persistence\Legacy\Content\FieldHandler($this->get('ezpublish.persistence.legacy.content.gateway.exception_conversion'), $this->get('ezpublish.persistence.legacy.content.mapper'), $this->get('ezpublish.persistence.legacy.external_storage_handler'), $this->get('ezpublish.spi.persistence.legacy.language.handler.caching'), $this->get('ezpublish.persistence.field_type_registry'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.field_value_converter.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\ConverterRegistry A eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\ConverterRegistry instance.
     */
    protected function getEzpublish_Persistence_Legacy_FieldValueConverter_RegistryService()
    {
        $this->services['ezpublish.persistence.legacy.field_value_converter.registry'] = $instance = new \eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\ConverterRegistry();

        $instance->register('ezauthor', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\AuthorConverter::create');
        $instance->register('ezbinaryfile', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\BinaryFileConverter::create');
        $instance->register('ezboolean', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\CheckboxConverter::create');
        $instance->register('ezcountry', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\CountryConverter::create');
        $instance->register('ezdatetime', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\DateAndTimeConverter::create');
        $instance->register('ezfloat', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\FloatConverter::create');
        $instance->register('ezinteger', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\IntegerConverter::create');
        $instance->register('ezkeyword', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\KeywordConverter::create');
        $instance->register('ezmedia', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\MediaConverter::create');
        $instance->register('ezselection', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\SelectionConverter::create');
        $instance->register('ezstring', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\TextLineConverter::create');
        $instance->register('eztext', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\TextBlockConverter::create');
        $instance->register('ezrichtext', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\RichTextConverter::create');
        $instance->register('ezsrrating', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\RatingConverter::create');
        $instance->register('ezurl', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\UrlConverter::create');
        $instance->register('ezpage', $this->get('ezpublish.fieldtype.ezpage.converter'));
        $instance->register('ezimage', $this->get('ezpublish.fieldtype.ezimage.converter'));
        $instance->register('ezisbn', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\ISBNConverter::create');
        $instance->register('ezgmaplocation', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\MapLocationConverter::create');
        $instance->register('ezemail', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\EmailAddressConverter::create');
        $instance->register('ezobjectrelation', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\RelationConverter::create');
        $instance->register('ezobjectrelationlist', $this->get('ezpublish.fieldtype.ezobjectrelationlist.converter'));
        $instance->register('ezuser', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\NullConverter::create');
        $instance->register('ezdate', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\DateConverter::create');
        $instance->register('ezenum', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\NullConverter::create');
        $instance->register('ezidentifier', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\NullConverter::create');
        $instance->register('ezinisetting', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\NullConverter::create');
        $instance->register('ezmatrix', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\NullConverter::create');
        $instance->register('ezmultioption', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\NullConverter::create');
        $instance->register('ezmultioption2', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\NullConverter::create');
        $instance->register('ezmultiprice', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\NullConverter::create');
        $instance->register('ezoption', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\NullConverter::create');
        $instance->register('ezpackage', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\NullConverter::create');
        $instance->register('ezprice', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\NullConverter::create');
        $instance->register('ezproductcategory', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\NullConverter::create');
        $instance->register('ezrangeoption', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\NullConverter::create');
        $instance->register('ezsubtreesubscription', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\NullConverter::create');
        $instance->register('eztime', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\TimeConverter::create');
        $instance->register('ezcomcomments', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\NullConverter::create');
        $instance->register('ezpaex', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\NullConverter::create');
        $instance->register('ezsurvey', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\NullConverter::create');
        $instance->register('eztags', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\NullConverter::create');
        $instance->register('ezrecommendation', 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\NullConverter::create');

        return $instance;
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.language.cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Language\Cache A eZ\Publish\Core\Persistence\Legacy\Content\Language\Cache instance.
     */
    protected function getEzpublish_Persistence_Legacy_Language_CacheService()
    {
        return $this->services['ezpublish.persistence.legacy.language.cache'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Language\Cache();
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.language.gateway.exception_conversion' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Language\Gateway\ExceptionConversion A eZ\Publish\Core\Persistence\Legacy\Content\Language\Gateway\ExceptionConversion instance.
     */
    protected function getEzpublish_Persistence_Legacy_Language_Gateway_ExceptionConversionService()
    {
        return $this->services['ezpublish.persistence.legacy.language.gateway.exception_conversion'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Language\Gateway\ExceptionConversion($this->get('ezpublish.persistence.legacy.language.gateway.inner'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.language.gateway.inner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Language\Gateway\DoctrineDatabase A eZ\Publish\Core\Persistence\Legacy\Content\Language\Gateway\DoctrineDatabase instance.
     */
    protected function getEzpublish_Persistence_Legacy_Language_Gateway_InnerService()
    {
        return $this->services['ezpublish.persistence.legacy.language.gateway.inner'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Language\Gateway\DoctrineDatabase($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.language.mapper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Language\Mapper A eZ\Publish\Core\Persistence\Legacy\Content\Language\Mapper instance.
     */
    protected function getEzpublish_Persistence_Legacy_Language_MapperService()
    {
        return $this->services['ezpublish.persistence.legacy.language.mapper'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Language\Mapper();
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.language.mask_generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Language\MaskGenerator A eZ\Publish\Core\Persistence\Legacy\Content\Language\MaskGenerator instance.
     */
    protected function getEzpublish_Persistence_Legacy_Language_MaskGeneratorService()
    {
        return $this->services['ezpublish.persistence.legacy.language.mask_generator'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Language\MaskGenerator($this->get('ezpublish.spi.persistence.legacy.language.handler.caching'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.location.gateway.exception_conversion' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Location\Gateway\ExceptionConversion A eZ\Publish\Core\Persistence\Legacy\Content\Location\Gateway\ExceptionConversion instance.
     */
    protected function getEzpublish_Persistence_Legacy_Location_Gateway_ExceptionConversionService()
    {
        return $this->services['ezpublish.persistence.legacy.location.gateway.exception_conversion'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Location\Gateway\ExceptionConversion($this->get('ezpublish.persistence.legacy.location.gateway.inner'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.location.gateway.inner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Location\Gateway\DoctrineDatabase A eZ\Publish\Core\Persistence\Legacy\Content\Location\Gateway\DoctrineDatabase instance.
     */
    protected function getEzpublish_Persistence_Legacy_Location_Gateway_InnerService()
    {
        return $this->services['ezpublish.persistence.legacy.location.gateway.inner'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Location\Gateway\DoctrineDatabase($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.location.mapper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Location\Mapper A eZ\Publish\Core\Persistence\Legacy\Content\Location\Mapper instance.
     */
    protected function getEzpublish_Persistence_Legacy_Location_MapperService()
    {
        return $this->services['ezpublish.persistence.legacy.location.mapper'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Location\Mapper();
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.object_state.gateway.exception_conversion' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\ObjectState\Gateway\ExceptionConversion A eZ\Publish\Core\Persistence\Legacy\Content\ObjectState\Gateway\ExceptionConversion instance.
     */
    protected function getEzpublish_Persistence_Legacy_ObjectState_Gateway_ExceptionConversionService()
    {
        return $this->services['ezpublish.persistence.legacy.object_state.gateway.exception_conversion'] = new \eZ\Publish\Core\Persistence\Legacy\Content\ObjectState\Gateway\ExceptionConversion($this->get('ezpublish.persistence.legacy.object_state.gateway.inner'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.object_state.gateway.inner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\ObjectState\Gateway\DoctrineDatabase A eZ\Publish\Core\Persistence\Legacy\Content\ObjectState\Gateway\DoctrineDatabase instance.
     */
    protected function getEzpublish_Persistence_Legacy_ObjectState_Gateway_InnerService()
    {
        return $this->services['ezpublish.persistence.legacy.object_state.gateway.inner'] = new \eZ\Publish\Core\Persistence\Legacy\Content\ObjectState\Gateway\DoctrineDatabase($this->get('ezpublish.api.storage_engine.legacy.dbhandler'), $this->get('ezpublish.persistence.legacy.language.mask_generator'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.object_state.mapper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\ObjectState\Mapper A eZ\Publish\Core\Persistence\Legacy\Content\ObjectState\Mapper instance.
     */
    protected function getEzpublish_Persistence_Legacy_ObjectState_MapperService()
    {
        return $this->services['ezpublish.persistence.legacy.object_state.mapper'] = new \eZ\Publish\Core\Persistence\Legacy\Content\ObjectState\Mapper($this->get('ezpublish.spi.persistence.legacy.language.handler.caching'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.role.gateway.exception_conversion' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\User\Role\Gateway\ExceptionConversion A eZ\Publish\Core\Persistence\Legacy\User\Role\Gateway\ExceptionConversion instance.
     */
    protected function getEzpublish_Persistence_Legacy_Role_Gateway_ExceptionConversionService()
    {
        return $this->services['ezpublish.persistence.legacy.role.gateway.exception_conversion'] = new \eZ\Publish\Core\Persistence\Legacy\User\Role\Gateway\ExceptionConversion($this->get('ezpublish.persistence.legacy.role.gateway.inner'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.role.gateway.inner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\User\Role\Gateway\DoctrineDatabase A eZ\Publish\Core\Persistence\Legacy\User\Role\Gateway\DoctrineDatabase instance.
     */
    protected function getEzpublish_Persistence_Legacy_Role_Gateway_InnerService()
    {
        return $this->services['ezpublish.persistence.legacy.role.gateway.inner'] = new \eZ\Publish\Core\Persistence\Legacy\User\Role\Gateway\DoctrineDatabase($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.role.limitation.converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\User\Role\LimitationConverter A eZ\Publish\Core\Persistence\Legacy\User\Role\LimitationConverter instance.
     */
    protected function getEzpublish_Persistence_Legacy_Role_Limitation_ConverterService()
    {
        $this->services['ezpublish.persistence.legacy.role.limitation.converter'] = $instance = new \eZ\Publish\Core\Persistence\Legacy\User\Role\LimitationConverter();

        $instance->addHandler($this->get('ezpublish.persistence.legacy.role.limitation.handler.object_state'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.role.limitation.handler.object_state' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\User\Role\LimitationHandler\ObjectStateHandler A eZ\Publish\Core\Persistence\Legacy\User\Role\LimitationHandler\ObjectStateHandler instance.
     */
    protected function getEzpublish_Persistence_Legacy_Role_Limitation_Handler_ObjectStateService()
    {
        return $this->services['ezpublish.persistence.legacy.role.limitation.handler.object_state'] = new \eZ\Publish\Core\Persistence\Legacy\User\Role\LimitationHandler\ObjectStateHandler($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.section.gateway.exception_conversion' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Section\Gateway\ExceptionConversion A eZ\Publish\Core\Persistence\Legacy\Content\Section\Gateway\ExceptionConversion instance.
     */
    protected function getEzpublish_Persistence_Legacy_Section_Gateway_ExceptionConversionService()
    {
        return $this->services['ezpublish.persistence.legacy.section.gateway.exception_conversion'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Section\Gateway\ExceptionConversion($this->get('ezpublish.persistence.legacy.section.gateway.inner'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.section.gateway.inner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Section\Gateway\DoctrineDatabase A eZ\Publish\Core\Persistence\Legacy\Content\Section\Gateway\DoctrineDatabase instance.
     */
    protected function getEzpublish_Persistence_Legacy_Section_Gateway_InnerService()
    {
        return $this->services['ezpublish.persistence.legacy.section.gateway.inner'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Section\Gateway\DoctrineDatabase($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.tree_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\TreeHandler A eZ\Publish\Core\Persistence\Legacy\Content\TreeHandler instance.
     */
    protected function getEzpublish_Persistence_Legacy_TreeHandlerService()
    {
        return $this->services['ezpublish.persistence.legacy.tree_handler'] = new \eZ\Publish\Core\Persistence\Legacy\Content\TreeHandler($this->get('ezpublish.persistence.legacy.location.gateway.exception_conversion'), $this->get('ezpublish.persistence.legacy.location.mapper'), $this->get('ezpublish.persistence.legacy.content.gateway.exception_conversion'), $this->get('ezpublish.persistence.legacy.content.mapper'), $this->get('ezpublish.persistence.legacy.field_handler'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.url_alias.gateway.exception_conversion' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\UrlAlias\Gateway\ExceptionConversion A eZ\Publish\Core\Persistence\Legacy\Content\UrlAlias\Gateway\ExceptionConversion instance.
     */
    protected function getEzpublish_Persistence_Legacy_UrlAlias_Gateway_ExceptionConversionService()
    {
        return $this->services['ezpublish.persistence.legacy.url_alias.gateway.exception_conversion'] = new \eZ\Publish\Core\Persistence\Legacy\Content\UrlAlias\Gateway\ExceptionConversion($this->get('ezpublish.persistence.legacy.url_alias.gateway.inner'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.url_alias.gateway.inner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\UrlAlias\Gateway\DoctrineDatabase A eZ\Publish\Core\Persistence\Legacy\Content\UrlAlias\Gateway\DoctrineDatabase instance.
     */
    protected function getEzpublish_Persistence_Legacy_UrlAlias_Gateway_InnerService()
    {
        return $this->services['ezpublish.persistence.legacy.url_alias.gateway.inner'] = new \eZ\Publish\Core\Persistence\Legacy\Content\UrlAlias\Gateway\DoctrineDatabase($this->get('ezpublish.api.storage_engine.legacy.dbhandler'), $this->get('ezpublish.persistence.legacy.language.mask_generator'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.url_alias.mapper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\UrlAlias\Mapper A eZ\Publish\Core\Persistence\Legacy\Content\UrlAlias\Mapper instance.
     */
    protected function getEzpublish_Persistence_Legacy_UrlAlias_MapperService()
    {
        return $this->services['ezpublish.persistence.legacy.url_alias.mapper'] = new \eZ\Publish\Core\Persistence\Legacy\Content\UrlAlias\Mapper($this->get('ezpublish.persistence.legacy.language.mask_generator'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.url_wildcard.gateway.exception_conversion' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\UrlWildcard\Gateway\ExceptionConversion A eZ\Publish\Core\Persistence\Legacy\Content\UrlWildcard\Gateway\ExceptionConversion instance.
     */
    protected function getEzpublish_Persistence_Legacy_UrlWildcard_Gateway_ExceptionConversionService()
    {
        return $this->services['ezpublish.persistence.legacy.url_wildcard.gateway.exception_conversion'] = new \eZ\Publish\Core\Persistence\Legacy\Content\UrlWildcard\Gateway\ExceptionConversion($this->get('ezpublish.persistence.legacy.url_wildcard.gateway.inner'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.url_wildcard.gateway.inner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\UrlWildcard\Gateway\DoctrineDatabase A eZ\Publish\Core\Persistence\Legacy\Content\UrlWildcard\Gateway\DoctrineDatabase instance.
     */
    protected function getEzpublish_Persistence_Legacy_UrlWildcard_Gateway_InnerService()
    {
        return $this->services['ezpublish.persistence.legacy.url_wildcard.gateway.inner'] = new \eZ\Publish\Core\Persistence\Legacy\Content\UrlWildcard\Gateway\DoctrineDatabase($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.url_wildcard.mapper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\UrlWildcard\Mapper A eZ\Publish\Core\Persistence\Legacy\Content\UrlWildcard\Mapper instance.
     */
    protected function getEzpublish_Persistence_Legacy_UrlWildcard_MapperService()
    {
        return $this->services['ezpublish.persistence.legacy.url_wildcard.mapper'] = new \eZ\Publish\Core\Persistence\Legacy\Content\UrlWildcard\Mapper();
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.user.gateway.exception_conversion' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\User\Gateway\ExceptionConversion A eZ\Publish\Core\Persistence\Legacy\User\Gateway\ExceptionConversion instance.
     */
    protected function getEzpublish_Persistence_Legacy_User_Gateway_ExceptionConversionService()
    {
        return $this->services['ezpublish.persistence.legacy.user.gateway.exception_conversion'] = new \eZ\Publish\Core\Persistence\Legacy\User\Gateway\ExceptionConversion($this->get('ezpublish.persistence.legacy.user.gateway.inner'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.user.gateway.inner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\User\Gateway\DoctrineDatabase A eZ\Publish\Core\Persistence\Legacy\User\Gateway\DoctrineDatabase instance.
     */
    protected function getEzpublish_Persistence_Legacy_User_Gateway_InnerService()
    {
        return $this->services['ezpublish.persistence.legacy.user.gateway.inner'] = new \eZ\Publish\Core\Persistence\Legacy\User\Gateway\DoctrineDatabase($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.persistence.legacy.user.mapper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\User\Mapper A eZ\Publish\Core\Persistence\Legacy\User\Mapper instance.
     */
    protected function getEzpublish_Persistence_Legacy_User_MapperService()
    {
        return $this->services['ezpublish.persistence.legacy.user.mapper'] = new \eZ\Publish\Core\Persistence\Legacy\User\Mapper();
    }

    /**
     * Gets the 'ezpublish.persistence.slug_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\UrlAlias\SlugConverter A eZ\Publish\Core\Persistence\Legacy\Content\UrlAlias\SlugConverter instance.
     */
    protected function getEzpublish_Persistence_SlugConverterService()
    {
        return $this->services['ezpublish.persistence.slug_converter'] = new \eZ\Publish\Core\Persistence\Legacy\Content\UrlAlias\SlugConverter($this->get('ezpublish.api.storage_engine.transformation_processor'));
    }

    /**
     * Gets the 'ezpublish.query_type.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\QueryType\ArrayQueryTypeRegistry A eZ\Publish\Core\QueryType\ArrayQueryTypeRegistry instance.
     */
    protected function getEzpublish_QueryType_RegistryService()
    {
        $this->services['ezpublish.query_type.registry'] = $instance = new \eZ\Publish\Core\QueryType\ArrayQueryTypeRegistry();

        $instance->addQueryTypes(array());

        return $instance;
    }

    /**
     * Gets the 'ezpublish.request_index_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\EventListener\IndexRequestListener A eZ\Bundle\EzPublishCoreBundle\EventListener\IndexRequestListener instance.
     */
    protected function getEzpublish_RequestIndexListenerService()
    {
        return $this->services['ezpublish.request_index_listener'] = new \eZ\Bundle\EzPublishCoreBundle\EventListener\IndexRequestListener($this->get('ezpublish.config.resolver.chain'));
    }

    /**
     * Gets the 'ezpublish.request_redirect_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\EventListener\RequestEventListener A eZ\Bundle\EzPublishCoreBundle\EventListener\RequestEventListener instance.
     */
    protected function getEzpublish_RequestRedirectListenerService()
    {
        return $this->services['ezpublish.request_redirect_listener'] = new \eZ\Bundle\EzPublishCoreBundle\EventListener\RequestEventListener($this->get('ezpublish.config.resolver.chain'), $this->get('ezpublish.chain_router'), 'site', $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'ezpublish.route_reference.generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Routing\Generator\RouteReferenceGenerator A eZ\Publish\Core\MVC\Symfony\Routing\Generator\RouteReferenceGenerator instance.
     */
    protected function getEzpublish_RouteReference_GeneratorService()
    {
        $this->services['ezpublish.route_reference.generator'] = $instance = new \eZ\Publish\Core\MVC\Symfony\Routing\Generator\RouteReferenceGenerator($this->get('debug.event_dispatcher'));

        $instance->setRequestStack($this->get('request_stack'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.route_reference.listener.content_download' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\EventListener\ContentDownloadRouteReferenceListener A eZ\Bundle\EzPublishCoreBundle\EventListener\ContentDownloadRouteReferenceListener instance.
     */
    protected function getEzpublish_RouteReference_Listener_ContentDownloadService()
    {
        return $this->services['ezpublish.route_reference.listener.content_download'] = new \eZ\Bundle\EzPublishCoreBundle\EventListener\ContentDownloadRouteReferenceListener($this->get('ezpublish.translation_helper'));
    }

    /**
     * Gets the 'ezpublish.route_reference.listener.language_switch' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\EventListener\LanguageSwitchListener A eZ\Publish\Core\MVC\Symfony\EventListener\LanguageSwitchListener instance.
     */
    protected function getEzpublish_RouteReference_Listener_LanguageSwitchService()
    {
        return $this->services['ezpublish.route_reference.listener.language_switch'] = new \eZ\Publish\Core\MVC\Symfony\EventListener\LanguageSwitchListener($this->get('ezpublish.translation_helper'));
    }

    /**
     * Gets the 'ezpublish.search.common.field_name_generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Common\FieldNameGenerator A eZ\Publish\Core\Search\Common\FieldNameGenerator instance.
     */
    protected function getEzpublish_Search_Common_FieldNameGeneratorService()
    {
        return $this->services['ezpublish.search.common.field_name_generator'] = new \eZ\Publish\Core\Search\Common\FieldNameGenerator(array('ez_integer' => 'i', 'ez_minteger' => 'mi', 'ez_id' => 'id', 'ez_mid' => 'mid', 'ez_string' => 's', 'ez_mstring' => 'ms', 'ez_long' => 'l', 'ez_text' => 't', 'ez_html' => 'h', 'ez_boolean' => 'b', 'ez_mboolean' => 'mb', 'ez_float' => 'f', 'ez_double' => 'd', 'ez_date' => 'dt', 'ez_point' => 'p', 'ez_currency' => 'c', 'ez_geolocation' => 'gl', 'ez_document' => 'doc', 'ez_fulltext' => 'fulltext'));
    }

    /**
     * Gets the 'ezpublish.search.common.field_name_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Common\FieldNameResolver A eZ\Publish\Core\Search\Common\FieldNameResolver instance.
     */
    protected function getEzpublish_Search_Common_FieldNameResolverService()
    {
        return $this->services['ezpublish.search.common.field_name_resolver'] = new \eZ\Publish\Core\Search\Common\FieldNameResolver($this->get('ezpublish.search.common.field_registry'), $this->get('ezpublish.spi.persistence.content_type_handler'), $this->get('ezpublish.search.common.field_name_generator'));
    }

    /**
     * Gets the 'ezpublish.search.common.field_registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Common\FieldRegistry A eZ\Publish\Core\Search\Common\FieldRegistry instance.
     */
    protected function getEzpublish_Search_Common_FieldRegistryService()
    {
        $a = $this->get('ezpublish.fieldtype.indexable.unindexed');

        $this->services['ezpublish.search.common.field_registry'] = $instance = new \eZ\Publish\Core\Search\Common\FieldRegistry();

        $instance->registerType('ezauthor', $this->get('ezpublish.fieldtype.indexable.ezauthor'));
        $instance->registerType('ezstring', $this->get('ezpublish.fieldtype.indexable.ezstring'));
        $instance->registerType('ezprice', $this->get('ezpublish.fieldtype.indexable.ezprice'));
        $instance->registerType('ezgmaplocation', $this->get('ezpublish.fieldtype.indexable.ezgmaplocation'));
        $instance->registerType('ezcountry', $this->get('ezpublish.fieldtype.indexable.ezcountry'));
        $instance->registerType('ezdate', $this->get('ezpublish.fieldtype.indexable.ezdate'));
        $instance->registerType('ezinteger', $this->get('ezpublish.fieldtype.indexable.ezinteger'));
        $instance->registerType('ezfloat', $this->get('ezpublish.fieldtype.indexable.ezfloat'));
        $instance->registerType('ezemail', $this->get('ezpublish.fieldtype.indexable.ezemail'));
        $instance->registerType('ezimage', $this->get('ezpublish.fieldtype.indexable.ezimage'));
        $instance->registerType('ezmedia', $this->get('ezpublish.fieldtype.indexable.ezmedia'));
        $instance->registerType('ezbinaryfile', $this->get('ezpublish.fieldtype.indexable.ezbinaryfile'));
        $instance->registerType('eztime', $this->get('ezpublish.fieldtype.indexable.eztime'));
        $instance->registerType('eztext', $this->get('ezpublish.fieldtype.indexable.eztext'));
        $instance->registerType('ezboolean', $this->get('ezpublish.fieldtype.indexable.ezboolean'));
        $instance->registerType('ezdatetime', $this->get('ezpublish.fieldtype.indexable.ezdatetime'));
        $instance->registerType('ezrichtext', $this->get('ezpublish.fieldtype.indexable.ezrichtext'));
        $instance->registerType('ezisbn', $this->get('ezpublish.fieldtype.indexable.ezisbn'));
        $instance->registerType('ezobjectrelation', $this->get('ezpublish.fieldtype.indexable.ezobjectrelation'));
        $instance->registerType('ezselection', $this->get('ezpublish.fieldtype.indexable.ezselection'));
        $instance->registerType('ezobjectrelationlist', $this->get('ezpublish.fieldtype.indexable.ezobjectrelationlist'));
        $instance->registerType('ezurl', $this->get('ezpublish.fieldtype.indexable.ezurl'));
        $instance->registerType('ezuser', $a);
        $instance->registerType('ezkeyword', $a);
        $instance->registerType('ezinisetting', $a);
        $instance->registerType('ezpackage', $a);
        $instance->registerType('ezmultioption', $a);
        $instance->registerType('ezsrrating', $a);
        $instance->registerType('ezsubtreesubscription', $a);
        $instance->registerType('ezoption', $a);
        $instance->registerType('ezpage', $a);
        $instance->registerType('ezcomcomments', $a);

        return $instance;
    }

    /**
     * Gets the 'ezpublish.search.legacy.connection.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishLegacySearchEngineBundle\ApiLoader\ConnectionFactory A eZ\Bundle\EzPublishLegacySearchEngineBundle\ApiLoader\ConnectionFactory instance.
     */
    protected function getEzpublish_Search_Legacy_Connection_FactoryService()
    {
        $this->services['ezpublish.search.legacy.connection.factory'] = $instance = new \eZ\Bundle\EzPublishLegacySearchEngineBundle\ApiLoader\ConnectionFactory($this->get('ezpublish.api.repository_configuration_provider'));

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.content.exception_conversion' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Gateway\ExceptionConversion A eZ\Publish\Core\Search\Legacy\Content\Gateway\ExceptionConversion instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_Content_ExceptionConversionService()
    {
        return $this->services['ezpublish.search.legacy.gateway.content.exception_conversion'] = new \eZ\Publish\Core\Search\Legacy\Content\Gateway\ExceptionConversion($this->get('ezpublish.search.legacy.gateway.content.inner'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.content.inner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Gateway\DoctrineDatabase A eZ\Publish\Core\Search\Legacy\Content\Gateway\DoctrineDatabase instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_Content_InnerService()
    {
        return $this->services['ezpublish.search.legacy.gateway.content.inner'] = new \eZ\Publish\Core\Search\Legacy\Content\Gateway\DoctrineDatabase($this->get('ezpublish.api.search_engine.legacy.dbhandler'), $this->get('ezpublish.search.legacy.gateway.criteria_converter.content'), $this->get('ezpublish.search.legacy.gateway.sort_clause_converter.content'), $this->get('ezpublish.spi.persistence.language_handler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criteria_converter.content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriteriaConverter A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriteriaConverter instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriteriaConverter_ContentService()
    {
        $this->services['ezpublish.search.legacy.gateway.criteria_converter.content'] = $instance = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriteriaConverter();

        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.content_id'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.content_type_group_id'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.content_type_id'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.content_type_identifier'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.date_metadata'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.field'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.full_text'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.language_code'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.logical_and'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.logical_not'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.logical_or'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.map_location_distance'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.match_all'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.match_none'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.object_state_id'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.field_relation'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.remote_id'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.section_id'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.user_metadata'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.content.ancestor'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.content.location_id'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.content.location_remote_id'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.content.parent_location_id'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.content.subtree'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.content.permission_subtree'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.content.visibility'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criteria_converter.location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriteriaConverter A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriteriaConverter instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriteriaConverter_LocationService()
    {
        $this->services['ezpublish.search.legacy.gateway.criteria_converter.location'] = $instance = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriteriaConverter();

        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.content_id'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.content_type_group_id'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.content_type_id'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.content_type_identifier'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.date_metadata'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.field'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.full_text'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.language_code'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.logical_and'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.logical_not'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.logical_or'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.map_location_distance'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.match_all'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.match_none'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.object_state_id'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.field_relation'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.remote_id'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.section_id'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.common.user_metadata'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.location.ancestor'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.location.depth'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.location.location_id'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.location.is_main_location'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.location.parent_location_id'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.location.priority'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.location.location_remote_id'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.location.subtree'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.criterion_handler.location.visibility'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_field_value_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FieldValue\Converter A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FieldValue\Converter instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionFieldValueConverterService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_field_value_converter'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FieldValue\Converter($this->get('ezpublish.search.legacy.gateway.criterion_field_value_handler.registry'), $this->get('ezpublish.search.legacy.gateway.criterion_field_value_handler.composite'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_field_value_handler.collection.comma_separated' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FieldValue\Handler\Collection A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FieldValue\Handler\Collection instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionFieldValueHandler_Collection_CommaSeparatedService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_field_value_handler.collection.comma_separated'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FieldValue\Handler\Collection($this->get('ezpublish.api.storage_engine.legacy.dbhandler'), $this->get('ezpublish.api.storage_engine.transformation_processor'), ',');
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_field_value_handler.collection.hypen_separated' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FieldValue\Handler\Collection A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FieldValue\Handler\Collection instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionFieldValueHandler_Collection_HypenSeparatedService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_field_value_handler.collection.hypen_separated'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FieldValue\Handler\Collection($this->get('ezpublish.api.storage_engine.legacy.dbhandler'), $this->get('ezpublish.api.storage_engine.transformation_processor'), '-');
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_field_value_handler.composite' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FieldValue\Handler\Composite A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FieldValue\Handler\Composite instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionFieldValueHandler_CompositeService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_field_value_handler.composite'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FieldValue\Handler\Composite($this->get('ezpublish.api.storage_engine.legacy.dbhandler'), $this->get('ezpublish.api.storage_engine.transformation_processor'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_field_value_handler.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FieldValue\HandlerRegistry A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FieldValue\HandlerRegistry instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionFieldValueHandler_RegistryService()
    {
        $a = $this->get('ezpublish.search.legacy.gateway.criterion_field_value_handler.collection.comma_separated');
        $b = $this->get('ezpublish.search.legacy.gateway.criterion_field_value_handler.simple');

        $this->services['ezpublish.search.legacy.gateway.criterion_field_value_handler.registry'] = $instance = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FieldValue\HandlerRegistry();

        $instance->register('ezcountry', $a);
        $instance->register('ezobjectrelationlist', $a);
        $instance->register('ezselection', $this->get('ezpublish.search.legacy.gateway.criterion_field_value_handler.collection.hypen_separated'));
        $instance->register('ezboolean', $b);
        $instance->register('ezdate', $b);
        $instance->register('ezdatetime', $b);
        $instance->register('ezemail', $b);
        $instance->register('ezinteger', $b);
        $instance->register('ezobjectrelation', $b);
        $instance->register('eztime', $b);

        return $instance;
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_field_value_handler.simple' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FieldValue\Handler\Simple A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FieldValue\Handler\Simple instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionFieldValueHandler_SimpleService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_field_value_handler.simple'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FieldValue\Handler\Simple($this->get('ezpublish.api.storage_engine.legacy.dbhandler'), $this->get('ezpublish.api.storage_engine.transformation_processor'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.common.content_id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\ContentId A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\ContentId instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_ContentIdService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.common.content_id'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\ContentId($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.common.content_type_group_id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\ContentTypeGroupId A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\ContentTypeGroupId instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_ContentTypeGroupIdService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.common.content_type_group_id'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\ContentTypeGroupId($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.common.content_type_id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\ContentTypeId A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\ContentTypeId instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_ContentTypeIdService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.common.content_type_id'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\ContentTypeId($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.common.content_type_identifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\ContentTypeIdentifier A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\ContentTypeIdentifier instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_ContentTypeIdentifierService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.common.content_type_identifier'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\ContentTypeIdentifier($this->get('ezpublish.api.storage_engine.legacy.dbhandler'), $this->get('ezpublish.spi.persistence.content_type_handler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.common.date_metadata' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\DateMetadata A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\DateMetadata instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_DateMetadataService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.common.date_metadata'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\DateMetadata($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.common.field' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\Field A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\Field instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_FieldService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.common.field'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\Field($this->get('ezpublish.api.storage_engine.legacy.dbhandler'), $this->get('ezpublish.spi.persistence.content_type_handler'), $this->get('ezpublish.spi.persistence.language_handler'), $this->get('ezpublish.persistence.legacy.field_value_converter.registry'), $this->get('ezpublish.search.legacy.gateway.criterion_field_value_converter'), $this->get('ezpublish.api.storage_engine.transformation_processor'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.common.field_relation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FieldRelation A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FieldRelation instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_FieldRelationService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.common.field_relation'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FieldRelation($this->get('ezpublish.api.storage_engine.legacy.dbhandler'), $this->get('ezpublish.spi.persistence.content_type_handler'), $this->get('ezpublish.spi.persistence.language_handler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.common.full_text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FullText A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FullText instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_FullTextService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.common.full_text'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\FullText($this->get('ezpublish.api.storage_engine.legacy.dbhandler'), $this->get('ezpublish.api.storage_engine.transformation_processor'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.common.language_code' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\LanguageCode A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\LanguageCode instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_LanguageCodeService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.common.language_code'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\LanguageCode($this->get('ezpublish.api.storage_engine.legacy.dbhandler'), $this->get('ezpublish.persistence.legacy.language.mask_generator'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.common.logical_and' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\LogicalAnd A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\LogicalAnd instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_LogicalAndService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.common.logical_and'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\LogicalAnd($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.common.logical_not' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\LogicalNot A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\LogicalNot instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_LogicalNotService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.common.logical_not'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\LogicalNot($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.common.logical_or' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\LogicalOr A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\LogicalOr instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_LogicalOrService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.common.logical_or'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\LogicalOr($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.common.map_location_distance' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\MapLocationDistance A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\MapLocationDistance instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_MapLocationDistanceService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.common.map_location_distance'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\MapLocationDistance($this->get('ezpublish.api.storage_engine.legacy.dbhandler'), $this->get('ezpublish.spi.persistence.content_type_handler'), $this->get('ezpublish.spi.persistence.language_handler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.common.match_all' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\MatchAll A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\MatchAll instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_MatchAllService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.common.match_all'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\MatchAll($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.common.match_none' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\MatchNone A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\MatchNone instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_MatchNoneService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.common.match_none'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\MatchNone($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.common.object_state_id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\ObjectStateId A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\ObjectStateId instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_ObjectStateIdService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.common.object_state_id'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\ObjectStateId($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.common.remote_id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\RemoteId A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\RemoteId instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_RemoteIdService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.common.remote_id'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\RemoteId($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.common.section_id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\SectionId A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\SectionId instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_SectionIdService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.common.section_id'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\SectionId($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.common.user_metadata' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\UserMetadata A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\UserMetadata instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Common_UserMetadataService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.common.user_metadata'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\UserMetadata($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.content.ancestor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Gateway\CriterionHandler\Ancestor A eZ\Publish\Core\Search\Legacy\Content\Gateway\CriterionHandler\Ancestor instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Content_AncestorService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.content.ancestor'] = new \eZ\Publish\Core\Search\Legacy\Content\Gateway\CriterionHandler\Ancestor($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.content.location_id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Gateway\CriterionHandler\LocationId A eZ\Publish\Core\Search\Legacy\Content\Gateway\CriterionHandler\LocationId instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Content_LocationIdService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.content.location_id'] = new \eZ\Publish\Core\Search\Legacy\Content\Gateway\CriterionHandler\LocationId($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.content.location_remote_id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Gateway\CriterionHandler\LocationRemoteId A eZ\Publish\Core\Search\Legacy\Content\Gateway\CriterionHandler\LocationRemoteId instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Content_LocationRemoteIdService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.content.location_remote_id'] = new \eZ\Publish\Core\Search\Legacy\Content\Gateway\CriterionHandler\LocationRemoteId($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.content.parent_location_id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Gateway\CriterionHandler\ParentLocationId A eZ\Publish\Core\Search\Legacy\Content\Gateway\CriterionHandler\ParentLocationId instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Content_ParentLocationIdService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.content.parent_location_id'] = new \eZ\Publish\Core\Search\Legacy\Content\Gateway\CriterionHandler\ParentLocationId($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.content.permission_subtree' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Gateway\CriterionHandler\PermissionSubtree A eZ\Publish\Core\Search\Legacy\Content\Gateway\CriterionHandler\PermissionSubtree instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Content_PermissionSubtreeService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.content.permission_subtree'] = new \eZ\Publish\Core\Search\Legacy\Content\Gateway\CriterionHandler\PermissionSubtree($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.content.subtree' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Gateway\CriterionHandler\Subtree A eZ\Publish\Core\Search\Legacy\Content\Gateway\CriterionHandler\Subtree instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Content_SubtreeService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.content.subtree'] = new \eZ\Publish\Core\Search\Legacy\Content\Gateway\CriterionHandler\Subtree($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.content.visibility' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Gateway\CriterionHandler\Visibility A eZ\Publish\Core\Search\Legacy\Content\Gateway\CriterionHandler\Visibility instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Content_VisibilityService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.content.visibility'] = new \eZ\Publish\Core\Search\Legacy\Content\Gateway\CriterionHandler\Visibility($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.location.ancestor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\Ancestor A eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\Ancestor instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Location_AncestorService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.location.ancestor'] = new \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\Ancestor($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.location.depth' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\Location\Depth A eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\Location\Depth instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Location_DepthService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.location.depth'] = new \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\Location\Depth($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.location.is_main_location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\Location\IsMainLocation A eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\Location\IsMainLocation instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Location_IsMainLocationService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.location.is_main_location'] = new \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\Location\IsMainLocation($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.location.location_id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\LocationId A eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\LocationId instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Location_LocationIdService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.location.location_id'] = new \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\LocationId($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.location.location_remote_id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\LocationRemoteId A eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\LocationRemoteId instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Location_LocationRemoteIdService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.location.location_remote_id'] = new \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\LocationRemoteId($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.location.parent_location_id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\ParentLocationId A eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\ParentLocationId instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Location_ParentLocationIdService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.location.parent_location_id'] = new \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\ParentLocationId($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.location.priority' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\Location\Priority A eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\Location\Priority instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Location_PriorityService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.location.priority'] = new \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\Location\Priority($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.location.subtree' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\Subtree A eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\Subtree instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Location_SubtreeService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.location.subtree'] = new \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\Subtree($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.criterion_handler.location.visibility' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\Visibility A eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\Visibility instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_CriterionHandler_Location_VisibilityService()
    {
        return $this->services['ezpublish.search.legacy.gateway.criterion_handler.location.visibility'] = new \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\CriterionHandler\Visibility($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.location.exception_conversion' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\ExceptionConversion A eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\ExceptionConversion instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_Location_ExceptionConversionService()
    {
        return $this->services['ezpublish.search.legacy.gateway.location.exception_conversion'] = new \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\ExceptionConversion($this->get('ezpublish.search.legacy.gateway.location.inner'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.location.inner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\DoctrineDatabase A eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\DoctrineDatabase instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_Location_InnerService()
    {
        return $this->services['ezpublish.search.legacy.gateway.location.inner'] = new \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\DoctrineDatabase($this->get('ezpublish.api.search_engine.legacy.dbhandler'), $this->get('ezpublish.search.legacy.gateway.criteria_converter.location'), $this->get('ezpublish.search.legacy.gateway.sort_clause_converter.location'), $this->get('ezpublish.spi.persistence.language_handler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.sort_clause_converter.content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseConverter A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseConverter instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_SortClauseConverter_ContentService()
    {
        $this->services['ezpublish.search.legacy.gateway.sort_clause_converter.content'] = $instance = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseConverter();

        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.sort_clause_handler.common.content_id'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.sort_clause_handler.common.content_name'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.sort_clause_handler.common.date_modified'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.sort_clause_handler.common.date_published'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.sort_clause_handler.common.field'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.sort_clause_handler.common.map_location_distance'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.sort_clause_handler.common.section_identifier'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.sort_clause_handler.common.section_name'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.sort_clause_converter.location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseConverter A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseConverter instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_SortClauseConverter_LocationService()
    {
        $this->services['ezpublish.search.legacy.gateway.sort_clause_converter.location'] = $instance = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseConverter();

        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.sort_clause_handler.common.content_id'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.sort_clause_handler.common.content_name'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.sort_clause_handler.common.date_modified'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.sort_clause_handler.common.date_published'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.sort_clause_handler.common.field'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.sort_clause_handler.common.map_location_distance'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.sort_clause_handler.common.section_identifier'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.sort_clause_handler.common.section_name'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.sort_clause_handler.location.id'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.sort_clause_handler.location.depth'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.sort_clause_handler.location.path'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.sort_clause_handler.location.is_main_location'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.sort_clause_handler.location.priority'));
        $instance->addHandler($this->get('ezpublish.search.legacy.gateway.sort_clause_handler.location.visibility'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.sort_clause_handler.common.content_id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\ContentId A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\ContentId instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Common_ContentIdService()
    {
        return $this->services['ezpublish.search.legacy.gateway.sort_clause_handler.common.content_id'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\ContentId($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.sort_clause_handler.common.content_name' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\ContentName A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\ContentName instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Common_ContentNameService()
    {
        return $this->services['ezpublish.search.legacy.gateway.sort_clause_handler.common.content_name'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\ContentName($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.sort_clause_handler.common.date_modified' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\DateModified A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\DateModified instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Common_DateModifiedService()
    {
        return $this->services['ezpublish.search.legacy.gateway.sort_clause_handler.common.date_modified'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\DateModified($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.sort_clause_handler.common.date_published' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\DatePublished A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\DatePublished instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Common_DatePublishedService()
    {
        return $this->services['ezpublish.search.legacy.gateway.sort_clause_handler.common.date_published'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\DatePublished($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.sort_clause_handler.common.field' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\Field A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\Field instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Common_FieldService()
    {
        return $this->services['ezpublish.search.legacy.gateway.sort_clause_handler.common.field'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\Field($this->get('ezpublish.api.storage_engine.legacy.dbhandler'), $this->get('ezpublish.spi.persistence.language_handler'), $this->get('ezpublish.spi.persistence.content_type_handler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.sort_clause_handler.common.map_location_distance' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\MapLocationDistance A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\MapLocationDistance instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Common_MapLocationDistanceService()
    {
        return $this->services['ezpublish.search.legacy.gateway.sort_clause_handler.common.map_location_distance'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\MapLocationDistance($this->get('ezpublish.api.storage_engine.legacy.dbhandler'), $this->get('ezpublish.spi.persistence.language_handler'), $this->get('ezpublish.spi.persistence.content_type_handler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.sort_clause_handler.common.section_identifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\SectionIdentifier A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\SectionIdentifier instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Common_SectionIdentifierService()
    {
        return $this->services['ezpublish.search.legacy.gateway.sort_clause_handler.common.section_identifier'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\SectionIdentifier($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.sort_clause_handler.common.section_name' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\SectionName A eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\SectionName instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Common_SectionNameService()
    {
        return $this->services['ezpublish.search.legacy.gateway.sort_clause_handler.common.section_name'] = new \eZ\Publish\Core\Search\Legacy\Content\Common\Gateway\SortClauseHandler\SectionName($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.sort_clause_handler.location.depth' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\SortClauseHandler\Location\Depth A eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\SortClauseHandler\Location\Depth instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Location_DepthService()
    {
        return $this->services['ezpublish.search.legacy.gateway.sort_clause_handler.location.depth'] = new \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\SortClauseHandler\Location\Depth($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.sort_clause_handler.location.id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\SortClauseHandler\Location\Id A eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\SortClauseHandler\Location\Id instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Location_IdService()
    {
        return $this->services['ezpublish.search.legacy.gateway.sort_clause_handler.location.id'] = new \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\SortClauseHandler\Location\Id($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.sort_clause_handler.location.is_main_location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\SortClauseHandler\Location\IsMainLocation A eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\SortClauseHandler\Location\IsMainLocation instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Location_IsMainLocationService()
    {
        return $this->services['ezpublish.search.legacy.gateway.sort_clause_handler.location.is_main_location'] = new \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\SortClauseHandler\Location\IsMainLocation($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.sort_clause_handler.location.path' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\SortClauseHandler\Location\Path A eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\SortClauseHandler\Location\Path instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Location_PathService()
    {
        return $this->services['ezpublish.search.legacy.gateway.sort_clause_handler.location.path'] = new \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\SortClauseHandler\Location\Path($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.sort_clause_handler.location.priority' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\SortClauseHandler\Location\Priority A eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\SortClauseHandler\Location\Priority instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Location_PriorityService()
    {
        return $this->services['ezpublish.search.legacy.gateway.sort_clause_handler.location.priority'] = new \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\SortClauseHandler\Location\Priority($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.legacy.gateway.sort_clause_handler.location.visibility' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\SortClauseHandler\Location\Visibility A eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\SortClauseHandler\Location\Visibility instance.
     */
    protected function getEzpublish_Search_Legacy_Gateway_SortClauseHandler_Location_VisibilityService()
    {
        return $this->services['ezpublish.search.legacy.gateway.sort_clause_handler.location.visibility'] = new \eZ\Publish\Core\Search\Legacy\Content\Location\Gateway\SortClauseHandler\Location\Visibility($this->get('ezpublish.api.storage_engine.legacy.dbhandler'));
    }

    /**
     * Gets the 'ezpublish.search.slot.copy_content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Common\Slot\CopyContent A eZ\Publish\Core\Search\Common\Slot\CopyContent instance.
     */
    protected function getEzpublish_Search_Slot_CopyContentService()
    {
        return $this->services['ezpublish.search.slot.copy_content'] = new \eZ\Publish\Core\Search\Common\Slot\CopyContent($this->get('ezpublish.api.inner_repository'), $this->get('ezpublish.spi.persistence.cache'), $this->get('ezpublish.spi.search'));
    }

    /**
     * Gets the 'ezpublish.search.slot.copy_subtree' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Common\Slot\CopySubtree A eZ\Publish\Core\Search\Common\Slot\CopySubtree instance.
     */
    protected function getEzpublish_Search_Slot_CopySubtreeService()
    {
        return $this->services['ezpublish.search.slot.copy_subtree'] = new \eZ\Publish\Core\Search\Common\Slot\CopySubtree($this->get('ezpublish.api.inner_repository'), $this->get('ezpublish.spi.persistence.cache'), $this->get('ezpublish.spi.search'));
    }

    /**
     * Gets the 'ezpublish.search.slot.create_location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Common\Slot\CreateLocation A eZ\Publish\Core\Search\Common\Slot\CreateLocation instance.
     */
    protected function getEzpublish_Search_Slot_CreateLocationService()
    {
        return $this->services['ezpublish.search.slot.create_location'] = new \eZ\Publish\Core\Search\Common\Slot\CreateLocation($this->get('ezpublish.api.inner_repository'), $this->get('ezpublish.spi.persistence.cache'), $this->get('ezpublish.spi.search'));
    }

    /**
     * Gets the 'ezpublish.search.slot.create_user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Common\Slot\CreateUser A eZ\Publish\Core\Search\Common\Slot\CreateUser instance.
     */
    protected function getEzpublish_Search_Slot_CreateUserService()
    {
        return $this->services['ezpublish.search.slot.create_user'] = new \eZ\Publish\Core\Search\Common\Slot\CreateUser($this->get('ezpublish.api.inner_repository'), $this->get('ezpublish.spi.persistence.cache'), $this->get('ezpublish.spi.search'));
    }

    /**
     * Gets the 'ezpublish.search.slot.create_user_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Common\Slot\CreateUserGroup A eZ\Publish\Core\Search\Common\Slot\CreateUserGroup instance.
     */
    protected function getEzpublish_Search_Slot_CreateUserGroupService()
    {
        return $this->services['ezpublish.search.slot.create_user_group'] = new \eZ\Publish\Core\Search\Common\Slot\CreateUserGroup($this->get('ezpublish.api.inner_repository'), $this->get('ezpublish.spi.persistence.cache'), $this->get('ezpublish.spi.search'));
    }

    /**
     * Gets the 'ezpublish.search.slot.delete_content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Common\Slot\DeleteContent A eZ\Publish\Core\Search\Common\Slot\DeleteContent instance.
     */
    protected function getEzpublish_Search_Slot_DeleteContentService()
    {
        return $this->services['ezpublish.search.slot.delete_content'] = new \eZ\Publish\Core\Search\Common\Slot\DeleteContent($this->get('ezpublish.api.inner_repository'), $this->get('ezpublish.spi.persistence.cache'), $this->get('ezpublish.spi.search'));
    }

    /**
     * Gets the 'ezpublish.search.slot.delete_location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Common\Slot\DeleteLocation A eZ\Publish\Core\Search\Common\Slot\DeleteLocation instance.
     */
    protected function getEzpublish_Search_Slot_DeleteLocationService()
    {
        return $this->services['ezpublish.search.slot.delete_location'] = new \eZ\Publish\Core\Search\Common\Slot\DeleteLocation($this->get('ezpublish.api.inner_repository'), $this->get('ezpublish.spi.persistence.cache'), $this->get('ezpublish.spi.search'));
    }

    /**
     * Gets the 'ezpublish.search.slot.delete_version' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Common\Slot\DeleteVersion A eZ\Publish\Core\Search\Common\Slot\DeleteVersion instance.
     */
    protected function getEzpublish_Search_Slot_DeleteVersionService()
    {
        return $this->services['ezpublish.search.slot.delete_version'] = new \eZ\Publish\Core\Search\Common\Slot\DeleteVersion($this->get('ezpublish.api.inner_repository'), $this->get('ezpublish.spi.persistence.cache'), $this->get('ezpublish.spi.search'));
    }

    /**
     * Gets the 'ezpublish.search.slot.hide_location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Common\Slot\HideLocation A eZ\Publish\Core\Search\Common\Slot\HideLocation instance.
     */
    protected function getEzpublish_Search_Slot_HideLocationService()
    {
        return $this->services['ezpublish.search.slot.hide_location'] = new \eZ\Publish\Core\Search\Common\Slot\HideLocation($this->get('ezpublish.api.inner_repository'), $this->get('ezpublish.spi.persistence.cache'), $this->get('ezpublish.spi.search'));
    }

    /**
     * Gets the 'ezpublish.search.slot.move_subtree' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Common\Slot\MoveSubtree A eZ\Publish\Core\Search\Common\Slot\MoveSubtree instance.
     */
    protected function getEzpublish_Search_Slot_MoveSubtreeService()
    {
        return $this->services['ezpublish.search.slot.move_subtree'] = new \eZ\Publish\Core\Search\Common\Slot\MoveSubtree($this->get('ezpublish.api.inner_repository'), $this->get('ezpublish.spi.persistence.cache'), $this->get('ezpublish.spi.search'));
    }

    /**
     * Gets the 'ezpublish.search.slot.move_user_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Common\Slot\MoveUserGroup A eZ\Publish\Core\Search\Common\Slot\MoveUserGroup instance.
     */
    protected function getEzpublish_Search_Slot_MoveUserGroupService()
    {
        return $this->services['ezpublish.search.slot.move_user_group'] = new \eZ\Publish\Core\Search\Common\Slot\MoveUserGroup($this->get('ezpublish.api.inner_repository'), $this->get('ezpublish.spi.persistence.cache'), $this->get('ezpublish.spi.search'));
    }

    /**
     * Gets the 'ezpublish.search.slot.publish_version' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Common\Slot\PublishVersion A eZ\Publish\Core\Search\Common\Slot\PublishVersion instance.
     */
    protected function getEzpublish_Search_Slot_PublishVersionService()
    {
        return $this->services['ezpublish.search.slot.publish_version'] = new \eZ\Publish\Core\Search\Common\Slot\PublishVersion($this->get('ezpublish.api.inner_repository'), $this->get('ezpublish.spi.persistence.cache'), $this->get('ezpublish.spi.search'));
    }

    /**
     * Gets the 'ezpublish.search.slot.recover' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Common\Slot\Recover A eZ\Publish\Core\Search\Common\Slot\Recover instance.
     */
    protected function getEzpublish_Search_Slot_RecoverService()
    {
        return $this->services['ezpublish.search.slot.recover'] = new \eZ\Publish\Core\Search\Common\Slot\Recover($this->get('ezpublish.api.inner_repository'), $this->get('ezpublish.spi.persistence.cache'), $this->get('ezpublish.spi.search'));
    }

    /**
     * Gets the 'ezpublish.search.slot.set_content_state' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Common\Slot\SetContentState A eZ\Publish\Core\Search\Common\Slot\SetContentState instance.
     */
    protected function getEzpublish_Search_Slot_SetContentStateService()
    {
        return $this->services['ezpublish.search.slot.set_content_state'] = new \eZ\Publish\Core\Search\Common\Slot\SetContentState($this->get('ezpublish.api.inner_repository'), $this->get('ezpublish.spi.persistence.cache'), $this->get('ezpublish.spi.search'));
    }

    /**
     * Gets the 'ezpublish.search.slot.trash' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Common\Slot\Trash A eZ\Publish\Core\Search\Common\Slot\Trash instance.
     */
    protected function getEzpublish_Search_Slot_TrashService()
    {
        return $this->services['ezpublish.search.slot.trash'] = new \eZ\Publish\Core\Search\Common\Slot\Trash($this->get('ezpublish.api.inner_repository'), $this->get('ezpublish.spi.persistence.cache'), $this->get('ezpublish.spi.search'));
    }

    /**
     * Gets the 'ezpublish.search.slot.unhide_location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Search\Common\Slot\UnhideLocation A eZ\Publish\Core\Search\Common\Slot\UnhideLocation instance.
     */
    protected function getEzpublish_Search_Slot_UnhideLocationService()
    {
        return $this->services['ezpublish.search.slot.unhide_location'] = new \eZ\Publish\Core\Search\Common\Slot\UnhideLocation($this->get('ezpublish.api.inner_repository'), $this->get('ezpublish.spi.persistence.cache'), $this->get('ezpublish.spi.search'));
    }

    /**
     * Gets the 'ezpublish.search.solr.core_filter.native' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\CoreFilter\NativeCoreFilter A EzSystems\EzPlatformSolrSearchEngine\CoreFilter\NativeCoreFilter instance.
     */
    protected function getEzpublish_Search_Solr_CoreFilter_NativeService()
    {
        return $this->services['ezpublish.search.solr.core_filter.native'] = new \EzSystems\EzPlatformSolrSearchEngine\CoreFilter\NativeCoreFilter($this->get('ezpublish.search.solr.gateway.endpoint_resolver.native'));
    }

    /**
     * Gets the 'ezpublish.search.solr.document_mapper.native' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\DocumentMapper\NativeDocumentMapper A EzSystems\EzPlatformSolrSearchEngine\DocumentMapper\NativeDocumentMapper instance.
     */
    protected function getEzpublish_Search_Solr_DocumentMapper_NativeService()
    {
        return $this->services['ezpublish.search.solr.document_mapper.native'] = new \EzSystems\EzPlatformSolrSearchEngine\DocumentMapper\NativeDocumentMapper($this->get('ezpublish.search.common.field_registry'), $this->get('ezpublish.spi.persistence.content_handler'), $this->get('ezpublish.spi.persistence.location_handler'), $this->get('ezpublish.spi.persistence.content_type_handler'), $this->get('ezpublish.spi.persistence.object_state_handler'), $this->get('ezpublish.spi.persistence.section_handler'), $this->get('ezpublish.search.common.field_name_generator'));
    }

    /**
     * Gets the 'ezpublish.search.solr.field_value_mapper.aggregate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\Aggregate A EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\Aggregate instance.
     */
    protected function getEzpublish_Search_Solr_FieldValueMapper_AggregateService()
    {
        $this->services['ezpublish.search.solr.field_value_mapper.aggregate'] = $instance = new \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\Aggregate();

        $instance->addMapper($this->get('ezpublish.search.solr.field_value_mapper.identifier'));
        $instance->addMapper($this->get('ezpublish.search.solr.field_value_mapper.multiple_identifier'));
        $instance->addMapper($this->get('ezpublish.search.solr.field_value_mapper.string'));
        $instance->addMapper($this->get('ezpublish.search.solr.field_value_mapper.multiple_string'));
        $instance->addMapper($this->get('ezpublish.search.solr.field_value_mapper.integer'));
        $instance->addMapper($this->get('ezpublish.search.solr.field_value_mapper.multiple_integer'));
        $instance->addMapper($this->get('ezpublish.search.solr.field_value_mapper.float'));
        $instance->addMapper($this->get('ezpublish.search.solr.field_value_mapper.date'));
        $instance->addMapper($this->get('ezpublish.search.solr.field_value_mapper.price'));
        $instance->addMapper($this->get('ezpublish.search.solr.field_value_mapper.boolean'));
        $instance->addMapper($this->get('ezpublish.search.solr.field_value_mapper.multiple_boolean'));
        $instance->addMapper($this->get('ezpublish.search.solr.field_value_mapper.geo_location'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.search.solr.field_value_mapper.boolean' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\BooleanMapper A EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\BooleanMapper instance.
     */
    protected function getEzpublish_Search_Solr_FieldValueMapper_BooleanService()
    {
        return $this->services['ezpublish.search.solr.field_value_mapper.boolean'] = new \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\BooleanMapper();
    }

    /**
     * Gets the 'ezpublish.search.solr.field_value_mapper.date' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\DateMapper A EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\DateMapper instance.
     */
    protected function getEzpublish_Search_Solr_FieldValueMapper_DateService()
    {
        return $this->services['ezpublish.search.solr.field_value_mapper.date'] = new \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\DateMapper();
    }

    /**
     * Gets the 'ezpublish.search.solr.field_value_mapper.float' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\FloatMapper A EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\FloatMapper instance.
     */
    protected function getEzpublish_Search_Solr_FieldValueMapper_FloatService()
    {
        return $this->services['ezpublish.search.solr.field_value_mapper.float'] = new \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\FloatMapper();
    }

    /**
     * Gets the 'ezpublish.search.solr.field_value_mapper.geo_location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\GeoLocationMapper A EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\GeoLocationMapper instance.
     */
    protected function getEzpublish_Search_Solr_FieldValueMapper_GeoLocationService()
    {
        return $this->services['ezpublish.search.solr.field_value_mapper.geo_location'] = new \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\GeoLocationMapper();
    }

    /**
     * Gets the 'ezpublish.search.solr.field_value_mapper.identifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\IdentifierMapper A EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\IdentifierMapper instance.
     */
    protected function getEzpublish_Search_Solr_FieldValueMapper_IdentifierService()
    {
        return $this->services['ezpublish.search.solr.field_value_mapper.identifier'] = new \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\IdentifierMapper();
    }

    /**
     * Gets the 'ezpublish.search.solr.field_value_mapper.integer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\IntegerMapper A EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\IntegerMapper instance.
     */
    protected function getEzpublish_Search_Solr_FieldValueMapper_IntegerService()
    {
        return $this->services['ezpublish.search.solr.field_value_mapper.integer'] = new \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\IntegerMapper();
    }

    /**
     * Gets the 'ezpublish.search.solr.field_value_mapper.multiple_boolean' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\MultipleBooleanMapper A EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\MultipleBooleanMapper instance.
     */
    protected function getEzpublish_Search_Solr_FieldValueMapper_MultipleBooleanService()
    {
        return $this->services['ezpublish.search.solr.field_value_mapper.multiple_boolean'] = new \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\MultipleBooleanMapper();
    }

    /**
     * Gets the 'ezpublish.search.solr.field_value_mapper.multiple_identifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\MultipleIdentifierMapper A EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\MultipleIdentifierMapper instance.
     */
    protected function getEzpublish_Search_Solr_FieldValueMapper_MultipleIdentifierService()
    {
        return $this->services['ezpublish.search.solr.field_value_mapper.multiple_identifier'] = new \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\MultipleIdentifierMapper();
    }

    /**
     * Gets the 'ezpublish.search.solr.field_value_mapper.multiple_integer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\MultipleIntegerMapper A EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\MultipleIntegerMapper instance.
     */
    protected function getEzpublish_Search_Solr_FieldValueMapper_MultipleIntegerService()
    {
        return $this->services['ezpublish.search.solr.field_value_mapper.multiple_integer'] = new \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\MultipleIntegerMapper();
    }

    /**
     * Gets the 'ezpublish.search.solr.field_value_mapper.multiple_string' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\MultipleStringMapper A EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\MultipleStringMapper instance.
     */
    protected function getEzpublish_Search_Solr_FieldValueMapper_MultipleStringService()
    {
        return $this->services['ezpublish.search.solr.field_value_mapper.multiple_string'] = new \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\MultipleStringMapper();
    }

    /**
     * Gets the 'ezpublish.search.solr.field_value_mapper.price' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\PriceMapper A EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\PriceMapper instance.
     */
    protected function getEzpublish_Search_Solr_FieldValueMapper_PriceService()
    {
        return $this->services['ezpublish.search.solr.field_value_mapper.price'] = new \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\PriceMapper();
    }

    /**
     * Gets the 'ezpublish.search.solr.field_value_mapper.string' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\StringMapper A EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\StringMapper instance.
     */
    protected function getEzpublish_Search_Solr_FieldValueMapper_StringService()
    {
        return $this->services['ezpublish.search.solr.field_value_mapper.string'] = new \EzSystems\EzPlatformSolrSearchEngine\FieldValueMapper\StringMapper();
    }

    /**
     * Gets the 'ezpublish.search.solr.gateway.client.http.stream' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Gateway\HttpClient\Stream A EzSystems\EzPlatformSolrSearchEngine\Gateway\HttpClient\Stream instance.
     */
    protected function getEzpublish_Search_Solr_Gateway_Client_Http_StreamService()
    {
        return $this->services['ezpublish.search.solr.gateway.client.http.stream'] = new \EzSystems\EzPlatformSolrSearchEngine\Gateway\HttpClient\Stream();
    }

    /**
     * Gets the 'ezpublish.search.solr.gateway.endpoint_registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Gateway\EndpointRegistry A EzSystems\EzPlatformSolrSearchEngine\Gateway\EndpointRegistry instance.
     */
    protected function getEzpublish_Search_Solr_Gateway_EndpointRegistryService()
    {
        $this->services['ezpublish.search.solr.gateway.endpoint_registry'] = $instance = new \EzSystems\EzPlatformSolrSearchEngine\Gateway\EndpointRegistry();

        $instance->registerEndpoint('endpoint0', $this->get('ez_search_engine_solr.endpoints.endpoint0'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.search.solr.gateway.endpoint_resolver.native' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Gateway\EndpointResolver\NativeEndpointResolver A EzSystems\EzPlatformSolrSearchEngine\Gateway\EndpointResolver\NativeEndpointResolver instance.
     */
    protected function getEzpublish_Search_Solr_Gateway_EndpointResolver_NativeService()
    {
        return $this->services['ezpublish.search.solr.gateway.endpoint_resolver.native'] = new \EzSystems\EzPlatformSolrSearchEngine\Gateway\EndpointResolver\NativeEndpointResolver(array(), array(), NULL, NULL);
    }

    /**
     * Gets the 'ezpublish.search.solr.gateway.native' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Gateway\Native A EzSystems\EzPlatformSolrSearchEngine\Gateway\Native instance.
     */
    protected function getEzpublish_Search_Solr_Gateway_NativeService()
    {
        return $this->services['ezpublish.search.solr.gateway.native'] = new \EzSystems\EzPlatformSolrSearchEngine\Gateway\Native($this->get('ezpublish.search.solr.gateway.client.http.stream'), $this->get('ezpublish.search.solr.gateway.endpoint_resolver.native'), $this->get('ezpublish.search.solr.gateway.endpoint_registry'), $this->get('ezpublish.search.solr.query_converter.content'), $this->get('ezpublish.search.solr.query_converter.location'), $this->get('ezpublish.search.solr.field_value_mapper.aggregate'), $this->get('ezpublish.search.common.field_name_generator'));
    }

    /**
     * Gets the 'ezpublish.search.solr.query.common.criterion_visitor.logical_and' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Common\CriterionVisitor\LogicalAnd A EzSystems\EzPlatformSolrSearchEngine\Query\Common\CriterionVisitor\LogicalAnd instance.
     */
    protected function getEzpublish_Search_Solr_Query_Common_CriterionVisitor_LogicalAndService()
    {
        return $this->services['ezpublish.search.solr.query.common.criterion_visitor.logical_and'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Common\CriterionVisitor\LogicalAnd();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.common.criterion_visitor.logical_not' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Common\CriterionVisitor\LogicalNot A EzSystems\EzPlatformSolrSearchEngine\Query\Common\CriterionVisitor\LogicalNot instance.
     */
    protected function getEzpublish_Search_Solr_Query_Common_CriterionVisitor_LogicalNotService()
    {
        return $this->services['ezpublish.search.solr.query.common.criterion_visitor.logical_not'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Common\CriterionVisitor\LogicalNot();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.common.criterion_visitor.logical_or' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Common\CriterionVisitor\LogicalOr A EzSystems\EzPlatformSolrSearchEngine\Query\Common\CriterionVisitor\LogicalOr instance.
     */
    protected function getEzpublish_Search_Solr_Query_Common_CriterionVisitor_LogicalOrService()
    {
        return $this->services['ezpublish.search.solr.query.common.criterion_visitor.logical_or'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Common\CriterionVisitor\LogicalOr();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.common.criterion_visitor.match_all' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Common\CriterionVisitor\MatchAll A EzSystems\EzPlatformSolrSearchEngine\Query\Common\CriterionVisitor\MatchAll instance.
     */
    protected function getEzpublish_Search_Solr_Query_Common_CriterionVisitor_MatchAllService()
    {
        return $this->services['ezpublish.search.solr.query.common.criterion_visitor.match_all'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Common\CriterionVisitor\MatchAll();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.common.criterion_visitor.match_none' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Common\CriterionVisitor\MatchNone A EzSystems\EzPlatformSolrSearchEngine\Query\Common\CriterionVisitor\MatchNone instance.
     */
    protected function getEzpublish_Search_Solr_Query_Common_CriterionVisitor_MatchNoneService()
    {
        return $this->services['ezpublish.search.solr.query.common.criterion_visitor.match_none'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Common\CriterionVisitor\MatchNone();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.aggregate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Common\CriterionVisitor\Aggregate A EzSystems\EzPlatformSolrSearchEngine\Query\Common\CriterionVisitor\Aggregate instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_AggregateService()
    {
        $this->services['ezpublish.search.solr.query.content.criterion_visitor.aggregate'] = $instance = new \EzSystems\EzPlatformSolrSearchEngine\Query\Common\CriterionVisitor\Aggregate();

        $instance->addVisitor($this->get('ezpublish.search.solr.query.common.criterion_visitor.match_all'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.common.criterion_visitor.match_none'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.common.criterion_visitor.logical_and'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.common.criterion_visitor.logical_or'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.common.criterion_visitor.logical_not'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.ancestor'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.content_id_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.subtree_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.content_type_id_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.content_type_identifier_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.content_type_group_id_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.location_id_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.parent_location_id_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.section_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.remote_id_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.language_code_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.object_state_id_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.location_remote_id_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.modified_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.published_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.modified_between'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.published_between'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.full_text'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.user_metadata_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.map_location_distance_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.map_location_distance_range'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.field_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.field_range'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.visibility'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.custom_field_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.criterion_visitor.custom_field_range'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.ancestor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\Ancestor A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\Ancestor instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_AncestorService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.ancestor'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\Ancestor();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.content_id_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\ContentIdIn A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\ContentIdIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_ContentIdInService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.content_id_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\ContentIdIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.content_type_group_id_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\ContentTypeGroupIdIn A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\ContentTypeGroupIdIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_ContentTypeGroupIdInService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.content_type_group_id_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\ContentTypeGroupIdIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.content_type_id_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\ContentTypeIdIn A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\ContentTypeIdIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_ContentTypeIdInService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.content_type_id_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\ContentTypeIdIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.content_type_identifier_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\ContentTypeIdentifierIn A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\ContentTypeIdentifierIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_ContentTypeIdentifierInService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.content_type_identifier_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\ContentTypeIdentifierIn($this->get('ezpublish.spi.persistence.content_type_handler'));
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.custom_field_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\CustomField\CustomFieldIn A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\CustomField\CustomFieldIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_CustomFieldInService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.custom_field_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\CustomField\CustomFieldIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.custom_field_range' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\CustomField\CustomFieldRange A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\CustomField\CustomFieldRange instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_CustomFieldRangeService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.custom_field_range'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\CustomField\CustomFieldRange();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.field_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\Field\FieldIn A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\Field\FieldIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_FieldInService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.field_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\Field\FieldIn($this->get('ezpublish.search.common.field_name_resolver'));
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.field_range' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\Field\FieldRange A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\Field\FieldRange instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_FieldRangeService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.field_range'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\Field\FieldRange($this->get('ezpublish.search.common.field_name_resolver'));
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.full_text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\FullText A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\FullText instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_FullTextService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.full_text'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\FullText($this->get('ezpublish.search.common.field_name_resolver'));
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.language_code_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\LanguageCodeIn A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\LanguageCodeIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_LanguageCodeInService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.language_code_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\LanguageCodeIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.location_id_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\LocationIdIn A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\LocationIdIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_LocationIdInService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.location_id_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\LocationIdIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.location_remote_id_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\LocationRemoteIdIn A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\LocationRemoteIdIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_LocationRemoteIdInService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.location_remote_id_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\LocationRemoteIdIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.map_location_distance_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\MapLocation\MapLocationDistanceIn A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\MapLocation\MapLocationDistanceIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_MapLocationDistanceInService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.map_location_distance_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\MapLocation\MapLocationDistanceIn($this->get('ezpublish.search.common.field_name_resolver'), 'ezgmaplocation', 'value_location');
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.map_location_distance_range' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\MapLocation\MapLocationDistanceRange A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\MapLocation\MapLocationDistanceRange instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_MapLocationDistanceRangeService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.map_location_distance_range'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\MapLocation\MapLocationDistanceRange($this->get('ezpublish.search.common.field_name_resolver'), 'ezgmaplocation', 'value_location');
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.modified_between' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\DateMetadata\ModifiedBetween A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\DateMetadata\ModifiedBetween instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_ModifiedBetweenService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.modified_between'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\DateMetadata\ModifiedBetween();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.modified_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\DateMetadata\ModifiedIn A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\DateMetadata\ModifiedIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_ModifiedInService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.modified_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\DateMetadata\ModifiedIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.object_state_id_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\ObjectStateIdIn A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\ObjectStateIdIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_ObjectStateIdInService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.object_state_id_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\ObjectStateIdIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.parent_location_id_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\ParentLocationIdIn A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\ParentLocationIdIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_ParentLocationIdInService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.parent_location_id_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\ParentLocationIdIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.published_between' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\DateMetadata\PublishedBetween A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\DateMetadata\PublishedBetween instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_PublishedBetweenService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.published_between'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\DateMetadata\PublishedBetween();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.published_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\DateMetadata\PublishedIn A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\DateMetadata\PublishedIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_PublishedInService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.published_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\DateMetadata\PublishedIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.remote_id_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\RemoteIdIn A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\RemoteIdIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_RemoteIdInService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.remote_id_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\RemoteIdIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.section_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\SectionIn A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\SectionIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_SectionInService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.section_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\SectionIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.subtree_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\SubtreeIn A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\SubtreeIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_SubtreeInService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.subtree_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\SubtreeIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.user_metadata_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\UserMetadataIn A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\UserMetadataIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_UserMetadataInService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.user_metadata_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\UserMetadataIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.criterion_visitor.visibility' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\Visibility A EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\Visibility instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_CriterionVisitor_VisibilityService()
    {
        return $this->services['ezpublish.search.solr.query.content.criterion_visitor.visibility'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\CriterionVisitor\Visibility();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.facet_builder_visitor.aggregate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Common\FacetBuilderVisitor\Aggregate A EzSystems\EzPlatformSolrSearchEngine\Query\Common\FacetBuilderVisitor\Aggregate instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_FacetBuilderVisitor_AggregateService()
    {
        $this->services['ezpublish.search.solr.query.content.facet_builder_visitor.aggregate'] = $instance = new \EzSystems\EzPlatformSolrSearchEngine\Query\Common\FacetBuilderVisitor\Aggregate();

        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.facet_builder_visitor.user'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.facet_builder_visitor.content_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\FacetBuilderVisitor\ContentType A EzSystems\EzPlatformSolrSearchEngine\Query\Content\FacetBuilderVisitor\ContentType instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_FacetBuilderVisitor_ContentTypeService()
    {
        return $this->services['ezpublish.search.solr.query.content.facet_builder_visitor.content_type'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\FacetBuilderVisitor\ContentType();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.facet_builder_visitor.section' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\FacetBuilderVisitor\Section A EzSystems\EzPlatformSolrSearchEngine\Query\Content\FacetBuilderVisitor\Section instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_FacetBuilderVisitor_SectionService()
    {
        return $this->services['ezpublish.search.solr.query.content.facet_builder_visitor.section'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\FacetBuilderVisitor\Section();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.facet_builder_visitor.user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\FacetBuilderVisitor\User A EzSystems\EzPlatformSolrSearchEngine\Query\Content\FacetBuilderVisitor\User instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_FacetBuilderVisitor_UserService()
    {
        return $this->services['ezpublish.search.solr.query.content.facet_builder_visitor.user'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\FacetBuilderVisitor\User();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.sort_clause_visitor.aggregate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Common\SortClauseVisitor\Aggregate A EzSystems\EzPlatformSolrSearchEngine\Query\Common\SortClauseVisitor\Aggregate instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_SortClauseVisitor_AggregateService()
    {
        $this->services['ezpublish.search.solr.query.content.sort_clause_visitor.aggregate'] = $instance = new \EzSystems\EzPlatformSolrSearchEngine\Query\Common\SortClauseVisitor\Aggregate();

        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.sort_clause_visitor.content_id'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.sort_clause_visitor.content_name'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.sort_clause_visitor.field'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.sort_clause_visitor.section_identifier'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.sort_clause_visitor.section_name'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.sort_clause_visitor.date_published'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.sort_clause_visitor.date_modified'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.content.sort_clause_visitor.map_location_distance'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.sort_clause_visitor.content_id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\ContentId A EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\ContentId instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_SortClauseVisitor_ContentIdService()
    {
        return $this->services['ezpublish.search.solr.query.content.sort_clause_visitor.content_id'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\ContentId();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.sort_clause_visitor.content_name' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\ContentName A EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\ContentName instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_SortClauseVisitor_ContentNameService()
    {
        return $this->services['ezpublish.search.solr.query.content.sort_clause_visitor.content_name'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\ContentName();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.sort_clause_visitor.date_modified' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\DateModified A EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\DateModified instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_SortClauseVisitor_DateModifiedService()
    {
        return $this->services['ezpublish.search.solr.query.content.sort_clause_visitor.date_modified'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\DateModified();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.sort_clause_visitor.date_published' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\DatePublished A EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\DatePublished instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_SortClauseVisitor_DatePublishedService()
    {
        return $this->services['ezpublish.search.solr.query.content.sort_clause_visitor.date_published'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\DatePublished();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.sort_clause_visitor.field' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\Field A EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\Field instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_SortClauseVisitor_FieldService()
    {
        return $this->services['ezpublish.search.solr.query.content.sort_clause_visitor.field'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\Field($this->get('ezpublish.search.common.field_name_resolver'));
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.sort_clause_visitor.map_location_distance' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\MapLocationDistance A EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\MapLocationDistance instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_SortClauseVisitor_MapLocationDistanceService()
    {
        return $this->services['ezpublish.search.solr.query.content.sort_clause_visitor.map_location_distance'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\MapLocationDistance($this->get('ezpublish.search.common.field_name_resolver'), 'value_location');
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.sort_clause_visitor.section_identifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\SectionIdentifier A EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\SectionIdentifier instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_SortClauseVisitor_SectionIdentifierService()
    {
        return $this->services['ezpublish.search.solr.query.content.sort_clause_visitor.section_identifier'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\SectionIdentifier();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.content.sort_clause_visitor.section_name' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\SectionName A EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\SectionName instance.
     */
    protected function getEzpublish_Search_Solr_Query_Content_SortClauseVisitor_SectionNameService()
    {
        return $this->services['ezpublish.search.solr.query.content.sort_clause_visitor.section_name'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Content\SortClauseVisitor\SectionName();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.aggregate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Common\CriterionVisitor\Aggregate A EzSystems\EzPlatformSolrSearchEngine\Query\Common\CriterionVisitor\Aggregate instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_AggregateService()
    {
        $this->services['ezpublish.search.solr.query.location.criterion_visitor.aggregate'] = $instance = new \EzSystems\EzPlatformSolrSearchEngine\Query\Common\CriterionVisitor\Aggregate();

        $instance->addVisitor($this->get('ezpublish.search.solr.query.common.criterion_visitor.match_all'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.common.criterion_visitor.match_none'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.common.criterion_visitor.logical_and'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.common.criterion_visitor.logical_or'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.common.criterion_visitor.logical_not'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.ancestor'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.content_id_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.subtree_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.content_type_id_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.content_type_identifier_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.content_type_group_id_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.location_id_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.parent_location_id_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.section_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.remote_id_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.language_code_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.object_state_id_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.location_remote_id_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.modified_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.published_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.modified_between'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.published_between'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.user_metadata_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.visibility'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.depth_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.depth_between'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.is_main_location'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.priority_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.priority_between'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.field_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.field_range'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.full_text'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.custom_field_in'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.custom_field_range'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.criterion_visitor.map_location_distance_range'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.ancestor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Ancestor A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Ancestor instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_AncestorService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.ancestor'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Ancestor();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.content_id_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\ContentIdIn A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\ContentIdIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_ContentIdInService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.content_id_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\ContentIdIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.content_type_group_id_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\ContentTypeGroupIdIn A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\ContentTypeGroupIdIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_ContentTypeGroupIdInService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.content_type_group_id_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\ContentTypeGroupIdIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.content_type_id_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\ContentTypeIdIn A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\ContentTypeIdIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_ContentTypeIdInService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.content_type_id_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\ContentTypeIdIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.content_type_identifier_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\ContentTypeIdentifierIn A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\ContentTypeIdentifierIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_ContentTypeIdentifierInService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.content_type_identifier_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\ContentTypeIdentifierIn($this->get('ezpublish.spi.persistence.content_type_handler'));
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.custom_field_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\CustomField\CustomFieldIn A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\CustomField\CustomFieldIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_CustomFieldInService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.custom_field_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\CustomField\CustomFieldIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.custom_field_range' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\CustomField\CustomFieldRange A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\CustomField\CustomFieldRange instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_CustomFieldRangeService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.custom_field_range'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\CustomField\CustomFieldRange();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.depth_between' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Location\DepthBetween A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Location\DepthBetween instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_DepthBetweenService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.depth_between'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Location\DepthBetween();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.depth_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Location\DepthIn A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Location\DepthIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_DepthInService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.depth_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Location\DepthIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.field_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Field\FieldIn A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Field\FieldIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_FieldInService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.field_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Field\FieldIn($this->get('ezpublish.search.common.field_name_resolver'));
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.field_range' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Field\FieldRange A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Field\FieldRange instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_FieldRangeService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.field_range'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Field\FieldRange($this->get('ezpublish.search.common.field_name_resolver'));
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.full_text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\FullText A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\FullText instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_FullTextService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.full_text'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\FullText($this->get('ezpublish.search.common.field_name_resolver'));
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.is_main_location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Location\IsMainLocation A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Location\IsMainLocation instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_IsMainLocationService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.is_main_location'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Location\IsMainLocation();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.language_code_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\LanguageCodeIn A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\LanguageCodeIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_LanguageCodeInService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.language_code_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\LanguageCodeIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.location_id_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\LocationIdIn A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\LocationIdIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_LocationIdInService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.location_id_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\LocationIdIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.location_remote_id_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\LocationRemoteIdIn A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\LocationRemoteIdIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_LocationRemoteIdInService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.location_remote_id_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\LocationRemoteIdIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.map_location_distance_range' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Field\MapLocationDistanceRange A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Field\MapLocationDistanceRange instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_MapLocationDistanceRangeService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.map_location_distance_range'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Field\MapLocationDistanceRange($this->get('ezpublish.search.common.field_name_resolver'), 'ezgmaplocation', 'value_location');
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.modified_between' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\DateMetadata\ModifiedBetween A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\DateMetadata\ModifiedBetween instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_ModifiedBetweenService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.modified_between'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\DateMetadata\ModifiedBetween();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.modified_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\DateMetadata\ModifiedIn A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\DateMetadata\ModifiedIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_ModifiedInService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.modified_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\DateMetadata\ModifiedIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.object_state_id_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\ObjectStateIdIn A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\ObjectStateIdIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_ObjectStateIdInService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.object_state_id_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\ObjectStateIdIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.parent_location_id_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\ParentLocationIdIn A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\ParentLocationIdIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_ParentLocationIdInService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.parent_location_id_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\ParentLocationIdIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.priority_between' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Location\PriorityBetween A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Location\PriorityBetween instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_PriorityBetweenService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.priority_between'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Location\PriorityBetween();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.priority_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Location\PriorityIn A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Location\PriorityIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_PriorityInService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.priority_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Location\PriorityIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.published_between' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\DateMetadata\PublishedBetween A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\DateMetadata\PublishedBetween instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_PublishedBetweenService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.published_between'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\DateMetadata\PublishedBetween();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.published_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\DateMetadata\PublishedIn A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\DateMetadata\PublishedIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_PublishedInService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.published_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\DateMetadata\PublishedIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.remote_id_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\RemoteIdIn A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\RemoteIdIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_RemoteIdInService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.remote_id_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\RemoteIdIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.section_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\SectionIn A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\SectionIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_SectionInService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.section_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\SectionIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.subtree_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\SubtreeIn A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\SubtreeIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_SubtreeInService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.subtree_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\SubtreeIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.user_metadata_in' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\UserMetadataIn A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\UserMetadataIn instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_UserMetadataInService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.user_metadata_in'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\UserMetadataIn();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.criterion_visitor.visibility' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Visibility A EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Visibility instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_CriterionVisitor_VisibilityService()
    {
        return $this->services['ezpublish.search.solr.query.location.criterion_visitor.visibility'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\CriterionVisitor\Visibility();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.facet_builder_visitor.aggregate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Common\FacetBuilderVisitor\Aggregate A EzSystems\EzPlatformSolrSearchEngine\Query\Common\FacetBuilderVisitor\Aggregate instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_FacetBuilderVisitor_AggregateService()
    {
        return $this->services['ezpublish.search.solr.query.location.facet_builder_visitor.aggregate'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Common\FacetBuilderVisitor\Aggregate();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.sort_clause_visitor.aggregate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Common\SortClauseVisitor\Aggregate A EzSystems\EzPlatformSolrSearchEngine\Query\Common\SortClauseVisitor\Aggregate instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_AggregateService()
    {
        $this->services['ezpublish.search.solr.query.location.sort_clause_visitor.aggregate'] = $instance = new \EzSystems\EzPlatformSolrSearchEngine\Query\Common\SortClauseVisitor\Aggregate();

        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.sort_clause_visitor.content_id'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.sort_clause_visitor.content_name'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.sort_clause_visitor.date_published'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.sort_clause_visitor.date_modified'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.sort_clause_visitor.field'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.sort_clause_visitor.section_identifier'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.sort_clause_visitor.section_name'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.sort_clause_visitor.depth'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.sort_clause_visitor.id'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.sort_clause_visitor.is_main_location'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.sort_clause_visitor.path'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.sort_clause_visitor.priority'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.sort_clause_visitor.visibility'));
        $instance->addVisitor($this->get('ezpublish.search.solr.query.location.sort_clause_visitor.map_location_distance'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.sort_clause_visitor.content_id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\ContentId A EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\ContentId instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_ContentIdService()
    {
        return $this->services['ezpublish.search.solr.query.location.sort_clause_visitor.content_id'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\ContentId();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.sort_clause_visitor.content_name' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\ContentName A EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\ContentName instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_ContentNameService()
    {
        return $this->services['ezpublish.search.solr.query.location.sort_clause_visitor.content_name'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\ContentName();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.sort_clause_visitor.date_modified' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\DateModified A EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\DateModified instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_DateModifiedService()
    {
        return $this->services['ezpublish.search.solr.query.location.sort_clause_visitor.date_modified'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\DateModified();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.sort_clause_visitor.date_published' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\DatePublished A EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\DatePublished instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_DatePublishedService()
    {
        return $this->services['ezpublish.search.solr.query.location.sort_clause_visitor.date_published'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\DatePublished();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.sort_clause_visitor.depth' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\Location\Depth A EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\Location\Depth instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_DepthService()
    {
        return $this->services['ezpublish.search.solr.query.location.sort_clause_visitor.depth'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\Location\Depth();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.sort_clause_visitor.field' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\Field A EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\Field instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_FieldService()
    {
        return $this->services['ezpublish.search.solr.query.location.sort_clause_visitor.field'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\Field($this->get('ezpublish.search.common.field_name_resolver'));
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.sort_clause_visitor.id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\Location\Id A EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\Location\Id instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_IdService()
    {
        return $this->services['ezpublish.search.solr.query.location.sort_clause_visitor.id'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\Location\Id();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.sort_clause_visitor.is_main_location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\Location\IsMainLocation A EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\Location\IsMainLocation instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_IsMainLocationService()
    {
        return $this->services['ezpublish.search.solr.query.location.sort_clause_visitor.is_main_location'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\Location\IsMainLocation();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.sort_clause_visitor.map_location_distance' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\MapLocationDistance A EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\MapLocationDistance instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_MapLocationDistanceService()
    {
        return $this->services['ezpublish.search.solr.query.location.sort_clause_visitor.map_location_distance'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\MapLocationDistance($this->get('ezpublish.search.common.field_name_resolver'), 'value_location');
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.sort_clause_visitor.path' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\Location\Path A EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\Location\Path instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_PathService()
    {
        return $this->services['ezpublish.search.solr.query.location.sort_clause_visitor.path'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\Location\Path();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.sort_clause_visitor.priority' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\Location\Priority A EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\Location\Priority instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_PriorityService()
    {
        return $this->services['ezpublish.search.solr.query.location.sort_clause_visitor.priority'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\Location\Priority();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.sort_clause_visitor.section_identifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\SectionIdentifier A EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\SectionIdentifier instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_SectionIdentifierService()
    {
        return $this->services['ezpublish.search.solr.query.location.sort_clause_visitor.section_identifier'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\SectionIdentifier();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.sort_clause_visitor.section_name' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\SectionName A EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\SectionName instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_SectionNameService()
    {
        return $this->services['ezpublish.search.solr.query.location.sort_clause_visitor.section_name'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\SectionName();
    }

    /**
     * Gets the 'ezpublish.search.solr.query.location.sort_clause_visitor.visibility' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\Location\Visibility A EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\Location\Visibility instance.
     */
    protected function getEzpublish_Search_Solr_Query_Location_SortClauseVisitor_VisibilityService()
    {
        return $this->services['ezpublish.search.solr.query.location.sort_clause_visitor.visibility'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Location\SortClauseVisitor\Location\Visibility();
    }

    /**
     * Gets the 'ezpublish.search.solr.query_converter.content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Common\QueryConverter\NativeQueryConverter A EzSystems\EzPlatformSolrSearchEngine\Query\Common\QueryConverter\NativeQueryConverter instance.
     */
    protected function getEzpublish_Search_Solr_QueryConverter_ContentService()
    {
        return $this->services['ezpublish.search.solr.query_converter.content'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Common\QueryConverter\NativeQueryConverter($this->get('ezpublish.search.solr.query.content.criterion_visitor.aggregate'), $this->get('ezpublish.search.solr.query.content.sort_clause_visitor.aggregate'), $this->get('ezpublish.search.solr.query.content.facet_builder_visitor.aggregate'));
    }

    /**
     * Gets the 'ezpublish.search.solr.query_converter.location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Query\Common\QueryConverter\NativeQueryConverter A EzSystems\EzPlatformSolrSearchEngine\Query\Common\QueryConverter\NativeQueryConverter instance.
     */
    protected function getEzpublish_Search_Solr_QueryConverter_LocationService()
    {
        return $this->services['ezpublish.search.solr.query_converter.location'] = new \EzSystems\EzPlatformSolrSearchEngine\Query\Common\QueryConverter\NativeQueryConverter($this->get('ezpublish.search.solr.query.location.criterion_visitor.aggregate'), $this->get('ezpublish.search.solr.query.location.sort_clause_visitor.aggregate'), $this->get('ezpublish.search.solr.query.location.facet_builder_visitor.aggregate'));
    }

    /**
     * Gets the 'ezpublish.search.solr.result_extractor.native' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\ResultExtractor\NativeResultExtractor A EzSystems\EzPlatformSolrSearchEngine\ResultExtractor\NativeResultExtractor instance.
     */
    protected function getEzpublish_Search_Solr_ResultExtractor_NativeService()
    {
        return $this->services['ezpublish.search.solr.result_extractor.native'] = new \EzSystems\EzPlatformSolrSearchEngine\ResultExtractor\NativeResultExtractor($this->get('ezpublish.search.solr.query.content.facet_builder_visitor.aggregate'));
    }

    /**
     * Gets the 'ezpublish.security.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Controller\SecurityController A eZ\Publish\Core\MVC\Symfony\Controller\SecurityController instance.
     */
    protected function getEzpublish_Security_ControllerService()
    {
        return $this->services['ezpublish.security.controller'] = new \eZ\Publish\Core\MVC\Symfony\Controller\SecurityController($this->get('templating'), $this->get('ezpublish.config.resolver.chain'), $this->get('security.authentication_utils'));
    }

    /**
     * Gets the 'ezpublish.security.login_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Security\EventListener\SecurityListener A eZ\Publish\Core\MVC\Symfony\Security\EventListener\SecurityListener instance.
     */
    protected function getEzpublish_Security_LoginListenerService()
    {
        return $this->services['ezpublish.security.login_listener'] = new \eZ\Publish\Core\MVC\Symfony\Security\EventListener\SecurityListener($this->get('ezpublish.signalslot.repository'), $this->get('ezpublish.config.resolver.chain'), $this->get('debug.event_dispatcher'), $this->get('security.token_storage'), $this->get('security.authorization_checker'), '/_fragment');
    }

    /**
     * Gets the 'ezpublish.security.user_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Security\User\Provider A eZ\Publish\Core\MVC\Symfony\Security\User\Provider instance.
     */
    protected function getEzpublish_Security_UserProviderService()
    {
        return $this->services['ezpublish.security.user_provider'] = new \eZ\Publish\Core\MVC\Symfony\Security\User\Provider($this->get('ezpublish.signalslot.repository'));
    }

    /**
     * Gets the 'ezpublish.session_init_by_post_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\EventListener\SessionInitByPostListener A eZ\Bundle\EzPublishCoreBundle\EventListener\SessionInitByPostListener instance.
     */
    protected function getEzpublish_SessionInitByPostListenerService()
    {
        return $this->services['ezpublish.session_init_by_post_listener'] = new \eZ\Bundle\EzPublishCoreBundle\EventListener\SessionInitByPostListener($this->get('session', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'ezpublish.session_set_dynamic_name_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\EventListener\SessionSetDynamicNameListener A eZ\Bundle\EzPublishCoreBundle\EventListener\SessionSetDynamicNameListener instance.
     */
    protected function getEzpublish_SessionSetDynamicNameListenerService()
    {
        return $this->services['ezpublish.session_set_dynamic_name_listener'] = new \eZ\Bundle\EzPublishCoreBundle\EventListener\SessionSetDynamicNameListener($this->get('ezpublish.config.resolver.chain'), $this->get('session', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('session.storage.native', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'ezpublish.signalslot.event_converter_slot' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\SignalSlot\Slot\SymfonyEventConverterSlot A eZ\Bundle\EzPublishCoreBundle\SignalSlot\Slot\SymfonyEventConverterSlot instance.
     */
    protected function getEzpublish_Signalslot_EventConverterSlotService()
    {
        return $this->services['ezpublish.signalslot.event_converter_slot'] = new \eZ\Bundle\EzPublishCoreBundle\SignalSlot\Slot\SymfonyEventConverterSlot($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'ezpublish.signalslot.repository' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\SignalSlot\Repository A eZ\Publish\Core\SignalSlot\Repository instance.
     */
    public function getEzpublish_Signalslot_RepositoryService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.signalslot.repository'] = new eZPublishCoreSignalSlotRepository_0000000010d7726f00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Signalslot_RepositoryService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \eZ\Publish\Core\SignalSlot\Repository($this->get('ezpublish.api.inner_repository'), $this->get('ezpublish.signalslot.signal_dispatcher_transaction_wrapper'));
    }

    /**
     * Gets the 'ezpublish.signalslot.signal_dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\SignalSlot\SignalDispatcher\DefaultSignalDispatcher A eZ\Publish\Core\SignalSlot\SignalDispatcher\DefaultSignalDispatcher instance.
     */
    protected function getEzpublish_Signalslot_SignalDispatcherService()
    {
        $this->services['ezpublish.signalslot.signal_dispatcher'] = $instance = new \eZ\Publish\Core\SignalSlot\SignalDispatcher\DefaultSignalDispatcher();

        $instance->attach('SectionService\\AssignSectionSignal', $this->get('ezpublish.http_cache.signalslot.assign_section'));
        $instance->attach('ContentService\\CopyContentSignal', $this->get('ezpublish.http_cache.signalslot.copy_content'));
        $instance->attach('LocationService\\CreateLocationSignal', $this->get('ezpublish.http_cache.signalslot.create_location'));
        $instance->attach('ContentService\\DeleteContentSignal', $this->get('ezpublish.http_cache.signalslot.delete_content'));
        $instance->attach('LocationService\\DeleteLocationSignal', $this->get('ezpublish.http_cache.signalslot.delete_location'));
        $instance->attach('ContentService\\DeleteVersionSignal', $this->get('ezpublish.http_cache.signalslot.delete_version'));
        $instance->attach('LocationService\\HideLocationSignal', $this->get('ezpublish.http_cache.signalslot.hide_location'));
        $instance->attach('LocationService\\MoveSubtreeSignal', $this->get('ezpublish.http_cache.signalslot.move_subtree'));
        $instance->attach('ContentService\\PublishVersionSignal', $this->get('ezpublish.http_cache.signalslot.publish_version'));
        $instance->attach('ObjectStateService\\SetContentStateSignal', $this->get('ezpublish.http_cache.signalslot.set_content_state'));
        $instance->attach('LocationService\\SwapLocationSignal', $this->get('ezpublish.http_cache.signalslot.swap_location'));
        $instance->attach('LocationService\\UnhideLocationSignal', $this->get('ezpublish.http_cache.signalslot.unhide_location'));
        $instance->attach('LocationService\\UpdateLocationSignal', $this->get('ezpublish.http_cache.signalslot.update_location'));
        $instance->attach('UserService\\UpdateUserSignal', $this->get('ezpublish.http_cache.signalslot.update_user'));
        $instance->attach('UserService\\AssignUserToUserGroupSignal', $this->get('ezpublish.http_cache.signalslot.assign_user_to_user_group'));
        $instance->attach('UserService\\UnAssignUserFromUserGroupSignal', $this->get('ezpublish.http_cache.signalslot.unassign_user_from_user_group'));
        $instance->attach('*', $this->get('ezpublish.signalslot.event_converter_slot'));
        $instance->attach('ContentService\\PublishVersionSignal', $this->get('ezpublish.search.slot.publish_version'));
        $instance->attach('ContentService\\CopyContentSignal', $this->get('ezpublish.search.slot.copy_content'));
        $instance->attach('ContentService\\DeleteContentSignal', $this->get('ezpublish.search.slot.delete_content'));
        $instance->attach('ContentService\\DeleteVersionSignal', $this->get('ezpublish.search.slot.delete_version'));
        $instance->attach('LocationService\\CreateLocationSignal', $this->get('ezpublish.search.slot.create_location'));
        $instance->attach('LocationService\\DeleteLocationSignal', $this->get('ezpublish.search.slot.delete_location'));
        $instance->attach('UserService\\CreateUserSignal', $this->get('ezpublish.search.slot.create_user'));
        $instance->attach('UserService\\CreateUserGroupSignal', $this->get('ezpublish.search.slot.create_user_group'));
        $instance->attach('UserService\\MoveUserGroupSignal', $this->get('ezpublish.search.slot.move_user_group'));
        $instance->attach('LocationService\\CopySubtreeSignal', $this->get('ezpublish.search.slot.copy_subtree'));
        $instance->attach('LocationService\\MoveSubtreeSignal', $this->get('ezpublish.search.slot.move_subtree'));
        $instance->attach('TrashService\\TrashSignal', $this->get('ezpublish.search.slot.trash'));
        $instance->attach('TrashService\\RecoverSignal', $this->get('ezpublish.search.slot.recover'));
        $instance->attach('LocationService\\HideLocationSignal', $this->get('ezpublish.search.slot.hide_location'));
        $instance->attach('LocationService\\UnhideLocationSignal', $this->get('ezpublish.search.slot.unhide_location'));
        $instance->attach('ObjectStateService\\SetContentStateSignal', $this->get('ezpublish.search.slot.set_content_state'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.signalslot.signal_dispatcher_transaction_wrapper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\SignalSlot\SignalDispatcher\SignalDispatcherTransactionWrapper A eZ\Publish\Core\SignalSlot\SignalDispatcher\SignalDispatcherTransactionWrapper instance.
     */
    protected function getEzpublish_Signalslot_SignalDispatcherTransactionWrapperService()
    {
        return $this->services['ezpublish.signalslot.signal_dispatcher_transaction_wrapper'] = new \eZ\Publish\Core\SignalSlot\SignalDispatcher\SignalDispatcherTransactionWrapper($this->get('ezpublish.signalslot.signal_dispatcher'));
    }

    /**
     * Gets the 'ezpublish.siteaccess' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\SiteAccess A eZ\Publish\Core\MVC\Symfony\SiteAccess instance.
     */
    protected function getEzpublish_SiteaccessService()
    {
        return $this->services['ezpublish.siteaccess'] = new \eZ\Publish\Core\MVC\Symfony\SiteAccess('default', 'uninitialized');
    }

    /**
     * Gets the 'ezpublish.siteaccess.matcher_builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\SiteAccess\MatcherBuilder A eZ\Bundle\EzPublishCoreBundle\SiteAccess\MatcherBuilder instance.
     */
    protected function getEzpublish_Siteaccess_MatcherBuilderService()
    {
        return $this->services['ezpublish.siteaccess.matcher_builder'] = new \eZ\Bundle\EzPublishCoreBundle\SiteAccess\MatcherBuilder($this);
    }

    /**
     * Gets the 'ezpublish.siteaccess_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\EventListener\SiteAccessListener A eZ\Bundle\EzPublishCoreBundle\EventListener\SiteAccessListener instance.
     */
    protected function getEzpublish_SiteaccessListenerService()
    {
        $this->services['ezpublish.siteaccess_listener'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\EventListener\SiteAccessListener($this->get('router.default'), $this->get('ezpublish.urlalias_generator'), $this->get('security.http_utils'));

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'ezpublish.siteaccess_listener.routing' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\EventListener\RoutingListener A eZ\Bundle\EzPublishCoreBundle\EventListener\RoutingListener instance.
     */
    protected function getEzpublish_SiteaccessListener_RoutingService()
    {
        return $this->services['ezpublish.siteaccess_listener.routing'] = new \eZ\Bundle\EzPublishCoreBundle\EventListener\RoutingListener($this->get('ezpublish.config.resolver.chain'), $this->get('ezpublish.urlalias_router'), $this->get('ezpublish.urlalias_generator'));
    }

    /**
     * Gets the 'ezpublish.siteaccess_match_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\EventListener\SiteAccessMatchListener A eZ\Publish\Core\MVC\Symfony\EventListener\SiteAccessMatchListener instance.
     */
    protected function getEzpublish_SiteaccessMatchListenerService()
    {
        return $this->services['ezpublish.siteaccess_match_listener'] = new \eZ\Publish\Core\MVC\Symfony\EventListener\SiteAccessMatchListener($this->get('ezpublish.siteaccess_router'), $this->get('debug.event_dispatcher'), $this->get('fos_http_cache.user_context.request_matcher'));
    }

    /**
     * Gets the 'ezpublish.siteaccess_router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\SiteAccess\Router A eZ\Publish\Core\MVC\Symfony\SiteAccess\Router instance.
     */
    protected function getEzpublish_SiteaccessRouterService()
    {
        return $this->services['ezpublish.siteaccess_router'] = new \eZ\Publish\Core\MVC\Symfony\SiteAccess\Router($this->get('ezpublish.siteaccess.matcher_builder'), $this->get('logger'), 'site', array('URIElement' => array('value' => 1)), array(0 => 'site'), 'eZ\\Publish\\Core\\MVC\\Symfony\\SiteAccess');
    }

    /**
     * Gets the 'ezpublish.solr.engine_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\EzPlatformSolrSearchEngineBundle\ApiLoader\SolrEngineFactory A EzSystems\EzPlatformSolrSearchEngineBundle\ApiLoader\SolrEngineFactory instance.
     */
    protected function getEzpublish_Solr_EngineFactoryService()
    {
        $this->services['ezpublish.solr.engine_factory'] = $instance = new \EzSystems\EzPlatformSolrSearchEngineBundle\ApiLoader\SolrEngineFactory($this->get('ezpublish.api.repository_configuration_provider'), 'default', 'EzSystems\\EzPlatformSolrSearchEngine\\Handler');

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'ezpublish.spi.persistence.cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Cache\Handler A eZ\Publish\Core\Persistence\Cache\Handler instance.
     */
    protected function getEzpublish_Spi_Persistence_CacheService()
    {
        return $this->services['ezpublish.spi.persistence.cache'] = new \eZ\Publish\Core\Persistence\Cache\Handler($this->get('ezpublish.api.storage_engine'), $this->get('ezpublish.spi.persistence.cache.sectionhandler'), $this->get('ezpublish.spi.persistence.cache.locationhandler'), $this->get('ezpublish.spi.persistence.cache.contenthandler'), $this->get('ezpublish.spi.persistence.cache.contentlanguagehandler'), $this->get('ezpublish.spi.persistence.cache.contenttypehandler'), $this->get('ezpublish.spi.persistence.cache.userhandler'), $this->get('ezpublish.spi.persistence.cache.transactionhandler'), $this->get('ezpublish.spi.persistence.cache.trashhandler'), $this->get('ezpublish.spi.persistence.cache.urlaliashandler'), $this->get('ezpublish.spi.persistence.cache.objectstatehandler'), $this->get('ezpublish.spi.persistence.cache.persistencelogger'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.cache.contenthandler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Cache\ContentHandler A eZ\Publish\Core\Persistence\Cache\ContentHandler instance.
     */
    protected function getEzpublish_Spi_Persistence_Cache_ContenthandlerService()
    {
        return $this->services['ezpublish.spi.persistence.cache.contenthandler'] = new \eZ\Publish\Core\Persistence\Cache\ContentHandler($this->get('ezpublish.cache_pool.spi.cache.decorator'), $this->get('ezpublish.api.storage_engine'), $this->get('ezpublish.spi.persistence.cache.persistencelogger'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.cache.contentlanguagehandler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Cache\ContentLanguageHandler A eZ\Publish\Core\Persistence\Cache\ContentLanguageHandler instance.
     */
    protected function getEzpublish_Spi_Persistence_Cache_ContentlanguagehandlerService()
    {
        return $this->services['ezpublish.spi.persistence.cache.contentlanguagehandler'] = new \eZ\Publish\Core\Persistence\Cache\ContentLanguageHandler($this->get('ezpublish.cache_pool.spi.cache.decorator'), $this->get('ezpublish.api.storage_engine'), $this->get('ezpublish.spi.persistence.cache.persistencelogger'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.cache.contenttypehandler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Cache\ContentTypeHandler A eZ\Publish\Core\Persistence\Cache\ContentTypeHandler instance.
     */
    protected function getEzpublish_Spi_Persistence_Cache_ContenttypehandlerService()
    {
        return $this->services['ezpublish.spi.persistence.cache.contenttypehandler'] = new \eZ\Publish\Core\Persistence\Cache\ContentTypeHandler($this->get('ezpublish.cache_pool.spi.cache.decorator'), $this->get('ezpublish.api.storage_engine'), $this->get('ezpublish.spi.persistence.cache.persistencelogger'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.cache.locationhandler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Cache\LocationHandler A eZ\Publish\Core\Persistence\Cache\LocationHandler instance.
     */
    protected function getEzpublish_Spi_Persistence_Cache_LocationhandlerService()
    {
        return $this->services['ezpublish.spi.persistence.cache.locationhandler'] = new \eZ\Publish\Core\Persistence\Cache\LocationHandler($this->get('ezpublish.cache_pool.spi.cache.decorator'), $this->get('ezpublish.api.storage_engine'), $this->get('ezpublish.spi.persistence.cache.persistencelogger'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.cache.objectstatehandler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Cache\ObjectStateHandler A eZ\Publish\Core\Persistence\Cache\ObjectStateHandler instance.
     */
    protected function getEzpublish_Spi_Persistence_Cache_ObjectstatehandlerService()
    {
        return $this->services['ezpublish.spi.persistence.cache.objectstatehandler'] = new \eZ\Publish\Core\Persistence\Cache\ObjectStateHandler($this->get('ezpublish.cache_pool.spi.cache.decorator'), $this->get('ezpublish.api.storage_engine'), $this->get('ezpublish.spi.persistence.cache.persistencelogger'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.cache.persistencelogger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Cache\PersistenceLogger A eZ\Publish\Core\Persistence\Cache\PersistenceLogger instance.
     */
    protected function getEzpublish_Spi_Persistence_Cache_PersistenceloggerService()
    {
        return $this->services['ezpublish.spi.persistence.cache.persistencelogger'] = new \eZ\Publish\Core\Persistence\Cache\PersistenceLogger(true);
    }

    /**
     * Gets the 'ezpublish.spi.persistence.cache.sectionhandler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Cache\SectionHandler A eZ\Publish\Core\Persistence\Cache\SectionHandler instance.
     */
    protected function getEzpublish_Spi_Persistence_Cache_SectionhandlerService()
    {
        return $this->services['ezpublish.spi.persistence.cache.sectionhandler'] = new \eZ\Publish\Core\Persistence\Cache\SectionHandler($this->get('ezpublish.cache_pool.spi.cache.decorator'), $this->get('ezpublish.api.storage_engine'), $this->get('ezpublish.spi.persistence.cache.persistencelogger'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.cache.transactionhandler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Cache\TransactionHandler A eZ\Publish\Core\Persistence\Cache\TransactionHandler instance.
     */
    protected function getEzpublish_Spi_Persistence_Cache_TransactionhandlerService()
    {
        return $this->services['ezpublish.spi.persistence.cache.transactionhandler'] = new \eZ\Publish\Core\Persistence\Cache\TransactionHandler($this->get('ezpublish.cache_pool.spi.cache.decorator'), $this->get('ezpublish.api.storage_engine'), $this->get('ezpublish.spi.persistence.cache.persistencelogger'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.cache.trashhandler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Cache\TrashHandler A eZ\Publish\Core\Persistence\Cache\TrashHandler instance.
     */
    protected function getEzpublish_Spi_Persistence_Cache_TrashhandlerService()
    {
        return $this->services['ezpublish.spi.persistence.cache.trashhandler'] = new \eZ\Publish\Core\Persistence\Cache\TrashHandler($this->get('ezpublish.cache_pool.spi.cache.decorator'), $this->get('ezpublish.api.storage_engine'), $this->get('ezpublish.spi.persistence.cache.persistencelogger'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.cache.urlaliashandler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Cache\UrlAliasHandler A eZ\Publish\Core\Persistence\Cache\UrlAliasHandler instance.
     */
    protected function getEzpublish_Spi_Persistence_Cache_UrlaliashandlerService()
    {
        return $this->services['ezpublish.spi.persistence.cache.urlaliashandler'] = new \eZ\Publish\Core\Persistence\Cache\UrlAliasHandler($this->get('ezpublish.cache_pool.spi.cache.decorator'), $this->get('ezpublish.api.storage_engine'), $this->get('ezpublish.spi.persistence.cache.persistencelogger'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.cache.userhandler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Cache\UserHandler A eZ\Publish\Core\Persistence\Cache\UserHandler instance.
     */
    protected function getEzpublish_Spi_Persistence_Cache_UserhandlerService()
    {
        return $this->services['ezpublish.spi.persistence.cache.userhandler'] = new \eZ\Publish\Core\Persistence\Cache\UserHandler($this->get('ezpublish.cache_pool.spi.cache.decorator'), $this->get('ezpublish.api.storage_engine'), $this->get('ezpublish.spi.persistence.cache.persistencelogger'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.content_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\SPI\Persistence\Content\Handler A eZ\Publish\SPI\Persistence\Content\Handler instance.
     */
    protected function getEzpublish_Spi_Persistence_ContentHandlerService()
    {
        return $this->services['ezpublish.spi.persistence.content_handler'] = $this->get('ezpublish.spi.persistence.cache')->contentHandler();
    }

    /**
     * Gets the 'ezpublish.spi.persistence.content_type_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\SPI\Persistence\Content\Type\Handler A eZ\Publish\SPI\Persistence\Content\Type\Handler instance.
     */
    protected function getEzpublish_Spi_Persistence_ContentTypeHandlerService()
    {
        return $this->services['ezpublish.spi.persistence.content_type_handler'] = $this->get('ezpublish.spi.persistence.cache')->contentTypeHandler();
    }

    /**
     * Gets the 'ezpublish.spi.persistence.language_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\SPI\Persistence\Content\Language\Handler A eZ\Publish\SPI\Persistence\Content\Language\Handler instance.
     */
    protected function getEzpublish_Spi_Persistence_LanguageHandlerService()
    {
        return $this->services['ezpublish.spi.persistence.language_handler'] = $this->get('ezpublish.spi.persistence.cache')->contentLanguageHandler();
    }

    /**
     * Gets the 'ezpublish.spi.persistence.legacy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Handler A eZ\Publish\Core\Persistence\Legacy\Handler instance.
     */
    public function getEzpublish_Spi_Persistence_LegacyService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.spi.persistence.legacy'] = new eZPublishCorePersistenceLegacyHandler_0000000010d772dd00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Spi_Persistence_LegacyService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \eZ\Publish\Core\Persistence\Legacy\Handler($this->get('ezpublish.spi.persistence.legacy.content.handler'), $this->get('ezpublish.spi.persistence.legacy.content_type.handler.caching'), $this->get('ezpublish.spi.persistence.legacy.language.handler.caching'), $this->get('ezpublish.spi.persistence.legacy.location.handler'), $this->get('ezpublish.spi.persistence.legacy.object_state.handler'), $this->get('ezpublish.spi.persistence.legacy.section.handler'), $this->get('ezpublish.spi.persistence.legacy.transactionhandler'), $this->get('ezpublish.spi.persistence.legacy.trash.handler'), $this->get('ezpublish.spi.persistence.legacy.url_alias.handler'), $this->get('ezpublish.spi.persistence.legacy.url_wildcard.handler'), $this->get('ezpublish.spi.persistence.legacy.user.handler'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.legacy.content.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Handler A eZ\Publish\Core\Persistence\Legacy\Content\Handler instance.
     */
    public function getEzpublish_Spi_Persistence_Legacy_Content_HandlerService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.spi.persistence.legacy.content.handler'] = new eZPublishCorePersistenceLegacyContentHandler_0000000010d7747d00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Spi_Persistence_Legacy_Content_HandlerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \eZ\Publish\Core\Persistence\Legacy\Content\Handler($this->get('ezpublish.persistence.legacy.content.gateway.exception_conversion'), $this->get('ezpublish.persistence.legacy.location.gateway.exception_conversion'), $this->get('ezpublish.persistence.legacy.content.mapper'), $this->get('ezpublish.persistence.legacy.field_handler'), $this->get('ezpublish.persistence.slug_converter'), $this->get('ezpublish.persistence.legacy.url_alias.gateway.exception_conversion'), $this->get('ezpublish.spi.persistence.legacy.content_type.handler.caching'), $this->get('ezpublish.persistence.legacy.tree_handler'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.legacy.content_type.handler.caching' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Type\MemoryCachingHandler A eZ\Publish\Core\Persistence\Legacy\Content\Type\MemoryCachingHandler instance.
     */
    protected function getEzpublish_Spi_Persistence_Legacy_ContentType_Handler_CachingService()
    {
        return $this->services['ezpublish.spi.persistence.legacy.content_type.handler.caching'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Type\MemoryCachingHandler($this->get('ezpublish.spi.persistence.legacy.content_type.handler.inner'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.legacy.content_type.handler.inner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Type\Handler A eZ\Publish\Core\Persistence\Legacy\Content\Type\Handler instance.
     */
    protected function getEzpublish_Spi_Persistence_Legacy_ContentType_Handler_InnerService()
    {
        return $this->services['ezpublish.spi.persistence.legacy.content_type.handler.inner'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Type\Handler($this->get('ezpublish.persistence.legacy.content_type.gateway.exception_conversion'), $this->get('ezpublish.persistence.legacy.content_type.mapper'), $this->get('ezpublish.persistence.legacy.content_type.update_handler.basic'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.legacy.language.handler.caching' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Language\CachingHandler A eZ\Publish\Core\Persistence\Legacy\Content\Language\CachingHandler instance.
     */
    protected function getEzpublish_Spi_Persistence_Legacy_Language_Handler_CachingService()
    {
        return $this->services['ezpublish.spi.persistence.legacy.language.handler.caching'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Language\CachingHandler($this->get('ezpublish.spi.persistence.legacy.language.handler.inner'), $this->get('ezpublish.persistence.legacy.language.cache'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.legacy.language.handler.inner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Language\Handler A eZ\Publish\Core\Persistence\Legacy\Content\Language\Handler instance.
     */
    protected function getEzpublish_Spi_Persistence_Legacy_Language_Handler_InnerService()
    {
        return $this->services['ezpublish.spi.persistence.legacy.language.handler.inner'] = new \eZ\Publish\Core\Persistence\Legacy\Content\Language\Handler($this->get('ezpublish.persistence.legacy.language.gateway.exception_conversion'), $this->get('ezpublish.persistence.legacy.language.mapper'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.legacy.location.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Location\Handler A eZ\Publish\Core\Persistence\Legacy\Content\Location\Handler instance.
     */
    public function getEzpublish_Spi_Persistence_Legacy_Location_HandlerService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.spi.persistence.legacy.location.handler'] = new eZPublishCorePersistenceLegacyContentLocationHandler_0000000010d7731f00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Spi_Persistence_Legacy_Location_HandlerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \eZ\Publish\Core\Persistence\Legacy\Content\Location\Handler($this->get('ezpublish.persistence.legacy.location.gateway.exception_conversion'), $this->get('ezpublish.persistence.legacy.location.mapper'), $this->get('ezpublish.spi.persistence.legacy.content.handler'), $this->get('ezpublish.spi.persistence.legacy.object_state.handler'), $this->get('ezpublish.persistence.legacy.tree_handler'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.legacy.object_state.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\ObjectState\Handler A eZ\Publish\Core\Persistence\Legacy\Content\ObjectState\Handler instance.
     */
    public function getEzpublish_Spi_Persistence_Legacy_ObjectState_HandlerService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.spi.persistence.legacy.object_state.handler'] = new eZPublishCorePersistenceLegacyContentObjectStateHandler_0000000010d7730d00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Spi_Persistence_Legacy_ObjectState_HandlerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \eZ\Publish\Core\Persistence\Legacy\Content\ObjectState\Handler($this->get('ezpublish.persistence.legacy.object_state.gateway.exception_conversion'), $this->get('ezpublish.persistence.legacy.object_state.mapper'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.legacy.section.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Section\Handler A eZ\Publish\Core\Persistence\Legacy\Content\Section\Handler instance.
     */
    public function getEzpublish_Spi_Persistence_Legacy_Section_HandlerService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.spi.persistence.legacy.section.handler'] = new eZPublishCorePersistenceLegacyContentSectionHandler_0000000010d7730700007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Spi_Persistence_Legacy_Section_HandlerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \eZ\Publish\Core\Persistence\Legacy\Content\Section\Handler($this->get('ezpublish.persistence.legacy.section.gateway.exception_conversion'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.legacy.transactionhandler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\TransactionHandler A eZ\Publish\Core\Persistence\Legacy\TransactionHandler instance.
     */
    protected function getEzpublish_Spi_Persistence_Legacy_TransactionhandlerService()
    {
        return $this->services['ezpublish.spi.persistence.legacy.transactionhandler'] = new \eZ\Publish\Core\Persistence\Legacy\TransactionHandler($this->get('ezpublish.api.storage_engine.legacy.dbhandler'), $this->get('ezpublish.spi.persistence.legacy.content_type.handler.caching'), $this->get('ezpublish.spi.persistence.legacy.language.handler.caching'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.legacy.trash.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\Location\Trash\Handler A eZ\Publish\Core\Persistence\Legacy\Content\Location\Trash\Handler instance.
     */
    public function getEzpublish_Spi_Persistence_Legacy_Trash_HandlerService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.spi.persistence.legacy.trash.handler'] = new eZPublishCorePersistenceLegacyContentLocationTrashHandler_0000000010d7730600007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Spi_Persistence_Legacy_Trash_HandlerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \eZ\Publish\Core\Persistence\Legacy\Content\Location\Trash\Handler($this->get('ezpublish.spi.persistence.legacy.location.handler'), $this->get('ezpublish.persistence.legacy.location.gateway.exception_conversion'), $this->get('ezpublish.persistence.legacy.location.mapper'), $this->get('ezpublish.spi.persistence.legacy.content.handler'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.legacy.url_alias.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\UrlAlias\Handler A eZ\Publish\Core\Persistence\Legacy\Content\UrlAlias\Handler instance.
     */
    public function getEzpublish_Spi_Persistence_Legacy_UrlAlias_HandlerService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.spi.persistence.legacy.url_alias.handler'] = new eZPublishCorePersistenceLegacyContentUrlAliasHandler_0000000010d7729300007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Spi_Persistence_Legacy_UrlAlias_HandlerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \eZ\Publish\Core\Persistence\Legacy\Content\UrlAlias\Handler($this->get('ezpublish.persistence.legacy.url_alias.gateway.exception_conversion'), $this->get('ezpublish.persistence.legacy.url_alias.mapper'), $this->get('ezpublish.persistence.legacy.location.gateway.exception_conversion'), $this->get('ezpublish.spi.persistence.legacy.language.handler.caching'), $this->get('ezpublish.persistence.slug_converter'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.legacy.url_wildcard.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\Content\UrlWildcard\Handler A eZ\Publish\Core\Persistence\Legacy\Content\UrlWildcard\Handler instance.
     */
    public function getEzpublish_Spi_Persistence_Legacy_UrlWildcard_HandlerService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.spi.persistence.legacy.url_wildcard.handler'] = new eZPublishCorePersistenceLegacyContentUrlWildcardHandler_0000000010d772f800007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Spi_Persistence_Legacy_UrlWildcard_HandlerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \eZ\Publish\Core\Persistence\Legacy\Content\UrlWildcard\Handler($this->get('ezpublish.persistence.legacy.url_wildcard.gateway.exception_conversion'), $this->get('ezpublish.persistence.legacy.url_wildcard.mapper'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.legacy.user.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Persistence\Legacy\User\Handler A eZ\Publish\Core\Persistence\Legacy\User\Handler instance.
     */
    public function getEzpublish_Spi_Persistence_Legacy_User_HandlerService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.spi.persistence.legacy.user.handler'] = new eZPublishCorePersistenceLegacyUserHandler_0000000010d772d800007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Spi_Persistence_Legacy_User_HandlerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \eZ\Publish\Core\Persistence\Legacy\User\Handler($this->get('ezpublish.persistence.legacy.user.gateway.exception_conversion'), $this->get('ezpublish.persistence.legacy.role.gateway.exception_conversion'), $this->get('ezpublish.persistence.legacy.user.mapper'), $this->get('ezpublish.persistence.legacy.role.limitation.converter'));
    }

    /**
     * Gets the 'ezpublish.spi.persistence.location_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\SPI\Persistence\Content\Location\Handler A eZ\Publish\SPI\Persistence\Content\Location\Handler instance.
     */
    protected function getEzpublish_Spi_Persistence_LocationHandlerService()
    {
        return $this->services['ezpublish.spi.persistence.location_handler'] = $this->get('ezpublish.spi.persistence.cache')->locationHandler();
    }

    /**
     * Gets the 'ezpublish.spi.persistence.object_state_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\SPI\Persistence\Content\ObjectState\Handler A eZ\Publish\SPI\Persistence\Content\ObjectState\Handler instance.
     */
    protected function getEzpublish_Spi_Persistence_ObjectStateHandlerService()
    {
        return $this->services['ezpublish.spi.persistence.object_state_handler'] = $this->get('ezpublish.spi.persistence.cache')->objectStateHandler();
    }

    /**
     * Gets the 'ezpublish.spi.persistence.section_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\SPI\Persistence\Content\Section\Handler A eZ\Publish\SPI\Persistence\Content\Section\Handler instance.
     */
    protected function getEzpublish_Spi_Persistence_SectionHandlerService()
    {
        return $this->services['ezpublish.spi.persistence.section_handler'] = $this->get('ezpublish.spi.persistence.cache')->sectionHandler();
    }

    /**
     * Gets the 'ezpublish.spi.persistence.trash_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\SPI\Persistence\Content\Trash\Handler A eZ\Publish\SPI\Persistence\Content\Trash\Handler instance.
     */
    protected function getEzpublish_Spi_Persistence_TrashHandlerService()
    {
        return $this->services['ezpublish.spi.persistence.trash_handler'] = $this->get('ezpublish.spi.persistence.cache')->trashHandler();
    }

    /**
     * Gets the 'ezpublish.spi.persistence.url_alias_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\SPI\Persistence\Content\UrlAlias\Handler A eZ\Publish\SPI\Persistence\Content\UrlAlias\Handler instance.
     */
    protected function getEzpublish_Spi_Persistence_UrlAliasHandlerService()
    {
        return $this->services['ezpublish.spi.persistence.url_alias_handler'] = $this->get('ezpublish.spi.persistence.cache')->urlAliasHandler();
    }

    /**
     * Gets the 'ezpublish.spi.persistence.url_wildcard_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\SPI\Persistence\Content\UrlWildcard\Handler A eZ\Publish\SPI\Persistence\Content\UrlWildcard\Handler instance.
     */
    protected function getEzpublish_Spi_Persistence_UrlWildcardHandlerService()
    {
        return $this->services['ezpublish.spi.persistence.url_wildcard_handler'] = $this->get('ezpublish.spi.persistence.cache')->urlWildcardHandler();
    }

    /**
     * Gets the 'ezpublish.spi.persistence.user_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\SPI\Persistence\User\Handler A eZ\Publish\SPI\Persistence\User\Handler instance.
     */
    protected function getEzpublish_Spi_Persistence_UserHandlerService()
    {
        return $this->services['ezpublish.spi.persistence.user_handler'] = $this->get('ezpublish.spi.persistence.cache')->userHandler();
    }

    /**
     * Gets the 'ezpublish.spi.search' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\SPI\Search\Handler A eZ\Publish\SPI\Search\Handler instance.
     */
    protected function getEzpublish_Spi_SearchService()
    {
        return $this->services['ezpublish.spi.search'] = $this->get('ezpublish.api.search_engine.factory')->buildSearchEngine();
    }

    /**
     * Gets the 'ezpublish.spi.search.legacy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Handler A eZ\Publish\Core\Search\Legacy\Content\Handler instance.
     */
    public function getEzpublish_Spi_Search_LegacyService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.spi.search.legacy'] = new eZPublishCoreSearchLegacyContentHandler_0000000010d7723f00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Spi_Search_LegacyService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \eZ\Publish\Core\Search\Legacy\Content\Handler($this->get('ezpublish.search.legacy.gateway.content.exception_conversion'), $this->get('ezpublish.search.legacy.gateway.location.exception_conversion'), $this->get('ezpublish.persistence.legacy.content.mapper'), $this->get('ezpublish.persistence.legacy.location.mapper'), $this->get('ezpublish.spi.persistence.language_handler'));
    }

    /**
     * Gets the 'ezpublish.spi.search.legacy.handler.content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Handler A eZ\Publish\Core\Search\Legacy\Content\Handler instance.
     */
    public function getEzpublish_Spi_Search_Legacy_Handler_ContentService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.spi.search.legacy.handler.content'] = new eZPublishCoreSearchLegacyContentHandler_0000000010d7723e00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Spi_Search_Legacy_Handler_ContentService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \eZ\Publish\Core\Search\Legacy\Content\Handler($this->get('ezpublish.search.legacy.gateway.content.exception_conversion'), $this->get('ezpublish.persistence.legacy.content.mapper'));
    }

    /**
     * Gets the 'ezpublish.spi.search.legacy.handler.location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\Search\Legacy\Content\Location\Handler A eZ\Publish\Core\Search\Legacy\Content\Location\Handler instance.
     */
    protected function getEzpublish_Spi_Search_Legacy_Handler_LocationService($lazyLoad = true)
    {
        return $this->services['ezpublish.spi.search.legacy.handler.location'] = new \eZ\Publish\Core\Search\Legacy\Content\Location\Handler($this->get('ezpublish.search.legacy.gateway.location.exception_conversion'), $this->get('ezpublish.persistence.legacy.location.mapper'));
    }

    /**
     * Gets the 'ezpublish.spi.search.solr' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \EzSystems\EzPlatformSolrSearchEngine\Handler A EzSystems\EzPlatformSolrSearchEngine\Handler instance.
     */
    public function getEzpublish_Spi_Search_SolrService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish.spi.search.solr'] = new EzSystemsEzPlatformSolrSearchEngineHandler_0000000010d7698f00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublish_Spi_Search_SolrService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return $this->get('ezpublish.solr.engine_factory')->buildEngine($this->get('ezpublish.search.solr.gateway.native'), $this->get('ezpublish.spi.persistence.content_handler'), $this->get('ezpublish.search.solr.document_mapper.native'), $this->get('ezpublish.search.solr.result_extractor.native'), $this->get('ezpublish.search.solr.core_filter.native'));
    }

    /**
     * Gets the 'ezpublish.templating.extension.routing' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Templating\Twig\Extension\RoutingExtension A eZ\Publish\Core\MVC\Symfony\Templating\Twig\Extension\RoutingExtension instance.
     */
    protected function getEzpublish_Templating_Extension_RoutingService()
    {
        return $this->services['ezpublish.templating.extension.routing'] = new \eZ\Publish\Core\MVC\Symfony\Templating\Twig\Extension\RoutingExtension($this->get('ezpublish.route_reference.generator'));
    }

    /**
     * Gets the 'ezpublish.templating.field_block_renderer.twig' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Templating\Twig\FieldBlockRenderer A eZ\Publish\Core\MVC\Symfony\Templating\Twig\FieldBlockRenderer instance.
     */
    protected function getEzpublish_Templating_FieldBlockRenderer_TwigService()
    {
        $this->services['ezpublish.templating.field_block_renderer.twig'] = $instance = new \eZ\Publish\Core\MVC\Symfony\Templating\Twig\FieldBlockRenderer();

        $instance->setTwig($this->get('twig'));
        $instance->setBaseTemplate('EzPublishCoreBundle::viewbase_layout.html.twig');
        $instance->setFieldViewResources($this->get("ezpublish.config.resolver")->getParameter("field_templates", null, null));
        $instance->setFieldEditResources($this->get("ezpublish.config.resolver")->getParameter("field_edit_templates", null, null));
        $instance->setFieldDefinitionViewResources($this->get("ezpublish.config.resolver")->getParameter("fielddefinition_settings_templates", null, null));
        $instance->setFieldDefinitionEditResources($this->get("ezpublish.config.resolver")->getParameter("fielddefinition_edit_templates", null, null));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.templating.global_helper.core' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Templating\GlobalHelper A eZ\Publish\Core\MVC\Symfony\Templating\GlobalHelper instance.
     */
    protected function getEzpublish_Templating_GlobalHelper_CoreService()
    {
        $this->services['ezpublish.templating.global_helper.core'] = $instance = new \eZ\Publish\Core\MVC\Symfony\Templating\GlobalHelper($this->get('ezpublish.config.resolver.chain'), $this->get('ezpublish.api.service.location'), $this->get('ezpublish.chain_router'), $this->get('ezpublish.translation_helper'));

        $instance->setRequestStack($this->get('request_stack'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.translation_helper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Helper\TranslationHelper A eZ\Publish\Core\Helper\TranslationHelper instance.
     */
    protected function getEzpublish_TranslationHelperService()
    {
        return $this->services['ezpublish.translation_helper'] = new \eZ\Publish\Core\Helper\TranslationHelper($this->get('ezpublish.config.resolver.chain'), $this->get('ezpublish.api.service.content'), array(), $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'ezpublish.twig.extension.content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Templating\Twig\Extension\ContentExtension A eZ\Publish\Core\MVC\Symfony\Templating\Twig\Extension\ContentExtension instance.
     */
    protected function getEzpublish_Twig_Extension_ContentService()
    {
        return $this->services['ezpublish.twig.extension.content'] = new \eZ\Publish\Core\MVC\Symfony\Templating\Twig\Extension\ContentExtension($this->get('ezpublish.signalslot.repository'), $this->get('ezpublish.translation_helper'), $this->get('ezpublish.field_helper'), $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'ezpublish.twig.extension.core' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Templating\Twig\Extension\CoreExtension A eZ\Publish\Core\MVC\Symfony\Templating\Twig\Extension\CoreExtension instance.
     */
    protected function getEzpublish_Twig_Extension_CoreService()
    {
        return $this->services['ezpublish.twig.extension.core'] = new \eZ\Publish\Core\MVC\Symfony\Templating\Twig\Extension\CoreExtension($this->get('ezpublish.templating.global_helper.core'));
    }

    /**
     * Gets the 'ezpublish.twig.extension.field_rendering' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Templating\Twig\Extension\FieldRenderingExtension A eZ\Publish\Core\MVC\Symfony\Templating\Twig\Extension\FieldRenderingExtension instance.
     */
    protected function getEzpublish_Twig_Extension_FieldRenderingService()
    {
        return $this->services['ezpublish.twig.extension.field_rendering'] = new \eZ\Publish\Core\MVC\Symfony\Templating\Twig\Extension\FieldRenderingExtension($this->get('ezpublish.templating.field_block_renderer.twig'), $this->get('ezpublish.api.service.content_type'), $this->get('ezpublish.fieldtype.parameterproviderregistry'), $this->get('ezpublish.translation_helper'));
    }

    /**
     * Gets the 'ezpublish.twig.extension.filesize' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Templating\Twig\Extension\FileSizeExtension A eZ\Publish\Core\MVC\Symfony\Templating\Twig\Extension\FileSizeExtension instance.
     */
    protected function getEzpublish_Twig_Extension_FilesizeService()
    {
        return $this->services['ezpublish.twig.extension.filesize'] = new \eZ\Publish\Core\MVC\Symfony\Templating\Twig\Extension\FileSizeExtension($this->get('translator'), array(0 => 'B', 1 => 'kB', 2 => 'MB', 3 => 'GB', 4 => 'TB', 5 => 'PB', 6 => 'EB'), $this->get('ezpublish.config.resolver.chain'), $this->get('ezpublish.locale.converter'));
    }

    /**
     * Gets the 'ezpublish.twig.extension.image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Templating\Twig\Extension\ImageExtension A eZ\Publish\Core\MVC\Symfony\Templating\Twig\Extension\ImageExtension instance.
     */
    protected function getEzpublish_Twig_Extension_ImageService()
    {
        return $this->services['ezpublish.twig.extension.image'] = new \eZ\Publish\Core\MVC\Symfony\Templating\Twig\Extension\ImageExtension($this->get('ezpublish.image_alias.imagine.alias_generator'));
    }

    /**
     * Gets the 'ezpublish.twig.extension.rich_text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Templating\Twig\Extension\RichTextExtension A eZ\Publish\Core\MVC\Symfony\Templating\Twig\Extension\RichTextExtension instance.
     */
    protected function getEzpublish_Twig_Extension_RichTextService()
    {
        return $this->services['ezpublish.twig.extension.rich_text'] = new \eZ\Publish\Core\MVC\Symfony\Templating\Twig\Extension\RichTextExtension($this->get('ezpublish.fieldtype.ezrichtext.converter.output.xhtml5'), $this->get('ezpublish.fieldtype.ezrichtext.converter.edit.xhtml5'));
    }

    /**
     * Gets the 'ezpublish.urlalias_generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Routing\Generator\UrlAliasGenerator A eZ\Publish\Core\MVC\Symfony\Routing\Generator\UrlAliasGenerator instance.
     */
    protected function getEzpublish_UrlaliasGeneratorService()
    {
        $this->services['ezpublish.urlalias_generator'] = $instance = new \eZ\Publish\Core\MVC\Symfony\Routing\Generator\UrlAliasGenerator($this->get('ezpublish.signalslot.repository'), $this->get('router.default'), $this->get('ezpublish.config.resolver.chain'), array('"' => '%22', '\'' => '%27', '<' => '%3C', '>' => '%3E'));

        $instance->setRequestContext($this->get('router.request_context'));
        if ($this->has('ezpublish.siteaccess')) {
            $instance->setSiteAccess($this->get('ezpublish.siteaccess', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }
        $instance->setSiteAccessRouter($this->get('ezpublish.siteaccess_router'));
        if ($this->has('logger')) {
            $instance->setLogger($this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }

        return $instance;
    }

    /**
     * Gets the 'ezpublish.urlalias_router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Routing\UrlAliasRouter A eZ\Bundle\EzPublishCoreBundle\Routing\UrlAliasRouter instance.
     */
    protected function getEzpublish_UrlaliasRouterService()
    {
        $this->services['ezpublish.urlalias_router'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\Routing\UrlAliasRouter($this->get('ezpublish.api.service.location'), $this->get('ezpublish.api.service.url_alias'), $this->get('ezpublish.api.service.content'), $this->get('ezpublish.urlalias_generator'), $this->get('router.request_context', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->setConfigResolver($this->get('ezpublish.config.resolver.chain'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.user.hash_generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Security\User\HashGenerator A eZ\Publish\Core\MVC\Symfony\Security\User\HashGenerator instance.
     */
    protected function getEzpublish_User_HashGeneratorService()
    {
        $this->services['ezpublish.user.hash_generator'] = $instance = new \eZ\Publish\Core\MVC\Symfony\Security\User\HashGenerator();

        $instance->setIdentity($this->get('ezpublish.user.identity'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.user.identity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Security\User\Identity A eZ\Publish\Core\MVC\Symfony\Security\User\Identity instance.
     */
    protected function getEzpublish_User_IdentityService()
    {
        return $this->services['ezpublish.user.identity'] = new \eZ\Publish\Core\MVC\Symfony\Security\User\Identity();
    }

    /**
     * Gets the 'ezpublish.user.identity_definer.role_id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Security\User\ContextProvider\RoleContextProvider A eZ\Publish\Core\MVC\Symfony\Security\User\ContextProvider\RoleContextProvider instance.
     */
    protected function getEzpublish_User_IdentityDefiner_RoleIdService()
    {
        return $this->services['ezpublish.user.identity_definer.role_id'] = new \eZ\Publish\Core\MVC\Symfony\Security\User\ContextProvider\RoleContextProvider($this->get('ezpublish.signalslot.repository'));
    }

    /**
     * Gets the 'ezpublish.utils.deprecation_warner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\Base\Utils\DeprecationWarner A eZ\Publish\Core\Base\Utils\DeprecationWarner instance.
     */
    protected function getEzpublish_Utils_DeprecationWarnerService()
    {
        return $this->services['ezpublish.utils.deprecation_warner'] = new \eZ\Publish\Core\Base\Utils\DeprecationWarner();
    }

    /**
     * Gets the 'ezpublish.view.block_cache_response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\EventListener\BlockCacheResponseListener A eZ\Bundle\EzPublishCoreBundle\EventListener\BlockCacheResponseListener instance.
     */
    protected function getEzpublish_View_BlockCacheResponseListenerService()
    {
        $this->services['ezpublish.view.block_cache_response_listener'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\EventListener\BlockCacheResponseListener();

        $instance->setEnableViewCache($this->get("ezpublish.config.resolver")->getParameter("content.view_cache", null, null));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.view.builder_parameter_collector.request_attributes' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\View\Builder\ParametersFilter\RequestAttributes A eZ\Publish\Core\MVC\Symfony\View\Builder\ParametersFilter\RequestAttributes instance.
     */
    protected function getEzpublish_View_BuilderParameterCollector_RequestAttributesService()
    {
        return $this->services['ezpublish.view.builder_parameter_collector.request_attributes'] = new \eZ\Publish\Core\MVC\Symfony\View\Builder\ParametersFilter\RequestAttributes();
    }

    /**
     * Gets the 'ezpublish.view.cache_response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\EventListener\CacheViewResponseListener A eZ\Bundle\EzPublishCoreBundle\EventListener\CacheViewResponseListener instance.
     */
    protected function getEzpublish_View_CacheResponseListenerService()
    {
        return $this->services['ezpublish.view.cache_response_listener'] = new \eZ\Bundle\EzPublishCoreBundle\EventListener\CacheViewResponseListener($this->get("ezpublish.config.resolver")->getParameter("content.view_cache", null, null), $this->get("ezpublish.config.resolver")->getParameter("content.ttl_cache", null, null), $this->get("ezpublish.config.resolver")->getParameter("content.default_ttl", null, null));
    }

    /**
     * Gets the 'ezpublish.view.configurator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\View\Configurator\ViewProvider A eZ\Publish\Core\MVC\Symfony\View\Configurator\ViewProvider instance.
     */
    protected function getEzpublish_View_ConfiguratorService()
    {
        return $this->services['ezpublish.view.configurator'] = new \eZ\Publish\Core\MVC\Symfony\View\Configurator\ViewProvider($this->get('ezpublish.view_provider.registry'));
    }

    /**
     * Gets the 'ezpublish.view.custom_location_controller_checker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\View\CustomLocationControllerChecker A eZ\Publish\Core\MVC\Symfony\View\CustomLocationControllerChecker instance.
     */
    protected function getEzpublish_View_CustomLocationControllerCheckerService()
    {
        $this->services['ezpublish.view.custom_location_controller_checker'] = $instance = new \eZ\Publish\Core\MVC\Symfony\View\CustomLocationControllerChecker();

        $instance->addViewProviders(array(0 => $this->get('ezpublish.content_view_provider.configured'), 1 => $this->get('ezpublish.location_view_provider.configured'), 2 => $this->get('ezpublish.content_view_provider.default_configured')));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.view.renderer_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\EventListener\ViewRendererListener A eZ\Bundle\EzPublishCoreBundle\EventListener\ViewRendererListener instance.
     */
    protected function getEzpublish_View_RendererListenerService()
    {
        return $this->services['ezpublish.view.renderer_listener'] = new \eZ\Bundle\EzPublishCoreBundle\EventListener\ViewRendererListener($this->get('ezpublish.view.template_renderer'));
    }

    /**
     * Gets the 'ezpublish.view.template_renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\View\Renderer\TemplateRenderer A eZ\Publish\Core\MVC\Symfony\View\Renderer\TemplateRenderer instance.
     */
    protected function getEzpublish_View_TemplateRendererService()
    {
        return $this->services['ezpublish.view.template_renderer'] = new \eZ\Publish\Core\MVC\Symfony\View\Renderer\TemplateRenderer($this->get('templating'), $this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'ezpublish.view.view_parameters.injector.block.valid_content_info_items' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\EventListener\BlockValidContentInfoItemsListener A eZ\Bundle\EzPublishCoreBundle\EventListener\BlockValidContentInfoItemsListener instance.
     */
    protected function getEzpublish_View_ViewParameters_Injector_Block_ValidContentInfoItemsService()
    {
        return $this->services['ezpublish.view.view_parameters.injector.block.valid_content_info_items'] = new \eZ\Bundle\EzPublishCoreBundle\EventListener\BlockValidContentInfoItemsListener($this->get('ezpublish.fieldtype.ezpage.pageservice'));
    }

    /**
     * Gets the 'ezpublish.view.view_parameters.injector.block.valid_items' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\View\ParametersInjector\Block\ValidItems A eZ\Publish\Core\MVC\Symfony\View\ParametersInjector\Block\ValidItems instance.
     */
    protected function getEzpublish_View_ViewParameters_Injector_Block_ValidItemsService()
    {
        return $this->services['ezpublish.view.view_parameters.injector.block.valid_items'] = new \eZ\Publish\Core\MVC\Symfony\View\ParametersInjector\Block\ValidItems($this->get('ezpublish.fieldtype.ezpage.pageservice'));
    }

    /**
     * Gets the 'ezpublish.view.view_parameters.injector.custom_parameters' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\View\ParametersInjector\CustomParameters A eZ\Publish\Core\MVC\Symfony\View\ParametersInjector\CustomParameters instance.
     */
    protected function getEzpublish_View_ViewParameters_Injector_CustomParametersService()
    {
        return $this->services['ezpublish.view.view_parameters.injector.custom_parameters'] = new \eZ\Publish\Core\MVC\Symfony\View\ParametersInjector\CustomParameters();
    }

    /**
     * Gets the 'ezpublish.view.view_parameters.injector.dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\View\ParametersInjector\EventDispatcherInjector A eZ\Publish\Core\MVC\Symfony\View\ParametersInjector\EventDispatcherInjector instance.
     */
    protected function getEzpublish_View_ViewParameters_Injector_DispatcherService()
    {
        return $this->services['ezpublish.view.view_parameters.injector.dispatcher'] = new \eZ\Publish\Core\MVC\Symfony\View\ParametersInjector\EventDispatcherInjector($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'ezpublish.view.view_parameters.injector.embed_object_parameters' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\View\ParametersInjector\EmbedObjectParameters A eZ\Publish\Core\MVC\Symfony\View\ParametersInjector\EmbedObjectParameters instance.
     */
    protected function getEzpublish_View_ViewParameters_Injector_EmbedObjectParametersService()
    {
        return $this->services['ezpublish.view.view_parameters.injector.embed_object_parameters'] = new \eZ\Publish\Core\MVC\Symfony\View\ParametersInjector\EmbedObjectParameters();
    }

    /**
     * Gets the 'ezpublish.view.view_parameters.injector.no_layout' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\View\ParametersInjector\NoLayout A eZ\Publish\Core\MVC\Symfony\View\ParametersInjector\NoLayout instance.
     */
    protected function getEzpublish_View_ViewParameters_Injector_NoLayoutService()
    {
        return $this->services['ezpublish.view.view_parameters.injector.no_layout'] = new \eZ\Publish\Core\MVC\Symfony\View\ParametersInjector\NoLayout();
    }

    /**
     * Gets the 'ezpublish.view.view_parameters.injector.value_objects_ids' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\View\ParametersInjector\ValueObjectsIds A eZ\Publish\Core\MVC\Symfony\View\ParametersInjector\ValueObjectsIds instance.
     */
    protected function getEzpublish_View_ViewParameters_Injector_ValueObjectsIdsService()
    {
        return $this->services['ezpublish.view.view_parameters.injector.value_objects_ids'] = new \eZ\Publish\Core\MVC\Symfony\View\ParametersInjector\ValueObjectsIds();
    }

    /**
     * Gets the 'ezpublish.view.view_parameters.injector.viewbase_layout' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\View\ParametersInjector\ViewbaseLayout A eZ\Publish\Core\MVC\Symfony\View\ParametersInjector\ViewbaseLayout instance.
     */
    protected function getEzpublish_View_ViewParameters_Injector_ViewbaseLayoutService()
    {
        return $this->services['ezpublish.view.view_parameters.injector.viewbase_layout'] = new \eZ\Publish\Core\MVC\Symfony\View\ParametersInjector\ViewbaseLayout('EzPublishCoreBundle::viewbase_layout.html.twig');
    }

    /**
     * Gets the 'ezpublish.view_builder.block' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\View\Builder\BlockViewBuilder A eZ\Publish\Core\MVC\Symfony\View\Builder\BlockViewBuilder instance.
     */
    protected function getEzpublish_ViewBuilder_BlockService()
    {
        return $this->services['ezpublish.view_builder.block'] = new \eZ\Publish\Core\MVC\Symfony\View\Builder\BlockViewBuilder($this->get('ezpublish.fieldtype.ezpage.pageservice'), $this->get('ezpublish.view.configurator'), $this->get('ezpublish.view.view_parameters.injector.dispatcher'));
    }

    /**
     * Gets the 'ezpublish.view_builder.content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\View\Builder\ContentViewBuilder A eZ\Publish\Core\MVC\Symfony\View\Builder\ContentViewBuilder instance.
     */
    protected function getEzpublish_ViewBuilder_ContentService()
    {
        return $this->services['ezpublish.view_builder.content'] = new \eZ\Publish\Core\MVC\Symfony\View\Builder\ContentViewBuilder($this->get('ezpublish.signalslot.repository'), $this->get('security.authorization_checker'), $this->get('ezpublish.view.configurator'), $this->get('ezpublish.view.view_parameters.injector.dispatcher'));
    }

    /**
     * Gets the 'ezpublish.view_builder.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\View\Builder\Registry\ControllerMatch A eZ\Publish\Core\MVC\Symfony\View\Builder\Registry\ControllerMatch instance.
     */
    protected function getEzpublish_ViewBuilder_RegistryService()
    {
        $this->services['ezpublish.view_builder.registry'] = $instance = new \eZ\Publish\Core\MVC\Symfony\View\Builder\Registry\ControllerMatch();

        $instance->addToRegistry(array(0 => $this->get('ezpublish.view_builder.content'), 1 => $this->get('ezpublish.view_builder.block')));

        return $instance;
    }

    /**
     * Gets the 'ezpublish.view_controller_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\EventListener\ViewControllerListener A eZ\Bundle\EzPublishCoreBundle\EventListener\ViewControllerListener instance.
     */
    protected function getEzpublish_ViewControllerListenerService()
    {
        return $this->services['ezpublish.view_controller_listener'] = new \eZ\Bundle\EzPublishCoreBundle\EventListener\ViewControllerListener($this->get('controller_resolver'), $this->get('ezpublish.view_builder.registry'), $this->get('debug.event_dispatcher'), $this->get('logger'));
    }

    /**
     * Gets the 'ezpublish.view_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\View\Manager A eZ\Bundle\EzPublishCoreBundle\View\Manager instance.
     */
    protected function getEzpublish_ViewManagerService()
    {
        return $this->services['ezpublish.view_manager'] = new \eZ\Bundle\EzPublishCoreBundle\View\Manager($this->get('templating'), $this->get('debug.event_dispatcher'), $this->get('ezpublish.signalslot.repository'), $this->get('ezpublish.config.resolver.chain'), 'EzPublishCoreBundle::viewbase_layout.html.twig', $this->get('ezpublish.view.configurator'), $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'ezpublish.view_provider.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\View\Provider\Registry A eZ\Publish\Core\MVC\Symfony\View\Provider\Registry instance.
     */
    protected function getEzpublish_ViewProvider_RegistryService()
    {
        $this->services['ezpublish.view_provider.registry'] = $instance = new \eZ\Publish\Core\MVC\Symfony\View\Provider\Registry();

        $instance->setViewProviders(array('eZ\\Publish\\Core\\MVC\\Symfony\\View\\ContentView' => array(0 => $this->get('ezpublish.content_view_provider.configured'), 1 => $this->get('ezpublish.location_view_provider.configured'), 2 => $this->get('ezpublish.content_view_provider.default_configured')), 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\BlockView' => array(0 => $this->get('ezpublish.block_view_provider.configured'), 1 => $this->get('ezpublish.block_view_provider.default_configured'))));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_debug.data_collector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishDebugBundle\Collector\EzPublishCoreCollector A eZ\Bundle\EzPublishDebugBundle\Collector\EzPublishCoreCollector instance.
     */
    protected function getEzpublishDebug_DataCollectorService()
    {
        $this->services['ezpublish_debug.data_collector'] = $instance = new \eZ\Bundle\EzPublishDebugBundle\Collector\EzPublishCoreCollector();

        $instance->addCollector($this->get('ezpublish_debug.persistence_collector'), 'EzPublishDebugBundle:Profiler/persistence:panel.html.twig', 'EzPublishDebugBundle:Profiler/persistence:toolbar.html.twig');

        return $instance;
    }

    /**
     * Gets the 'ezpublish_debug.persistence_collector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishDebugBundle\Collector\PersistenceCacheCollector A eZ\Bundle\EzPublishDebugBundle\Collector\PersistenceCacheCollector instance.
     */
    protected function getEzpublishDebug_PersistenceCollectorService()
    {
        return $this->services['ezpublish_debug.persistence_collector'] = new \eZ\Bundle\EzPublishDebugBundle\Collector\PersistenceCacheCollector($this->get('ezpublish.spi.persistence.cache.persistencelogger'));
    }

    /**
     * Gets the 'ezpublish_rest.controller.base' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Controller A eZ\Publish\Core\REST\Server\Controller instance.
     */
    protected function getEzpublishRest_Controller_BaseService()
    {
        $this->services['ezpublish_rest.controller.base'] = $instance = new \eZ\Publish\Core\REST\Server\Controller();

        $instance->setContainer($this);
        $instance->setInputDispatcher($this->get('ezpublish_rest.input.dispatcher'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRepository($this->get('ezpublish.signalslot.repository'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.controller.binary_content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Controller\BinaryContent A eZ\Publish\Core\REST\Server\Controller\BinaryContent instance.
     */
    protected function getEzpublishRest_Controller_BinaryContentService()
    {
        $this->services['ezpublish_rest.controller.binary_content'] = $instance = new \eZ\Publish\Core\REST\Server\Controller\BinaryContent($this->get('ezpublish.image_alias.imagine.alias_generator'));

        $instance->setContainer($this);
        $instance->setInputDispatcher($this->get('ezpublish_rest.input.dispatcher'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRepository($this->get('ezpublish.signalslot.repository'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.controller.content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\Controller\Rest\ContentController A EzSystems\PlatformUIBundle\Controller\Rest\ContentController instance.
     */
    protected function getEzpublishRest_Controller_ContentService()
    {
        $this->services['ezpublish_rest.controller.content'] = $instance = new \EzSystems\PlatformUIBundle\Controller\Rest\ContentController();

        $instance->setContainer($this);
        $instance->setInputDispatcher($this->get('ezpublish_rest.input.dispatcher'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRepository($this->get('ezpublish.signalslot.repository'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.controller.content_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Controller\ContentType A eZ\Publish\Core\REST\Server\Controller\ContentType instance.
     */
    protected function getEzpublishRest_Controller_ContentTypeService()
    {
        $this->services['ezpublish_rest.controller.content_type'] = $instance = new \eZ\Publish\Core\REST\Server\Controller\ContentType($this->get('ezpublish.api.service.content_type'));

        $instance->setContainer($this);
        $instance->setInputDispatcher($this->get('ezpublish_rest.input.dispatcher'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRepository($this->get('ezpublish.signalslot.repository'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.controller.location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Controller\Location A eZ\Publish\Core\REST\Server\Controller\Location instance.
     */
    protected function getEzpublishRest_Controller_LocationService()
    {
        $this->services['ezpublish_rest.controller.location'] = $instance = new \eZ\Publish\Core\REST\Server\Controller\Location($this->get('ezpublish.api.service.location'), $this->get('ezpublish.api.service.content'), $this->get('ezpublish.api.service.trash'));

        $instance->setContainer($this);
        $instance->setInputDispatcher($this->get('ezpublish_rest.input.dispatcher'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRepository($this->get('ezpublish.signalslot.repository'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.controller.object_state' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Controller\ObjectState A eZ\Publish\Core\REST\Server\Controller\ObjectState instance.
     */
    protected function getEzpublishRest_Controller_ObjectStateService()
    {
        $this->services['ezpublish_rest.controller.object_state'] = $instance = new \eZ\Publish\Core\REST\Server\Controller\ObjectState($this->get('ezpublish.api.service.object_state'), $this->get('ezpublish.api.service.content'));

        $instance->setContainer($this);
        $instance->setInputDispatcher($this->get('ezpublish_rest.input.dispatcher'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRepository($this->get('ezpublish.signalslot.repository'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.controller.options' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Controller\Options A eZ\Publish\Core\REST\Server\Controller\Options instance.
     */
    protected function getEzpublishRest_Controller_OptionsService()
    {
        $this->services['ezpublish_rest.controller.options'] = $instance = new \eZ\Publish\Core\REST\Server\Controller\Options();

        $instance->setContainer($this);
        $instance->setInputDispatcher($this->get('ezpublish_rest.input.dispatcher'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRepository($this->get('ezpublish.signalslot.repository'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.controller.role' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Controller\Role A eZ\Publish\Core\REST\Server\Controller\Role instance.
     */
    protected function getEzpublishRest_Controller_RoleService()
    {
        $this->services['ezpublish_rest.controller.role'] = $instance = new \eZ\Publish\Core\REST\Server\Controller\Role($this->get('ezpublish.api.service.role'), $this->get('ezpublish.api.service.user'), $this->get('ezpublish.api.service.location'));

        $instance->setContainer($this);
        $instance->setInputDispatcher($this->get('ezpublish_rest.input.dispatcher'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRepository($this->get('ezpublish.signalslot.repository'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.controller.root' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Controller\Root A eZ\Publish\Core\REST\Server\Controller\Root instance.
     */
    protected function getEzpublishRest_Controller_RootService()
    {
        $this->services['ezpublish_rest.controller.root'] = $instance = new \eZ\Publish\Core\REST\Server\Controller\Root();

        $instance->setContainer($this);
        $instance->setInputDispatcher($this->get('ezpublish_rest.input.dispatcher'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRepository($this->get('ezpublish.signalslot.repository'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.controller.section' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Controller\Section A eZ\Publish\Core\REST\Server\Controller\Section instance.
     */
    protected function getEzpublishRest_Controller_SectionService()
    {
        $this->services['ezpublish_rest.controller.section'] = $instance = new \eZ\Publish\Core\REST\Server\Controller\Section($this->get('ezpublish.api.service.section'));

        $instance->setContainer($this);
        $instance->setInputDispatcher($this->get('ezpublish_rest.input.dispatcher'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRepository($this->get('ezpublish.signalslot.repository'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.controller.services' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Controller\Services A eZ\Publish\Core\REST\Server\Controller\Services instance.
     */
    protected function getEzpublishRest_Controller_ServicesService()
    {
        return $this->services['ezpublish_rest.controller.services'] = new \eZ\Publish\Core\REST\Server\Controller\Services(array('AF' => array('Name' => 'Afghanistan', 'Alpha2' => 'AF', 'Alpha3' => 'AFG', 'IDC' => '93'), 'AX' => array('Name' => 'Åland', 'Alpha2' => 'AX', 'Alpha3' => 'ALA', 'IDC' => '358'), 'AL' => array('Name' => 'Albania', 'Alpha2' => 'AL', 'Alpha3' => 'ALB', 'IDC' => '355'), 'DZ' => array('Name' => 'Algeria', 'Alpha2' => 'DZ', 'Alpha3' => 'DZA', 'IDC' => '213'), 'AS' => array('Name' => 'American Samoa', 'Alpha2' => 'AS', 'Alpha3' => 'ASM', 'IDC' => '1684'), 'AD' => array('Name' => 'Andorra', 'Alpha2' => 'AD', 'Alpha3' => 'AND', 'IDC' => '376'), 'AO' => array('Name' => 'Angola', 'Alpha2' => 'AO', 'Alpha3' => 'AGO', 'IDC' => '244'), 'AI' => array('Name' => 'Anguilla', 'Alpha2' => 'AI', 'Alpha3' => 'AIA', 'IDC' => '1264'), 'AQ' => array('Name' => 'Antarctica', 'Alpha2' => 'AQ', 'Alpha3' => 'ATA', 'IDC' => '672'), 'AG' => array('Name' => 'Antigua and Barbuda', 'Alpha2' => 'AG', 'Alpha3' => 'ATG', 'IDC' => '1268'), 'AR' => array('Name' => 'Argentina', 'Alpha2' => 'AR', 'Alpha3' => 'ARG', 'IDC' => '54'), 'AM' => array('Name' => 'Armenia', 'Alpha2' => 'AM', 'Alpha3' => 'ARM', 'IDC' => '374'), 'AW' => array('Name' => 'Aruba', 'Alpha2' => 'AW', 'Alpha3' => 'ABW', 'IDC' => '297'), 'AU' => array('Name' => 'Australia', 'Alpha2' => 'AU', 'Alpha3' => 'AUS', 'IDC' => '61'), 'AT' => array('Name' => 'Austria', 'Alpha2' => 'AT', 'Alpha3' => 'AUT', 'IDC' => '43'), 'AZ' => array('Name' => 'Azerbaijan', 'Alpha2' => 'AZ', 'Alpha3' => 'AZE', 'IDC' => '994'), 'BS' => array('Name' => 'Bahamas', 'Alpha2' => 'BS', 'Alpha3' => 'BHS', 'IDC' => '1242'), 'BH' => array('Name' => 'Bahrain', 'Alpha2' => 'BH', 'Alpha3' => 'BHR', 'IDC' => '973'), 'BD' => array('Name' => 'Bangladesh', 'Alpha2' => 'BD', 'Alpha3' => 'BGD', 'IDC' => '880'), 'BB' => array('Name' => 'Barbados', 'Alpha2' => 'BB', 'Alpha3' => 'BRB', 'IDC' => '1246'), 'BY' => array('Name' => 'Belarus', 'Alpha2' => 'BY', 'Alpha3' => 'BLR', 'IDC' => '375'), 'BE' => array('Name' => 'Belgium', 'Alpha2' => 'BE', 'Alpha3' => 'BEL', 'IDC' => '32'), 'BZ' => array('Name' => 'Belize', 'Alpha2' => 'BZ', 'Alpha3' => 'BLZ', 'IDC' => '501'), 'BJ' => array('Name' => 'Benin', 'Alpha2' => 'BJ', 'Alpha3' => 'BEN', 'IDC' => '229'), 'BM' => array('Name' => 'Bermuda', 'Alpha2' => 'BM', 'Alpha3' => 'BMU', 'IDC' => '1441'), 'BT' => array('Name' => 'Bhutan', 'Alpha2' => 'BT', 'Alpha3' => 'BTN', 'IDC' => '975'), 'BO' => array('Name' => 'Bolivia', 'Alpha2' => 'BO', 'Alpha3' => 'BOL', 'IDC' => '591'), 'BA' => array('Name' => 'Bosnia and Herzegovina', 'Alpha2' => 'BA', 'Alpha3' => 'BIH', 'IDC' => '387'), 'BW' => array('Name' => 'Botswana', 'Alpha2' => 'BW', 'Alpha3' => 'BWA', 'IDC' => '267'), 'BV' => array('Name' => 'Bouvet Island', 'Alpha2' => 'BV', 'Alpha3' => 'BVT', 'IDC' => '47'), 'BR' => array('Name' => 'Brazil', 'Alpha2' => 'BR', 'Alpha3' => 'BRA', 'IDC' => '55'), 'IO' => array('Name' => 'British Indian Ocean Territory', 'Alpha2' => 'IO', 'Alpha3' => 'IOT', 'IDC' => '246'), 'BN' => array('Name' => 'Brunei Darussalam', 'Alpha2' => 'BN', 'Alpha3' => 'BRN', 'IDC' => '673'), 'BG' => array('Name' => 'Bulgaria', 'Alpha2' => 'BG', 'Alpha3' => 'BGR', 'IDC' => '359'), 'BF' => array('Name' => 'Burkina Faso', 'Alpha2' => 'BF', 'Alpha3' => 'BFA', 'IDC' => '226'), 'BI' => array('Name' => 'Burundi', 'Alpha2' => 'BI', 'Alpha3' => 'BDI', 'IDC' => '257'), 'KH' => array('Name' => 'Cambodia', 'Alpha2' => 'KH', 'Alpha3' => 'KHM', 'IDC' => '855'), 'CM' => array('Name' => 'Cameroon', 'Alpha2' => 'CM', 'Alpha3' => 'CMR', 'IDC' => '237'), 'CA' => array('Name' => 'Canada', 'Alpha2' => 'CA', 'Alpha3' => 'CAN', 'IDC' => '1'), 'CV' => array('Name' => 'Cape Verde', 'Alpha2' => 'CV', 'Alpha3' => 'CPV', 'IDC' => '238'), 'KY' => array('Name' => 'Cayman Islands', 'Alpha2' => 'KY', 'Alpha3' => 'CYM', 'IDC' => '1345'), 'CF' => array('Name' => 'Central African Republic', 'Alpha2' => 'CF', 'Alpha3' => 'CAF', 'IDC' => '236'), 'TD' => array('Name' => 'Chad', 'Alpha2' => 'TD', 'Alpha3' => 'TCD', 'IDC' => '235'), 'CL' => array('Name' => 'Chile', 'Alpha2' => 'CL', 'Alpha3' => 'CHL', 'IDC' => '56'), 'CN' => array('Name' => 'China', 'Alpha2' => 'CN', 'Alpha3' => 'CHN', 'IDC' => '86'), 'CX' => array('Name' => 'Christmas Island', 'Alpha2' => 'CX', 'Alpha3' => 'CXR', 'IDC' => '61'), 'CC' => array('Name' => 'Cocos (Keeling) Islands', 'Alpha2' => 'CC', 'Alpha3' => 'CCK', 'IDC' => '61'), 'CO' => array('Name' => 'Colombia', 'Alpha2' => 'CO', 'Alpha3' => 'COL', 'IDC' => '57'), 'KM' => array('Name' => 'Comoros', 'Alpha2' => 'KM', 'Alpha3' => 'COM', 'IDC' => '269'), 'CG' => array('Name' => 'Congo', 'Alpha2' => 'CG', 'Alpha3' => 'COG', 'IDC' => '242'), 'CD' => array('Name' => 'Congo, The Democratic Republic Of The', 'Alpha2' => 'CD', 'Alpha3' => 'COD', 'IDC' => '243'), 'CK' => array('Name' => 'Cook Islands', 'Alpha2' => 'CK', 'Alpha3' => 'COK', 'IDC' => '682'), 'CR' => array('Name' => 'Costa Rica', 'Alpha2' => 'CR', 'Alpha3' => 'CRI', 'IDC' => '506'), 'CI' => array('Name' => 'Côte d\'Ivoire', 'Alpha2' => 'CI', 'Alpha3' => 'CIV', 'IDC' => '225'), 'HR' => array('Name' => 'Croatia', 'Alpha2' => 'HR', 'Alpha3' => 'HRV', 'IDC' => '385'), 'CU' => array('Name' => 'Cuba', 'Alpha2' => 'CU', 'Alpha3' => 'CUB', 'IDC' => '53'), 'CY' => array('Name' => 'Cyprus', 'Alpha2' => 'CY', 'Alpha3' => 'CYP', 'IDC' => '357'), 'CZ' => array('Name' => 'Czech Republic', 'Alpha2' => 'CZ', 'Alpha3' => 'CZE', 'IDC' => '420'), 'DK' => array('Name' => 'Denmark', 'Alpha2' => 'DK', 'Alpha3' => 'DNK', 'IDC' => '45'), 'DJ' => array('Name' => 'Djibouti', 'Alpha2' => 'DJ', 'Alpha3' => 'DJI', 'IDC' => '253'), 'DM' => array('Name' => 'Dominica', 'Alpha2' => 'DM', 'Alpha3' => 'DMA', 'IDC' => '1767'), 'DO' => array('Name' => 'Dominican Republic', 'Alpha2' => 'DO', 'Alpha3' => 'DOM', 'IDC' => '1809'), 'EC' => array('Name' => 'Ecuador', 'Alpha2' => 'EC', 'Alpha3' => 'ECU', 'IDC' => '593'), 'EG' => array('Name' => 'Egypt', 'Alpha2' => 'EG', 'Alpha3' => 'EGY', 'IDC' => '20'), 'SV' => array('Name' => 'El Salvador', 'Alpha2' => 'SV', 'Alpha3' => 'SLV', 'IDC' => '503'), 'GQ' => array('Name' => 'Equatorial Guinea', 'Alpha2' => 'GQ', 'Alpha3' => 'GNQ', 'IDC' => '240'), 'ER' => array('Name' => 'Eritrea', 'Alpha2' => 'ER', 'Alpha3' => 'ERI', 'IDC' => '291'), 'EE' => array('Name' => 'Estonia', 'Alpha2' => 'EE', 'Alpha3' => 'EST', 'IDC' => '372'), 'ET' => array('Name' => 'Ethiopia', 'Alpha2' => 'ET', 'Alpha3' => 'ETH', 'IDC' => '251'), 'FK' => array('Name' => 'Falkland Islands (Malvinas)', 'Alpha2' => 'FK', 'Alpha3' => 'FLK', 'IDC' => '500'), 'FO' => array('Name' => 'Faroe Islands', 'Alpha2' => 'FO', 'Alpha3' => 'FRO', 'IDC' => '298'), 'FJ' => array('Name' => 'Fiji', 'Alpha2' => 'FJ', 'Alpha3' => 'FJI', 'IDC' => '679'), 'FI' => array('Name' => 'Finland', 'Alpha2' => 'FI', 'Alpha3' => 'FIN', 'IDC' => '358'), 'FR' => array('Name' => 'France', 'Alpha2' => 'FR', 'Alpha3' => 'FRA', 'IDC' => '33'), 'GF' => array('Name' => 'French Guiana', 'Alpha2' => 'GF', 'Alpha3' => 'GUF', 'IDC' => '594'), 'PF' => array('Name' => 'French Polynesia', 'Alpha2' => 'PF', 'Alpha3' => 'PYF', 'IDC' => '689'), 'TF' => array('Name' => 'French Southern Territories', 'Alpha2' => 'TF', 'Alpha3' => 'ATF', 'IDC' => '0'), 'GA' => array('Name' => 'Gabon', 'Alpha2' => 'GA', 'Alpha3' => 'GAB', 'IDC' => '241'), 'GM' => array('Name' => 'Gambia', 'Alpha2' => 'GM', 'Alpha3' => 'GMB', 'IDC' => '220'), 'GE' => array('Name' => 'Georgia', 'Alpha2' => 'GE', 'Alpha3' => 'GEO', 'IDC' => '995'), 'DE' => array('Name' => 'Germany', 'Alpha2' => 'DE', 'Alpha3' => 'DEU', 'IDC' => '49'), 'GH' => array('Name' => 'Ghana', 'Alpha2' => 'GH', 'Alpha3' => 'GHA', 'IDC' => '233'), 'GI' => array('Name' => 'Gibraltar', 'Alpha2' => 'GI', 'Alpha3' => 'GIB', 'IDC' => '350'), 'GR' => array('Name' => 'Greece', 'Alpha2' => 'GR', 'Alpha3' => 'GRC', 'IDC' => '30'), 'GL' => array('Name' => 'Greenland', 'Alpha2' => 'GL', 'Alpha3' => 'GRL', 'IDC' => '299'), 'GD' => array('Name' => 'Grenada', 'Alpha2' => 'GD', 'Alpha3' => 'GRD', 'IDC' => '1473'), 'GP' => array('Name' => 'Guadeloupe', 'Alpha2' => 'GP', 'Alpha3' => 'GLP', 'IDC' => '590'), 'GU' => array('Name' => 'Guam', 'Alpha2' => 'GU', 'Alpha3' => 'GUM', 'IDC' => '1671'), 'GT' => array('Name' => 'Guatemala', 'Alpha2' => 'GT', 'Alpha3' => 'GTM', 'IDC' => '502'), 'GG' => array('Name' => 'Guernsey', 'Alpha2' => 'GG', 'Alpha3' => 'GGY', 'IDC' => '44'), 'GN' => array('Name' => 'Guinea', 'Alpha2' => 'GN', 'Alpha3' => 'GIN', 'IDC' => '224'), 'GW' => array('Name' => 'Guinea-Bissau', 'Alpha2' => 'GW', 'Alpha3' => 'GNB', 'IDC' => '245'), 'GY' => array('Name' => 'Guyana', 'Alpha2' => 'GY', 'Alpha3' => 'GUY', 'IDC' => '592'), 'HT' => array('Name' => 'Haiti', 'Alpha2' => 'HT', 'Alpha3' => 'HTI', 'IDC' => '509'), 'HM' => array('Name' => 'Heard Island and McDonald Islands', 'Alpha2' => 'HM', 'Alpha3' => 'HMD', 'IDC' => '672'), 'HN' => array('Name' => 'Honduras', 'Alpha2' => 'HN', 'Alpha3' => 'HND', 'IDC' => '504'), 'HK' => array('Name' => 'Hong Kong', 'Alpha2' => 'HK', 'Alpha3' => 'HKG', 'IDC' => '852'), 'HU' => array('Name' => 'Hungary', 'Alpha2' => 'HU', 'Alpha3' => 'HUN', 'IDC' => '36'), 'IS' => array('Name' => 'Iceland', 'Alpha2' => 'IS', 'Alpha3' => 'ISL', 'IDC' => '354'), 'IN' => array('Name' => 'India', 'Alpha2' => 'IN', 'Alpha3' => 'IND', 'IDC' => '91'), 'ID' => array('Name' => 'Indonesia', 'Alpha2' => 'ID', 'Alpha3' => 'IDN', 'IDC' => '62'), 'IR' => array('Name' => 'Iran, Islamic Republic of', 'Alpha2' => 'IR', 'Alpha3' => 'IRN', 'IDC' => '98'), 'IQ' => array('Name' => 'Iraq', 'Alpha2' => 'IQ', 'Alpha3' => 'IRQ', 'IDC' => '964'), 'IE' => array('Name' => 'Ireland', 'Alpha2' => 'IE', 'Alpha3' => 'IRL', 'IDC' => '353'), 'IM' => array('Name' => 'Isle of Man', 'Alpha2' => 'IM', 'Alpha3' => 'IMN', 'IDC' => '44'), 'IL' => array('Name' => 'Israel', 'Alpha2' => 'IL', 'Alpha3' => 'ISR', 'IDC' => '972'), 'IT' => array('Name' => 'Italy', 'Alpha2' => 'IT', 'Alpha3' => 'ITA', 'IDC' => '39'), 'JM' => array('Name' => 'Jamaica', 'Alpha2' => 'JM', 'Alpha3' => 'JAM', 'IDC' => '1876'), 'JP' => array('Name' => 'Japan', 'Alpha2' => 'JP', 'Alpha3' => 'JPN', 'IDC' => '81'), 'JE' => array('Name' => 'Jersey', 'Alpha2' => 'JE', 'Alpha3' => 'JEY', 'IDC' => '44'), 'JO' => array('Name' => 'Jordan', 'Alpha2' => 'JO', 'Alpha3' => 'JOR', 'IDC' => '962'), 'KZ' => array('Name' => 'Kazakhstan', 'Alpha2' => 'KZ', 'Alpha3' => 'KAZ', 'IDC' => '7'), 'KE' => array('Name' => 'Kenya', 'Alpha2' => 'KE', 'Alpha3' => 'KEN', 'IDC' => '254'), 'KI' => array('Name' => 'Kiribati', 'Alpha2' => 'KI', 'Alpha3' => 'KIR', 'IDC' => '686'), 'KP' => array('Name' => 'Korea, Democratic People\'s Republic of', 'Alpha2' => 'KP', 'Alpha3' => 'PRK', 'IDC' => '850'), 'KR' => array('Name' => 'Korea, Republic of', 'Alpha2' => 'KR', 'Alpha3' => 'KOR', 'IDC' => '82'), 'KW' => array('Name' => 'Kuwait', 'Alpha2' => 'KW', 'Alpha3' => 'KWT', 'IDC' => '965'), 'KG' => array('Name' => 'Kyrgyzstan', 'Alpha2' => 'KG', 'Alpha3' => 'KGZ', 'IDC' => '996'), 'LA' => array('Name' => 'Lao People\'s Democratic Republic', 'Alpha2' => 'LA', 'Alpha3' => 'LAO', 'IDC' => '856'), 'LV' => array('Name' => 'Latvia', 'Alpha2' => 'LV', 'Alpha3' => 'LVA', 'IDC' => '371'), 'LB' => array('Name' => 'Lebanon', 'Alpha2' => 'LB', 'Alpha3' => 'LBN', 'IDC' => '961'), 'LS' => array('Name' => 'Lesotho', 'Alpha2' => 'LS', 'Alpha3' => 'LSO', 'IDC' => '266'), 'LR' => array('Name' => 'Liberia', 'Alpha2' => 'LR', 'Alpha3' => 'LBR', 'IDC' => '231'), 'LY' => array('Name' => 'Libyan Arab Jamahiriya', 'Alpha2' => 'LY', 'Alpha3' => 'LBY', 'IDC' => '218'), 'LI' => array('Name' => 'Liechtenstein', 'Alpha2' => 'LI', 'Alpha3' => 'LIE', 'IDC' => '423'), 'LT' => array('Name' => 'Lithuania', 'Alpha2' => 'LT', 'Alpha3' => 'LTU', 'IDC' => '370'), 'LU' => array('Name' => 'Luxembourg', 'Alpha2' => 'LU', 'Alpha3' => 'LUX', 'IDC' => '352'), 'MO' => array('Name' => 'Macau', 'Alpha2' => 'MO', 'Alpha3' => 'MAC', 'IDC' => '853'), 'MK' => array('Name' => 'Macedonia, The Former Yugoslav Republic of', 'Alpha2' => 'MK', 'Alpha3' => 'MKD', 'IDC' => '389'), 'MG' => array('Name' => 'Madagascar', 'Alpha2' => 'MG', 'Alpha3' => 'MDG', 'IDC' => '261'), 'MW' => array('Name' => 'Malawi', 'Alpha2' => 'MW', 'Alpha3' => 'MWI', 'IDC' => '265'), 'MY' => array('Name' => 'Malaysia', 'Alpha2' => 'MY', 'Alpha3' => 'MYS', 'IDC' => '60'), 'MV' => array('Name' => 'Maldives', 'Alpha2' => 'MV', 'Alpha3' => 'MDV', 'IDC' => '960'), 'ML' => array('Name' => 'Mali', 'Alpha2' => 'ML', 'Alpha3' => 'MLI', 'IDC' => '223'), 'MT' => array('Name' => 'Malta', 'Alpha2' => 'MT', 'Alpha3' => 'MLT', 'IDC' => '356'), 'MH' => array('Name' => 'Marshall Islands', 'Alpha2' => 'MH', 'Alpha3' => 'MHL', 'IDC' => '692'), 'MQ' => array('Name' => 'Martinique', 'Alpha2' => 'MQ', 'Alpha3' => 'MTQ', 'IDC' => '596'), 'MR' => array('Name' => 'Mauritania', 'Alpha2' => 'MR', 'Alpha3' => 'MRT', 'IDC' => '222'), 'MU' => array('Name' => 'Mauritius', 'Alpha2' => 'MU', 'Alpha3' => 'MUS', 'IDC' => '230'), 'YT' => array('Name' => 'Mayotte', 'Alpha2' => 'YT', 'Alpha3' => 'MYT', 'IDC' => '262'), 'MX' => array('Name' => 'Mexico', 'Alpha2' => 'MX', 'Alpha3' => 'MEX', 'IDC' => '52'), 'FM' => array('Name' => 'Micronesia, Federated States of', 'Alpha2' => 'FM', 'Alpha3' => 'FSM', 'IDC' => '691'), 'MD' => array('Name' => 'Moldova, Republic of', 'Alpha2' => 'MD', 'Alpha3' => 'MDA', 'IDC' => '373'), 'MC' => array('Name' => 'Monaco', 'Alpha2' => 'MC', 'Alpha3' => 'MCO', 'IDC' => '377'), 'MN' => array('Name' => 'Mongolia', 'Alpha2' => 'MN', 'Alpha3' => 'MNG', 'IDC' => '976'), 'ME' => array('Name' => 'Montenegro', 'Alpha2' => 'ME', 'Alpha3' => 'MNE', 'IDC' => '382'), 'MS' => array('Name' => 'Montserrat', 'Alpha2' => 'MS', 'Alpha3' => 'MSR', 'IDC' => '1664'), 'MA' => array('Name' => 'Morocco', 'Alpha2' => 'MA', 'Alpha3' => 'MAR', 'IDC' => '212'), 'MZ' => array('Name' => 'Mozambique', 'Alpha2' => 'MZ', 'Alpha3' => 'MOZ', 'IDC' => '258'), 'MM' => array('Name' => 'Myanmar', 'Alpha2' => 'MM', 'Alpha3' => 'MMR', 'IDC' => '95'), 'NA' => array('Name' => 'Namibia', 'Alpha2' => 'NA', 'Alpha3' => 'NAM', 'IDC' => '264'), 'NR' => array('Name' => 'Nauru', 'Alpha2' => 'NR', 'Alpha3' => 'NRU', 'IDC' => '674'), 'NP' => array('Name' => 'Nepal', 'Alpha2' => 'NP', 'Alpha3' => 'NPL', 'IDC' => '977'), 'NL' => array('Name' => 'Netherlands', 'Alpha2' => 'NL', 'Alpha3' => 'NLD', 'IDC' => '31'), 'AN' => array('Name' => 'Netherlands Antilles', 'Alpha2' => 'AN', 'Alpha3' => 'ANT', 'IDC' => '599'), 'NC' => array('Name' => 'New Caledonia', 'Alpha2' => 'NC', 'Alpha3' => 'NCL', 'IDC' => '687'), 'NZ' => array('Name' => 'New Zealand', 'Alpha2' => 'NZ', 'Alpha3' => 'NZL', 'IDC' => '64'), 'NI' => array('Name' => 'Nicaragua', 'Alpha2' => 'NI', 'Alpha3' => 'NIC', 'IDC' => '505'), 'NE' => array('Name' => 'Niger', 'Alpha2' => 'NE', 'Alpha3' => 'NER', 'IDC' => '227'), 'NG' => array('Name' => 'Nigeria', 'Alpha2' => 'NG', 'Alpha3' => 'NGA', 'IDC' => '234'), 'NU' => array('Name' => 'Niue', 'Alpha2' => 'NU', 'Alpha3' => 'NIU', 'IDC' => '683'), 'NF' => array('Name' => 'Norfolk Island', 'Alpha2' => 'NF', 'Alpha3' => 'NFK', 'IDC' => '6723'), 'MP' => array('Name' => 'Northern Mariana Islands', 'Alpha2' => 'MP', 'Alpha3' => 'MNP', 'IDC' => '1670'), 'NO' => array('Name' => 'Norway', 'Alpha2' => 'NO', 'Alpha3' => 'NOR', 'IDC' => '47'), 'OM' => array('Name' => 'Oman', 'Alpha2' => 'OM', 'Alpha3' => 'OMN', 'IDC' => '968'), 'PK' => array('Name' => 'Pakistan', 'Alpha2' => 'PK', 'Alpha3' => 'PAK', 'IDC' => '92'), 'PW' => array('Name' => 'Palau', 'Alpha2' => 'PW', 'Alpha3' => 'PLW', 'IDC' => '680'), 'PS' => array('Name' => 'Palestinian Territory, Occupied', 'Alpha2' => 'PS', 'Alpha3' => 'PSE', 'IDC' => '970'), 'PA' => array('Name' => 'Panama', 'Alpha2' => 'PA', 'Alpha3' => 'PAN', 'IDC' => '507'), 'PG' => array('Name' => 'Papua New Guinea', 'Alpha2' => 'PG', 'Alpha3' => 'PNG', 'IDC' => '675'), 'PY' => array('Name' => 'Paraguay', 'Alpha2' => 'PY', 'Alpha3' => 'PRY', 'IDC' => '595'), 'PE' => array('Name' => 'Peru', 'Alpha2' => 'PE', 'Alpha3' => 'PER', 'IDC' => '51'), 'PH' => array('Name' => 'Philippines', 'Alpha2' => 'PH', 'Alpha3' => 'PHL', 'IDC' => '63'), 'PN' => array('Name' => 'Pitcairn', 'Alpha2' => 'PN', 'Alpha3' => 'PCN', 'IDC' => '64'), 'PL' => array('Name' => 'Poland', 'Alpha2' => 'PL', 'Alpha3' => 'POL', 'IDC' => '48'), 'PT' => array('Name' => 'Portugal', 'Alpha2' => 'PT', 'Alpha3' => 'PRT', 'IDC' => '351'), 'PR' => array('Name' => 'Puerto Rico', 'Alpha2' => 'PR', 'Alpha3' => 'PRI', 'IDC' => '1787'), 'QA' => array('Name' => 'Qatar', 'Alpha2' => 'QA', 'Alpha3' => 'QAT', 'IDC' => '974'), 'RE' => array('Name' => 'Reunion', 'Alpha2' => 'RE', 'Alpha3' => 'REU', 'IDC' => '262'), 'RO' => array('Name' => 'Romania', 'Alpha2' => 'RO', 'Alpha3' => 'ROU', 'IDC' => '40'), 'RU' => array('Name' => 'Russian Federation', 'Alpha2' => 'RU', 'Alpha3' => 'RUS', 'IDC' => '7'), 'RW' => array('Name' => 'Rwanda', 'Alpha2' => 'RW', 'Alpha3' => 'RWA', 'IDC' => '250'), 'BL' => array('Name' => 'Saint Barthélemy', 'Alpha2' => 'BL', 'Alpha3' => 'BLM', 'IDC' => '590'), 'SH' => array('Name' => 'Saint Helena', 'Alpha2' => 'SH', 'Alpha3' => 'SHN', 'IDC' => '290'), 'KN' => array('Name' => 'Saint Kitts and Nevis', 'Alpha2' => 'KN', 'Alpha3' => 'KNA', 'IDC' => '1869'), 'LC' => array('Name' => 'Saint Lucia', 'Alpha2' => 'LC', 'Alpha3' => 'LCA', 'IDC' => '1758'), 'MF' => array('Name' => 'Saint Martin', 'Alpha2' => 'MF', 'Alpha3' => 'MAF', 'IDC' => '590'), 'PM' => array('Name' => 'Saint Pierre and Miquelon', 'Alpha2' => 'PM', 'Alpha3' => 'SPM', 'IDC' => '508'), 'VC' => array('Name' => 'Saint Vincent and The Grenadines', 'Alpha2' => 'VC', 'Alpha3' => 'VCT', 'IDC' => '1784'), 'WS' => array('Name' => 'Samoa', 'Alpha2' => 'WS', 'Alpha3' => 'WSM', 'IDC' => '685'), 'SM' => array('Name' => 'San Marino', 'Alpha2' => 'SM', 'Alpha3' => 'SMR', 'IDC' => '378'), 'ST' => array('Name' => 'Sao Tome and Principe', 'Alpha2' => 'ST', 'Alpha3' => 'STP', 'IDC' => '239'), 'SA' => array('Name' => 'Saudi Arabia', 'Alpha2' => 'SA', 'Alpha3' => 'SAU', 'IDC' => '966'), 'SN' => array('Name' => 'Senegal', 'Alpha2' => 'SN', 'Alpha3' => 'SEN', 'IDC' => '221'), 'RS' => array('Name' => 'Serbia', 'Alpha2' => 'RS', 'Alpha3' => 'SRB', 'IDC' => '381'), 'SC' => array('Name' => 'Seychelles', 'Alpha2' => 'SC', 'Alpha3' => 'SYC', 'IDC' => '248'), 'SL' => array('Name' => 'Sierra Leone', 'Alpha2' => 'SL', 'Alpha3' => 'SLE', 'IDC' => '232'), 'SG' => array('Name' => 'Singapore', 'Alpha2' => 'SG', 'Alpha3' => 'SGP', 'IDC' => '65'), 'SK' => array('Name' => 'Slovakia', 'Alpha2' => 'SK', 'Alpha3' => 'SVK', 'IDC' => '421'), 'SI' => array('Name' => 'Slovenia', 'Alpha2' => 'SI', 'Alpha3' => 'SVN', 'IDC' => '386'), 'SB' => array('Name' => 'Solomon Islands', 'Alpha2' => 'SB', 'Alpha3' => 'SLB', 'IDC' => '677'), 'SO' => array('Name' => 'Somalia', 'Alpha2' => 'SO', 'Alpha3' => 'SOM', 'IDC' => '252'), 'ZA' => array('Name' => 'South Africa', 'Alpha2' => 'ZA', 'Alpha3' => 'ZAF', 'IDC' => '27'), 'GS' => array('Name' => 'South Georgia and The South Sandwich Islands', 'Alpha2' => 'GS', 'Alpha3' => 'SGS', 'IDC' => '500'), 'ES' => array('Name' => 'Spain', 'Alpha2' => 'ES', 'Alpha3' => 'ESP', 'IDC' => '34'), 'LK' => array('Name' => 'Sri Lanka', 'Alpha2' => 'LK', 'Alpha3' => 'LKA', 'IDC' => '94'), 'SD' => array('Name' => 'Sudan', 'Alpha2' => 'SD', 'Alpha3' => 'SDN', 'IDC' => '249'), 'SR' => array('Name' => 'Suriname', 'Alpha2' => 'SR', 'Alpha3' => 'SUR', 'IDC' => '597'), 'SJ' => array('Name' => 'Svalbard and Jan Mayen', 'Alpha2' => 'SJ', 'Alpha3' => 'SJM', 'IDC' => '47'), 'SZ' => array('Name' => 'Swaziland', 'Alpha2' => 'SZ', 'Alpha3' => 'SWZ', 'IDC' => '268'), 'SE' => array('Name' => 'Sweden', 'Alpha2' => 'SE', 'Alpha3' => 'SWE', 'IDC' => '46'), 'CH' => array('Name' => 'Switzerland', 'Alpha2' => 'CH', 'Alpha3' => 'CHE', 'IDC' => '41'), 'SY' => array('Name' => 'Syrian Arab Republic', 'Alpha2' => 'SY', 'Alpha3' => 'SYR', 'IDC' => '963'), 'TW' => array('Name' => 'Taiwan', 'Alpha2' => 'TW', 'Alpha3' => 'TWN', 'IDC' => '886'), 'TJ' => array('Name' => 'Tajikistan', 'Alpha2' => 'TJ', 'Alpha3' => 'TJK', 'IDC' => '992'), 'TZ' => array('Name' => 'Tanzania, United Republic of', 'Alpha2' => 'TZ', 'Alpha3' => 'TZA', 'IDC' => '255'), 'TH' => array('Name' => 'Thailand', 'Alpha2' => 'TH', 'Alpha3' => 'THA', 'IDC' => '66'), 'TL' => array('Name' => 'Timor-Leste', 'Alpha2' => 'TL', 'Alpha3' => 'TLS', 'IDC' => '670'), 'TG' => array('Name' => 'Togo', 'Alpha2' => 'TG', 'Alpha3' => 'TGO', 'IDC' => '228'), 'TK' => array('Name' => 'Tokelau', 'Alpha2' => 'TK', 'Alpha3' => 'TKL', 'IDC' => '690'), 'TO' => array('Name' => 'Tonga', 'Alpha2' => 'TO', 'Alpha3' => 'TON', 'IDC' => '676'), 'TT' => array('Name' => 'Trinidad and Tobago', 'Alpha2' => 'TT', 'Alpha3' => 'TTO', 'IDC' => '1868'), 'TN' => array('Name' => 'Tunisia', 'Alpha2' => 'TN', 'Alpha3' => 'TUN', 'IDC' => '216'), 'TR' => array('Name' => 'Turkey', 'Alpha2' => 'TR', 'Alpha3' => 'TUR', 'IDC' => '90'), 'TM' => array('Name' => 'Turkmenistan', 'Alpha2' => 'TM', 'Alpha3' => 'TKM', 'IDC' => '993'), 'TC' => array('Name' => 'Turks and Caicos Islands', 'Alpha2' => 'TC', 'Alpha3' => 'TCA', 'IDC' => '1649'), 'TV' => array('Name' => 'Tuvalu', 'Alpha2' => 'TV', 'Alpha3' => 'TUV', 'IDC' => '688'), 'UG' => array('Name' => 'Uganda', 'Alpha2' => 'UG', 'Alpha3' => 'UGA', 'IDC' => '256'), 'UA' => array('Name' => 'Ukraine', 'Alpha2' => 'UA', 'Alpha3' => 'UKR', 'IDC' => '380'), 'AE' => array('Name' => 'United Arab Emirates', 'Alpha2' => 'AE', 'Alpha3' => 'ARE', 'IDC' => '971'), 'GB' => array('Name' => 'United Kingdom', 'Alpha2' => 'GB', 'Alpha3' => 'GBR', 'IDC' => '44'), 'UM' => array('Name' => 'United States Minor Outlying Islands', 'Alpha2' => 'UM', 'Alpha3' => 'UMI', 'IDC' => '1'), 'US' => array('Name' => 'United States of America', 'Alpha2' => 'US', 'Alpha3' => 'USA', 'IDC' => '1'), 'UY' => array('Name' => 'Uruguay', 'Alpha2' => 'UY', 'Alpha3' => 'URY', 'IDC' => '598'), 'UZ' => array('Name' => 'Uzbekistan', 'Alpha2' => 'UZ', 'Alpha3' => 'UZB', 'IDC' => '998'), 'VU' => array('Name' => 'Vanuatu', 'Alpha2' => 'VU', 'Alpha3' => 'VUT', 'IDC' => '678'), 'VA' => array('Name' => 'Holy See (Vatican City State)', 'Alpha2' => 'VA', 'Alpha3' => 'VAT', 'IDC' => '3906'), 'VE' => array('Name' => 'Venezuela', 'Alpha2' => 'VE', 'Alpha3' => 'VEN', 'IDC' => '58'), 'VN' => array('Name' => 'Viet Nam', 'Alpha2' => 'VN', 'Alpha3' => 'VNM', 'IDC' => '84'), 'VG' => array('Name' => 'Virgin Islands, British', 'Alpha2' => 'VG', 'Alpha3' => 'VGB', 'IDC' => '1284'), 'VI' => array('Name' => 'Virgin Islands, U.S.', 'Alpha2' => 'VI', 'Alpha3' => 'VIR', 'IDC' => '1340'), 'WF' => array('Name' => 'Wallis and Futuna', 'Alpha2' => 'WF', 'Alpha3' => 'WLF', 'IDC' => '681'), 'EH' => array('Name' => 'Western Sahara', 'Alpha2' => 'EH', 'Alpha3' => 'ESH', 'IDC' => '212'), 'YE' => array('Name' => 'Yemen', 'Alpha2' => 'YE', 'Alpha3' => 'YEM', 'IDC' => '967'), 'ZM' => array('Name' => 'Zambia', 'Alpha2' => 'ZM', 'Alpha3' => 'ZMB', 'IDC' => '260'), 'ZW' => array('Name' => 'Zimbabwe', 'Alpha2' => 'ZW', 'Alpha3' => 'ZWE', 'IDC' => '263')));
    }

    /**
     * Gets the 'ezpublish_rest.controller.trash' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Controller\Trash A eZ\Publish\Core\REST\Server\Controller\Trash instance.
     */
    protected function getEzpublishRest_Controller_TrashService()
    {
        $this->services['ezpublish_rest.controller.trash'] = $instance = new \eZ\Publish\Core\REST\Server\Controller\Trash($this->get('ezpublish.api.service.trash'), $this->get('ezpublish.api.service.location'));

        $instance->setContainer($this);
        $instance->setInputDispatcher($this->get('ezpublish_rest.input.dispatcher'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRepository($this->get('ezpublish.signalslot.repository'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.controller.url_alias' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Controller\URLAlias A eZ\Publish\Core\REST\Server\Controller\URLAlias instance.
     */
    protected function getEzpublishRest_Controller_UrlAliasService()
    {
        $this->services['ezpublish_rest.controller.url_alias'] = $instance = new \eZ\Publish\Core\REST\Server\Controller\URLAlias($this->get('ezpublish.api.service.url_alias'), $this->get('ezpublish.api.service.location'));

        $instance->setContainer($this);
        $instance->setInputDispatcher($this->get('ezpublish_rest.input.dispatcher'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRepository($this->get('ezpublish.signalslot.repository'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.controller.url_wildcard' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Controller\URLWildcard A eZ\Publish\Core\REST\Server\Controller\URLWildcard instance.
     */
    protected function getEzpublishRest_Controller_UrlWildcardService()
    {
        $this->services['ezpublish_rest.controller.url_wildcard'] = $instance = new \eZ\Publish\Core\REST\Server\Controller\URLWildcard($this->get('ezpublish.api.service.url_wildcard'));

        $instance->setContainer($this);
        $instance->setInputDispatcher($this->get('ezpublish_rest.input.dispatcher'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRepository($this->get('ezpublish.signalslot.repository'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.controller.user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Controller\User A eZ\Publish\Core\REST\Server\Controller\User instance.
     */
    protected function getEzpublishRest_Controller_UserService()
    {
        $a = $this->get('ezpublish.signalslot.repository');

        $this->services['ezpublish_rest.controller.user'] = $instance = new \eZ\Publish\Core\REST\Server\Controller\User($this->get('ezpublish.api.service.user'), $this->get('ezpublish.api.service.role'), $this->get('ezpublish.api.service.content'), $this->get('ezpublish.api.service.content_type'), $this->get('ezpublish.api.service.location'), $this->get('ezpublish.api.service.section'), $a);

        $instance->setContainer($this);
        $instance->setInputDispatcher($this->get('ezpublish_rest.input.dispatcher'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRepository($a);

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.controller.views' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Controller\Views A eZ\Publish\Core\REST\Server\Controller\Views instance.
     */
    protected function getEzpublishRest_Controller_ViewsService()
    {
        $this->services['ezpublish_rest.controller.views'] = $instance = new \eZ\Publish\Core\REST\Server\Controller\Views($this->get('ezpublish.api.service.search'));

        $instance->setContainer($this);
        $instance->setInputDispatcher($this->get('ezpublish_rest.input.dispatcher'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRepository($this->get('ezpublish.signalslot.repository'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.cors_option_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishRestBundle\CorsOptions\RestProvider A eZ\Bundle\EzPublishRestBundle\CorsOptions\RestProvider instance.
     */
    protected function getEzpublishRest_CorsOptionProviderService()
    {
        return $this->services['ezpublish_rest.cors_option_provider'] = new \eZ\Bundle\EzPublishRestBundle\CorsOptions\RestProvider($this->get('router.default'));
    }

    /**
     * Gets the 'ezpublish_rest.csrf_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishRestBundle\EventListener\CsrfListener A eZ\Bundle\EzPublishRestBundle\EventListener\CsrfListener instance.
     */
    protected function getEzpublishRest_CsrfListenerService()
    {
        return $this->services['ezpublish_rest.csrf_listener'] = new \eZ\Bundle\EzPublishRestBundle\EventListener\CsrfListener($this->get('debug.event_dispatcher'), true, 'rest', $this->get('security.csrf.token_manager', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'ezpublish_rest.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishRestBundle\ApiLoader\Factory A eZ\Bundle\EzPublishRestBundle\ApiLoader\Factory instance.
     */
    protected function getEzpublishRest_FactoryService()
    {
        $this->services['ezpublish_rest.factory'] = $instance = new \eZ\Bundle\EzPublishRestBundle\ApiLoader\Factory($this->get('ezpublish.config.resolver.chain'), $this->get('ezpublish.signalslot.repository'));

        $instance->setRequestStack($this->get('request_stack'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.field_type_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\Input\FieldTypeParser A eZ\Publish\Core\REST\Common\Input\FieldTypeParser instance.
     */
    protected function getEzpublishRest_FieldTypeParserService()
    {
        return $this->services['ezpublish_rest.field_type_parser'] = new \eZ\Publish\Core\REST\Common\Input\FieldTypeParser($this->get('ezpublish.api.service.content'), $this->get('ezpublish.api.service.content_type'), $this->get('ezpublish.api.service.field_type'), $this->get('ezpublish_rest.field_type_processor_registry'));
    }

    /**
     * Gets the 'ezpublish_rest.field_type_processor.ezbinaryfile' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\FieldTypeProcessor\BinaryProcessor A eZ\Publish\Core\REST\Common\FieldTypeProcessor\BinaryProcessor instance.
     */
    protected function getEzpublishRest_FieldTypeProcessor_EzbinaryfileService()
    {
        return $this->services['ezpublish_rest.field_type_processor.ezbinaryfile'] = $this->get('ezpublish_rest.factory')->getBinaryFileFieldTypeProcessor($this->get('ezpublish.core.io.prefix_url_decorator'));
    }

    /**
     * Gets the 'ezpublish_rest.field_type_processor.ezdate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\FieldTypeProcessor\DateProcessor A eZ\Publish\Core\REST\Common\FieldTypeProcessor\DateProcessor instance.
     */
    protected function getEzpublishRest_FieldTypeProcessor_EzdateService()
    {
        return $this->services['ezpublish_rest.field_type_processor.ezdate'] = new \eZ\Publish\Core\REST\Common\FieldTypeProcessor\DateProcessor();
    }

    /**
     * Gets the 'ezpublish_rest.field_type_processor.ezdatetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\FieldTypeProcessor\DateAndTimeProcessor A eZ\Publish\Core\REST\Common\FieldTypeProcessor\DateAndTimeProcessor instance.
     */
    protected function getEzpublishRest_FieldTypeProcessor_EzdatetimeService()
    {
        return $this->services['ezpublish_rest.field_type_processor.ezdatetime'] = new \eZ\Publish\Core\REST\Common\FieldTypeProcessor\DateAndTimeProcessor();
    }

    /**
     * Gets the 'ezpublish_rest.field_type_processor.ezfloat' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\FieldTypeProcessor\FloatProcessor A eZ\Publish\Core\REST\Common\FieldTypeProcessor\FloatProcessor instance.
     */
    protected function getEzpublishRest_FieldTypeProcessor_EzfloatService()
    {
        return $this->services['ezpublish_rest.field_type_processor.ezfloat'] = new \eZ\Publish\Core\REST\Common\FieldTypeProcessor\FloatProcessor();
    }

    /**
     * Gets the 'ezpublish_rest.field_type_processor.ezimage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\FieldTypeProcessor\ImageProcessor A eZ\Publish\Core\REST\Common\FieldTypeProcessor\ImageProcessor instance.
     */
    protected function getEzpublishRest_FieldTypeProcessor_EzimageService()
    {
        return $this->services['ezpublish_rest.field_type_processor.ezimage'] = $this->get('ezpublish_rest.factory')->getImageFieldTypeProcessor($this->get('ezpublish.chain_router'));
    }

    /**
     * Gets the 'ezpublish_rest.field_type_processor.ezmedia' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\FieldTypeProcessor\MediaProcessor A eZ\Publish\Core\REST\Common\FieldTypeProcessor\MediaProcessor instance.
     */
    protected function getEzpublishRest_FieldTypeProcessor_EzmediaService()
    {
        return $this->services['ezpublish_rest.field_type_processor.ezmedia'] = $this->get('ezpublish_rest.factory')->getMediaFieldTypeProcessor();
    }

    /**
     * Gets the 'ezpublish_rest.field_type_processor.ezobjectrelation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\FieldTypeProcessor\RelationProcessor A eZ\Publish\Core\REST\Common\FieldTypeProcessor\RelationProcessor instance.
     */
    protected function getEzpublishRest_FieldTypeProcessor_EzobjectrelationService()
    {
        return $this->services['ezpublish_rest.field_type_processor.ezobjectrelation'] = new \eZ\Publish\Core\REST\Common\FieldTypeProcessor\RelationProcessor();
    }

    /**
     * Gets the 'ezpublish_rest.field_type_processor.ezobjectrelationlist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\FieldTypeProcessor\RelationListProcessor A eZ\Publish\Core\REST\Common\FieldTypeProcessor\RelationListProcessor instance.
     */
    protected function getEzpublishRest_FieldTypeProcessor_EzobjectrelationlistService()
    {
        return $this->services['ezpublish_rest.field_type_processor.ezobjectrelationlist'] = new \eZ\Publish\Core\REST\Common\FieldTypeProcessor\RelationListProcessor();
    }

    /**
     * Gets the 'ezpublish_rest.field_type_processor.ezpage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\FieldTypeProcessor\PageProcessor A eZ\Publish\Core\REST\Common\FieldTypeProcessor\PageProcessor instance.
     */
    protected function getEzpublishRest_FieldTypeProcessor_EzpageService()
    {
        return $this->services['ezpublish_rest.field_type_processor.ezpage'] = new \eZ\Publish\Core\REST\Common\FieldTypeProcessor\PageProcessor();
    }

    /**
     * Gets the 'ezpublish_rest.field_type_processor.ezrichtext' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\FieldTypeProcessor\RichTextProcessor A eZ\Publish\Core\REST\Common\FieldTypeProcessor\RichTextProcessor instance.
     */
    protected function getEzpublishRest_FieldTypeProcessor_EzrichtextService()
    {
        return $this->services['ezpublish_rest.field_type_processor.ezrichtext'] = new \eZ\Publish\Core\REST\Common\FieldTypeProcessor\RichTextProcessor($this->get('ezpublish.fieldtype.ezrichtext.converter.edit.xhtml5'));
    }

    /**
     * Gets the 'ezpublish_rest.field_type_processor.eztime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\FieldTypeProcessor\TimeProcessor A eZ\Publish\Core\REST\Common\FieldTypeProcessor\TimeProcessor instance.
     */
    protected function getEzpublishRest_FieldTypeProcessor_EztimeService()
    {
        return $this->services['ezpublish_rest.field_type_processor.eztime'] = new \eZ\Publish\Core\REST\Common\FieldTypeProcessor\TimeProcessor();
    }

    /**
     * Gets the 'ezpublish_rest.field_type_processor_registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \eZ\Publish\Core\REST\Common\FieldTypeProcessorRegistry A eZ\Publish\Core\REST\Common\FieldTypeProcessorRegistry instance.
     */
    public function getEzpublishRest_FieldTypeProcessorRegistryService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['ezpublish_rest.field_type_processor_registry'] = new eZPublishCoreRESTCommonFieldTypeProcessorRegistry_0000000010d76f7200007f42791310a4fdda7e708466a44a1ce939fdb4e9724a(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getEzpublishRest_FieldTypeProcessorRegistryService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        $instance = new \eZ\Publish\Core\REST\Common\FieldTypeProcessorRegistry();

        $instance->registerProcessor('ezimage', $this->get('ezpublish_rest.field_type_processor.ezimage'));
        $instance->registerProcessor('ezdatetime', $this->get('ezpublish_rest.field_type_processor.ezdatetime'));
        $instance->registerProcessor('ezdate', $this->get('ezpublish_rest.field_type_processor.ezdate'));
        $instance->registerProcessor('ezmedia', $this->get('ezpublish_rest.field_type_processor.ezmedia'));
        $instance->registerProcessor('ezobjectrelationlist', $this->get('ezpublish_rest.field_type_processor.ezobjectrelationlist'));
        $instance->registerProcessor('ezobjectrelation', $this->get('ezpublish_rest.field_type_processor.ezobjectrelation'));
        $instance->registerProcessor('eztime', $this->get('ezpublish_rest.field_type_processor.eztime'));
        $instance->registerProcessor('ezrichtext', $this->get('ezpublish_rest.field_type_processor.ezrichtext'));
        $instance->registerProcessor('ezbinaryfile', $this->get('ezpublish_rest.field_type_processor.ezbinaryfile'));
        $instance->registerProcessor('ezpage', $this->get('ezpublish_rest.field_type_processor.ezpage'));
        $instance->registerProcessor('ezfloat', $this->get('ezpublish_rest.field_type_processor.ezfloat'));
        $instance->registerProcessor('ezuser', $this->get('ezsystems.platformui.rest.user_field_type_processor'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.field_type_serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\Output\FieldTypeSerializer A eZ\Publish\Core\REST\Common\Output\FieldTypeSerializer instance.
     */
    protected function getEzpublishRest_FieldTypeSerializerService()
    {
        return $this->services['ezpublish_rest.field_type_serializer'] = new \eZ\Publish\Core\REST\Common\Output\FieldTypeSerializer($this->get('ezpublish.api.service.field_type'), $this->get('ezpublish_rest.field_type_processor_registry'));
    }

    /**
     * Gets the 'ezpublish_rest.input.dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\Input\Dispatcher A eZ\Publish\Core\REST\Common\Input\Dispatcher instance.
     */
    protected function getEzpublishRest_Input_DispatcherService()
    {
        $this->services['ezpublish_rest.input.dispatcher'] = $instance = new \eZ\Publish\Core\REST\Common\Input\Dispatcher($this->get('ezpublish_rest.input.parsing_dispatcher'), array(), $this->get('ezpublish_rest.request_parser'), $this->get('ezpublish_rest.parser_tools'), $this->get('ezpublish_rest.field_type_parser'));

        $instance->addHandler('json', $this->get('ezpublish_rest.input.handler.json'));
        $instance->addHandler('xml', $this->get('ezpublish_rest.input.handler.xml'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.handler.json' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\Input\Handler\Json A eZ\Publish\Core\REST\Common\Input\Handler\Json instance.
     */
    protected function getEzpublishRest_Input_Handler_JsonService()
    {
        return $this->services['ezpublish_rest.input.handler.json'] = new \eZ\Publish\Core\REST\Common\Input\Handler\Json();
    }

    /**
     * Gets the 'ezpublish_rest.input.handler.xml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\Input\Handler\Xml A eZ\Publish\Core\REST\Common\Input\Handler\Xml instance.
     */
    protected function getEzpublishRest_Input_Handler_XmlService()
    {
        return $this->services['ezpublish_rest.input.handler.xml'] = new \eZ\Publish\Core\REST\Common\Input\Handler\Xml();
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.content' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\Content A eZ\Publish\Core\REST\Client\Input\Parser\Content instance.
     */
    protected function getEzpublishRest_Input_Parser_ContentService()
    {
        $this->services['ezpublish_rest.input.parser.content'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\Content($this->get('ezpublish_rest.parser_tools'), $this->get('ezpublish.api.service.content'), $this->get('ezpublish_rest.input.parser.versioninfo'), $this->get('ezpublish_rest.field_type_parser'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.contentcreate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\ContentCreate A eZ\Publish\Core\REST\Server\Input\Parser\ContentCreate instance.
     */
    protected function getEzpublishRest_Input_Parser_ContentcreateService()
    {
        $this->services['ezpublish_rest.input.parser.contentcreate'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\ContentCreate($this->get('ezpublish.api.service.content'), $this->get('ezpublish.api.service.content_type'), $this->get('ezpublish_rest.field_type_parser'), $this->get('ezpublish_rest.input.parser.locationcreate'), $this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.contentinfo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\ContentInfo A eZ\Publish\Core\REST\Client\Input\Parser\ContentInfo instance.
     */
    protected function getEzpublishRest_Input_Parser_ContentinfoService()
    {
        $this->services['ezpublish_rest.input.parser.contentinfo'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\ContentInfo($this->get('ezpublish_rest.parser_tools'), $this->get('ezpublish.api.service.content_type'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.contentlist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\ContentList A eZ\Publish\Core\REST\Client\Input\Parser\ContentList instance.
     */
    protected function getEzpublishRest_Input_Parser_ContentlistService()
    {
        $this->services['ezpublish_rest.input.parser.contentlist'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\ContentList($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.contentobjectstates' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\Input\Parser\ContentObjectStates A eZ\Publish\Core\REST\Common\Input\Parser\ContentObjectStates instance.
     */
    protected function getEzpublishRest_Input_Parser_ContentobjectstatesService()
    {
        $this->services['ezpublish_rest.input.parser.contentobjectstates'] = $instance = new \eZ\Publish\Core\REST\Common\Input\Parser\ContentObjectStates();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.contenttype' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\ContentType A eZ\Publish\Core\REST\Client\Input\Parser\ContentType instance.
     */
    protected function getEzpublishRest_Input_Parser_ContenttypeService()
    {
        $this->services['ezpublish_rest.input.parser.contenttype'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\ContentType($this->get('ezpublish_rest.parser_tools'), $this->get('ezpublish.api.service.content_type'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.contenttypecreate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\ContentTypeCreate A eZ\Publish\Core\REST\Server\Input\Parser\ContentTypeCreate instance.
     */
    protected function getEzpublishRest_Input_Parser_ContenttypecreateService()
    {
        $this->services['ezpublish_rest.input.parser.contenttypecreate'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\ContentTypeCreate($this->get('ezpublish.api.service.content_type'), $this->get('ezpublish_rest.input.parser.fielddefinitioncreate'), $this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.contenttypegroup' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\ContentTypeGroup A eZ\Publish\Core\REST\Client\Input\Parser\ContentTypeGroup instance.
     */
    protected function getEzpublishRest_Input_Parser_ContenttypegroupService()
    {
        $this->services['ezpublish_rest.input.parser.contenttypegroup'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\ContentTypeGroup($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.contenttypegroupinput' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\ContentTypeGroupInput A eZ\Publish\Core\REST\Server\Input\Parser\ContentTypeGroupInput instance.
     */
    protected function getEzpublishRest_Input_Parser_ContenttypegroupinputService()
    {
        $this->services['ezpublish_rest.input.parser.contenttypegroupinput'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\ContentTypeGroupInput($this->get('ezpublish.api.service.content_type'), $this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.contenttypegrouplist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\ContentTypeGroupList A eZ\Publish\Core\REST\Client\Input\Parser\ContentTypeGroupList instance.
     */
    protected function getEzpublishRest_Input_Parser_ContenttypegrouplistService()
    {
        $this->services['ezpublish_rest.input.parser.contenttypegrouplist'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\ContentTypeGroupList($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.contenttypegroupreflist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\ContentTypeGroupRefList A eZ\Publish\Core\REST\Client\Input\Parser\ContentTypeGroupRefList instance.
     */
    protected function getEzpublishRest_Input_Parser_ContenttypegroupreflistService()
    {
        $this->services['ezpublish_rest.input.parser.contenttypegroupreflist'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\ContentTypeGroupRefList($this->get('ezpublish_rest.parser_tools'), $this->get('ezpublish.api.service.content_type'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.contenttypelist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\ContentTypeList A eZ\Publish\Core\REST\Client\Input\Parser\ContentTypeList instance.
     */
    protected function getEzpublishRest_Input_Parser_ContenttypelistService()
    {
        $this->services['ezpublish_rest.input.parser.contenttypelist'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\ContentTypeList($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.contenttypeupdate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\ContentTypeUpdate A eZ\Publish\Core\REST\Server\Input\Parser\ContentTypeUpdate instance.
     */
    protected function getEzpublishRest_Input_Parser_ContenttypeupdateService()
    {
        $this->services['ezpublish_rest.input.parser.contenttypeupdate'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\ContentTypeUpdate($this->get('ezpublish.api.service.content_type'), $this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.contentupdate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\ContentUpdate A eZ\Publish\Core\REST\Server\Input\Parser\ContentUpdate instance.
     */
    protected function getEzpublishRest_Input_Parser_ContentupdateService()
    {
        $this->services['ezpublish_rest.input.parser.contentupdate'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\ContentUpdate();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.errormessage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\ErrorMessage A eZ\Publish\Core\REST\Client\Input\Parser\ErrorMessage instance.
     */
    protected function getEzpublishRest_Input_Parser_ErrormessageService()
    {
        $this->services['ezpublish_rest.input.parser.errormessage'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\ErrorMessage($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.fielddefinition' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\FieldDefinition A eZ\Publish\Core\REST\Client\Input\Parser\FieldDefinition instance.
     */
    protected function getEzpublishRest_Input_Parser_FielddefinitionService()
    {
        $this->services['ezpublish_rest.input.parser.fielddefinition'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\FieldDefinition($this->get('ezpublish_rest.parser_tools'), $this->get('ezpublish_rest.field_type_parser'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.fielddefinitioncreate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\FieldDefinitionCreate A eZ\Publish\Core\REST\Server\Input\Parser\FieldDefinitionCreate instance.
     */
    protected function getEzpublishRest_Input_Parser_FielddefinitioncreateService()
    {
        $this->services['ezpublish_rest.input.parser.fielddefinitioncreate'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\FieldDefinitionCreate($this->get('ezpublish.api.service.content_type'), $this->get('ezpublish_rest.field_type_parser'), $this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.fielddefinitionlist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\FieldDefinitionList A eZ\Publish\Core\REST\Client\Input\Parser\FieldDefinitionList instance.
     */
    protected function getEzpublishRest_Input_Parser_FielddefinitionlistService()
    {
        $this->services['ezpublish_rest.input.parser.fielddefinitionlist'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\FieldDefinitionList($this->get('ezpublish_rest.parser_tools'), $this->get('ezpublish.api.service.content_type'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.fielddefinitionupdate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\FieldDefinitionUpdate A eZ\Publish\Core\REST\Server\Input\Parser\FieldDefinitionUpdate instance.
     */
    protected function getEzpublishRest_Input_Parser_FielddefinitionupdateService()
    {
        $this->services['ezpublish_rest.input.parser.fielddefinitionupdate'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\FieldDefinitionUpdate($this->get('ezpublish.api.service.content_type'), $this->get('ezpublish_rest.field_type_parser'), $this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.cgriterion.field' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\Field A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\Field instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Cgriterion_FieldService()
    {
        $this->services['ezpublish_rest.input.parser.internal.cgriterion.field'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\Field();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.ancestor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\Ancestor A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\Ancestor instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_AncestorService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.ancestor'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\Ancestor();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.contentid' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ContentId A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ContentId instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_ContentidService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.contentid'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ContentId();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.contentquery' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\ContentQuery A eZ\Publish\Core\REST\Server\Input\Parser\ContentQuery instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_ContentqueryService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.contentquery'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\ContentQuery();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.contentremoteid' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ContentRemoteId A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ContentRemoteId instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_ContentremoteidService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.contentremoteid'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ContentRemoteId();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.contenttypegroupid' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ContentTypeGroupId A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ContentTypeGroupId instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_ContenttypegroupidService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.contenttypegroupid'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ContentTypeGroupId();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.contenttypeid' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ContentTypeId A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ContentTypeId instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_ContenttypeidService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.contenttypeid'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ContentTypeId();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.contenttypeidentifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ContentTypeIdentifier A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ContentTypeIdentifier instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_ContenttypeidentifierService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.contenttypeidentifier'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ContentTypeIdentifier($this->get('ezpublish.api.service.content_type'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.datemetadata' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\DateMetadata A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\DateMetadata instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_DatemetadataService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.datemetadata'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\DateMetadata();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.fulltext' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\FullText A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\FullText instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_FulltextService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.fulltext'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\FullText();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.languagecode' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\LanguageCode A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\LanguageCode instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_LanguagecodeService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.languagecode'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\LanguageCode();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.locationid' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\LocationId A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\LocationId instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_LocationidService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.locationid'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\LocationId();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.locationquery' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\LocationQuery A eZ\Publish\Core\REST\Server\Input\Parser\LocationQuery instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_LocationqueryService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.locationquery'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\LocationQuery();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.locationremoteid' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\LocationRemoteId A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\LocationRemoteId instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_LocationremoteidService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.locationremoteid'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\LocationRemoteId();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.logicaland' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\LogicalAnd A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\LogicalAnd instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_LogicalandService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.logicaland'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\LogicalAnd();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.logicalnot' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\LogicalNot A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\LogicalNot instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_LogicalnotService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.logicalnot'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\LogicalNot();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.logicaloperator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\LogicalOperator A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\LogicalOperator instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_LogicaloperatorService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.logicaloperator'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\LogicalOperator();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.logicalor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\LogicalOr A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\LogicalOr instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_LogicalorService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.logicalor'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\LogicalOr();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.morelikethis' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\MoreLikeThis A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\MoreLikeThis instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_MorelikethisService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.morelikethis'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\MoreLikeThis();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.objectstateid' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ObjectStateId A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ObjectStateId instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_ObjectstateidService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.objectstateid'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ObjectStateId();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.operator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\Operator A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\Operator instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_OperatorService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.operator'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\Operator();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.parentlocationid' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ParentLocationId A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ParentLocationId instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_ParentlocationidService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.parentlocationid'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ParentLocationId();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.parentlocationremoteid' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ParentLocationRemoteId A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ParentLocationRemoteId instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_ParentlocationremoteidService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.parentlocationremoteid'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\ParentLocationRemoteId($this->get('ezpublish.api.service.location'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.sectionid' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\SectionId A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\SectionId instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_SectionidService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.sectionid'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\SectionId();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.sectionidentifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\SectionIdentifier A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\SectionIdentifier instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_SectionidentifierService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.sectionidentifier'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\SectionIdentifier($this->get('ezpublish.api.service.section'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.subtree' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\Subtree A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\Subtree instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_SubtreeService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.subtree'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\Subtree();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.usermetadata' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\UserMetadata A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\UserMetadata instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_UsermetadataService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.usermetadata'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\UserMetadata();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.internal.criterion.visibility' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\Visibility A eZ\Publish\Core\REST\Server\Input\Parser\Criterion\Visibility instance.
     */
    protected function getEzpublishRest_Input_Parser_Internal_Criterion_VisibilityService()
    {
        $this->services['ezpublish_rest.input.parser.internal.criterion.visibility'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\Criterion\Visibility();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.limitation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\Limitation A eZ\Publish\Core\REST\Client\Input\Parser\Limitation instance.
     */
    protected function getEzpublishRest_Input_Parser_LimitationService()
    {
        $this->services['ezpublish_rest.input.parser.limitation'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\Limitation($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\Location A eZ\Publish\Core\REST\Client\Input\Parser\Location instance.
     */
    protected function getEzpublishRest_Input_Parser_LocationService()
    {
        $this->services['ezpublish_rest.input.parser.location'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\Location($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.locationcreate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\LocationCreate A eZ\Publish\Core\REST\Server\Input\Parser\LocationCreate instance.
     */
    protected function getEzpublishRest_Input_Parser_LocationcreateService()
    {
        $this->services['ezpublish_rest.input.parser.locationcreate'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\LocationCreate($this->get('ezpublish.api.service.location'), $this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.locationupdate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\LocationUpdate A eZ\Publish\Core\REST\Server\Input\Parser\LocationUpdate instance.
     */
    protected function getEzpublishRest_Input_Parser_LocationupdateService()
    {
        $this->services['ezpublish_rest.input.parser.locationupdate'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\LocationUpdate($this->get('ezpublish.api.service.location'), $this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.objectstate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\ObjectState A eZ\Publish\Core\REST\Client\Input\Parser\ObjectState instance.
     */
    protected function getEzpublishRest_Input_Parser_ObjectstateService()
    {
        $this->services['ezpublish_rest.input.parser.objectstate'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\ObjectState($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.objectstatecreate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\ObjectStateCreate A eZ\Publish\Core\REST\Server\Input\Parser\ObjectStateCreate instance.
     */
    protected function getEzpublishRest_Input_Parser_ObjectstatecreateService()
    {
        $this->services['ezpublish_rest.input.parser.objectstatecreate'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\ObjectStateCreate($this->get('ezpublish.api.service.object_state'), $this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.objectstategroup' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\ObjectStateGroup A eZ\Publish\Core\REST\Client\Input\Parser\ObjectStateGroup instance.
     */
    protected function getEzpublishRest_Input_Parser_ObjectstategroupService()
    {
        $this->services['ezpublish_rest.input.parser.objectstategroup'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\ObjectStateGroup($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.objectstategroupcreate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\ObjectStateGroupCreate A eZ\Publish\Core\REST\Server\Input\Parser\ObjectStateGroupCreate instance.
     */
    protected function getEzpublishRest_Input_Parser_ObjectstategroupcreateService()
    {
        $this->services['ezpublish_rest.input.parser.objectstategroupcreate'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\ObjectStateGroupCreate($this->get('ezpublish.api.service.object_state'), $this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.objectstategrouplist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\ObjectStateGroupList A eZ\Publish\Core\REST\Client\Input\Parser\ObjectStateGroupList instance.
     */
    protected function getEzpublishRest_Input_Parser_ObjectstategrouplistService()
    {
        $this->services['ezpublish_rest.input.parser.objectstategrouplist'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\ObjectStateGroupList($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.objectstategroupupdate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\ObjectStateGroupUpdate A eZ\Publish\Core\REST\Server\Input\Parser\ObjectStateGroupUpdate instance.
     */
    protected function getEzpublishRest_Input_Parser_ObjectstategroupupdateService()
    {
        $this->services['ezpublish_rest.input.parser.objectstategroupupdate'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\ObjectStateGroupUpdate($this->get('ezpublish.api.service.object_state'), $this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.objectstatelist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\ObjectStateList A eZ\Publish\Core\REST\Client\Input\Parser\ObjectStateList instance.
     */
    protected function getEzpublishRest_Input_Parser_ObjectstatelistService()
    {
        $this->services['ezpublish_rest.input.parser.objectstatelist'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\ObjectStateList($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.objectstateupdate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\ObjectStateUpdate A eZ\Publish\Core\REST\Server\Input\Parser\ObjectStateUpdate instance.
     */
    protected function getEzpublishRest_Input_Parser_ObjectstateupdateService()
    {
        $this->services['ezpublish_rest.input.parser.objectstateupdate'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\ObjectStateUpdate($this->get('ezpublish.api.service.object_state'), $this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.policy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\Policy A eZ\Publish\Core\REST\Client\Input\Parser\Policy instance.
     */
    protected function getEzpublishRest_Input_Parser_PolicyService()
    {
        $this->services['ezpublish_rest.input.parser.policy'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\Policy($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.policycreate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\PolicyCreate A eZ\Publish\Core\REST\Server\Input\Parser\PolicyCreate instance.
     */
    protected function getEzpublishRest_Input_Parser_PolicycreateService()
    {
        $this->services['ezpublish_rest.input.parser.policycreate'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\PolicyCreate($this->get('ezpublish.api.service.role'), $this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.policylist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\PolicyList A eZ\Publish\Core\REST\Client\Input\Parser\PolicyList instance.
     */
    protected function getEzpublishRest_Input_Parser_PolicylistService()
    {
        $this->services['ezpublish_rest.input.parser.policylist'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\PolicyList($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.policyupdate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\PolicyUpdate A eZ\Publish\Core\REST\Server\Input\Parser\PolicyUpdate instance.
     */
    protected function getEzpublishRest_Input_Parser_PolicyupdateService()
    {
        $this->services['ezpublish_rest.input.parser.policyupdate'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\PolicyUpdate($this->get('ezpublish.api.service.role'), $this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.relation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\Relation A eZ\Publish\Core\REST\Client\Input\Parser\Relation instance.
     */
    protected function getEzpublishRest_Input_Parser_RelationService()
    {
        $this->services['ezpublish_rest.input.parser.relation'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\Relation($this->get('ezpublish.api.service.content'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.relationcreate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\RelationCreate A eZ\Publish\Core\REST\Server\Input\Parser\RelationCreate instance.
     */
    protected function getEzpublishRest_Input_Parser_RelationcreateService()
    {
        $this->services['ezpublish_rest.input.parser.relationcreate'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\RelationCreate();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.relationlist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\RelationList A eZ\Publish\Core\REST\Client\Input\Parser\RelationList instance.
     */
    protected function getEzpublishRest_Input_Parser_RelationlistService()
    {
        $this->services['ezpublish_rest.input.parser.relationlist'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\RelationList($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.role' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\Role A eZ\Publish\Core\REST\Client\Input\Parser\Role instance.
     */
    protected function getEzpublishRest_Input_Parser_RoleService()
    {
        $this->services['ezpublish_rest.input.parser.role'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\Role($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.roleassigninput' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\RoleAssignInput A eZ\Publish\Core\REST\Server\Input\Parser\RoleAssignInput instance.
     */
    protected function getEzpublishRest_Input_Parser_RoleassigninputService()
    {
        $this->services['ezpublish_rest.input.parser.roleassigninput'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\RoleAssignInput($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.roleassignment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\RoleAssignment A eZ\Publish\Core\REST\Client\Input\Parser\RoleAssignment instance.
     */
    protected function getEzpublishRest_Input_Parser_RoleassignmentService()
    {
        $this->services['ezpublish_rest.input.parser.roleassignment'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\RoleAssignment($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.roleassignmentlist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\RoleAssignmentList A eZ\Publish\Core\REST\Client\Input\Parser\RoleAssignmentList instance.
     */
    protected function getEzpublishRest_Input_Parser_RoleassignmentlistService()
    {
        $this->services['ezpublish_rest.input.parser.roleassignmentlist'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\RoleAssignmentList($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.roleinput' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\RoleInput A eZ\Publish\Core\REST\Server\Input\Parser\RoleInput instance.
     */
    protected function getEzpublishRest_Input_Parser_RoleinputService()
    {
        $this->services['ezpublish_rest.input.parser.roleinput'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\RoleInput($this->get('ezpublish.api.service.role'), $this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.rolelist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\RoleList A eZ\Publish\Core\REST\Client\Input\Parser\RoleList instance.
     */
    protected function getEzpublishRest_Input_Parser_RolelistService()
    {
        $this->services['ezpublish_rest.input.parser.rolelist'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\RoleList($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.searchhit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\SearchHit A eZ\Publish\Core\REST\Client\Input\Parser\SearchHit instance.
     */
    protected function getEzpublishRest_Input_Parser_SearchhitService()
    {
        $this->services['ezpublish_rest.input.parser.searchhit'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\SearchHit();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.section' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\Section A eZ\Publish\Core\REST\Client\Input\Parser\Section instance.
     */
    protected function getEzpublishRest_Input_Parser_SectionService()
    {
        $this->services['ezpublish_rest.input.parser.section'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\Section($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.sectioninput' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\SectionInput A eZ\Publish\Core\REST\Server\Input\Parser\SectionInput instance.
     */
    protected function getEzpublishRest_Input_Parser_SectioninputService()
    {
        $this->services['ezpublish_rest.input.parser.sectioninput'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\SectionInput($this->get('ezpublish.api.service.section'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.sectionlist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\SectionList A eZ\Publish\Core\REST\Client\Input\Parser\SectionList instance.
     */
    protected function getEzpublishRest_Input_Parser_SectionlistService()
    {
        $this->services['ezpublish_rest.input.parser.sectionlist'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\SectionList($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.session' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\Session A eZ\Publish\Core\REST\Client\Input\Parser\Session instance.
     */
    protected function getEzpublishRest_Input_Parser_SessionService()
    {
        $this->services['ezpublish_rest.input.parser.session'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\Session($this->get('ezpublish_rest.parser_tools'), $this->get('ezpublish.api.service.user'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.sessioninput' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\SessionInput A eZ\Publish\Core\REST\Server\Input\Parser\SessionInput instance.
     */
    protected function getEzpublishRest_Input_Parser_SessioninputService()
    {
        $this->services['ezpublish_rest.input.parser.sessioninput'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\SessionInput($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.urlaliascreate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\URLAliasCreate A eZ\Publish\Core\REST\Server\Input\Parser\URLAliasCreate instance.
     */
    protected function getEzpublishRest_Input_Parser_UrlaliascreateService()
    {
        $this->services['ezpublish_rest.input.parser.urlaliascreate'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\URLAliasCreate($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.urlwildcardcreate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\URLWildcardCreate A eZ\Publish\Core\REST\Server\Input\Parser\URLWildcardCreate instance.
     */
    protected function getEzpublishRest_Input_Parser_UrlwildcardcreateService()
    {
        $this->services['ezpublish_rest.input.parser.urlwildcardcreate'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\URLWildcardCreate($this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.usercreate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\UserCreate A eZ\Publish\Core\REST\Server\Input\Parser\UserCreate instance.
     */
    protected function getEzpublishRest_Input_Parser_UsercreateService()
    {
        $this->services['ezpublish_rest.input.parser.usercreate'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\UserCreate($this->get('ezpublish.api.service.user'), $this->get('ezpublish.api.service.content_type'), $this->get('ezpublish_rest.field_type_parser'), $this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.usergroupcreate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\UserGroupCreate A eZ\Publish\Core\REST\Server\Input\Parser\UserGroupCreate instance.
     */
    protected function getEzpublishRest_Input_Parser_UsergroupcreateService()
    {
        $this->services['ezpublish_rest.input.parser.usergroupcreate'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\UserGroupCreate($this->get('ezpublish.api.service.user'), $this->get('ezpublish.api.service.content_type'), $this->get('ezpublish_rest.field_type_parser'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.usergroupupdate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\UserGroupUpdate A eZ\Publish\Core\REST\Server\Input\Parser\UserGroupUpdate instance.
     */
    protected function getEzpublishRest_Input_Parser_UsergroupupdateService()
    {
        $this->services['ezpublish_rest.input.parser.usergroupupdate'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\UserGroupUpdate($this->get('ezpublish.api.service.user'), $this->get('ezpublish.api.service.content'), $this->get('ezpublish.api.service.location'), $this->get('ezpublish_rest.field_type_parser'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.userlist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\UserList A eZ\Publish\Core\REST\Client\Input\Parser\UserList instance.
     */
    protected function getEzpublishRest_Input_Parser_UserlistService()
    {
        $this->services['ezpublish_rest.input.parser.userlist'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\UserList($this->get('ezpublish_rest.parser_tools'), $this->get('ezpublish.api.service.user'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.userreflist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\UserRefList A eZ\Publish\Core\REST\Client\Input\Parser\UserRefList instance.
     */
    protected function getEzpublishRest_Input_Parser_UserreflistService()
    {
        $this->services['ezpublish_rest.input.parser.userreflist'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\UserRefList($this->get('ezpublish_rest.parser_tools'), $this->get('ezpublish.api.service.user'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.userupdate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\UserUpdate A eZ\Publish\Core\REST\Server\Input\Parser\UserUpdate instance.
     */
    protected function getEzpublishRest_Input_Parser_UserupdateService()
    {
        $this->services['ezpublish_rest.input.parser.userupdate'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\UserUpdate($this->get('ezpublish.api.service.user'), $this->get('ezpublish.api.service.content'), $this->get('ezpublish_rest.field_type_parser'), $this->get('ezpublish_rest.parser_tools'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.version' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\Version A eZ\Publish\Core\REST\Client\Input\Parser\Version instance.
     */
    protected function getEzpublishRest_Input_Parser_VersionService()
    {
        $this->services['ezpublish_rest.input.parser.version'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\Version($this->get('ezpublish_rest.parser_tools'), $this->get('ezpublish.api.service.content'), $this->get('ezpublish.api.service.content_type'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.versioninfo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\VersionInfo A eZ\Publish\Core\REST\Client\Input\Parser\VersionInfo instance.
     */
    protected function getEzpublishRest_Input_Parser_VersioninfoService()
    {
        $this->services['ezpublish_rest.input.parser.versioninfo'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\VersionInfo($this->get('ezpublish_rest.parser_tools'), $this->get('ezpublish.api.service.content'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.versionupdate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\VersionUpdate A eZ\Publish\Core\REST\Server\Input\Parser\VersionUpdate instance.
     */
    protected function getEzpublishRest_Input_Parser_VersionupdateService()
    {
        $this->services['ezpublish_rest.input.parser.versionupdate'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\VersionUpdate($this->get('ezpublish.api.service.content'), $this->get('ezpublish_rest.field_type_parser'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.view' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\View A eZ\Publish\Core\REST\Client\Input\Parser\View instance.
     */
    protected function getEzpublishRest_Input_Parser_ViewService()
    {
        $this->services['ezpublish_rest.input.parser.view'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\View();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.viewinput' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\ViewInput A eZ\Publish\Core\REST\Server\Input\Parser\ViewInput instance.
     */
    protected function getEzpublishRest_Input_Parser_ViewinputService()
    {
        $this->services['ezpublish_rest.input.parser.viewinput'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\ViewInput();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.viewinputonedotone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Input\Parser\ViewInputOneDotOne A eZ\Publish\Core\REST\Server\Input\Parser\ViewInputOneDotOne instance.
     */
    protected function getEzpublishRest_Input_Parser_ViewinputonedotoneService()
    {
        $this->services['ezpublish_rest.input.parser.viewinputonedotone'] = $instance = new \eZ\Publish\Core\REST\Server\Input\Parser\ViewInputOneDotOne();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parser.viewresult' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Input\Parser\ViewResult A eZ\Publish\Core\REST\Client\Input\Parser\ViewResult instance.
     */
    protected function getEzpublishRest_Input_Parser_ViewresultService()
    {
        $this->services['ezpublish_rest.input.parser.viewresult'] = $instance = new \eZ\Publish\Core\REST\Client\Input\Parser\ViewResult();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.input.parsing_dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\Input\ParsingDispatcher A eZ\Publish\Core\REST\Common\Input\ParsingDispatcher instance.
     */
    protected function getEzpublishRest_Input_ParsingDispatcherService()
    {
        $this->services['ezpublish_rest.input.parsing_dispatcher'] = $instance = new \eZ\Publish\Core\REST\Common\Input\ParsingDispatcher();

        $instance->addParser('application/vnd.ez.api.ContentObjectStates', $this->get('ezpublish_rest.input.parser.contentobjectstates'));
        $instance->addParser('application/vnd.ez.api.ContentCreate', $this->get('ezpublish_rest.input.parser.contentcreate'));
        $instance->addParser('application/vnd.ez.api.ContentUpdate', $this->get('ezpublish_rest.input.parser.contentupdate'));
        $instance->addParser('application/vnd.ez.api.ContentTypeCreate', $this->get('ezpublish_rest.input.parser.contenttypecreate'));
        $instance->addParser('application/vnd.ez.api.ContentTypeGroupInput', $this->get('ezpublish_rest.input.parser.contenttypegroupinput'));
        $instance->addParser('application/vnd.ez.api.ContentTypeUpdate', $this->get('ezpublish_rest.input.parser.contenttypeupdate'));
        $instance->addParser('application/vnd.ez.api.FieldDefinitionCreate', $this->get('ezpublish_rest.input.parser.fielddefinitioncreate'));
        $instance->addParser('application/vnd.ez.api.FieldDefinitionUpdate', $this->get('ezpublish_rest.input.parser.fielddefinitionupdate'));
        $instance->addParser('application/vnd.ez.api.LocationCreate', $this->get('ezpublish_rest.input.parser.locationcreate'));
        $instance->addParser('application/vnd.ez.api.LocationUpdate', $this->get('ezpublish_rest.input.parser.locationupdate'));
        $instance->addParser('application/vnd.ez.api.ObjectStateGroupCreate', $this->get('ezpublish_rest.input.parser.objectstategroupcreate'));
        $instance->addParser('application/vnd.ez.api.ObjectStateGroupUpdate', $this->get('ezpublish_rest.input.parser.objectstategroupupdate'));
        $instance->addParser('application/vnd.ez.api.ObjectStateCreate', $this->get('ezpublish_rest.input.parser.objectstatecreate'));
        $instance->addParser('application/vnd.ez.api.ObjectStateUpdate', $this->get('ezpublish_rest.input.parser.objectstateupdate'));
        $instance->addParser('application/vnd.ez.api.PolicyCreate', $this->get('ezpublish_rest.input.parser.policycreate'));
        $instance->addParser('application/vnd.ez.api.PolicyUpdate', $this->get('ezpublish_rest.input.parser.policyupdate'));
        $instance->addParser('application/vnd.ez.api.RelationCreate', $this->get('ezpublish_rest.input.parser.relationcreate'));
        $instance->addParser('application/vnd.ez.api.RoleAssignInput', $this->get('ezpublish_rest.input.parser.roleassigninput'));
        $instance->addParser('application/vnd.ez.api.RoleInput', $this->get('ezpublish_rest.input.parser.roleinput'));
        $instance->addParser('application/vnd.ez.api.SectionInput', $this->get('ezpublish_rest.input.parser.sectioninput'));
        $instance->addParser('application/vnd.ez.api.SessionInput', $this->get('ezpublish_rest.input.parser.sessioninput'));
        $instance->addParser('application/vnd.ez.api.UserGroupUpdate', $this->get('ezpublish_rest.input.parser.usergroupupdate'));
        $instance->addParser('application/vnd.ez.api.UrlAliasCreate', $this->get('ezpublish_rest.input.parser.urlaliascreate'));
        $instance->addParser('application/vnd.ez.api.UrlWildcardCreate', $this->get('ezpublish_rest.input.parser.urlwildcardcreate'));
        $instance->addParser('application/vnd.ez.api.UserCreate', $this->get('ezpublish_rest.input.parser.usercreate'));
        $instance->addParser('application/vnd.ez.api.UserGroupCreate', $this->get('ezpublish_rest.input.parser.usergroupcreate'));
        $instance->addParser('application/vnd.ez.api.UserUpdate', $this->get('ezpublish_rest.input.parser.userupdate'));
        $instance->addParser('application/vnd.ez.api.ViewInput', $this->get('ezpublish_rest.input.parser.viewinput'));
        $instance->addParser('application/vnd.ez.api.ViewInput; version=1.1', $this->get('ezpublish_rest.input.parser.viewinputonedotone'));
        $instance->addParser('application/vnd.ez.api.View', $this->get('ezpublish_rest.input.parser.view'));
        $instance->addParser('application/vnd.ez.api.ViewResult', $this->get('ezpublish_rest.input.parser.viewresult'));
        $instance->addParser('application/vnd.ez.api.searchHit', $this->get('ezpublish_rest.input.parser.searchhit'));
        $instance->addParser('application/vnd.ez.api.VersionUpdate', $this->get('ezpublish_rest.input.parser.versionupdate'));
        $instance->addParser('application/vnd.ez.api.internal.ContentQuery', $this->get('ezpublish_rest.input.parser.internal.criterion.contentquery'));
        $instance->addParser('application/vnd.ez.api.internal.LocationQuery', $this->get('ezpublish_rest.input.parser.internal.criterion.locationquery'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.Ancestor', $this->get('ezpublish_rest.input.parser.internal.criterion.ancestor'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.ContentId', $this->get('ezpublish_rest.input.parser.internal.criterion.contentid'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.ContentRemoteId', $this->get('ezpublish_rest.input.parser.internal.criterion.contentremoteid'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.ContentTypeGroupId', $this->get('ezpublish_rest.input.parser.internal.criterion.contenttypegroupid'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.ContentTypeId', $this->get('ezpublish_rest.input.parser.internal.criterion.contenttypeid'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.ContentTypeIdentifier', $this->get('ezpublish_rest.input.parser.internal.criterion.contenttypeidentifier'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.DateMetadata', $this->get('ezpublish_rest.input.parser.internal.criterion.datemetadata'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.Field', $this->get('ezpublish_rest.input.parser.internal.cgriterion.field'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.FullText', $this->get('ezpublish_rest.input.parser.internal.criterion.fulltext'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.LanguageCode', $this->get('ezpublish_rest.input.parser.internal.criterion.languagecode'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.LocationId', $this->get('ezpublish_rest.input.parser.internal.criterion.locationid'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.LocationRemoteId', $this->get('ezpublish_rest.input.parser.internal.criterion.locationremoteid'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.LogicalAnd', $this->get('ezpublish_rest.input.parser.internal.criterion.logicaland'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.LogicalNot', $this->get('ezpublish_rest.input.parser.internal.criterion.logicalnot'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.LogicalOperator', $this->get('ezpublish_rest.input.parser.internal.criterion.logicaloperator'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.LogicalOr', $this->get('ezpublish_rest.input.parser.internal.criterion.logicalor'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.MoreLikeThis', $this->get('ezpublish_rest.input.parser.internal.criterion.morelikethis'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.Operator', $this->get('ezpublish_rest.input.parser.internal.criterion.operator'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.ParentLocationId', $this->get('ezpublish_rest.input.parser.internal.criterion.parentlocationid'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.ParentLocationRemoteId', $this->get('ezpublish_rest.input.parser.internal.criterion.parentlocationremoteid'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.SectionIdentifier', $this->get('ezpublish_rest.input.parser.internal.criterion.sectionidentifier'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.SectionId', $this->get('ezpublish_rest.input.parser.internal.criterion.sectionid'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.Subtree', $this->get('ezpublish_rest.input.parser.internal.criterion.subtree'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.UserMetadata', $this->get('ezpublish_rest.input.parser.internal.criterion.usermetadata'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.ObjectStateId', $this->get('ezpublish_rest.input.parser.internal.criterion.objectstateid'));
        $instance->addParser('application/vnd.ez.api.internal.criterion.Visibility', $this->get('ezpublish_rest.input.parser.internal.criterion.visibility'));
        $instance->addParser('application/vnd.ez.api.Content', $this->get('ezpublish_rest.input.parser.content'));
        $instance->addParser('application/vnd.ez.api.ContentInfo', $this->get('ezpublish_rest.input.parser.contentinfo'));
        $instance->addParser('application/vnd.ez.api.ContentList', $this->get('ezpublish_rest.input.parser.contentlist'));
        $instance->addParser('application/vnd.ez.api.ContentType', $this->get('ezpublish_rest.input.parser.contenttype'));
        $instance->addParser('application/vnd.ez.api.ContentTypeList', $this->get('ezpublish_rest.input.parser.contenttypelist'));
        $instance->addParser('application/vnd.ez.api.ContentTypeGroup', $this->get('ezpublish_rest.input.parser.contenttypegroup'));
        $instance->addParser('application/vnd.ez.api.ContentTypeGroupList', $this->get('ezpublish_rest.input.parser.contenttypegrouplist'));
        $instance->addParser('application/vnd.ez.api.ContentTypeGroupRefList', $this->get('ezpublish_rest.input.parser.contenttypegroupreflist'));
        $instance->addParser('application/vnd.ez.api.ErrorMessage', $this->get('ezpublish_rest.input.parser.errormessage'));
        $instance->addParser('application/vnd.ez.api.FieldDefinition', $this->get('ezpublish_rest.input.parser.fielddefinition'));
        $instance->addParser('application/vnd.ez.api.FieldDefinitionList', $this->get('ezpublish_rest.input.parser.fielddefinitionlist'));
        $instance->addParser('application/vnd.ez.api.Limitation', $this->get('ezpublish_rest.input.parser.limitation'));
        $instance->addParser('application/vnd.ez.api.Location', $this->get('ezpublish_rest.input.parser.location'));
        $instance->addParser('application/vnd.ez.api.ObjectState', $this->get('ezpublish_rest.input.parser.objectstate'));
        $instance->addParser('application/vnd.ez.api.ObjectStateList', $this->get('ezpublish_rest.input.parser.objectstatelist'));
        $instance->addParser('application/vnd.ez.api.ObjectStateGroup', $this->get('ezpublish_rest.input.parser.objectstategroup'));
        $instance->addParser('application/vnd.ez.api.ObjectStateGroupList', $this->get('ezpublish_rest.input.parser.objectstategrouplist'));
        $instance->addParser('application/vnd.ez.api.Policy', $this->get('ezpublish_rest.input.parser.policy'));
        $instance->addParser('application/vnd.ez.api.PolicyList', $this->get('ezpublish_rest.input.parser.policylist'));
        $instance->addParser('application/vnd.ez.api.Relation', $this->get('ezpublish_rest.input.parser.relation'));
        $instance->addParser('application/vnd.ez.api.RelationList', $this->get('ezpublish_rest.input.parser.relationlist'));
        $instance->addParser('application/vnd.ez.api.Role', $this->get('ezpublish_rest.input.parser.role'));
        $instance->addParser('application/vnd.ez.api.RoleAssignment', $this->get('ezpublish_rest.input.parser.roleassignment'));
        $instance->addParser('application/vnd.ez.api.RoleAssignmentList', $this->get('ezpublish_rest.input.parser.roleassignmentlist'));
        $instance->addParser('application/vnd.ez.api.RoleList', $this->get('ezpublish_rest.input.parser.rolelist'));
        $instance->addParser('application/vnd.ez.api.Section', $this->get('ezpublish_rest.input.parser.section'));
        $instance->addParser('application/vnd.ez.api.SectionList', $this->get('ezpublish_rest.input.parser.sectionlist'));
        $instance->addParser('application/vnd.ez.api.VersionInfo', $this->get('ezpublish_rest.input.parser.versioninfo'));
        $instance->addParser('application/vnd.ez.api.Version', $this->get('ezpublish_rest.input.parser.version'));
        $instance->addParser('application/vnd.ez.api.Session', $this->get('ezpublish_rest.input.parser.session'));
        $instance->addParser('application/vnd.ez.api.UserRefList', $this->get('ezpublish_rest.input.parser.userreflist'));
        $instance->addParser('application/vnd.ez.api.UserList', $this->get('ezpublish_rest.input.parser.userlist'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.generator.json' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\Output\Generator\Json A eZ\Publish\Core\REST\Common\Output\Generator\Json instance.
     */
    protected function getEzpublishRest_Output_Generator_JsonService()
    {
        $this->services['ezpublish_rest.output.generator.json'] = $instance = new \eZ\Publish\Core\REST\Common\Output\Generator\Json($this->get('ezpublish_rest.output.generator.json.field_type_hash_generator'));

        $instance->setFormatOutput(true);

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.generator.json.field_type_hash_generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\Output\Generator\Json\FieldTypeHashGenerator A eZ\Publish\Core\REST\Common\Output\Generator\Json\FieldTypeHashGenerator instance.
     */
    protected function getEzpublishRest_Output_Generator_Json_FieldTypeHashGeneratorService()
    {
        return $this->services['ezpublish_rest.output.generator.json.field_type_hash_generator'] = new \eZ\Publish\Core\REST\Common\Output\Generator\Json\FieldTypeHashGenerator();
    }

    /**
     * Gets the 'ezpublish_rest.output.generator.xml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\Output\Generator\Xml A eZ\Publish\Core\REST\Common\Output\Generator\Xml instance.
     */
    protected function getEzpublishRest_Output_Generator_XmlService()
    {
        $this->services['ezpublish_rest.output.generator.xml'] = $instance = new \eZ\Publish\Core\REST\Common\Output\Generator\Xml($this->get('ezpublish_rest.output.generator.xml.field_type_hash_generator'));

        $instance->setFormatOutput(true);

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.generator.xml.field_type_hash_generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\Output\Generator\Xml\FieldTypeHashGenerator A eZ\Publish\Core\REST\Common\Output\Generator\Xml\FieldTypeHashGenerator instance.
     */
    protected function getEzpublishRest_Output_Generator_Xml_FieldTypeHashGeneratorService()
    {
        return $this->services['ezpublish_rest.output.generator.xml.field_type_hash_generator'] = new \eZ\Publish\Core\REST\Common\Output\Generator\Xml\FieldTypeHashGenerator();
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.badrequestexception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\BadRequestException A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\BadRequestException instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_BadrequestexceptionService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.badrequestexception'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\BadRequestException(true, $this->get('translator'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.badstateexception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\BadStateException A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\BadStateException instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_BadstateexceptionService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.badstateexception'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\BadStateException(true, $this->get('translator'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.base' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\Output\ValueObjectVisitor A eZ\Publish\Core\REST\Common\Output\ValueObjectVisitor instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_BaseService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.base'] = $instance = new \eZ\Publish\Core\REST\Common\Output\ValueObjectVisitor();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.cached_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CachedValue A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CachedValue instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_CachedValueService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.cached_value'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CachedValue($this->get('ezpublish.config.resolver.chain'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));
        $instance->setRequestStack($this->get('request_stack'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.conflict' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Conflict A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Conflict instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ConflictService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.conflict'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Conflict(true);

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.contentlist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ContentList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ContentList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ContentlistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.contentlist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ContentList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.contentobjectstates' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\Output\ValueObjectVisitor\ContentObjectStates A eZ\Publish\Core\REST\Common\Output\ValueObjectVisitor\ContentObjectStates instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ContentobjectstatesService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.contentobjectstates'] = $instance = new \eZ\Publish\Core\REST\Common\Output\ValueObjectVisitor\ContentObjectStates();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.contenttypecreatestruct' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ContentTypeCreateStruct A eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ContentTypeCreateStruct instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ContenttypecreatestructService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.contenttypecreatestruct'] = $instance = new \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ContentTypeCreateStruct();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.contenttypegroup' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ContentTypeGroup A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ContentTypeGroup instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ContenttypegroupService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.contenttypegroup'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ContentTypeGroup();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.contenttypegroupcreatestruct' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ContentTypeGroupCreateStruct A eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ContentTypeGroupCreateStruct instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ContenttypegroupcreatestructService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.contenttypegroupcreatestruct'] = $instance = new \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ContentTypeGroupCreateStruct();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.contenttypegrouplist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ContentTypeGroupList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ContentTypeGroupList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ContenttypegrouplistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.contenttypegrouplist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ContentTypeGroupList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.contenttypegroupreflist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ContentTypeGroupRefList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ContentTypeGroupRefList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ContenttypegroupreflistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.contenttypegroupreflist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ContentTypeGroupRefList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.contenttypegroupupdatestruct' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ContentTypeGroupUpdateStruct A eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ContentTypeGroupUpdateStruct instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ContenttypegroupupdatestructService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.contenttypegroupupdatestruct'] = $instance = new \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ContentTypeGroupUpdateStruct();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.contenttypeinfolist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ContentTypeInfoList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ContentTypeInfoList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ContenttypeinfolistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.contenttypeinfolist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ContentTypeInfoList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.contenttypelist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ContentTypeList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ContentTypeList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ContenttypelistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.contenttypelist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ContentTypeList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.countrylist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CountryList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CountryList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_CountrylistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.countrylist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CountryList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.createdcontent' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedContent A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedContent instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_CreatedcontentService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.createdcontent'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedContent();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.createdcontenttype' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedContentType A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedContentType instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_CreatedcontenttypeService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.createdcontenttype'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedContentType();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.createdcontenttypegroup' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedContentTypeGroup A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedContentTypeGroup instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_CreatedcontenttypegroupService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.createdcontenttypegroup'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedContentTypeGroup();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.createdfielddefinition' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedFieldDefinition A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedFieldDefinition instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_CreatedfielddefinitionService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.createdfielddefinition'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedFieldDefinition($this->get('ezpublish_rest.field_type_serializer'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.createdlocation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedLocation A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedLocation instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_CreatedlocationService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.createdlocation'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedLocation();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.createdobjectstate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedObjectState A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedObjectState instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_CreatedobjectstateService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.createdobjectstate'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedObjectState();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.createdobjectstategroup' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedObjectStateGroup A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedObjectStateGroup instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_CreatedobjectstategroupService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.createdobjectstategroup'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedObjectStateGroup();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.createdpolicy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedPolicy A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedPolicy instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_CreatedpolicyService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.createdpolicy'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedPolicy();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.createdrelation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedRelation A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedRelation instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_CreatedrelationService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.createdrelation'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedRelation();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.createdrole' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedRole A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedRole instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_CreatedroleService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.createdrole'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedRole();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.createdsection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedSection A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedSection instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_CreatedsectionService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.createdsection'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedSection();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.createdurlalias' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedURLAlias A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedURLAlias instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_CreatedurlaliasService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.createdurlalias'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedURLAlias();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.createdurlwildcard' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedURLWildcard A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedURLWildcard instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_CreatedurlwildcardService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.createdurlwildcard'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedURLWildcard();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.createduser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedUser A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedUser instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_CreateduserService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.createduser'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedUser();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.createdusergroup' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedUserGroup A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedUserGroup instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_CreatedusergroupService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.createdusergroup'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedUserGroup();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.createdversion' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedVersion A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedVersion instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_CreatedversionService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.createdversion'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\CreatedVersion($this->get('ezpublish_rest.field_type_serializer'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\Output\ValueObjectVisitorDispatcher A eZ\Publish\Core\REST\Common\Output\ValueObjectVisitorDispatcher instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_DispatcherService()
    {
        $a = $this->get('ezpublish_rest.output.value_object_visitor.badrequestexception');
        $b = $this->get('ezpublish_rest.output.value_object_visitor.role');
        $c = $this->get('ezpublish_rest.output.value_object_visitor.policy');

        $this->services['ezpublish_rest.output.value_object_visitor.dispatcher'] = $instance = new \eZ\Publish\Core\REST\Common\Output\ValueObjectVisitorDispatcher();

        $instance->addVisitor('\\eZ\\Publish\\API\\Repository\\Exceptions\\InvalidArgumentException', $this->get('ezpublish_rest.output.value_object_visitor.exception.invalidargumentexception'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Exceptions\\InvalidArgumentException', $this->get('ezpublish_rest.output.value_object_visitor.invalidargumentexception'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Exceptions\\NotFoundException', $this->get('ezpublish_rest.output.value_object_visitor.notfoundexception'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Exceptions\\UnauthorizedException', $this->get('ezpublish_rest.output.value_object_visitor.unauthorizedexception'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Exceptions\\BadStateException', $this->get('ezpublish_rest.output.value_object_visitor.badstateexception'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Exceptions\\BadRequestException', $a);
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Common\\Exceptions\\Parser', $a);
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Exceptions\\ForbiddenException', $this->get('ezpublish_rest.output.value_object_visitor.forbiddenexception'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Exceptions\\NotImplementedException', $this->get('ezpublish_rest.output.value_object_visitor.notimplementedexception'));
        $instance->addVisitor('Exception', $this->get('ezpublish_rest.output.value_object_visitor.exception'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\SectionList', $this->get('ezpublish_rest.output.value_object_visitor.sectionlist'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\CreatedSection', $this->get('ezpublish_rest.output.value_object_visitor.createdsection'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Values\\Content\\Section', $this->get('ezpublish_rest.output.value_object_visitor.section'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Values\\Content\\SectionCreateStruct', $this->get('ezpublish_rest.output.value_object_visitor.sectioncreatestruct'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Values\\Content\\SectionUpdateStruct', $this->get('ezpublish_rest.output.value_object_visitor.sectionupdatestruct'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\URLWildcardList', $this->get('ezpublish_rest.output.value_object_visitor.urlwildcardlist'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Values\\Content\\URLWildcard', $this->get('ezpublish_rest.output.value_object_visitor.urlwildcard'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\CreatedURLWildcard', $this->get('ezpublish_rest.output.value_object_visitor.createdurlwildcard'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\URLAliasList', $this->get('ezpublish_rest.output.value_object_visitor.urlaliaslist'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\URLAliasRefList', $this->get('ezpublish_rest.output.value_object_visitor.urlaliasreflist'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Values\\Content\\URLAlias', $this->get('ezpublish_rest.output.value_object_visitor.urlalias'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\CreatedURLAlias', $this->get('ezpublish_rest.output.value_object_visitor.createdurlalias'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\ContentList', $this->get('ezpublish_rest.output.value_object_visitor.contentlist'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\RestContent', $this->get('ezpublish_rest.output.value_object_visitor.restcontent'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\CreatedContent', $this->get('ezpublish_rest.output.value_object_visitor.createdcontent'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\VersionList', $this->get('ezpublish_rest.output.value_object_visitor.versionlist'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\CreatedVersion', $this->get('ezpublish_rest.output.value_object_visitor.createdversion'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Values\\Content\\VersionInfo', $this->get('ezpublish_rest.output.value_object_visitor.versioninfo'));
        $instance->addVisitor('eZ\\Publish\\SPI\\Variation\\Values\\ImageVariation', $this->get('ezpublish_rest.output.value_object_visitor.imagevariation'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\Version', $this->get('ezpublish_rest.output.value_object_visitor.version'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Client\\Values\\Content\\VersionUpdate', $this->get('ezpublish_rest.output.value_object_visitor.versionupdate'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\RestContentCreateStruct', $this->get('ezpublish_rest.output.value_object_visitor.restcontentcreatestruct'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\RestUserGroup', $this->get('ezpublish_rest.output.value_object_visitor.restusergroup'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\CreatedUserGroup', $this->get('ezpublish_rest.output.value_object_visitor.createdusergroup'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\UserGroupList', $this->get('ezpublish_rest.output.value_object_visitor.usergrouplist'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\UserGroupRefList', $this->get('ezpublish_rest.output.value_object_visitor.usergroupreflist'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\UserList', $this->get('ezpublish_rest.output.value_object_visitor.userlist'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\UserRefList', $this->get('ezpublish_rest.output.value_object_visitor.userreflist'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\CreatedUser', $this->get('ezpublish_rest.output.value_object_visitor.createduser'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\RestUser', $this->get('ezpublish_rest.output.value_object_visitor.restuser'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\UserSession', $this->get('ezpublish_rest.output.value_object_visitor.usersession'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\DeletedUserSession', $this->get('ezpublish_rest.output.value_object_visitor.usersessiondeleted'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\SessionInput', $this->get('ezpublish_rest.output.value_object_visitor.sessioninput'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\RestContentType', $this->get('ezpublish_rest.output.value_object_visitor.restcontenttype'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\CreatedContentType', $this->get('ezpublish_rest.output.value_object_visitor.createdcontenttype'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\ContentTypeList', $this->get('ezpublish_rest.output.value_object_visitor.contenttypelist'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\ContentTypeInfoList', $this->get('ezpublish_rest.output.value_object_visitor.contenttypeinfolist'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Values\\ContentType\\ContentTypeGroup', $this->get('ezpublish_rest.output.value_object_visitor.contenttypegroup'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\CreatedContentTypeGroup', $this->get('ezpublish_rest.output.value_object_visitor.createdcontenttypegroup'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\ContentTypeGroupList', $this->get('ezpublish_rest.output.value_object_visitor.contenttypegrouplist'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Values\\ContentType\\ContentTypeGroupCreateStruct', $this->get('ezpublish_rest.output.value_object_visitor.contenttypegroupcreatestruct'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\ContentTypeGroupRefList', $this->get('ezpublish_rest.output.value_object_visitor.contenttypegroupreflist'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\FieldDefinitionList', $this->get('ezpublish_rest.output.value_object_visitor.fielddefinitionlist'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\CreatedFieldDefinition', $this->get('ezpublish_rest.output.value_object_visitor.createdfielddefinition'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\RestFieldDefinition', $this->get('ezpublish_rest.output.value_object_visitor.restfielddefinition'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\FieldDefinitionCreateStruct', $this->get('ezpublish_rest.output.value_object_visitor.fielddefinitioncreatestruct'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Client\\Values\\ContentType\\ContentTypeCreateStruct', $this->get('ezpublish_rest.output.value_object_visitor.contenttypecreatestruct'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Values\\ContentType\\ContentTypeGroupUpdateStruct', $this->get('ezpublish_rest.output.value_object_visitor.contenttypegroupupdatestruct'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\RelationList', $this->get('ezpublish_rest.output.value_object_visitor.relationlist'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\RestRelation', $this->get('ezpublish_rest.output.value_object_visitor.restrelation'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\CreatedRelation', $this->get('ezpublish_rest.output.value_object_visitor.createdrelation'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\RoleList', $this->get('ezpublish_rest.output.value_object_visitor.rolelist'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\CreatedRole', $this->get('ezpublish_rest.output.value_object_visitor.createdrole'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Values\\User\\Role', $b);
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Values\\User\\RoleDraft', $b);
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Values\\User\\Policy', $c);
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Values\\User\\PolicyDraft', $c);
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\CreatedPolicy', $this->get('ezpublish_rest.output.value_object_visitor.createdpolicy'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\PolicyList', $this->get('ezpublish_rest.output.value_object_visitor.policylist'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\RoleAssignmentList', $this->get('ezpublish_rest.output.value_object_visitor.roleassignmentlist'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\RestUserRoleAssignment', $this->get('ezpublish_rest.output.value_object_visitor.restuserroleassignment'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\RestUserGroupRoleAssignment', $this->get('ezpublish_rest.output.value_object_visitor.restusergrouproleassignment'));
        $instance->addVisitor('eZ\\Publish\\REST\\Client\\Values\\User\\RoleCreateStruct', $this->get('ezpublish_rest.output.value_object_visitor.rolecreatestruct'));
        $instance->addVisitor('eZ\\Publish\\REST\\Client\\Values\\User\\RoleUpdateStruct', $this->get('ezpublish_rest.output.value_object_visitor.roleupdatestruct'));
        $instance->addVisitor('eZ\\Publish\\REST\\Client\\Values\\User\\RoleAssignment', $this->get('ezpublish_rest.output.value_object_visitor.roleassignment'));
        $instance->addVisitor('eZ\\Publish\\REST\\Client\\Values\\User\\PolicyCreateStruct', $this->get('ezpublish_rest.output.value_object_visitor.policycreatestruct'));
        $instance->addVisitor('eZ\\Publish\\REST\\Client\\Values\\User\\PolicyUpdateStruct', $this->get('ezpublish_rest.output.value_object_visitor.policyupdatestruct'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Values\\User\\Limitation', $this->get('ezpublish_rest.output.value_object_visitor.limitation'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\CreatedLocation', $this->get('ezpublish_rest.output.value_object_visitor.createdlocation'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\RestLocation', $this->get('ezpublish_rest.output.value_object_visitor.restlocation'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Values\\Content\\Location', $this->get('ezpublish_rest.output.value_object_visitor.location'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\LocationList', $this->get('ezpublish_rest.output.value_object_visitor.locationlist'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Values\\Content\\LocationCreateStruct', $this->get('ezpublish_rest.output.value_object_visitor.locationcreatestruct'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Values\\Content\\LocationUpdateStruct', $this->get('ezpublish_rest.output.value_object_visitor.locationupdatestruct'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\Trash', $this->get('ezpublish_rest.output.value_object_visitor.trash'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\RestTrashItem', $this->get('ezpublish_rest.output.value_object_visitor.resttrashitem'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\RestExecutedView', $this->get('ezpublish_rest.output.value_object_visitor.restexecutedview'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Values\\ObjectState\\ObjectStateGroup', $this->get('ezpublish_rest.output.value_object_visitor.objectstategroup'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\CreatedObjectStateGroup', $this->get('ezpublish_rest.output.value_object_visitor.createdobjectstategroup'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\ObjectStateGroupList', $this->get('ezpublish_rest.output.value_object_visitor.objectstategrouplist'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Common\\Values\\RestObjectState', $this->get('ezpublish_rest.output.value_object_visitor.restobjectstate'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\CreatedObjectState', $this->get('ezpublish_rest.output.value_object_visitor.createdobjectstate'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\ObjectStateList', $this->get('ezpublish_rest.output.value_object_visitor.objectstatelist'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Common\\Values\\ContentObjectStates', $this->get('ezpublish_rest.output.value_object_visitor.contentobjectstates'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Values\\ObjectState\\ObjectStateCreateStruct', $this->get('ezpublish_rest.output.value_object_visitor.objectstatecreatestruct'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Values\\ObjectState\\ObjectStateUpdateStruct', $this->get('ezpublish_rest.output.value_object_visitor.objectstateupdatestruct'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Values\\ObjectState\\ObjectStateGroupCreateStruct', $this->get('ezpublish_rest.output.value_object_visitor.objectstategroupcreatestruct'));
        $instance->addVisitor('eZ\\Publish\\API\\Repository\\Values\\ObjectState\\ObjectStateGroupUpdataStruct', $this->get('ezpublish_rest.output.value_object_visitor.objectstategroupupdatastruct'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\CountryList', $this->get('ezpublish_rest.output.value_object_visitor.countrylist'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\TemporaryRedirect', $this->get('ezpublish_rest.output.value_object_visitor.temporaryredirect'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\PermanentRedirect', $this->get('ezpublish_rest.output.value_object_visitor.permanentredirect'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\ResourceCreated', $this->get('ezpublish_rest.output.value_object_visitor.resourcecreated'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\NoContent', $this->get('ezpublish_rest.output.value_object_visitor.nocontent'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Common\\Values\\Root', $this->get('ezpublish_rest.output.value_object_visitor.root'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\SeeOther', $this->get('ezpublish_rest.output.value_object_visitor.seeother'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\Conflict', $this->get('ezpublish_rest.output.value_object_visitor.conflict'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\Options', $this->get('ezpublish_rest.output.value_object_visitor.options'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\OK', $this->get('ezpublish_rest.output.value_object_visitor.ok'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Server\\Values\\CachedValue', $this->get('ezpublish_rest.output.value_object_visitor.cached_value'));
        $instance->addVisitor('eZ\\Publish\\Core\\REST\\Client\\Values\\ViewInput', $this->get('ezpublish_rest.output.value_object_visitor.viewinput'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.exception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Exception A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Exception instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ExceptionService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.exception'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Exception(true, $this->get('translator'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.exception.invalidargumentexception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\InvalidArgumentException A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\InvalidArgumentException instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_Exception_InvalidargumentexceptionService()
    {
        return $this->services['ezpublish_rest.output.value_object_visitor.exception.invalidargumentexception'] = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\InvalidArgumentException();
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.fielddefinitioncreatestruct' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\FieldDefinitionCreateStruct A eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\FieldDefinitionCreateStruct instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_FielddefinitioncreatestructService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.fielddefinitioncreatestruct'] = $instance = new \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\FieldDefinitionCreateStruct($this->get('ezpublish_rest.field_type_serializer'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.fielddefinitionlist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\FieldDefinitionList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\FieldDefinitionList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_FielddefinitionlistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.fielddefinitionlist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\FieldDefinitionList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.forbiddenexception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ForbiddenException A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ForbiddenException instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ForbiddenexceptionService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.forbiddenexception'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ForbiddenException(true, $this->get('translator'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.imagevariation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ImageVariation A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ImageVariation instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ImagevariationService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.imagevariation'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ImageVariation();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.invalidargumentexception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\InvalidArgumentException A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\InvalidArgumentException instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_InvalidargumentexceptionService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.invalidargumentexception'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\InvalidArgumentException(true, $this->get('translator'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.limitation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\Limitation A eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\Limitation instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_LimitationService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.limitation'] = $instance = new \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\Limitation();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Location A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Location instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_LocationService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.location'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Location($this->get('ezpublish.api.service.location'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.locationcreatestruct' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\LocationCreateStruct A eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\LocationCreateStruct instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_LocationcreatestructService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.locationcreatestruct'] = $instance = new \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\LocationCreateStruct($this->get('ezpublish.api.service.location'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.locationlist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\LocationList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\LocationList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_LocationlistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.locationlist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\LocationList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.locationupdatestruct' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\LocationUpdateStruct A eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\LocationUpdateStruct instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_LocationupdatestructService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.locationupdatestruct'] = $instance = new \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\LocationUpdateStruct();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.nocontent' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\NoContent A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\NoContent instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_NocontentService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.nocontent'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\NoContent();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.notfoundexception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\NotFoundException A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\NotFoundException instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_NotfoundexceptionService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.notfoundexception'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\NotFoundException(true, $this->get('translator'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.notimplementedexception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\NotImplementedException A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\NotImplementedException instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_NotimplementedexceptionService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.notimplementedexception'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\NotImplementedException(true, $this->get('translator'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.objectstatecreatestruct' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ObjectStateCreateStruct A eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ObjectStateCreateStruct instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ObjectstatecreatestructService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.objectstatecreatestruct'] = $instance = new \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ObjectStateCreateStruct();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.objectstategroup' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ObjectStateGroup A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ObjectStateGroup instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ObjectstategroupService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.objectstategroup'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ObjectStateGroup();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.objectstategroupcreatestruct' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ObjectStateGroupCreateStruct A eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ObjectStateGroupCreateStruct instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ObjectstategroupcreatestructService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.objectstategroupcreatestruct'] = $instance = new \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ObjectStateGroupCreateStruct();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.objectstategrouplist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ObjectStateGroupList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ObjectStateGroupList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ObjectstategrouplistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.objectstategrouplist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ObjectStateGroupList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.objectstategroupupdatastruct' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ObjectStateGroupUpdateStruct A eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ObjectStateGroupUpdateStruct instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ObjectstategroupupdatastructService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.objectstategroupupdatastruct'] = $instance = new \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ObjectStateGroupUpdateStruct();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.objectstatelist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ObjectStateList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ObjectStateList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ObjectstatelistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.objectstatelist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ObjectStateList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.objectstateupdatestruct' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ObjectStateUpdateStruct A eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ObjectStateUpdateStruct instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ObjectstateupdatestructService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.objectstateupdatestruct'] = $instance = new \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ObjectStateUpdateStruct();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.ok' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\OK A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\OK instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_OkService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.ok'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\OK();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.options' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Options A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Options instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_OptionsService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.options'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Options(true);

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.permanentredirect' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\PermanentRedirect A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\PermanentRedirect instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_PermanentredirectService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.permanentredirect'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\PermanentRedirect();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.policy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Policy A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Policy instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_PolicyService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.policy'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Policy();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.policycreatestruct' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\PolicyCreateStruct A eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\PolicyCreateStruct instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_PolicycreatestructService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.policycreatestruct'] = $instance = new \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\PolicyCreateStruct();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.policylist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\PolicyList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\PolicyList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_PolicylistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.policylist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\PolicyList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.policyupdatestruct' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\PolicyUpdateStruct A eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\PolicyUpdateStruct instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_PolicyupdatestructService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.policyupdatestruct'] = $instance = new \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\PolicyUpdateStruct();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.relationlist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RelationList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RelationList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_RelationlistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.relationlist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RelationList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.resourcecreated' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ResourceCreated A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ResourceCreated instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ResourcecreatedService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.resourcecreated'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\ResourceCreated();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.restcontent' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestContent A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestContent instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_RestcontentService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.restcontent'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestContent();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.restcontentcreatestruct' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\RestContentCreateStruct A eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\RestContentCreateStruct instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_RestcontentcreatestructService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.restcontentcreatestruct'] = $instance = new \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\RestContentCreateStruct($this->get('ezpublish_rest.field_type_serializer'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.restcontenttype' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestContentType A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestContentType instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_RestcontenttypeService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.restcontenttype'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestContentType();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.restexecutedview' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestExecutedView A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestExecutedView instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_RestexecutedviewService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.restexecutedview'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestExecutedView($this->get('ezpublish.api.service.location'), $this->get('ezpublish.api.service.content'), $this->get('ezpublish.api.service.content_type'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.restfielddefinition' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestFieldDefinition A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestFieldDefinition instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_RestfielddefinitionService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.restfielddefinition'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestFieldDefinition($this->get('ezpublish_rest.field_type_serializer'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.restlocation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestLocation A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestLocation instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_RestlocationService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.restlocation'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestLocation();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.restobjectstate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestObjectState A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestObjectState instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_RestobjectstateService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.restobjectstate'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestObjectState();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.restrelation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestRelation A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestRelation instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_RestrelationService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.restrelation'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestRelation();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.resttrashitem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestTrashItem A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestTrashItem instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ResttrashitemService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.resttrashitem'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestTrashItem();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.restuser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestUser A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestUser instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_RestuserService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.restuser'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestUser();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.restusergroup' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestUserGroup A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestUserGroup instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_RestusergroupService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.restusergroup'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestUserGroup();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.restusergrouproleassignment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestUserGroupRoleAssignment A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestUserGroupRoleAssignment instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_RestusergrouproleassignmentService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.restusergrouproleassignment'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestUserGroupRoleAssignment();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.restuserroleassignment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestUserRoleAssignment A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestUserRoleAssignment instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_RestuserroleassignmentService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.restuserroleassignment'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RestUserRoleAssignment();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.role' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Role A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Role instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_RoleService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.role'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Role();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.roleassignment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\RoleAssignment A eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\RoleAssignment instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_RoleassignmentService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.roleassignment'] = $instance = new \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\RoleAssignment();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.roleassignmentlist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RoleAssignmentList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RoleAssignmentList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_RoleassignmentlistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.roleassignmentlist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RoleAssignmentList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.rolecreatestruct' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\RoleCreateStruct A eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\RoleCreateStruct instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_RolecreatestructService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.rolecreatestruct'] = $instance = new \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\RoleCreateStruct();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.rolelist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RoleList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RoleList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_RolelistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.rolelist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\RoleList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.roleupdatestruct' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\RoleUpdateStruct A eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\RoleUpdateStruct instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_RoleupdatestructService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.roleupdatestruct'] = $instance = new \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\RoleUpdateStruct();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.root' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Root A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Root instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_RootService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.root'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Root();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.section' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Section A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Section instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_SectionService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.section'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Section();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.sectioncreatestruct' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\SectionCreateStruct A eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\SectionCreateStruct instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_SectioncreatestructService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.sectioncreatestruct'] = $instance = new \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\SectionCreateStruct();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.sectionlist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\SectionList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\SectionList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_SectionlistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.sectionlist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\SectionList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.sectionupdatestruct' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\SectionUpdateStruct A eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\SectionUpdateStruct instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_SectionupdatestructService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.sectionupdatestruct'] = $instance = new \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\SectionUpdateStruct();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.seeother' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\SeeOther A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\SeeOther instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_SeeotherService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.seeother'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\SeeOther();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.sessioninput' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\SessionInput A eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\SessionInput instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_SessioninputService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.sessioninput'] = $instance = new \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\SessionInput();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.temporaryredirect' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\TemporaryRedirect A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\TemporaryRedirect instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_TemporaryredirectService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.temporaryredirect'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\TemporaryRedirect();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.trash' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Trash A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Trash instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_TrashService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.trash'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Trash();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.unauthorizedexception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\UnauthorizedException A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\UnauthorizedException instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_UnauthorizedexceptionService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.unauthorizedexception'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\UnauthorizedException(true, $this->get('translator'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.urlalias' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\URLAlias A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\URLAlias instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_UrlaliasService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.urlalias'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\URLAlias();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.urlaliaslist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\URLAliasList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\URLAliasList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_UrlaliaslistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.urlaliaslist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\URLAliasList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.urlaliasreflist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\URLAliasRefList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\URLAliasRefList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_UrlaliasreflistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.urlaliasreflist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\URLAliasRefList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.urlwildcard' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\URLWildcard A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\URLWildcard instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_UrlwildcardService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.urlwildcard'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\URLWildcard();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.urlwildcardlist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\URLWildcardList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\URLWildcardList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_UrlwildcardlistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.urlwildcardlist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\URLWildcardList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.usergrouplist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\UserGroupList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\UserGroupList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_UsergrouplistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.usergrouplist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\UserGroupList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.usergroupreflist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\UserGroupRefList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\UserGroupRefList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_UsergroupreflistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.usergroupreflist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\UserGroupRefList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.userlist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\UserList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\UserList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_UserlistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.userlist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\UserList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.userreflist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\UserRefList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\UserRefList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_UserreflistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.userreflist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\UserRefList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.usersession' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\UserSession A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\UserSession instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_UsersessionService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.usersession'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\UserSession();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.usersessiondeleted' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\DeletedUserSession A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\DeletedUserSession instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_UsersessiondeletedService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.usersessiondeleted'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\DeletedUserSession();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.version' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Version A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Version instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_VersionService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.version'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\Version($this->get('ezpublish_rest.field_type_serializer'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.versioninfo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\VersionInfo A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\VersionInfo instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_VersioninfoService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.versioninfo'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\VersionInfo();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.versionlist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\VersionList A eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\VersionList instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_VersionlistService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.versionlist'] = $instance = new \eZ\Publish\Core\REST\Server\Output\ValueObjectVisitor\VersionList();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.versionupdate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\VersionUpdate A eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\VersionUpdate instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_VersionupdateService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.versionupdate'] = $instance = new \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\VersionUpdate($this->get('ezpublish_rest.field_type_serializer'));

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.value_object_visitor.viewinput' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ViewInput A eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ViewInput instance.
     */
    protected function getEzpublishRest_Output_ValueObjectVisitor_ViewinputService()
    {
        $this->services['ezpublish_rest.output.value_object_visitor.viewinput'] = $instance = new \eZ\Publish\Core\REST\Client\Output\ValueObjectVisitor\ViewInput();

        $instance->setRequestParser($this->get('ezpublish_rest.request_parser'));
        $instance->setRouter($this->get('ezpublish.chain_router'));
        $instance->setTemplateRouter($this->get('ezpublish_rest.templated_router'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.visitor.dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\View\AcceptHeaderVisitorDispatcher A eZ\Publish\Core\REST\Server\View\AcceptHeaderVisitorDispatcher instance.
     */
    protected function getEzpublishRest_Output_Visitor_DispatcherService()
    {
        $a = $this->get('ezpublish_rest.output.visitor.json');
        $b = $this->get('ezpublish_rest.output.visitor.xml');

        $this->services['ezpublish_rest.output.visitor.dispatcher'] = $instance = new \eZ\Publish\Core\REST\Server\View\AcceptHeaderVisitorDispatcher();

        $instance->addVisitor('(^application/vnd\\.ez\\.api\\.[A-Za-z]+\\+json$)', $a);
        $instance->addVisitor('(^application/json$)', $a);
        $instance->addVisitor('(^application/vnd\\.ez\\.api\\.[A-Za-z]+\\+xml$)', $b);
        $instance->addVisitor('(^application/xml$)', $b);
        $instance->addVisitor('(^.*/.*$)', $b);

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.output.visitor.json' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\Output\Visitor A eZ\Publish\Core\REST\Common\Output\Visitor instance.
     */
    protected function getEzpublishRest_Output_Visitor_JsonService()
    {
        return $this->services['ezpublish_rest.output.visitor.json'] = new \eZ\Publish\Core\REST\Common\Output\Visitor($this->get('ezpublish_rest.output.generator.json'), $this->get('ezpublish_rest.output.value_object_visitor.dispatcher'));
    }

    /**
     * Gets the 'ezpublish_rest.output.visitor.xml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\Output\Visitor A eZ\Publish\Core\REST\Common\Output\Visitor instance.
     */
    protected function getEzpublishRest_Output_Visitor_XmlService()
    {
        return $this->services['ezpublish_rest.output.visitor.xml'] = new \eZ\Publish\Core\REST\Common\Output\Visitor($this->get('ezpublish_rest.output.generator.xml'), $this->get('ezpublish_rest.output.value_object_visitor.dispatcher'));
    }

    /**
     * Gets the 'ezpublish_rest.parser_tools' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Common\Input\ParserTools A eZ\Publish\Core\REST\Common\Input\ParserTools instance.
     */
    protected function getEzpublishRest_ParserToolsService()
    {
        return $this->services['ezpublish_rest.parser_tools'] = new \eZ\Publish\Core\REST\Common\Input\ParserTools();
    }

    /**
     * Gets the 'ezpublish_rest.request_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishRestBundle\EventListener\RequestListener A eZ\Bundle\EzPublishRestBundle\EventListener\RequestListener instance.
     */
    protected function getEzpublishRest_RequestListenerService()
    {
        return $this->services['ezpublish_rest.request_listener'] = new \eZ\Bundle\EzPublishRestBundle\EventListener\RequestListener('/api/ezp/v2');
    }

    /**
     * Gets the 'ezpublish_rest.request_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishRestBundle\RequestParser\Router A eZ\Bundle\EzPublishRestBundle\RequestParser\Router instance.
     */
    protected function getEzpublishRest_RequestParserService()
    {
        return $this->services['ezpublish_rest.request_parser'] = new \eZ\Bundle\EzPublishRestBundle\RequestParser\Router($this->get('ezpublish.chain_router'));
    }

    /**
     * Gets the 'ezpublish_rest.response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishRestBundle\EventListener\ResponseListener A eZ\Bundle\EzPublishRestBundle\EventListener\ResponseListener instance.
     */
    protected function getEzpublishRest_ResponseListenerService()
    {
        return $this->services['ezpublish_rest.response_listener'] = new \eZ\Bundle\EzPublishRestBundle\EventListener\ResponseListener($this->get('ezpublish_rest.output.visitor.dispatcher'));
    }

    /**
     * Gets the 'ezpublish_rest.routing.options_loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishRestBundle\Routing\OptionsLoader A eZ\Bundle\EzPublishRestBundle\Routing\OptionsLoader instance.
     */
    protected function getEzpublishRest_Routing_OptionsLoaderService()
    {
        return $this->services['ezpublish_rest.routing.options_loader'] = new \eZ\Bundle\EzPublishRestBundle\Routing\OptionsLoader($this->get('ezpublish_rest.routing.options_loader.route_collection_mapper'), $this->get('ezpublish_rest.templated_router'));
    }

    /**
     * Gets the 'ezpublish_rest.routing.options_loader.mapper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishRestBundle\Routing\OptionsLoader\Mapper A eZ\Bundle\EzPublishRestBundle\Routing\OptionsLoader\Mapper instance.
     */
    protected function getEzpublishRest_Routing_OptionsLoader_MapperService()
    {
        return $this->services['ezpublish_rest.routing.options_loader.mapper'] = new \eZ\Bundle\EzPublishRestBundle\Routing\OptionsLoader\Mapper();
    }

    /**
     * Gets the 'ezpublish_rest.routing.options_loader.route_collection_mapper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishRestBundle\Routing\OptionsLoader\RouteCollectionMapper A eZ\Bundle\EzPublishRestBundle\Routing\OptionsLoader\RouteCollectionMapper instance.
     */
    protected function getEzpublishRest_Routing_OptionsLoader_RouteCollectionMapperService()
    {
        return $this->services['ezpublish_rest.routing.options_loader.route_collection_mapper'] = new \eZ\Bundle\EzPublishRestBundle\Routing\OptionsLoader\RouteCollectionMapper($this->get('ezpublish_rest.routing.options_loader.mapper'));
    }

    /**
     * Gets the 'ezpublish_rest.security.authentication.listener.session.ezpublish_front' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Security\RestAuthenticator A eZ\Publish\Core\REST\Server\Security\RestAuthenticator instance.
     */
    protected function getEzpublishRest_Security_Authentication_Listener_Session_EzpublishFrontService()
    {
        $this->services['ezpublish_rest.security.authentication.listener.session.ezpublish_front'] = $instance = new \eZ\Publish\Core\REST\Server\Security\RestAuthenticator($this->get('security.token_storage'), $this->get('security.authentication.manager'), 'ezpublish_front', $this->get('debug.event_dispatcher'), $this->get('ezpublish.config.resolver.chain'), $this->get('session.storage.native'), $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->addLogoutHandler($this->get('security.logout.handler.session'));
        $instance->addLogoutHandler($this->get('ezpublish_rest.security.authentication.logout_handler'));

        return $instance;
    }

    /**
     * Gets the 'ezpublish_rest.security.authentication.logout_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Publish\Core\REST\Server\Security\RestLogoutHandler A eZ\Publish\Core\REST\Server\Security\RestLogoutHandler instance.
     */
    protected function getEzpublishRest_Security_Authentication_LogoutHandlerService()
    {
        return $this->services['ezpublish_rest.security.authentication.logout_handler'] = new \eZ\Publish\Core\REST\Server\Security\RestLogoutHandler();
    }

    /**
     * Gets the 'ezpublish_rest.templated_router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Routing\DefaultRouter A eZ\Bundle\EzPublishCoreBundle\Routing\DefaultRouter instance.
     */
    protected function getEzpublishRest_TemplatedRouterService()
    {
        $this->services['ezpublish_rest.templated_router'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\Routing\DefaultRouter($this, (__DIR__.'/assetic/routing.yml'), array('cache_dir' => __DIR__, 'debug' => true, 'generator_class' => 'Hautelook\\TemplatedUriRouter\\Routing\\Generator\\Rfc6570Generator', 'generator_base_class' => 'Hautelook\\TemplatedUriRouter\\Routing\\Generator\\Rfc6570Generator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper', 'generator_cache_class' => 'appdevRF6570UrlGenerator', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_base_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper', 'matcher_cache_class' => 'appdevRFC6570UrlMatcher'), $this->get('router.request_context', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('monolog.logger.router', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->setOption('strict_requirements', NULL);

        return $instance;
    }

    /**
     * Gets the 'ezrepoforms.action_dispatcher.content_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Form\ActionDispatcher\ContentTypeDispatcher A EzSystems\RepositoryForms\Form\ActionDispatcher\ContentTypeDispatcher instance.
     */
    protected function getEzrepoforms_ActionDispatcher_ContentTypeService()
    {
        $this->services['ezrepoforms.action_dispatcher.content_type'] = $instance = new \EzSystems\RepositoryForms\Form\ActionDispatcher\ContentTypeDispatcher();

        $instance->setEventDispatcher($this->get('debug.event_dispatcher'));

        return $instance;
    }

    /**
     * Gets the 'ezrepoforms.action_dispatcher.content_type.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Form\ActionDispatcher\ContentTypeGroupDispatcher A EzSystems\RepositoryForms\Form\ActionDispatcher\ContentTypeGroupDispatcher instance.
     */
    protected function getEzrepoforms_ActionDispatcher_ContentType_GroupService()
    {
        $this->services['ezrepoforms.action_dispatcher.content_type.group'] = $instance = new \EzSystems\RepositoryForms\Form\ActionDispatcher\ContentTypeGroupDispatcher();

        $instance->setEventDispatcher($this->get('debug.event_dispatcher'));

        return $instance;
    }

    /**
     * Gets the 'ezrepoforms.action_dispatcher.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Form\ActionDispatcher\LanguageDispatcher A EzSystems\RepositoryForms\Form\ActionDispatcher\LanguageDispatcher instance.
     */
    protected function getEzrepoforms_ActionDispatcher_LanguageService()
    {
        $this->services['ezrepoforms.action_dispatcher.language'] = $instance = new \EzSystems\RepositoryForms\Form\ActionDispatcher\LanguageDispatcher();

        $instance->setEventDispatcher($this->get('debug.event_dispatcher'));

        return $instance;
    }

    /**
     * Gets the 'ezrepoforms.action_dispatcher.policy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Form\ActionDispatcher\PolicyDispatcher A EzSystems\RepositoryForms\Form\ActionDispatcher\PolicyDispatcher instance.
     */
    protected function getEzrepoforms_ActionDispatcher_PolicyService()
    {
        $this->services['ezrepoforms.action_dispatcher.policy'] = $instance = new \EzSystems\RepositoryForms\Form\ActionDispatcher\PolicyDispatcher();

        $instance->setEventDispatcher($this->get('debug.event_dispatcher'));

        return $instance;
    }

    /**
     * Gets the 'ezrepoforms.action_dispatcher.role' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Form\ActionDispatcher\RoleDispatcher A EzSystems\RepositoryForms\Form\ActionDispatcher\RoleDispatcher instance.
     */
    protected function getEzrepoforms_ActionDispatcher_RoleService()
    {
        $this->services['ezrepoforms.action_dispatcher.role'] = $instance = new \EzSystems\RepositoryForms\Form\ActionDispatcher\RoleDispatcher();

        $instance->setEventDispatcher($this->get('debug.event_dispatcher'));

        return $instance;
    }

    /**
     * Gets the 'ezrepoforms.action_dispatcher.section' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Form\ActionDispatcher\SectionDispatcher A EzSystems\RepositoryForms\Form\ActionDispatcher\SectionDispatcher instance.
     */
    protected function getEzrepoforms_ActionDispatcher_SectionService()
    {
        $this->services['ezrepoforms.action_dispatcher.section'] = $instance = new \EzSystems\RepositoryForms\Form\ActionDispatcher\SectionDispatcher();

        $instance->setEventDispatcher($this->get('debug.event_dispatcher'));

        return $instance;
    }

    /**
     * Gets the 'ezrepoforms.content_type.update.form_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Form\Type\ContentType\ContentTypeUpdateType A EzSystems\RepositoryForms\Form\Type\ContentType\ContentTypeUpdateType instance.
     */
    protected function getEzrepoforms_ContentType_Update_FormTypeService()
    {
        return $this->services['ezrepoforms.content_type.update.form_type'] = new \EzSystems\RepositoryForms\Form\Type\ContentType\ContentTypeUpdateType($this->get('ezpublish.field_type_collection.factory'), $this->get('translator'));
    }

    /**
     * Gets the 'ezrepoforms.field_definition.form_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Form\Type\FieldDefinition\FieldDefinitionType A EzSystems\RepositoryForms\Form\Type\FieldDefinition\FieldDefinitionType instance.
     */
    protected function getEzrepoforms_FieldDefinition_FormTypeService()
    {
        return $this->services['ezrepoforms.field_definition.form_type'] = new \EzSystems\RepositoryForms\Form\Type\FieldDefinition\FieldDefinitionType($this->get('ezrepoforms.field_type_form_mapper.registry'), $this->get('ezpublish.api.service.field_type'));
    }

    /**
     * Gets the 'ezrepoforms.field_type.form_mapper.ezbinaryfile' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\FieldType\Mapper\BinaryFileFormMapper A EzSystems\RepositoryForms\FieldType\Mapper\BinaryFileFormMapper instance.
     */
    protected function getEzrepoforms_FieldType_FormMapper_EzbinaryfileService()
    {
        return $this->services['ezrepoforms.field_type.form_mapper.ezbinaryfile'] = new \EzSystems\RepositoryForms\FieldType\Mapper\BinaryFileFormMapper();
    }

    /**
     * Gets the 'ezrepoforms.field_type.form_mapper.ezcountry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\FieldType\Mapper\CountryFormMapper A EzSystems\RepositoryForms\FieldType\Mapper\CountryFormMapper instance.
     */
    protected function getEzrepoforms_FieldType_FormMapper_EzcountryService()
    {
        return $this->services['ezrepoforms.field_type.form_mapper.ezcountry'] = new \EzSystems\RepositoryForms\FieldType\Mapper\CountryFormMapper(array('AF' => array('Name' => 'Afghanistan', 'Alpha2' => 'AF', 'Alpha3' => 'AFG', 'IDC' => '93'), 'AX' => array('Name' => 'Åland', 'Alpha2' => 'AX', 'Alpha3' => 'ALA', 'IDC' => '358'), 'AL' => array('Name' => 'Albania', 'Alpha2' => 'AL', 'Alpha3' => 'ALB', 'IDC' => '355'), 'DZ' => array('Name' => 'Algeria', 'Alpha2' => 'DZ', 'Alpha3' => 'DZA', 'IDC' => '213'), 'AS' => array('Name' => 'American Samoa', 'Alpha2' => 'AS', 'Alpha3' => 'ASM', 'IDC' => '1684'), 'AD' => array('Name' => 'Andorra', 'Alpha2' => 'AD', 'Alpha3' => 'AND', 'IDC' => '376'), 'AO' => array('Name' => 'Angola', 'Alpha2' => 'AO', 'Alpha3' => 'AGO', 'IDC' => '244'), 'AI' => array('Name' => 'Anguilla', 'Alpha2' => 'AI', 'Alpha3' => 'AIA', 'IDC' => '1264'), 'AQ' => array('Name' => 'Antarctica', 'Alpha2' => 'AQ', 'Alpha3' => 'ATA', 'IDC' => '672'), 'AG' => array('Name' => 'Antigua and Barbuda', 'Alpha2' => 'AG', 'Alpha3' => 'ATG', 'IDC' => '1268'), 'AR' => array('Name' => 'Argentina', 'Alpha2' => 'AR', 'Alpha3' => 'ARG', 'IDC' => '54'), 'AM' => array('Name' => 'Armenia', 'Alpha2' => 'AM', 'Alpha3' => 'ARM', 'IDC' => '374'), 'AW' => array('Name' => 'Aruba', 'Alpha2' => 'AW', 'Alpha3' => 'ABW', 'IDC' => '297'), 'AU' => array('Name' => 'Australia', 'Alpha2' => 'AU', 'Alpha3' => 'AUS', 'IDC' => '61'), 'AT' => array('Name' => 'Austria', 'Alpha2' => 'AT', 'Alpha3' => 'AUT', 'IDC' => '43'), 'AZ' => array('Name' => 'Azerbaijan', 'Alpha2' => 'AZ', 'Alpha3' => 'AZE', 'IDC' => '994'), 'BS' => array('Name' => 'Bahamas', 'Alpha2' => 'BS', 'Alpha3' => 'BHS', 'IDC' => '1242'), 'BH' => array('Name' => 'Bahrain', 'Alpha2' => 'BH', 'Alpha3' => 'BHR', 'IDC' => '973'), 'BD' => array('Name' => 'Bangladesh', 'Alpha2' => 'BD', 'Alpha3' => 'BGD', 'IDC' => '880'), 'BB' => array('Name' => 'Barbados', 'Alpha2' => 'BB', 'Alpha3' => 'BRB', 'IDC' => '1246'), 'BY' => array('Name' => 'Belarus', 'Alpha2' => 'BY', 'Alpha3' => 'BLR', 'IDC' => '375'), 'BE' => array('Name' => 'Belgium', 'Alpha2' => 'BE', 'Alpha3' => 'BEL', 'IDC' => '32'), 'BZ' => array('Name' => 'Belize', 'Alpha2' => 'BZ', 'Alpha3' => 'BLZ', 'IDC' => '501'), 'BJ' => array('Name' => 'Benin', 'Alpha2' => 'BJ', 'Alpha3' => 'BEN', 'IDC' => '229'), 'BM' => array('Name' => 'Bermuda', 'Alpha2' => 'BM', 'Alpha3' => 'BMU', 'IDC' => '1441'), 'BT' => array('Name' => 'Bhutan', 'Alpha2' => 'BT', 'Alpha3' => 'BTN', 'IDC' => '975'), 'BO' => array('Name' => 'Bolivia', 'Alpha2' => 'BO', 'Alpha3' => 'BOL', 'IDC' => '591'), 'BA' => array('Name' => 'Bosnia and Herzegovina', 'Alpha2' => 'BA', 'Alpha3' => 'BIH', 'IDC' => '387'), 'BW' => array('Name' => 'Botswana', 'Alpha2' => 'BW', 'Alpha3' => 'BWA', 'IDC' => '267'), 'BV' => array('Name' => 'Bouvet Island', 'Alpha2' => 'BV', 'Alpha3' => 'BVT', 'IDC' => '47'), 'BR' => array('Name' => 'Brazil', 'Alpha2' => 'BR', 'Alpha3' => 'BRA', 'IDC' => '55'), 'IO' => array('Name' => 'British Indian Ocean Territory', 'Alpha2' => 'IO', 'Alpha3' => 'IOT', 'IDC' => '246'), 'BN' => array('Name' => 'Brunei Darussalam', 'Alpha2' => 'BN', 'Alpha3' => 'BRN', 'IDC' => '673'), 'BG' => array('Name' => 'Bulgaria', 'Alpha2' => 'BG', 'Alpha3' => 'BGR', 'IDC' => '359'), 'BF' => array('Name' => 'Burkina Faso', 'Alpha2' => 'BF', 'Alpha3' => 'BFA', 'IDC' => '226'), 'BI' => array('Name' => 'Burundi', 'Alpha2' => 'BI', 'Alpha3' => 'BDI', 'IDC' => '257'), 'KH' => array('Name' => 'Cambodia', 'Alpha2' => 'KH', 'Alpha3' => 'KHM', 'IDC' => '855'), 'CM' => array('Name' => 'Cameroon', 'Alpha2' => 'CM', 'Alpha3' => 'CMR', 'IDC' => '237'), 'CA' => array('Name' => 'Canada', 'Alpha2' => 'CA', 'Alpha3' => 'CAN', 'IDC' => '1'), 'CV' => array('Name' => 'Cape Verde', 'Alpha2' => 'CV', 'Alpha3' => 'CPV', 'IDC' => '238'), 'KY' => array('Name' => 'Cayman Islands', 'Alpha2' => 'KY', 'Alpha3' => 'CYM', 'IDC' => '1345'), 'CF' => array('Name' => 'Central African Republic', 'Alpha2' => 'CF', 'Alpha3' => 'CAF', 'IDC' => '236'), 'TD' => array('Name' => 'Chad', 'Alpha2' => 'TD', 'Alpha3' => 'TCD', 'IDC' => '235'), 'CL' => array('Name' => 'Chile', 'Alpha2' => 'CL', 'Alpha3' => 'CHL', 'IDC' => '56'), 'CN' => array('Name' => 'China', 'Alpha2' => 'CN', 'Alpha3' => 'CHN', 'IDC' => '86'), 'CX' => array('Name' => 'Christmas Island', 'Alpha2' => 'CX', 'Alpha3' => 'CXR', 'IDC' => '61'), 'CC' => array('Name' => 'Cocos (Keeling) Islands', 'Alpha2' => 'CC', 'Alpha3' => 'CCK', 'IDC' => '61'), 'CO' => array('Name' => 'Colombia', 'Alpha2' => 'CO', 'Alpha3' => 'COL', 'IDC' => '57'), 'KM' => array('Name' => 'Comoros', 'Alpha2' => 'KM', 'Alpha3' => 'COM', 'IDC' => '269'), 'CG' => array('Name' => 'Congo', 'Alpha2' => 'CG', 'Alpha3' => 'COG', 'IDC' => '242'), 'CD' => array('Name' => 'Congo, The Democratic Republic Of The', 'Alpha2' => 'CD', 'Alpha3' => 'COD', 'IDC' => '243'), 'CK' => array('Name' => 'Cook Islands', 'Alpha2' => 'CK', 'Alpha3' => 'COK', 'IDC' => '682'), 'CR' => array('Name' => 'Costa Rica', 'Alpha2' => 'CR', 'Alpha3' => 'CRI', 'IDC' => '506'), 'CI' => array('Name' => 'Côte d\'Ivoire', 'Alpha2' => 'CI', 'Alpha3' => 'CIV', 'IDC' => '225'), 'HR' => array('Name' => 'Croatia', 'Alpha2' => 'HR', 'Alpha3' => 'HRV', 'IDC' => '385'), 'CU' => array('Name' => 'Cuba', 'Alpha2' => 'CU', 'Alpha3' => 'CUB', 'IDC' => '53'), 'CY' => array('Name' => 'Cyprus', 'Alpha2' => 'CY', 'Alpha3' => 'CYP', 'IDC' => '357'), 'CZ' => array('Name' => 'Czech Republic', 'Alpha2' => 'CZ', 'Alpha3' => 'CZE', 'IDC' => '420'), 'DK' => array('Name' => 'Denmark', 'Alpha2' => 'DK', 'Alpha3' => 'DNK', 'IDC' => '45'), 'DJ' => array('Name' => 'Djibouti', 'Alpha2' => 'DJ', 'Alpha3' => 'DJI', 'IDC' => '253'), 'DM' => array('Name' => 'Dominica', 'Alpha2' => 'DM', 'Alpha3' => 'DMA', 'IDC' => '1767'), 'DO' => array('Name' => 'Dominican Republic', 'Alpha2' => 'DO', 'Alpha3' => 'DOM', 'IDC' => '1809'), 'EC' => array('Name' => 'Ecuador', 'Alpha2' => 'EC', 'Alpha3' => 'ECU', 'IDC' => '593'), 'EG' => array('Name' => 'Egypt', 'Alpha2' => 'EG', 'Alpha3' => 'EGY', 'IDC' => '20'), 'SV' => array('Name' => 'El Salvador', 'Alpha2' => 'SV', 'Alpha3' => 'SLV', 'IDC' => '503'), 'GQ' => array('Name' => 'Equatorial Guinea', 'Alpha2' => 'GQ', 'Alpha3' => 'GNQ', 'IDC' => '240'), 'ER' => array('Name' => 'Eritrea', 'Alpha2' => 'ER', 'Alpha3' => 'ERI', 'IDC' => '291'), 'EE' => array('Name' => 'Estonia', 'Alpha2' => 'EE', 'Alpha3' => 'EST', 'IDC' => '372'), 'ET' => array('Name' => 'Ethiopia', 'Alpha2' => 'ET', 'Alpha3' => 'ETH', 'IDC' => '251'), 'FK' => array('Name' => 'Falkland Islands (Malvinas)', 'Alpha2' => 'FK', 'Alpha3' => 'FLK', 'IDC' => '500'), 'FO' => array('Name' => 'Faroe Islands', 'Alpha2' => 'FO', 'Alpha3' => 'FRO', 'IDC' => '298'), 'FJ' => array('Name' => 'Fiji', 'Alpha2' => 'FJ', 'Alpha3' => 'FJI', 'IDC' => '679'), 'FI' => array('Name' => 'Finland', 'Alpha2' => 'FI', 'Alpha3' => 'FIN', 'IDC' => '358'), 'FR' => array('Name' => 'France', 'Alpha2' => 'FR', 'Alpha3' => 'FRA', 'IDC' => '33'), 'GF' => array('Name' => 'French Guiana', 'Alpha2' => 'GF', 'Alpha3' => 'GUF', 'IDC' => '594'), 'PF' => array('Name' => 'French Polynesia', 'Alpha2' => 'PF', 'Alpha3' => 'PYF', 'IDC' => '689'), 'TF' => array('Name' => 'French Southern Territories', 'Alpha2' => 'TF', 'Alpha3' => 'ATF', 'IDC' => '0'), 'GA' => array('Name' => 'Gabon', 'Alpha2' => 'GA', 'Alpha3' => 'GAB', 'IDC' => '241'), 'GM' => array('Name' => 'Gambia', 'Alpha2' => 'GM', 'Alpha3' => 'GMB', 'IDC' => '220'), 'GE' => array('Name' => 'Georgia', 'Alpha2' => 'GE', 'Alpha3' => 'GEO', 'IDC' => '995'), 'DE' => array('Name' => 'Germany', 'Alpha2' => 'DE', 'Alpha3' => 'DEU', 'IDC' => '49'), 'GH' => array('Name' => 'Ghana', 'Alpha2' => 'GH', 'Alpha3' => 'GHA', 'IDC' => '233'), 'GI' => array('Name' => 'Gibraltar', 'Alpha2' => 'GI', 'Alpha3' => 'GIB', 'IDC' => '350'), 'GR' => array('Name' => 'Greece', 'Alpha2' => 'GR', 'Alpha3' => 'GRC', 'IDC' => '30'), 'GL' => array('Name' => 'Greenland', 'Alpha2' => 'GL', 'Alpha3' => 'GRL', 'IDC' => '299'), 'GD' => array('Name' => 'Grenada', 'Alpha2' => 'GD', 'Alpha3' => 'GRD', 'IDC' => '1473'), 'GP' => array('Name' => 'Guadeloupe', 'Alpha2' => 'GP', 'Alpha3' => 'GLP', 'IDC' => '590'), 'GU' => array('Name' => 'Guam', 'Alpha2' => 'GU', 'Alpha3' => 'GUM', 'IDC' => '1671'), 'GT' => array('Name' => 'Guatemala', 'Alpha2' => 'GT', 'Alpha3' => 'GTM', 'IDC' => '502'), 'GG' => array('Name' => 'Guernsey', 'Alpha2' => 'GG', 'Alpha3' => 'GGY', 'IDC' => '44'), 'GN' => array('Name' => 'Guinea', 'Alpha2' => 'GN', 'Alpha3' => 'GIN', 'IDC' => '224'), 'GW' => array('Name' => 'Guinea-Bissau', 'Alpha2' => 'GW', 'Alpha3' => 'GNB', 'IDC' => '245'), 'GY' => array('Name' => 'Guyana', 'Alpha2' => 'GY', 'Alpha3' => 'GUY', 'IDC' => '592'), 'HT' => array('Name' => 'Haiti', 'Alpha2' => 'HT', 'Alpha3' => 'HTI', 'IDC' => '509'), 'HM' => array('Name' => 'Heard Island and McDonald Islands', 'Alpha2' => 'HM', 'Alpha3' => 'HMD', 'IDC' => '672'), 'HN' => array('Name' => 'Honduras', 'Alpha2' => 'HN', 'Alpha3' => 'HND', 'IDC' => '504'), 'HK' => array('Name' => 'Hong Kong', 'Alpha2' => 'HK', 'Alpha3' => 'HKG', 'IDC' => '852'), 'HU' => array('Name' => 'Hungary', 'Alpha2' => 'HU', 'Alpha3' => 'HUN', 'IDC' => '36'), 'IS' => array('Name' => 'Iceland', 'Alpha2' => 'IS', 'Alpha3' => 'ISL', 'IDC' => '354'), 'IN' => array('Name' => 'India', 'Alpha2' => 'IN', 'Alpha3' => 'IND', 'IDC' => '91'), 'ID' => array('Name' => 'Indonesia', 'Alpha2' => 'ID', 'Alpha3' => 'IDN', 'IDC' => '62'), 'IR' => array('Name' => 'Iran, Islamic Republic of', 'Alpha2' => 'IR', 'Alpha3' => 'IRN', 'IDC' => '98'), 'IQ' => array('Name' => 'Iraq', 'Alpha2' => 'IQ', 'Alpha3' => 'IRQ', 'IDC' => '964'), 'IE' => array('Name' => 'Ireland', 'Alpha2' => 'IE', 'Alpha3' => 'IRL', 'IDC' => '353'), 'IM' => array('Name' => 'Isle of Man', 'Alpha2' => 'IM', 'Alpha3' => 'IMN', 'IDC' => '44'), 'IL' => array('Name' => 'Israel', 'Alpha2' => 'IL', 'Alpha3' => 'ISR', 'IDC' => '972'), 'IT' => array('Name' => 'Italy', 'Alpha2' => 'IT', 'Alpha3' => 'ITA', 'IDC' => '39'), 'JM' => array('Name' => 'Jamaica', 'Alpha2' => 'JM', 'Alpha3' => 'JAM', 'IDC' => '1876'), 'JP' => array('Name' => 'Japan', 'Alpha2' => 'JP', 'Alpha3' => 'JPN', 'IDC' => '81'), 'JE' => array('Name' => 'Jersey', 'Alpha2' => 'JE', 'Alpha3' => 'JEY', 'IDC' => '44'), 'JO' => array('Name' => 'Jordan', 'Alpha2' => 'JO', 'Alpha3' => 'JOR', 'IDC' => '962'), 'KZ' => array('Name' => 'Kazakhstan', 'Alpha2' => 'KZ', 'Alpha3' => 'KAZ', 'IDC' => '7'), 'KE' => array('Name' => 'Kenya', 'Alpha2' => 'KE', 'Alpha3' => 'KEN', 'IDC' => '254'), 'KI' => array('Name' => 'Kiribati', 'Alpha2' => 'KI', 'Alpha3' => 'KIR', 'IDC' => '686'), 'KP' => array('Name' => 'Korea, Democratic People\'s Republic of', 'Alpha2' => 'KP', 'Alpha3' => 'PRK', 'IDC' => '850'), 'KR' => array('Name' => 'Korea, Republic of', 'Alpha2' => 'KR', 'Alpha3' => 'KOR', 'IDC' => '82'), 'KW' => array('Name' => 'Kuwait', 'Alpha2' => 'KW', 'Alpha3' => 'KWT', 'IDC' => '965'), 'KG' => array('Name' => 'Kyrgyzstan', 'Alpha2' => 'KG', 'Alpha3' => 'KGZ', 'IDC' => '996'), 'LA' => array('Name' => 'Lao People\'s Democratic Republic', 'Alpha2' => 'LA', 'Alpha3' => 'LAO', 'IDC' => '856'), 'LV' => array('Name' => 'Latvia', 'Alpha2' => 'LV', 'Alpha3' => 'LVA', 'IDC' => '371'), 'LB' => array('Name' => 'Lebanon', 'Alpha2' => 'LB', 'Alpha3' => 'LBN', 'IDC' => '961'), 'LS' => array('Name' => 'Lesotho', 'Alpha2' => 'LS', 'Alpha3' => 'LSO', 'IDC' => '266'), 'LR' => array('Name' => 'Liberia', 'Alpha2' => 'LR', 'Alpha3' => 'LBR', 'IDC' => '231'), 'LY' => array('Name' => 'Libyan Arab Jamahiriya', 'Alpha2' => 'LY', 'Alpha3' => 'LBY', 'IDC' => '218'), 'LI' => array('Name' => 'Liechtenstein', 'Alpha2' => 'LI', 'Alpha3' => 'LIE', 'IDC' => '423'), 'LT' => array('Name' => 'Lithuania', 'Alpha2' => 'LT', 'Alpha3' => 'LTU', 'IDC' => '370'), 'LU' => array('Name' => 'Luxembourg', 'Alpha2' => 'LU', 'Alpha3' => 'LUX', 'IDC' => '352'), 'MO' => array('Name' => 'Macau', 'Alpha2' => 'MO', 'Alpha3' => 'MAC', 'IDC' => '853'), 'MK' => array('Name' => 'Macedonia, The Former Yugoslav Republic of', 'Alpha2' => 'MK', 'Alpha3' => 'MKD', 'IDC' => '389'), 'MG' => array('Name' => 'Madagascar', 'Alpha2' => 'MG', 'Alpha3' => 'MDG', 'IDC' => '261'), 'MW' => array('Name' => 'Malawi', 'Alpha2' => 'MW', 'Alpha3' => 'MWI', 'IDC' => '265'), 'MY' => array('Name' => 'Malaysia', 'Alpha2' => 'MY', 'Alpha3' => 'MYS', 'IDC' => '60'), 'MV' => array('Name' => 'Maldives', 'Alpha2' => 'MV', 'Alpha3' => 'MDV', 'IDC' => '960'), 'ML' => array('Name' => 'Mali', 'Alpha2' => 'ML', 'Alpha3' => 'MLI', 'IDC' => '223'), 'MT' => array('Name' => 'Malta', 'Alpha2' => 'MT', 'Alpha3' => 'MLT', 'IDC' => '356'), 'MH' => array('Name' => 'Marshall Islands', 'Alpha2' => 'MH', 'Alpha3' => 'MHL', 'IDC' => '692'), 'MQ' => array('Name' => 'Martinique', 'Alpha2' => 'MQ', 'Alpha3' => 'MTQ', 'IDC' => '596'), 'MR' => array('Name' => 'Mauritania', 'Alpha2' => 'MR', 'Alpha3' => 'MRT', 'IDC' => '222'), 'MU' => array('Name' => 'Mauritius', 'Alpha2' => 'MU', 'Alpha3' => 'MUS', 'IDC' => '230'), 'YT' => array('Name' => 'Mayotte', 'Alpha2' => 'YT', 'Alpha3' => 'MYT', 'IDC' => '262'), 'MX' => array('Name' => 'Mexico', 'Alpha2' => 'MX', 'Alpha3' => 'MEX', 'IDC' => '52'), 'FM' => array('Name' => 'Micronesia, Federated States of', 'Alpha2' => 'FM', 'Alpha3' => 'FSM', 'IDC' => '691'), 'MD' => array('Name' => 'Moldova, Republic of', 'Alpha2' => 'MD', 'Alpha3' => 'MDA', 'IDC' => '373'), 'MC' => array('Name' => 'Monaco', 'Alpha2' => 'MC', 'Alpha3' => 'MCO', 'IDC' => '377'), 'MN' => array('Name' => 'Mongolia', 'Alpha2' => 'MN', 'Alpha3' => 'MNG', 'IDC' => '976'), 'ME' => array('Name' => 'Montenegro', 'Alpha2' => 'ME', 'Alpha3' => 'MNE', 'IDC' => '382'), 'MS' => array('Name' => 'Montserrat', 'Alpha2' => 'MS', 'Alpha3' => 'MSR', 'IDC' => '1664'), 'MA' => array('Name' => 'Morocco', 'Alpha2' => 'MA', 'Alpha3' => 'MAR', 'IDC' => '212'), 'MZ' => array('Name' => 'Mozambique', 'Alpha2' => 'MZ', 'Alpha3' => 'MOZ', 'IDC' => '258'), 'MM' => array('Name' => 'Myanmar', 'Alpha2' => 'MM', 'Alpha3' => 'MMR', 'IDC' => '95'), 'NA' => array('Name' => 'Namibia', 'Alpha2' => 'NA', 'Alpha3' => 'NAM', 'IDC' => '264'), 'NR' => array('Name' => 'Nauru', 'Alpha2' => 'NR', 'Alpha3' => 'NRU', 'IDC' => '674'), 'NP' => array('Name' => 'Nepal', 'Alpha2' => 'NP', 'Alpha3' => 'NPL', 'IDC' => '977'), 'NL' => array('Name' => 'Netherlands', 'Alpha2' => 'NL', 'Alpha3' => 'NLD', 'IDC' => '31'), 'AN' => array('Name' => 'Netherlands Antilles', 'Alpha2' => 'AN', 'Alpha3' => 'ANT', 'IDC' => '599'), 'NC' => array('Name' => 'New Caledonia', 'Alpha2' => 'NC', 'Alpha3' => 'NCL', 'IDC' => '687'), 'NZ' => array('Name' => 'New Zealand', 'Alpha2' => 'NZ', 'Alpha3' => 'NZL', 'IDC' => '64'), 'NI' => array('Name' => 'Nicaragua', 'Alpha2' => 'NI', 'Alpha3' => 'NIC', 'IDC' => '505'), 'NE' => array('Name' => 'Niger', 'Alpha2' => 'NE', 'Alpha3' => 'NER', 'IDC' => '227'), 'NG' => array('Name' => 'Nigeria', 'Alpha2' => 'NG', 'Alpha3' => 'NGA', 'IDC' => '234'), 'NU' => array('Name' => 'Niue', 'Alpha2' => 'NU', 'Alpha3' => 'NIU', 'IDC' => '683'), 'NF' => array('Name' => 'Norfolk Island', 'Alpha2' => 'NF', 'Alpha3' => 'NFK', 'IDC' => '6723'), 'MP' => array('Name' => 'Northern Mariana Islands', 'Alpha2' => 'MP', 'Alpha3' => 'MNP', 'IDC' => '1670'), 'NO' => array('Name' => 'Norway', 'Alpha2' => 'NO', 'Alpha3' => 'NOR', 'IDC' => '47'), 'OM' => array('Name' => 'Oman', 'Alpha2' => 'OM', 'Alpha3' => 'OMN', 'IDC' => '968'), 'PK' => array('Name' => 'Pakistan', 'Alpha2' => 'PK', 'Alpha3' => 'PAK', 'IDC' => '92'), 'PW' => array('Name' => 'Palau', 'Alpha2' => 'PW', 'Alpha3' => 'PLW', 'IDC' => '680'), 'PS' => array('Name' => 'Palestinian Territory, Occupied', 'Alpha2' => 'PS', 'Alpha3' => 'PSE', 'IDC' => '970'), 'PA' => array('Name' => 'Panama', 'Alpha2' => 'PA', 'Alpha3' => 'PAN', 'IDC' => '507'), 'PG' => array('Name' => 'Papua New Guinea', 'Alpha2' => 'PG', 'Alpha3' => 'PNG', 'IDC' => '675'), 'PY' => array('Name' => 'Paraguay', 'Alpha2' => 'PY', 'Alpha3' => 'PRY', 'IDC' => '595'), 'PE' => array('Name' => 'Peru', 'Alpha2' => 'PE', 'Alpha3' => 'PER', 'IDC' => '51'), 'PH' => array('Name' => 'Philippines', 'Alpha2' => 'PH', 'Alpha3' => 'PHL', 'IDC' => '63'), 'PN' => array('Name' => 'Pitcairn', 'Alpha2' => 'PN', 'Alpha3' => 'PCN', 'IDC' => '64'), 'PL' => array('Name' => 'Poland', 'Alpha2' => 'PL', 'Alpha3' => 'POL', 'IDC' => '48'), 'PT' => array('Name' => 'Portugal', 'Alpha2' => 'PT', 'Alpha3' => 'PRT', 'IDC' => '351'), 'PR' => array('Name' => 'Puerto Rico', 'Alpha2' => 'PR', 'Alpha3' => 'PRI', 'IDC' => '1787'), 'QA' => array('Name' => 'Qatar', 'Alpha2' => 'QA', 'Alpha3' => 'QAT', 'IDC' => '974'), 'RE' => array('Name' => 'Reunion', 'Alpha2' => 'RE', 'Alpha3' => 'REU', 'IDC' => '262'), 'RO' => array('Name' => 'Romania', 'Alpha2' => 'RO', 'Alpha3' => 'ROU', 'IDC' => '40'), 'RU' => array('Name' => 'Russian Federation', 'Alpha2' => 'RU', 'Alpha3' => 'RUS', 'IDC' => '7'), 'RW' => array('Name' => 'Rwanda', 'Alpha2' => 'RW', 'Alpha3' => 'RWA', 'IDC' => '250'), 'BL' => array('Name' => 'Saint Barthélemy', 'Alpha2' => 'BL', 'Alpha3' => 'BLM', 'IDC' => '590'), 'SH' => array('Name' => 'Saint Helena', 'Alpha2' => 'SH', 'Alpha3' => 'SHN', 'IDC' => '290'), 'KN' => array('Name' => 'Saint Kitts and Nevis', 'Alpha2' => 'KN', 'Alpha3' => 'KNA', 'IDC' => '1869'), 'LC' => array('Name' => 'Saint Lucia', 'Alpha2' => 'LC', 'Alpha3' => 'LCA', 'IDC' => '1758'), 'MF' => array('Name' => 'Saint Martin', 'Alpha2' => 'MF', 'Alpha3' => 'MAF', 'IDC' => '590'), 'PM' => array('Name' => 'Saint Pierre and Miquelon', 'Alpha2' => 'PM', 'Alpha3' => 'SPM', 'IDC' => '508'), 'VC' => array('Name' => 'Saint Vincent and The Grenadines', 'Alpha2' => 'VC', 'Alpha3' => 'VCT', 'IDC' => '1784'), 'WS' => array('Name' => 'Samoa', 'Alpha2' => 'WS', 'Alpha3' => 'WSM', 'IDC' => '685'), 'SM' => array('Name' => 'San Marino', 'Alpha2' => 'SM', 'Alpha3' => 'SMR', 'IDC' => '378'), 'ST' => array('Name' => 'Sao Tome and Principe', 'Alpha2' => 'ST', 'Alpha3' => 'STP', 'IDC' => '239'), 'SA' => array('Name' => 'Saudi Arabia', 'Alpha2' => 'SA', 'Alpha3' => 'SAU', 'IDC' => '966'), 'SN' => array('Name' => 'Senegal', 'Alpha2' => 'SN', 'Alpha3' => 'SEN', 'IDC' => '221'), 'RS' => array('Name' => 'Serbia', 'Alpha2' => 'RS', 'Alpha3' => 'SRB', 'IDC' => '381'), 'SC' => array('Name' => 'Seychelles', 'Alpha2' => 'SC', 'Alpha3' => 'SYC', 'IDC' => '248'), 'SL' => array('Name' => 'Sierra Leone', 'Alpha2' => 'SL', 'Alpha3' => 'SLE', 'IDC' => '232'), 'SG' => array('Name' => 'Singapore', 'Alpha2' => 'SG', 'Alpha3' => 'SGP', 'IDC' => '65'), 'SK' => array('Name' => 'Slovakia', 'Alpha2' => 'SK', 'Alpha3' => 'SVK', 'IDC' => '421'), 'SI' => array('Name' => 'Slovenia', 'Alpha2' => 'SI', 'Alpha3' => 'SVN', 'IDC' => '386'), 'SB' => array('Name' => 'Solomon Islands', 'Alpha2' => 'SB', 'Alpha3' => 'SLB', 'IDC' => '677'), 'SO' => array('Name' => 'Somalia', 'Alpha2' => 'SO', 'Alpha3' => 'SOM', 'IDC' => '252'), 'ZA' => array('Name' => 'South Africa', 'Alpha2' => 'ZA', 'Alpha3' => 'ZAF', 'IDC' => '27'), 'GS' => array('Name' => 'South Georgia and The South Sandwich Islands', 'Alpha2' => 'GS', 'Alpha3' => 'SGS', 'IDC' => '500'), 'ES' => array('Name' => 'Spain', 'Alpha2' => 'ES', 'Alpha3' => 'ESP', 'IDC' => '34'), 'LK' => array('Name' => 'Sri Lanka', 'Alpha2' => 'LK', 'Alpha3' => 'LKA', 'IDC' => '94'), 'SD' => array('Name' => 'Sudan', 'Alpha2' => 'SD', 'Alpha3' => 'SDN', 'IDC' => '249'), 'SR' => array('Name' => 'Suriname', 'Alpha2' => 'SR', 'Alpha3' => 'SUR', 'IDC' => '597'), 'SJ' => array('Name' => 'Svalbard and Jan Mayen', 'Alpha2' => 'SJ', 'Alpha3' => 'SJM', 'IDC' => '47'), 'SZ' => array('Name' => 'Swaziland', 'Alpha2' => 'SZ', 'Alpha3' => 'SWZ', 'IDC' => '268'), 'SE' => array('Name' => 'Sweden', 'Alpha2' => 'SE', 'Alpha3' => 'SWE', 'IDC' => '46'), 'CH' => array('Name' => 'Switzerland', 'Alpha2' => 'CH', 'Alpha3' => 'CHE', 'IDC' => '41'), 'SY' => array('Name' => 'Syrian Arab Republic', 'Alpha2' => 'SY', 'Alpha3' => 'SYR', 'IDC' => '963'), 'TW' => array('Name' => 'Taiwan', 'Alpha2' => 'TW', 'Alpha3' => 'TWN', 'IDC' => '886'), 'TJ' => array('Name' => 'Tajikistan', 'Alpha2' => 'TJ', 'Alpha3' => 'TJK', 'IDC' => '992'), 'TZ' => array('Name' => 'Tanzania, United Republic of', 'Alpha2' => 'TZ', 'Alpha3' => 'TZA', 'IDC' => '255'), 'TH' => array('Name' => 'Thailand', 'Alpha2' => 'TH', 'Alpha3' => 'THA', 'IDC' => '66'), 'TL' => array('Name' => 'Timor-Leste', 'Alpha2' => 'TL', 'Alpha3' => 'TLS', 'IDC' => '670'), 'TG' => array('Name' => 'Togo', 'Alpha2' => 'TG', 'Alpha3' => 'TGO', 'IDC' => '228'), 'TK' => array('Name' => 'Tokelau', 'Alpha2' => 'TK', 'Alpha3' => 'TKL', 'IDC' => '690'), 'TO' => array('Name' => 'Tonga', 'Alpha2' => 'TO', 'Alpha3' => 'TON', 'IDC' => '676'), 'TT' => array('Name' => 'Trinidad and Tobago', 'Alpha2' => 'TT', 'Alpha3' => 'TTO', 'IDC' => '1868'), 'TN' => array('Name' => 'Tunisia', 'Alpha2' => 'TN', 'Alpha3' => 'TUN', 'IDC' => '216'), 'TR' => array('Name' => 'Turkey', 'Alpha2' => 'TR', 'Alpha3' => 'TUR', 'IDC' => '90'), 'TM' => array('Name' => 'Turkmenistan', 'Alpha2' => 'TM', 'Alpha3' => 'TKM', 'IDC' => '993'), 'TC' => array('Name' => 'Turks and Caicos Islands', 'Alpha2' => 'TC', 'Alpha3' => 'TCA', 'IDC' => '1649'), 'TV' => array('Name' => 'Tuvalu', 'Alpha2' => 'TV', 'Alpha3' => 'TUV', 'IDC' => '688'), 'UG' => array('Name' => 'Uganda', 'Alpha2' => 'UG', 'Alpha3' => 'UGA', 'IDC' => '256'), 'UA' => array('Name' => 'Ukraine', 'Alpha2' => 'UA', 'Alpha3' => 'UKR', 'IDC' => '380'), 'AE' => array('Name' => 'United Arab Emirates', 'Alpha2' => 'AE', 'Alpha3' => 'ARE', 'IDC' => '971'), 'GB' => array('Name' => 'United Kingdom', 'Alpha2' => 'GB', 'Alpha3' => 'GBR', 'IDC' => '44'), 'UM' => array('Name' => 'United States Minor Outlying Islands', 'Alpha2' => 'UM', 'Alpha3' => 'UMI', 'IDC' => '1'), 'US' => array('Name' => 'United States of America', 'Alpha2' => 'US', 'Alpha3' => 'USA', 'IDC' => '1'), 'UY' => array('Name' => 'Uruguay', 'Alpha2' => 'UY', 'Alpha3' => 'URY', 'IDC' => '598'), 'UZ' => array('Name' => 'Uzbekistan', 'Alpha2' => 'UZ', 'Alpha3' => 'UZB', 'IDC' => '998'), 'VU' => array('Name' => 'Vanuatu', 'Alpha2' => 'VU', 'Alpha3' => 'VUT', 'IDC' => '678'), 'VA' => array('Name' => 'Holy See (Vatican City State)', 'Alpha2' => 'VA', 'Alpha3' => 'VAT', 'IDC' => '3906'), 'VE' => array('Name' => 'Venezuela', 'Alpha2' => 'VE', 'Alpha3' => 'VEN', 'IDC' => '58'), 'VN' => array('Name' => 'Viet Nam', 'Alpha2' => 'VN', 'Alpha3' => 'VNM', 'IDC' => '84'), 'VG' => array('Name' => 'Virgin Islands, British', 'Alpha2' => 'VG', 'Alpha3' => 'VGB', 'IDC' => '1284'), 'VI' => array('Name' => 'Virgin Islands, U.S.', 'Alpha2' => 'VI', 'Alpha3' => 'VIR', 'IDC' => '1340'), 'WF' => array('Name' => 'Wallis and Futuna', 'Alpha2' => 'WF', 'Alpha3' => 'WLF', 'IDC' => '681'), 'EH' => array('Name' => 'Western Sahara', 'Alpha2' => 'EH', 'Alpha3' => 'ESH', 'IDC' => '212'), 'YE' => array('Name' => 'Yemen', 'Alpha2' => 'YE', 'Alpha3' => 'YEM', 'IDC' => '967'), 'ZM' => array('Name' => 'Zambia', 'Alpha2' => 'ZM', 'Alpha3' => 'ZMB', 'IDC' => '260'), 'ZW' => array('Name' => 'Zimbabwe', 'Alpha2' => 'ZW', 'Alpha3' => 'ZWE', 'IDC' => '263')));
    }

    /**
     * Gets the 'ezrepoforms.field_type.form_mapper.ezdate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\FieldType\Mapper\DateFormMapper A EzSystems\RepositoryForms\FieldType\Mapper\DateFormMapper instance.
     */
    protected function getEzrepoforms_FieldType_FormMapper_EzdateService()
    {
        return $this->services['ezrepoforms.field_type.form_mapper.ezdate'] = new \EzSystems\RepositoryForms\FieldType\Mapper\DateFormMapper();
    }

    /**
     * Gets the 'ezrepoforms.field_type.form_mapper.ezdatetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\FieldType\Mapper\DateTimeFormMapper A EzSystems\RepositoryForms\FieldType\Mapper\DateTimeFormMapper instance.
     */
    protected function getEzrepoforms_FieldType_FormMapper_EzdatetimeService()
    {
        return $this->services['ezrepoforms.field_type.form_mapper.ezdatetime'] = new \EzSystems\RepositoryForms\FieldType\Mapper\DateTimeFormMapper();
    }

    /**
     * Gets the 'ezrepoforms.field_type.form_mapper.ezfloat' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\FieldType\Mapper\FloatFormMapper A EzSystems\RepositoryForms\FieldType\Mapper\FloatFormMapper instance.
     */
    protected function getEzrepoforms_FieldType_FormMapper_EzfloatService()
    {
        return $this->services['ezrepoforms.field_type.form_mapper.ezfloat'] = new \EzSystems\RepositoryForms\FieldType\Mapper\FloatFormMapper();
    }

    /**
     * Gets the 'ezrepoforms.field_type.form_mapper.ezimage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\FieldType\Mapper\ImageFormMapper A EzSystems\RepositoryForms\FieldType\Mapper\ImageFormMapper instance.
     */
    protected function getEzrepoforms_FieldType_FormMapper_EzimageService()
    {
        return $this->services['ezrepoforms.field_type.form_mapper.ezimage'] = new \EzSystems\RepositoryForms\FieldType\Mapper\ImageFormMapper();
    }

    /**
     * Gets the 'ezrepoforms.field_type.form_mapper.ezinteger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\FieldType\Mapper\IntegerFormMapper A EzSystems\RepositoryForms\FieldType\Mapper\IntegerFormMapper instance.
     */
    protected function getEzrepoforms_FieldType_FormMapper_EzintegerService()
    {
        return $this->services['ezrepoforms.field_type.form_mapper.ezinteger'] = new \EzSystems\RepositoryForms\FieldType\Mapper\IntegerFormMapper();
    }

    /**
     * Gets the 'ezrepoforms.field_type.form_mapper.ezisbn' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\FieldType\Mapper\ISBNFormMapper A EzSystems\RepositoryForms\FieldType\Mapper\ISBNFormMapper instance.
     */
    protected function getEzrepoforms_FieldType_FormMapper_EzisbnService()
    {
        return $this->services['ezrepoforms.field_type.form_mapper.ezisbn'] = new \EzSystems\RepositoryForms\FieldType\Mapper\ISBNFormMapper();
    }

    /**
     * Gets the 'ezrepoforms.field_type.form_mapper.ezmedia' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\FieldType\Mapper\MediaFormMapper A EzSystems\RepositoryForms\FieldType\Mapper\MediaFormMapper instance.
     */
    protected function getEzrepoforms_FieldType_FormMapper_EzmediaService()
    {
        return $this->services['ezrepoforms.field_type.form_mapper.ezmedia'] = new \EzSystems\RepositoryForms\FieldType\Mapper\MediaFormMapper();
    }

    /**
     * Gets the 'ezrepoforms.field_type.form_mapper.ezobjectrelation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\FieldType\Mapper\RelationFormMapper A EzSystems\RepositoryForms\FieldType\Mapper\RelationFormMapper instance.
     */
    protected function getEzrepoforms_FieldType_FormMapper_EzobjectrelationService()
    {
        return $this->services['ezrepoforms.field_type.form_mapper.ezobjectrelation'] = new \EzSystems\RepositoryForms\FieldType\Mapper\RelationFormMapper();
    }

    /**
     * Gets the 'ezrepoforms.field_type.form_mapper.ezobjectrelationlist' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\FieldType\Mapper\RelationListFormMapper A EzSystems\RepositoryForms\FieldType\Mapper\RelationListFormMapper instance.
     */
    protected function getEzrepoforms_FieldType_FormMapper_EzobjectrelationlistService()
    {
        return $this->services['ezrepoforms.field_type.form_mapper.ezobjectrelationlist'] = new \EzSystems\RepositoryForms\FieldType\Mapper\RelationListFormMapper($this->get('ezpublish.api.service.content_type'), $this->get('ezpublish.translation_helper'));
    }

    /**
     * Gets the 'ezrepoforms.field_type.form_mapper.ezpage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\FieldType\Mapper\PageFormMapper A EzSystems\RepositoryForms\FieldType\Mapper\PageFormMapper instance.
     */
    protected function getEzrepoforms_FieldType_FormMapper_EzpageService()
    {
        return $this->services['ezrepoforms.field_type.form_mapper.ezpage'] = new \EzSystems\RepositoryForms\FieldType\Mapper\PageFormMapper($this->get('ezpublish.fieldtype.ezpage.pageservice'));
    }

    /**
     * Gets the 'ezrepoforms.field_type.form_mapper.ezrichtext' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\FieldType\Mapper\RichTextFormMapper A EzSystems\RepositoryForms\FieldType\Mapper\RichTextFormMapper instance.
     */
    protected function getEzrepoforms_FieldType_FormMapper_EzrichtextService()
    {
        return $this->services['ezrepoforms.field_type.form_mapper.ezrichtext'] = new \EzSystems\RepositoryForms\FieldType\Mapper\RichTextFormMapper();
    }

    /**
     * Gets the 'ezrepoforms.field_type.form_mapper.ezselection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\FieldType\Mapper\SelectionFormMapper A EzSystems\RepositoryForms\FieldType\Mapper\SelectionFormMapper instance.
     */
    protected function getEzrepoforms_FieldType_FormMapper_EzselectionService()
    {
        return $this->services['ezrepoforms.field_type.form_mapper.ezselection'] = new \EzSystems\RepositoryForms\FieldType\Mapper\SelectionFormMapper();
    }

    /**
     * Gets the 'ezrepoforms.field_type.form_mapper.ezstring' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\FieldType\Mapper\TextLineFormMapper A EzSystems\RepositoryForms\FieldType\Mapper\TextLineFormMapper instance.
     */
    protected function getEzrepoforms_FieldType_FormMapper_EzstringService()
    {
        return $this->services['ezrepoforms.field_type.form_mapper.ezstring'] = new \EzSystems\RepositoryForms\FieldType\Mapper\TextLineFormMapper();
    }

    /**
     * Gets the 'ezrepoforms.field_type.form_mapper.eztext' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\FieldType\Mapper\TextBlockFormMapper A EzSystems\RepositoryForms\FieldType\Mapper\TextBlockFormMapper instance.
     */
    protected function getEzrepoforms_FieldType_FormMapper_EztextService()
    {
        return $this->services['ezrepoforms.field_type.form_mapper.eztext'] = new \EzSystems\RepositoryForms\FieldType\Mapper\TextBlockFormMapper();
    }

    /**
     * Gets the 'ezrepoforms.field_type.form_mapper.eztime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\FieldType\Mapper\TimeFormMapper A EzSystems\RepositoryForms\FieldType\Mapper\TimeFormMapper instance.
     */
    protected function getEzrepoforms_FieldType_FormMapper_EztimeService()
    {
        return $this->services['ezrepoforms.field_type.form_mapper.eztime'] = new \EzSystems\RepositoryForms\FieldType\Mapper\TimeFormMapper();
    }

    /**
     * Gets the 'ezrepoforms.field_type_form_mapper.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\FieldType\FieldTypeFormMapperRegistry A EzSystems\RepositoryForms\FieldType\FieldTypeFormMapperRegistry instance.
     */
    protected function getEzrepoforms_FieldTypeFormMapper_RegistryService()
    {
        $this->services['ezrepoforms.field_type_form_mapper.registry'] = $instance = new \EzSystems\RepositoryForms\FieldType\FieldTypeFormMapperRegistry();

        $instance->addMapper($this->get('ezrepoforms.field_type.form_mapper.ezbinaryfile'), 'ezbinaryfile');
        $instance->addMapper($this->get('ezrepoforms.field_type.form_mapper.ezcountry'), 'ezcountry');
        $instance->addMapper($this->get('ezrepoforms.field_type.form_mapper.ezdate'), 'ezdate');
        $instance->addMapper($this->get('ezrepoforms.field_type.form_mapper.ezdatetime'), 'ezdatetime');
        $instance->addMapper($this->get('ezrepoforms.field_type.form_mapper.ezfloat'), 'ezfloat');
        $instance->addMapper($this->get('ezrepoforms.field_type.form_mapper.ezimage'), 'ezimage');
        $instance->addMapper($this->get('ezrepoforms.field_type.form_mapper.ezinteger'), 'ezinteger');
        $instance->addMapper($this->get('ezrepoforms.field_type.form_mapper.ezisbn'), 'ezisbn');
        $instance->addMapper($this->get('ezrepoforms.field_type.form_mapper.ezmedia'), 'ezmedia');
        $instance->addMapper($this->get('ezrepoforms.field_type.form_mapper.ezobjectrelation'), 'ezobjectrelation');
        $instance->addMapper($this->get('ezrepoforms.field_type.form_mapper.ezobjectrelationlist'), 'ezobjectrelationlist');
        $instance->addMapper($this->get('ezrepoforms.field_type.form_mapper.ezpage'), 'ezpage');
        $instance->addMapper($this->get('ezrepoforms.field_type.form_mapper.ezrichtext'), 'ezrichtext');
        $instance->addMapper($this->get('ezrepoforms.field_type.form_mapper.ezselection'), 'ezselection');
        $instance->addMapper($this->get('ezrepoforms.field_type.form_mapper.ezstring'), 'ezstring');
        $instance->addMapper($this->get('ezrepoforms.field_type.form_mapper.eztext'), 'eztext');
        $instance->addMapper($this->get('ezrepoforms.field_type.form_mapper.eztime'), 'eztime');

        return $instance;
    }

    /**
     * Gets the 'ezrepoforms.form_processor.content_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Form\Processor\ContentTypeFormProcessor A EzSystems\RepositoryForms\Form\Processor\ContentTypeFormProcessor instance.
     */
    protected function getEzrepoforms_FormProcessor_ContentTypeService()
    {
        return $this->services['ezrepoforms.form_processor.content_type'] = new \EzSystems\RepositoryForms\Form\Processor\ContentTypeFormProcessor($this->get('ezpublish.api.service.content_type'), $this->get('ezpublish.chain_router'), array('redirectRouteAfterPublish' => NULL));
    }

    /**
     * Gets the 'ezrepoforms.form_processor.content_type_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Form\Processor\ContentTypeGroupFormProcessor A EzSystems\RepositoryForms\Form\Processor\ContentTypeGroupFormProcessor instance.
     */
    protected function getEzrepoforms_FormProcessor_ContentTypeGroupService()
    {
        return $this->services['ezrepoforms.form_processor.content_type_group'] = new \EzSystems\RepositoryForms\Form\Processor\ContentTypeGroupFormProcessor($this->get('ezpublish.api.service.content_type'));
    }

    /**
     * Gets the 'ezrepoforms.form_processor.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Form\Processor\LanguageFormProcessor A EzSystems\RepositoryForms\Form\Processor\LanguageFormProcessor instance.
     */
    protected function getEzrepoforms_FormProcessor_LanguageService()
    {
        return $this->services['ezrepoforms.form_processor.language'] = new \EzSystems\RepositoryForms\Form\Processor\LanguageFormProcessor($this->get('ezpublish.api.service.language'));
    }

    /**
     * Gets the 'ezrepoforms.form_processor.policy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Form\Processor\PolicyFormProcessor A EzSystems\RepositoryForms\Form\Processor\PolicyFormProcessor instance.
     */
    protected function getEzrepoforms_FormProcessor_PolicyService()
    {
        return $this->services['ezrepoforms.form_processor.policy'] = new \EzSystems\RepositoryForms\Form\Processor\PolicyFormProcessor($this->get('ezpublish.api.service.role'));
    }

    /**
     * Gets the 'ezrepoforms.form_processor.role' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Form\Processor\RoleFormProcessor A EzSystems\RepositoryForms\Form\Processor\RoleFormProcessor instance.
     */
    protected function getEzrepoforms_FormProcessor_RoleService()
    {
        return $this->services['ezrepoforms.form_processor.role'] = new \EzSystems\RepositoryForms\Form\Processor\RoleFormProcessor($this->get('ezpublish.api.service.role'));
    }

    /**
     * Gets the 'ezrepoforms.form_processor.section' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Form\Processor\SectionFormProcessor A EzSystems\RepositoryForms\Form\Processor\SectionFormProcessor instance.
     */
    protected function getEzrepoforms_FormProcessor_SectionService()
    {
        return $this->services['ezrepoforms.form_processor.section'] = new \EzSystems\RepositoryForms\Form\Processor\SectionFormProcessor($this->get('ezpublish.api.service.section'));
    }

    /**
     * Gets the 'ezrepoforms.limitation.form_mapper.contenttype' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Limitation\Mapper\ContentTypeLimitationMapper A EzSystems\RepositoryForms\Limitation\Mapper\ContentTypeLimitationMapper instance.
     */
    protected function getEzrepoforms_Limitation_FormMapper_ContenttypeService()
    {
        $this->services['ezrepoforms.limitation.form_mapper.contenttype'] = $instance = new \EzSystems\RepositoryForms\Limitation\Mapper\ContentTypeLimitationMapper($this->get('ezpublish.api.service.content_type'));

        $instance->setFormTemplate('EzSystemsRepositoryFormsBundle:Limitation:base_limitation_values.html.twig');

        return $instance;
    }

    /**
     * Gets the 'ezrepoforms.limitation.form_mapper.group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Limitation\Mapper\GroupLimitationMapper A EzSystems\RepositoryForms\Limitation\Mapper\GroupLimitationMapper instance.
     */
    protected function getEzrepoforms_Limitation_FormMapper_GroupService()
    {
        $this->services['ezrepoforms.limitation.form_mapper.group'] = $instance = new \EzSystems\RepositoryForms\Limitation\Mapper\GroupLimitationMapper($this->get('translator'));

        $instance->setFormTemplate('EzSystemsRepositoryFormsBundle:Limitation:base_limitation_values.html.twig');

        return $instance;
    }

    /**
     * Gets the 'ezrepoforms.limitation.form_mapper.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Limitation\Mapper\LanguageLimitationMapper A EzSystems\RepositoryForms\Limitation\Mapper\LanguageLimitationMapper instance.
     */
    protected function getEzrepoforms_Limitation_FormMapper_LanguageService()
    {
        $this->services['ezrepoforms.limitation.form_mapper.language'] = $instance = new \EzSystems\RepositoryForms\Limitation\Mapper\LanguageLimitationMapper($this->get('ezpublish.api.service.language'));

        $instance->setFormTemplate('EzSystemsRepositoryFormsBundle:Limitation:base_limitation_values.html.twig');

        return $instance;
    }

    /**
     * Gets the 'ezrepoforms.limitation.form_mapper.newobjectstate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Limitation\Mapper\ObjectStateLimitationMapper A EzSystems\RepositoryForms\Limitation\Mapper\ObjectStateLimitationMapper instance.
     */
    protected function getEzrepoforms_Limitation_FormMapper_NewobjectstateService()
    {
        $this->services['ezrepoforms.limitation.form_mapper.newobjectstate'] = $instance = new \EzSystems\RepositoryForms\Limitation\Mapper\ObjectStateLimitationMapper($this->get('ezpublish.api.service.object_state'));

        $instance->setFormTemplate('EzSystemsRepositoryFormsBundle:Limitation:base_limitation_values.html.twig');

        return $instance;
    }

    /**
     * Gets the 'ezrepoforms.limitation.form_mapper.newsection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Limitation\Mapper\SectionLimitationMapper A EzSystems\RepositoryForms\Limitation\Mapper\SectionLimitationMapper instance.
     */
    protected function getEzrepoforms_Limitation_FormMapper_NewsectionService()
    {
        $this->services['ezrepoforms.limitation.form_mapper.newsection'] = $instance = new \EzSystems\RepositoryForms\Limitation\Mapper\SectionLimitationMapper($this->get('ezpublish.api.service.section'));

        $instance->setFormTemplate('EzSystemsRepositoryFormsBundle:Limitation:base_limitation_values.html.twig');

        return $instance;
    }

    /**
     * Gets the 'ezrepoforms.limitation.form_mapper.null' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Limitation\Mapper\NullLimitationMapper A EzSystems\RepositoryForms\Limitation\Mapper\NullLimitationMapper instance.
     */
    protected function getEzrepoforms_Limitation_FormMapper_NullService()
    {
        return $this->services['ezrepoforms.limitation.form_mapper.null'] = new \EzSystems\RepositoryForms\Limitation\Mapper\NullLimitationMapper('EzSystemsRepositoryFormsBundle:Limitation:null_limitation_values.html.twig');
    }

    /**
     * Gets the 'ezrepoforms.limitation.form_mapper.objectstate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Limitation\Mapper\ObjectStateLimitationMapper A EzSystems\RepositoryForms\Limitation\Mapper\ObjectStateLimitationMapper instance.
     */
    protected function getEzrepoforms_Limitation_FormMapper_ObjectstateService()
    {
        $this->services['ezrepoforms.limitation.form_mapper.objectstate'] = $instance = new \EzSystems\RepositoryForms\Limitation\Mapper\ObjectStateLimitationMapper($this->get('ezpublish.api.service.object_state'));

        $instance->setFormTemplate('EzSystemsRepositoryFormsBundle:Limitation:base_limitation_values.html.twig');

        return $instance;
    }

    /**
     * Gets the 'ezrepoforms.limitation.form_mapper.owner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Limitation\Mapper\OwnerLimitationMapper A EzSystems\RepositoryForms\Limitation\Mapper\OwnerLimitationMapper instance.
     */
    protected function getEzrepoforms_Limitation_FormMapper_OwnerService()
    {
        $this->services['ezrepoforms.limitation.form_mapper.owner'] = $instance = new \EzSystems\RepositoryForms\Limitation\Mapper\OwnerLimitationMapper($this->get('translator'));

        $instance->setFormTemplate('EzSystemsRepositoryFormsBundle:Limitation:base_limitation_values.html.twig');

        return $instance;
    }

    /**
     * Gets the 'ezrepoforms.limitation.form_mapper.parentcontenttype' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Limitation\Mapper\ContentTypeLimitationMapper A EzSystems\RepositoryForms\Limitation\Mapper\ContentTypeLimitationMapper instance.
     */
    protected function getEzrepoforms_Limitation_FormMapper_ParentcontenttypeService()
    {
        $this->services['ezrepoforms.limitation.form_mapper.parentcontenttype'] = $instance = new \EzSystems\RepositoryForms\Limitation\Mapper\ContentTypeLimitationMapper($this->get('ezpublish.api.service.content_type'));

        $instance->setFormTemplate('EzSystemsRepositoryFormsBundle:Limitation:base_limitation_values.html.twig');

        return $instance;
    }

    /**
     * Gets the 'ezrepoforms.limitation.form_mapper.parentdepth' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Limitation\Mapper\ParentDepthLimitationMapper A EzSystems\RepositoryForms\Limitation\Mapper\ParentDepthLimitationMapper instance.
     */
    protected function getEzrepoforms_Limitation_FormMapper_ParentdepthService()
    {
        $this->services['ezrepoforms.limitation.form_mapper.parentdepth'] = $instance = new \EzSystems\RepositoryForms\Limitation\Mapper\ParentDepthLimitationMapper(20);

        $instance->setFormTemplate('EzSystemsRepositoryFormsBundle:Limitation:base_limitation_values.html.twig');

        return $instance;
    }

    /**
     * Gets the 'ezrepoforms.limitation.form_mapper.parentgroup' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Limitation\Mapper\GroupLimitationMapper A EzSystems\RepositoryForms\Limitation\Mapper\GroupLimitationMapper instance.
     */
    protected function getEzrepoforms_Limitation_FormMapper_ParentgroupService()
    {
        $this->services['ezrepoforms.limitation.form_mapper.parentgroup'] = $instance = new \EzSystems\RepositoryForms\Limitation\Mapper\GroupLimitationMapper($this->get('translator'));

        $instance->setFormTemplate('EzSystemsRepositoryFormsBundle:Limitation:base_limitation_values.html.twig');

        return $instance;
    }

    /**
     * Gets the 'ezrepoforms.limitation.form_mapper.parentowner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Limitation\Mapper\OwnerLimitationMapper A EzSystems\RepositoryForms\Limitation\Mapper\OwnerLimitationMapper instance.
     */
    protected function getEzrepoforms_Limitation_FormMapper_ParentownerService()
    {
        $this->services['ezrepoforms.limitation.form_mapper.parentowner'] = $instance = new \EzSystems\RepositoryForms\Limitation\Mapper\OwnerLimitationMapper($this->get('translator'));

        $instance->setFormTemplate('EzSystemsRepositoryFormsBundle:Limitation:base_limitation_values.html.twig');

        return $instance;
    }

    /**
     * Gets the 'ezrepoforms.limitation.form_mapper.section' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Limitation\Mapper\SectionLimitationMapper A EzSystems\RepositoryForms\Limitation\Mapper\SectionLimitationMapper instance.
     */
    protected function getEzrepoforms_Limitation_FormMapper_SectionService()
    {
        $this->services['ezrepoforms.limitation.form_mapper.section'] = $instance = new \EzSystems\RepositoryForms\Limitation\Mapper\SectionLimitationMapper($this->get('ezpublish.api.service.section'));

        $instance->setFormTemplate('EzSystemsRepositoryFormsBundle:Limitation:base_limitation_values.html.twig');

        return $instance;
    }

    /**
     * Gets the 'ezrepoforms.limitation.form_mapper.siteaccess' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Limitation\Mapper\SiteAccessLimitationMapper A EzSystems\RepositoryForms\Limitation\Mapper\SiteAccessLimitationMapper instance.
     */
    protected function getEzrepoforms_Limitation_FormMapper_SiteaccessService()
    {
        $this->services['ezrepoforms.limitation.form_mapper.siteaccess'] = $instance = new \EzSystems\RepositoryForms\Limitation\Mapper\SiteAccessLimitationMapper(array(0 => 'site'));

        $instance->setFormTemplate('EzSystemsRepositoryFormsBundle:Limitation:base_limitation_values.html.twig');

        return $instance;
    }

    /**
     * Gets the 'ezrepoforms.limitation_form_mapper.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Limitation\LimitationFormMapperRegistry A EzSystems\RepositoryForms\Limitation\LimitationFormMapperRegistry instance.
     */
    protected function getEzrepoforms_LimitationFormMapper_RegistryService()
    {
        $this->services['ezrepoforms.limitation_form_mapper.registry'] = $instance = new \EzSystems\RepositoryForms\Limitation\LimitationFormMapperRegistry();

        $instance->addMapper($this->get('ezrepoforms.limitation.form_mapper.siteaccess'), 'SiteAccess');
        $instance->addMapper($this->get('ezrepoforms.limitation.form_mapper.null'), 'Null');
        $instance->addMapper($this->get('ezrepoforms.limitation.form_mapper.contenttype'), 'Class');
        $instance->addMapper($this->get('ezrepoforms.limitation.form_mapper.parentcontenttype'), 'ParentClass');
        $instance->addMapper($this->get('ezrepoforms.limitation.form_mapper.section'), 'Section');
        $instance->addMapper($this->get('ezrepoforms.limitation.form_mapper.newsection'), 'NewSection');
        $instance->addMapper($this->get('ezrepoforms.limitation.form_mapper.objectstate'), 'State');
        $instance->addMapper($this->get('ezrepoforms.limitation.form_mapper.newobjectstate'), 'NewState');
        $instance->addMapper($this->get('ezrepoforms.limitation.form_mapper.language'), 'Language');
        $instance->addMapper($this->get('ezrepoforms.limitation.form_mapper.owner'), 'Owner');
        $instance->addMapper($this->get('ezrepoforms.limitation.form_mapper.parentowner'), 'ParentOwner');
        $instance->addMapper($this->get('ezrepoforms.limitation.form_mapper.group'), 'Group');
        $instance->addMapper($this->get('ezrepoforms.limitation.form_mapper.parentgroup'), 'ParentGroup');
        $instance->addMapper($this->get('ezrepoforms.limitation.form_mapper.parentdepth'), 'ParentDepth');

        return $instance;
    }

    /**
     * Gets the 'ezrepoforms.policy.edit.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Form\Type\Role\PolicyType A EzSystems\RepositoryForms\Form\Type\Role\PolicyType instance.
     */
    protected function getEzrepoforms_Policy_Edit_FormService()
    {
        return $this->services['ezrepoforms.policy.edit.form'] = new \EzSystems\RepositoryForms\Form\Type\Role\PolicyType(array('content' => array('read' => array('Class' => true, 'Section' => true, 'Owner' => true, 'Group' => true, 'Node' => true, 'Subtree' => true, 'State' => true), 'diff' => array('Class' => true, 'Section' => true, 'Owner' => true, 'Node' => true, 'Subtree' => true), 'view_embed' => array('Class' => true, 'Section' => true, 'Owner' => true, 'Node' => true, 'Subtree' => true), 'create' => array('Class' => true, 'Section' => true, 'ParentOwner' => true, 'ParentGroup' => true, 'ParentClass' => true, 'ParentDepth' => true, 'Node' => true, 'Subtree' => true, 'Language' => true), 'edit' => array('Class' => true, 'Section' => true, 'Owner' => true, 'Group' => true, 'Node' => true, 'Subtree' => true, 'Language' => true, 'State' => true), 'manage_locations' => array('Class' => true, 'Section' => true, 'Owner' => true, 'Subtree' => true), 'hide' => array('Class' => true, 'Section' => true, 'Owner' => true, 'Group' => true, 'Node' => true, 'Subtree' => true, 'Language' => true), 'reverserelatedlist' => array(), 'translate' => array('Class' => true, 'Section' => true, 'Owner' => true, 'Node' => true, 'Subtree' => true, 'Language' => true), 'remove' => array('Class' => true, 'Section' => true, 'Owner' => true, 'Node' => true, 'Subtree' => true, 'State' => true), 'versionread' => array('Class' => true, 'Section' => true, 'Owner' => true, 'Node' => true, 'Subtree' => true), 'versionremove' => array('Class' => true, 'Section' => true, 'Owner' => true, 'Node' => true, 'Subtree' => true), 'translations' => array(), 'urltranslator' => array(), 'pendinglist' => array(), 'restore' => array(), 'cleantrash' => array()), 'class' => array('update' => array(), 'create' => array(), 'delete' => array()), 'state' => array('assign' => array('Class' => true, 'Section' => true, 'Owner' => true, 'Group' => true, 'Node' => true, 'Subtree' => true, 'NewState' => true), 'administrate' => array()), 'role' => array('assign' => array(), 'update' => array(), 'create' => array(), 'delete' => array(), 'read' => array()), 'section' => array('assign' => array('Class' => true, 'Section' => true, 'Owner' => true, 'NewSection' => true), 'edit' => array(), 'view' => array()), 'setup' => array('administrate' => array(), 'install' => array(), 'setup' => array(), 'system_info' => array()), 'user' => array('login' => array('SiteAccess' => true), 'password' => array(), 'preferences' => array(), 'register' => array(), 'selfedit' => array(), 'activation' => array())), $this->get('translator'), $this->get('ezpublish.api.service.role'));
    }

    /**
     * Gets the 'ezrepoforms.policy.limitation.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Form\Type\Role\LimitationType A EzSystems\RepositoryForms\Form\Type\Role\LimitationType instance.
     */
    protected function getEzrepoforms_Policy_Limitation_FormService()
    {
        return $this->services['ezrepoforms.policy.limitation.form'] = new \EzSystems\RepositoryForms\Form\Type\Role\LimitationType($this->get('ezrepoforms.limitation_form_mapper.registry'), $this->get('ezrepoforms.limitation.form_mapper.null'));
    }

    /**
     * Gets the 'ezrepoforms.twig.field_edit_rendering_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Twig\FieldEditRenderingExtension A EzSystems\RepositoryForms\Twig\FieldEditRenderingExtension instance.
     */
    protected function getEzrepoforms_Twig_FieldEditRenderingExtensionService()
    {
        return $this->services['ezrepoforms.twig.field_edit_rendering_extension'] = new \EzSystems\RepositoryForms\Twig\FieldEditRenderingExtension($this->get('ezpublish.templating.field_block_renderer.twig'));
    }

    /**
     * Gets the 'ezrepoforms.validator.default_field_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Validator\Constraints\FieldDefinitionDefaultValueValidator A EzSystems\RepositoryForms\Validator\Constraints\FieldDefinitionDefaultValueValidator instance.
     */
    protected function getEzrepoforms_Validator_DefaultFieldValueService()
    {
        return $this->services['ezrepoforms.validator.default_field_value'] = new \EzSystems\RepositoryForms\Validator\Constraints\FieldDefinitionDefaultValueValidator($this->get('ezpublish.api.service.field_type'));
    }

    /**
     * Gets the 'ezrepoforms.validator.field_settings' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Validator\Constraints\FieldSettingsValidator A EzSystems\RepositoryForms\Validator\Constraints\FieldSettingsValidator instance.
     */
    protected function getEzrepoforms_Validator_FieldSettingsService()
    {
        return $this->services['ezrepoforms.validator.field_settings'] = new \EzSystems\RepositoryForms\Validator\Constraints\FieldSettingsValidator($this->get('ezpublish.api.service.field_type'));
    }

    /**
     * Gets the 'ezrepoforms.validator.unique_content_type_identifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Validator\Constraints\UniqueContentTypeIdentifierValidator A EzSystems\RepositoryForms\Validator\Constraints\UniqueContentTypeIdentifierValidator instance.
     */
    protected function getEzrepoforms_Validator_UniqueContentTypeIdentifierService()
    {
        return $this->services['ezrepoforms.validator.unique_content_type_identifier'] = new \EzSystems\RepositoryForms\Validator\Constraints\UniqueContentTypeIdentifierValidator($this->get('ezpublish.api.service.content_type'));
    }

    /**
     * Gets the 'ezrepoforms.validator.unique_language_code' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Validator\Constraints\UniqueLanguageCodeValidator A EzSystems\RepositoryForms\Validator\Constraints\UniqueLanguageCodeValidator instance.
     */
    protected function getEzrepoforms_Validator_UniqueLanguageCodeService()
    {
        return $this->services['ezrepoforms.validator.unique_language_code'] = new \EzSystems\RepositoryForms\Validator\Constraints\UniqueLanguageCodeValidator($this->get('ezpublish.api.service.language'));
    }

    /**
     * Gets the 'ezrepoforms.validator.unique_role_identifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Validator\Constraints\UniqueRoleIdentifierValidator A EzSystems\RepositoryForms\Validator\Constraints\UniqueRoleIdentifierValidator instance.
     */
    protected function getEzrepoforms_Validator_UniqueRoleIdentifierService()
    {
        return $this->services['ezrepoforms.validator.unique_role_identifier'] = new \EzSystems\RepositoryForms\Validator\Constraints\UniqueRoleIdentifierValidator($this->get('ezpublish.api.service.role'));
    }

    /**
     * Gets the 'ezrepoforms.validator.unique_section_identifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Validator\Constraints\UniqueSectionIdentifierValidator A EzSystems\RepositoryForms\Validator\Constraints\UniqueSectionIdentifierValidator instance.
     */
    protected function getEzrepoforms_Validator_UniqueSectionIdentifierService()
    {
        return $this->services['ezrepoforms.validator.unique_section_identifier'] = new \EzSystems\RepositoryForms\Validator\Constraints\UniqueSectionIdentifierValidator($this->get('ezpublish.api.service.section'));
    }

    /**
     * Gets the 'ezrepoforms.validator.validator_configuration' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\RepositoryForms\Validator\Constraints\ValidatorConfigurationValidator A EzSystems\RepositoryForms\Validator\Constraints\ValidatorConfigurationValidator instance.
     */
    protected function getEzrepoforms_Validator_ValidatorConfigurationService()
    {
        return $this->services['ezrepoforms.validator.validator_configuration'] = new \EzSystems\RepositoryForms\Validator\Constraints\ValidatorConfigurationValidator($this->get('ezpublish.api.service.field_type'));
    }

    /**
     * Gets the 'ezsystems.platformui.application_config.aggregator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\ApplicationConfig\Aggregator A EzSystems\PlatformUIBundle\ApplicationConfig\Aggregator instance.
     */
    protected function getEzsystems_Platformui_ApplicationConfig_AggregatorService()
    {
        $this->services['ezsystems.platformui.application_config.aggregator'] = $instance = new \EzSystems\PlatformUIBundle\ApplicationConfig\Aggregator();

        $instance->addProviders(array('sessionInfo' => $this->get('ezsystems.platformui.application_config.provider.session_info'), 'anonymousUserId' => $this->get('ezsystems.platformui.application_config.provider.anonymous_user_id'), 'countriesInfo' => $this->get('ezsystems.platformui.application_config.provider.countries_info'), 'rootInfo' => $this->get('ezsystems.platformui.application_config.provider.root_info'), 'languages' => $this->get('ezsystems.platformui.application_config.provider.languages')));

        return $instance;
    }

    /**
     * Gets the 'ezsystems.platformui.application_config.provider.anonymous_user_id' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\ApplicationConfig\Providers\AnonymousUserId A EzSystems\PlatformUIBundle\ApplicationConfig\Providers\AnonymousUserId instance.
     */
    protected function getEzsystems_Platformui_ApplicationConfig_Provider_AnonymousUserIdService()
    {
        return $this->services['ezsystems.platformui.application_config.provider.anonymous_user_id'] = new \EzSystems\PlatformUIBundle\ApplicationConfig\Providers\AnonymousUserId($this->get('ezpublish.chain_router'), $this->get("ezpublish.config.resolver")->getParameter("anonymous_user_id", null, null));
    }

    /**
     * Gets the 'ezsystems.platformui.application_config.provider.countries_info' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\ApplicationConfig\Providers\Value A EzSystems\PlatformUIBundle\ApplicationConfig\Providers\Value instance.
     */
    protected function getEzsystems_Platformui_ApplicationConfig_Provider_CountriesInfoService()
    {
        return $this->services['ezsystems.platformui.application_config.provider.countries_info'] = new \EzSystems\PlatformUIBundle\ApplicationConfig\Providers\Value(array('AF' => array('Name' => 'Afghanistan', 'Alpha2' => 'AF', 'Alpha3' => 'AFG', 'IDC' => '93'), 'AX' => array('Name' => 'Åland', 'Alpha2' => 'AX', 'Alpha3' => 'ALA', 'IDC' => '358'), 'AL' => array('Name' => 'Albania', 'Alpha2' => 'AL', 'Alpha3' => 'ALB', 'IDC' => '355'), 'DZ' => array('Name' => 'Algeria', 'Alpha2' => 'DZ', 'Alpha3' => 'DZA', 'IDC' => '213'), 'AS' => array('Name' => 'American Samoa', 'Alpha2' => 'AS', 'Alpha3' => 'ASM', 'IDC' => '1684'), 'AD' => array('Name' => 'Andorra', 'Alpha2' => 'AD', 'Alpha3' => 'AND', 'IDC' => '376'), 'AO' => array('Name' => 'Angola', 'Alpha2' => 'AO', 'Alpha3' => 'AGO', 'IDC' => '244'), 'AI' => array('Name' => 'Anguilla', 'Alpha2' => 'AI', 'Alpha3' => 'AIA', 'IDC' => '1264'), 'AQ' => array('Name' => 'Antarctica', 'Alpha2' => 'AQ', 'Alpha3' => 'ATA', 'IDC' => '672'), 'AG' => array('Name' => 'Antigua and Barbuda', 'Alpha2' => 'AG', 'Alpha3' => 'ATG', 'IDC' => '1268'), 'AR' => array('Name' => 'Argentina', 'Alpha2' => 'AR', 'Alpha3' => 'ARG', 'IDC' => '54'), 'AM' => array('Name' => 'Armenia', 'Alpha2' => 'AM', 'Alpha3' => 'ARM', 'IDC' => '374'), 'AW' => array('Name' => 'Aruba', 'Alpha2' => 'AW', 'Alpha3' => 'ABW', 'IDC' => '297'), 'AU' => array('Name' => 'Australia', 'Alpha2' => 'AU', 'Alpha3' => 'AUS', 'IDC' => '61'), 'AT' => array('Name' => 'Austria', 'Alpha2' => 'AT', 'Alpha3' => 'AUT', 'IDC' => '43'), 'AZ' => array('Name' => 'Azerbaijan', 'Alpha2' => 'AZ', 'Alpha3' => 'AZE', 'IDC' => '994'), 'BS' => array('Name' => 'Bahamas', 'Alpha2' => 'BS', 'Alpha3' => 'BHS', 'IDC' => '1242'), 'BH' => array('Name' => 'Bahrain', 'Alpha2' => 'BH', 'Alpha3' => 'BHR', 'IDC' => '973'), 'BD' => array('Name' => 'Bangladesh', 'Alpha2' => 'BD', 'Alpha3' => 'BGD', 'IDC' => '880'), 'BB' => array('Name' => 'Barbados', 'Alpha2' => 'BB', 'Alpha3' => 'BRB', 'IDC' => '1246'), 'BY' => array('Name' => 'Belarus', 'Alpha2' => 'BY', 'Alpha3' => 'BLR', 'IDC' => '375'), 'BE' => array('Name' => 'Belgium', 'Alpha2' => 'BE', 'Alpha3' => 'BEL', 'IDC' => '32'), 'BZ' => array('Name' => 'Belize', 'Alpha2' => 'BZ', 'Alpha3' => 'BLZ', 'IDC' => '501'), 'BJ' => array('Name' => 'Benin', 'Alpha2' => 'BJ', 'Alpha3' => 'BEN', 'IDC' => '229'), 'BM' => array('Name' => 'Bermuda', 'Alpha2' => 'BM', 'Alpha3' => 'BMU', 'IDC' => '1441'), 'BT' => array('Name' => 'Bhutan', 'Alpha2' => 'BT', 'Alpha3' => 'BTN', 'IDC' => '975'), 'BO' => array('Name' => 'Bolivia', 'Alpha2' => 'BO', 'Alpha3' => 'BOL', 'IDC' => '591'), 'BA' => array('Name' => 'Bosnia and Herzegovina', 'Alpha2' => 'BA', 'Alpha3' => 'BIH', 'IDC' => '387'), 'BW' => array('Name' => 'Botswana', 'Alpha2' => 'BW', 'Alpha3' => 'BWA', 'IDC' => '267'), 'BV' => array('Name' => 'Bouvet Island', 'Alpha2' => 'BV', 'Alpha3' => 'BVT', 'IDC' => '47'), 'BR' => array('Name' => 'Brazil', 'Alpha2' => 'BR', 'Alpha3' => 'BRA', 'IDC' => '55'), 'IO' => array('Name' => 'British Indian Ocean Territory', 'Alpha2' => 'IO', 'Alpha3' => 'IOT', 'IDC' => '246'), 'BN' => array('Name' => 'Brunei Darussalam', 'Alpha2' => 'BN', 'Alpha3' => 'BRN', 'IDC' => '673'), 'BG' => array('Name' => 'Bulgaria', 'Alpha2' => 'BG', 'Alpha3' => 'BGR', 'IDC' => '359'), 'BF' => array('Name' => 'Burkina Faso', 'Alpha2' => 'BF', 'Alpha3' => 'BFA', 'IDC' => '226'), 'BI' => array('Name' => 'Burundi', 'Alpha2' => 'BI', 'Alpha3' => 'BDI', 'IDC' => '257'), 'KH' => array('Name' => 'Cambodia', 'Alpha2' => 'KH', 'Alpha3' => 'KHM', 'IDC' => '855'), 'CM' => array('Name' => 'Cameroon', 'Alpha2' => 'CM', 'Alpha3' => 'CMR', 'IDC' => '237'), 'CA' => array('Name' => 'Canada', 'Alpha2' => 'CA', 'Alpha3' => 'CAN', 'IDC' => '1'), 'CV' => array('Name' => 'Cape Verde', 'Alpha2' => 'CV', 'Alpha3' => 'CPV', 'IDC' => '238'), 'KY' => array('Name' => 'Cayman Islands', 'Alpha2' => 'KY', 'Alpha3' => 'CYM', 'IDC' => '1345'), 'CF' => array('Name' => 'Central African Republic', 'Alpha2' => 'CF', 'Alpha3' => 'CAF', 'IDC' => '236'), 'TD' => array('Name' => 'Chad', 'Alpha2' => 'TD', 'Alpha3' => 'TCD', 'IDC' => '235'), 'CL' => array('Name' => 'Chile', 'Alpha2' => 'CL', 'Alpha3' => 'CHL', 'IDC' => '56'), 'CN' => array('Name' => 'China', 'Alpha2' => 'CN', 'Alpha3' => 'CHN', 'IDC' => '86'), 'CX' => array('Name' => 'Christmas Island', 'Alpha2' => 'CX', 'Alpha3' => 'CXR', 'IDC' => '61'), 'CC' => array('Name' => 'Cocos (Keeling) Islands', 'Alpha2' => 'CC', 'Alpha3' => 'CCK', 'IDC' => '61'), 'CO' => array('Name' => 'Colombia', 'Alpha2' => 'CO', 'Alpha3' => 'COL', 'IDC' => '57'), 'KM' => array('Name' => 'Comoros', 'Alpha2' => 'KM', 'Alpha3' => 'COM', 'IDC' => '269'), 'CG' => array('Name' => 'Congo', 'Alpha2' => 'CG', 'Alpha3' => 'COG', 'IDC' => '242'), 'CD' => array('Name' => 'Congo, The Democratic Republic Of The', 'Alpha2' => 'CD', 'Alpha3' => 'COD', 'IDC' => '243'), 'CK' => array('Name' => 'Cook Islands', 'Alpha2' => 'CK', 'Alpha3' => 'COK', 'IDC' => '682'), 'CR' => array('Name' => 'Costa Rica', 'Alpha2' => 'CR', 'Alpha3' => 'CRI', 'IDC' => '506'), 'CI' => array('Name' => 'Côte d\'Ivoire', 'Alpha2' => 'CI', 'Alpha3' => 'CIV', 'IDC' => '225'), 'HR' => array('Name' => 'Croatia', 'Alpha2' => 'HR', 'Alpha3' => 'HRV', 'IDC' => '385'), 'CU' => array('Name' => 'Cuba', 'Alpha2' => 'CU', 'Alpha3' => 'CUB', 'IDC' => '53'), 'CY' => array('Name' => 'Cyprus', 'Alpha2' => 'CY', 'Alpha3' => 'CYP', 'IDC' => '357'), 'CZ' => array('Name' => 'Czech Republic', 'Alpha2' => 'CZ', 'Alpha3' => 'CZE', 'IDC' => '420'), 'DK' => array('Name' => 'Denmark', 'Alpha2' => 'DK', 'Alpha3' => 'DNK', 'IDC' => '45'), 'DJ' => array('Name' => 'Djibouti', 'Alpha2' => 'DJ', 'Alpha3' => 'DJI', 'IDC' => '253'), 'DM' => array('Name' => 'Dominica', 'Alpha2' => 'DM', 'Alpha3' => 'DMA', 'IDC' => '1767'), 'DO' => array('Name' => 'Dominican Republic', 'Alpha2' => 'DO', 'Alpha3' => 'DOM', 'IDC' => '1809'), 'EC' => array('Name' => 'Ecuador', 'Alpha2' => 'EC', 'Alpha3' => 'ECU', 'IDC' => '593'), 'EG' => array('Name' => 'Egypt', 'Alpha2' => 'EG', 'Alpha3' => 'EGY', 'IDC' => '20'), 'SV' => array('Name' => 'El Salvador', 'Alpha2' => 'SV', 'Alpha3' => 'SLV', 'IDC' => '503'), 'GQ' => array('Name' => 'Equatorial Guinea', 'Alpha2' => 'GQ', 'Alpha3' => 'GNQ', 'IDC' => '240'), 'ER' => array('Name' => 'Eritrea', 'Alpha2' => 'ER', 'Alpha3' => 'ERI', 'IDC' => '291'), 'EE' => array('Name' => 'Estonia', 'Alpha2' => 'EE', 'Alpha3' => 'EST', 'IDC' => '372'), 'ET' => array('Name' => 'Ethiopia', 'Alpha2' => 'ET', 'Alpha3' => 'ETH', 'IDC' => '251'), 'FK' => array('Name' => 'Falkland Islands (Malvinas)', 'Alpha2' => 'FK', 'Alpha3' => 'FLK', 'IDC' => '500'), 'FO' => array('Name' => 'Faroe Islands', 'Alpha2' => 'FO', 'Alpha3' => 'FRO', 'IDC' => '298'), 'FJ' => array('Name' => 'Fiji', 'Alpha2' => 'FJ', 'Alpha3' => 'FJI', 'IDC' => '679'), 'FI' => array('Name' => 'Finland', 'Alpha2' => 'FI', 'Alpha3' => 'FIN', 'IDC' => '358'), 'FR' => array('Name' => 'France', 'Alpha2' => 'FR', 'Alpha3' => 'FRA', 'IDC' => '33'), 'GF' => array('Name' => 'French Guiana', 'Alpha2' => 'GF', 'Alpha3' => 'GUF', 'IDC' => '594'), 'PF' => array('Name' => 'French Polynesia', 'Alpha2' => 'PF', 'Alpha3' => 'PYF', 'IDC' => '689'), 'TF' => array('Name' => 'French Southern Territories', 'Alpha2' => 'TF', 'Alpha3' => 'ATF', 'IDC' => '0'), 'GA' => array('Name' => 'Gabon', 'Alpha2' => 'GA', 'Alpha3' => 'GAB', 'IDC' => '241'), 'GM' => array('Name' => 'Gambia', 'Alpha2' => 'GM', 'Alpha3' => 'GMB', 'IDC' => '220'), 'GE' => array('Name' => 'Georgia', 'Alpha2' => 'GE', 'Alpha3' => 'GEO', 'IDC' => '995'), 'DE' => array('Name' => 'Germany', 'Alpha2' => 'DE', 'Alpha3' => 'DEU', 'IDC' => '49'), 'GH' => array('Name' => 'Ghana', 'Alpha2' => 'GH', 'Alpha3' => 'GHA', 'IDC' => '233'), 'GI' => array('Name' => 'Gibraltar', 'Alpha2' => 'GI', 'Alpha3' => 'GIB', 'IDC' => '350'), 'GR' => array('Name' => 'Greece', 'Alpha2' => 'GR', 'Alpha3' => 'GRC', 'IDC' => '30'), 'GL' => array('Name' => 'Greenland', 'Alpha2' => 'GL', 'Alpha3' => 'GRL', 'IDC' => '299'), 'GD' => array('Name' => 'Grenada', 'Alpha2' => 'GD', 'Alpha3' => 'GRD', 'IDC' => '1473'), 'GP' => array('Name' => 'Guadeloupe', 'Alpha2' => 'GP', 'Alpha3' => 'GLP', 'IDC' => '590'), 'GU' => array('Name' => 'Guam', 'Alpha2' => 'GU', 'Alpha3' => 'GUM', 'IDC' => '1671'), 'GT' => array('Name' => 'Guatemala', 'Alpha2' => 'GT', 'Alpha3' => 'GTM', 'IDC' => '502'), 'GG' => array('Name' => 'Guernsey', 'Alpha2' => 'GG', 'Alpha3' => 'GGY', 'IDC' => '44'), 'GN' => array('Name' => 'Guinea', 'Alpha2' => 'GN', 'Alpha3' => 'GIN', 'IDC' => '224'), 'GW' => array('Name' => 'Guinea-Bissau', 'Alpha2' => 'GW', 'Alpha3' => 'GNB', 'IDC' => '245'), 'GY' => array('Name' => 'Guyana', 'Alpha2' => 'GY', 'Alpha3' => 'GUY', 'IDC' => '592'), 'HT' => array('Name' => 'Haiti', 'Alpha2' => 'HT', 'Alpha3' => 'HTI', 'IDC' => '509'), 'HM' => array('Name' => 'Heard Island and McDonald Islands', 'Alpha2' => 'HM', 'Alpha3' => 'HMD', 'IDC' => '672'), 'HN' => array('Name' => 'Honduras', 'Alpha2' => 'HN', 'Alpha3' => 'HND', 'IDC' => '504'), 'HK' => array('Name' => 'Hong Kong', 'Alpha2' => 'HK', 'Alpha3' => 'HKG', 'IDC' => '852'), 'HU' => array('Name' => 'Hungary', 'Alpha2' => 'HU', 'Alpha3' => 'HUN', 'IDC' => '36'), 'IS' => array('Name' => 'Iceland', 'Alpha2' => 'IS', 'Alpha3' => 'ISL', 'IDC' => '354'), 'IN' => array('Name' => 'India', 'Alpha2' => 'IN', 'Alpha3' => 'IND', 'IDC' => '91'), 'ID' => array('Name' => 'Indonesia', 'Alpha2' => 'ID', 'Alpha3' => 'IDN', 'IDC' => '62'), 'IR' => array('Name' => 'Iran, Islamic Republic of', 'Alpha2' => 'IR', 'Alpha3' => 'IRN', 'IDC' => '98'), 'IQ' => array('Name' => 'Iraq', 'Alpha2' => 'IQ', 'Alpha3' => 'IRQ', 'IDC' => '964'), 'IE' => array('Name' => 'Ireland', 'Alpha2' => 'IE', 'Alpha3' => 'IRL', 'IDC' => '353'), 'IM' => array('Name' => 'Isle of Man', 'Alpha2' => 'IM', 'Alpha3' => 'IMN', 'IDC' => '44'), 'IL' => array('Name' => 'Israel', 'Alpha2' => 'IL', 'Alpha3' => 'ISR', 'IDC' => '972'), 'IT' => array('Name' => 'Italy', 'Alpha2' => 'IT', 'Alpha3' => 'ITA', 'IDC' => '39'), 'JM' => array('Name' => 'Jamaica', 'Alpha2' => 'JM', 'Alpha3' => 'JAM', 'IDC' => '1876'), 'JP' => array('Name' => 'Japan', 'Alpha2' => 'JP', 'Alpha3' => 'JPN', 'IDC' => '81'), 'JE' => array('Name' => 'Jersey', 'Alpha2' => 'JE', 'Alpha3' => 'JEY', 'IDC' => '44'), 'JO' => array('Name' => 'Jordan', 'Alpha2' => 'JO', 'Alpha3' => 'JOR', 'IDC' => '962'), 'KZ' => array('Name' => 'Kazakhstan', 'Alpha2' => 'KZ', 'Alpha3' => 'KAZ', 'IDC' => '7'), 'KE' => array('Name' => 'Kenya', 'Alpha2' => 'KE', 'Alpha3' => 'KEN', 'IDC' => '254'), 'KI' => array('Name' => 'Kiribati', 'Alpha2' => 'KI', 'Alpha3' => 'KIR', 'IDC' => '686'), 'KP' => array('Name' => 'Korea, Democratic People\'s Republic of', 'Alpha2' => 'KP', 'Alpha3' => 'PRK', 'IDC' => '850'), 'KR' => array('Name' => 'Korea, Republic of', 'Alpha2' => 'KR', 'Alpha3' => 'KOR', 'IDC' => '82'), 'KW' => array('Name' => 'Kuwait', 'Alpha2' => 'KW', 'Alpha3' => 'KWT', 'IDC' => '965'), 'KG' => array('Name' => 'Kyrgyzstan', 'Alpha2' => 'KG', 'Alpha3' => 'KGZ', 'IDC' => '996'), 'LA' => array('Name' => 'Lao People\'s Democratic Republic', 'Alpha2' => 'LA', 'Alpha3' => 'LAO', 'IDC' => '856'), 'LV' => array('Name' => 'Latvia', 'Alpha2' => 'LV', 'Alpha3' => 'LVA', 'IDC' => '371'), 'LB' => array('Name' => 'Lebanon', 'Alpha2' => 'LB', 'Alpha3' => 'LBN', 'IDC' => '961'), 'LS' => array('Name' => 'Lesotho', 'Alpha2' => 'LS', 'Alpha3' => 'LSO', 'IDC' => '266'), 'LR' => array('Name' => 'Liberia', 'Alpha2' => 'LR', 'Alpha3' => 'LBR', 'IDC' => '231'), 'LY' => array('Name' => 'Libyan Arab Jamahiriya', 'Alpha2' => 'LY', 'Alpha3' => 'LBY', 'IDC' => '218'), 'LI' => array('Name' => 'Liechtenstein', 'Alpha2' => 'LI', 'Alpha3' => 'LIE', 'IDC' => '423'), 'LT' => array('Name' => 'Lithuania', 'Alpha2' => 'LT', 'Alpha3' => 'LTU', 'IDC' => '370'), 'LU' => array('Name' => 'Luxembourg', 'Alpha2' => 'LU', 'Alpha3' => 'LUX', 'IDC' => '352'), 'MO' => array('Name' => 'Macau', 'Alpha2' => 'MO', 'Alpha3' => 'MAC', 'IDC' => '853'), 'MK' => array('Name' => 'Macedonia, The Former Yugoslav Republic of', 'Alpha2' => 'MK', 'Alpha3' => 'MKD', 'IDC' => '389'), 'MG' => array('Name' => 'Madagascar', 'Alpha2' => 'MG', 'Alpha3' => 'MDG', 'IDC' => '261'), 'MW' => array('Name' => 'Malawi', 'Alpha2' => 'MW', 'Alpha3' => 'MWI', 'IDC' => '265'), 'MY' => array('Name' => 'Malaysia', 'Alpha2' => 'MY', 'Alpha3' => 'MYS', 'IDC' => '60'), 'MV' => array('Name' => 'Maldives', 'Alpha2' => 'MV', 'Alpha3' => 'MDV', 'IDC' => '960'), 'ML' => array('Name' => 'Mali', 'Alpha2' => 'ML', 'Alpha3' => 'MLI', 'IDC' => '223'), 'MT' => array('Name' => 'Malta', 'Alpha2' => 'MT', 'Alpha3' => 'MLT', 'IDC' => '356'), 'MH' => array('Name' => 'Marshall Islands', 'Alpha2' => 'MH', 'Alpha3' => 'MHL', 'IDC' => '692'), 'MQ' => array('Name' => 'Martinique', 'Alpha2' => 'MQ', 'Alpha3' => 'MTQ', 'IDC' => '596'), 'MR' => array('Name' => 'Mauritania', 'Alpha2' => 'MR', 'Alpha3' => 'MRT', 'IDC' => '222'), 'MU' => array('Name' => 'Mauritius', 'Alpha2' => 'MU', 'Alpha3' => 'MUS', 'IDC' => '230'), 'YT' => array('Name' => 'Mayotte', 'Alpha2' => 'YT', 'Alpha3' => 'MYT', 'IDC' => '262'), 'MX' => array('Name' => 'Mexico', 'Alpha2' => 'MX', 'Alpha3' => 'MEX', 'IDC' => '52'), 'FM' => array('Name' => 'Micronesia, Federated States of', 'Alpha2' => 'FM', 'Alpha3' => 'FSM', 'IDC' => '691'), 'MD' => array('Name' => 'Moldova, Republic of', 'Alpha2' => 'MD', 'Alpha3' => 'MDA', 'IDC' => '373'), 'MC' => array('Name' => 'Monaco', 'Alpha2' => 'MC', 'Alpha3' => 'MCO', 'IDC' => '377'), 'MN' => array('Name' => 'Mongolia', 'Alpha2' => 'MN', 'Alpha3' => 'MNG', 'IDC' => '976'), 'ME' => array('Name' => 'Montenegro', 'Alpha2' => 'ME', 'Alpha3' => 'MNE', 'IDC' => '382'), 'MS' => array('Name' => 'Montserrat', 'Alpha2' => 'MS', 'Alpha3' => 'MSR', 'IDC' => '1664'), 'MA' => array('Name' => 'Morocco', 'Alpha2' => 'MA', 'Alpha3' => 'MAR', 'IDC' => '212'), 'MZ' => array('Name' => 'Mozambique', 'Alpha2' => 'MZ', 'Alpha3' => 'MOZ', 'IDC' => '258'), 'MM' => array('Name' => 'Myanmar', 'Alpha2' => 'MM', 'Alpha3' => 'MMR', 'IDC' => '95'), 'NA' => array('Name' => 'Namibia', 'Alpha2' => 'NA', 'Alpha3' => 'NAM', 'IDC' => '264'), 'NR' => array('Name' => 'Nauru', 'Alpha2' => 'NR', 'Alpha3' => 'NRU', 'IDC' => '674'), 'NP' => array('Name' => 'Nepal', 'Alpha2' => 'NP', 'Alpha3' => 'NPL', 'IDC' => '977'), 'NL' => array('Name' => 'Netherlands', 'Alpha2' => 'NL', 'Alpha3' => 'NLD', 'IDC' => '31'), 'AN' => array('Name' => 'Netherlands Antilles', 'Alpha2' => 'AN', 'Alpha3' => 'ANT', 'IDC' => '599'), 'NC' => array('Name' => 'New Caledonia', 'Alpha2' => 'NC', 'Alpha3' => 'NCL', 'IDC' => '687'), 'NZ' => array('Name' => 'New Zealand', 'Alpha2' => 'NZ', 'Alpha3' => 'NZL', 'IDC' => '64'), 'NI' => array('Name' => 'Nicaragua', 'Alpha2' => 'NI', 'Alpha3' => 'NIC', 'IDC' => '505'), 'NE' => array('Name' => 'Niger', 'Alpha2' => 'NE', 'Alpha3' => 'NER', 'IDC' => '227'), 'NG' => array('Name' => 'Nigeria', 'Alpha2' => 'NG', 'Alpha3' => 'NGA', 'IDC' => '234'), 'NU' => array('Name' => 'Niue', 'Alpha2' => 'NU', 'Alpha3' => 'NIU', 'IDC' => '683'), 'NF' => array('Name' => 'Norfolk Island', 'Alpha2' => 'NF', 'Alpha3' => 'NFK', 'IDC' => '6723'), 'MP' => array('Name' => 'Northern Mariana Islands', 'Alpha2' => 'MP', 'Alpha3' => 'MNP', 'IDC' => '1670'), 'NO' => array('Name' => 'Norway', 'Alpha2' => 'NO', 'Alpha3' => 'NOR', 'IDC' => '47'), 'OM' => array('Name' => 'Oman', 'Alpha2' => 'OM', 'Alpha3' => 'OMN', 'IDC' => '968'), 'PK' => array('Name' => 'Pakistan', 'Alpha2' => 'PK', 'Alpha3' => 'PAK', 'IDC' => '92'), 'PW' => array('Name' => 'Palau', 'Alpha2' => 'PW', 'Alpha3' => 'PLW', 'IDC' => '680'), 'PS' => array('Name' => 'Palestinian Territory, Occupied', 'Alpha2' => 'PS', 'Alpha3' => 'PSE', 'IDC' => '970'), 'PA' => array('Name' => 'Panama', 'Alpha2' => 'PA', 'Alpha3' => 'PAN', 'IDC' => '507'), 'PG' => array('Name' => 'Papua New Guinea', 'Alpha2' => 'PG', 'Alpha3' => 'PNG', 'IDC' => '675'), 'PY' => array('Name' => 'Paraguay', 'Alpha2' => 'PY', 'Alpha3' => 'PRY', 'IDC' => '595'), 'PE' => array('Name' => 'Peru', 'Alpha2' => 'PE', 'Alpha3' => 'PER', 'IDC' => '51'), 'PH' => array('Name' => 'Philippines', 'Alpha2' => 'PH', 'Alpha3' => 'PHL', 'IDC' => '63'), 'PN' => array('Name' => 'Pitcairn', 'Alpha2' => 'PN', 'Alpha3' => 'PCN', 'IDC' => '64'), 'PL' => array('Name' => 'Poland', 'Alpha2' => 'PL', 'Alpha3' => 'POL', 'IDC' => '48'), 'PT' => array('Name' => 'Portugal', 'Alpha2' => 'PT', 'Alpha3' => 'PRT', 'IDC' => '351'), 'PR' => array('Name' => 'Puerto Rico', 'Alpha2' => 'PR', 'Alpha3' => 'PRI', 'IDC' => '1787'), 'QA' => array('Name' => 'Qatar', 'Alpha2' => 'QA', 'Alpha3' => 'QAT', 'IDC' => '974'), 'RE' => array('Name' => 'Reunion', 'Alpha2' => 'RE', 'Alpha3' => 'REU', 'IDC' => '262'), 'RO' => array('Name' => 'Romania', 'Alpha2' => 'RO', 'Alpha3' => 'ROU', 'IDC' => '40'), 'RU' => array('Name' => 'Russian Federation', 'Alpha2' => 'RU', 'Alpha3' => 'RUS', 'IDC' => '7'), 'RW' => array('Name' => 'Rwanda', 'Alpha2' => 'RW', 'Alpha3' => 'RWA', 'IDC' => '250'), 'BL' => array('Name' => 'Saint Barthélemy', 'Alpha2' => 'BL', 'Alpha3' => 'BLM', 'IDC' => '590'), 'SH' => array('Name' => 'Saint Helena', 'Alpha2' => 'SH', 'Alpha3' => 'SHN', 'IDC' => '290'), 'KN' => array('Name' => 'Saint Kitts and Nevis', 'Alpha2' => 'KN', 'Alpha3' => 'KNA', 'IDC' => '1869'), 'LC' => array('Name' => 'Saint Lucia', 'Alpha2' => 'LC', 'Alpha3' => 'LCA', 'IDC' => '1758'), 'MF' => array('Name' => 'Saint Martin', 'Alpha2' => 'MF', 'Alpha3' => 'MAF', 'IDC' => '590'), 'PM' => array('Name' => 'Saint Pierre and Miquelon', 'Alpha2' => 'PM', 'Alpha3' => 'SPM', 'IDC' => '508'), 'VC' => array('Name' => 'Saint Vincent and The Grenadines', 'Alpha2' => 'VC', 'Alpha3' => 'VCT', 'IDC' => '1784'), 'WS' => array('Name' => 'Samoa', 'Alpha2' => 'WS', 'Alpha3' => 'WSM', 'IDC' => '685'), 'SM' => array('Name' => 'San Marino', 'Alpha2' => 'SM', 'Alpha3' => 'SMR', 'IDC' => '378'), 'ST' => array('Name' => 'Sao Tome and Principe', 'Alpha2' => 'ST', 'Alpha3' => 'STP', 'IDC' => '239'), 'SA' => array('Name' => 'Saudi Arabia', 'Alpha2' => 'SA', 'Alpha3' => 'SAU', 'IDC' => '966'), 'SN' => array('Name' => 'Senegal', 'Alpha2' => 'SN', 'Alpha3' => 'SEN', 'IDC' => '221'), 'RS' => array('Name' => 'Serbia', 'Alpha2' => 'RS', 'Alpha3' => 'SRB', 'IDC' => '381'), 'SC' => array('Name' => 'Seychelles', 'Alpha2' => 'SC', 'Alpha3' => 'SYC', 'IDC' => '248'), 'SL' => array('Name' => 'Sierra Leone', 'Alpha2' => 'SL', 'Alpha3' => 'SLE', 'IDC' => '232'), 'SG' => array('Name' => 'Singapore', 'Alpha2' => 'SG', 'Alpha3' => 'SGP', 'IDC' => '65'), 'SK' => array('Name' => 'Slovakia', 'Alpha2' => 'SK', 'Alpha3' => 'SVK', 'IDC' => '421'), 'SI' => array('Name' => 'Slovenia', 'Alpha2' => 'SI', 'Alpha3' => 'SVN', 'IDC' => '386'), 'SB' => array('Name' => 'Solomon Islands', 'Alpha2' => 'SB', 'Alpha3' => 'SLB', 'IDC' => '677'), 'SO' => array('Name' => 'Somalia', 'Alpha2' => 'SO', 'Alpha3' => 'SOM', 'IDC' => '252'), 'ZA' => array('Name' => 'South Africa', 'Alpha2' => 'ZA', 'Alpha3' => 'ZAF', 'IDC' => '27'), 'GS' => array('Name' => 'South Georgia and The South Sandwich Islands', 'Alpha2' => 'GS', 'Alpha3' => 'SGS', 'IDC' => '500'), 'ES' => array('Name' => 'Spain', 'Alpha2' => 'ES', 'Alpha3' => 'ESP', 'IDC' => '34'), 'LK' => array('Name' => 'Sri Lanka', 'Alpha2' => 'LK', 'Alpha3' => 'LKA', 'IDC' => '94'), 'SD' => array('Name' => 'Sudan', 'Alpha2' => 'SD', 'Alpha3' => 'SDN', 'IDC' => '249'), 'SR' => array('Name' => 'Suriname', 'Alpha2' => 'SR', 'Alpha3' => 'SUR', 'IDC' => '597'), 'SJ' => array('Name' => 'Svalbard and Jan Mayen', 'Alpha2' => 'SJ', 'Alpha3' => 'SJM', 'IDC' => '47'), 'SZ' => array('Name' => 'Swaziland', 'Alpha2' => 'SZ', 'Alpha3' => 'SWZ', 'IDC' => '268'), 'SE' => array('Name' => 'Sweden', 'Alpha2' => 'SE', 'Alpha3' => 'SWE', 'IDC' => '46'), 'CH' => array('Name' => 'Switzerland', 'Alpha2' => 'CH', 'Alpha3' => 'CHE', 'IDC' => '41'), 'SY' => array('Name' => 'Syrian Arab Republic', 'Alpha2' => 'SY', 'Alpha3' => 'SYR', 'IDC' => '963'), 'TW' => array('Name' => 'Taiwan', 'Alpha2' => 'TW', 'Alpha3' => 'TWN', 'IDC' => '886'), 'TJ' => array('Name' => 'Tajikistan', 'Alpha2' => 'TJ', 'Alpha3' => 'TJK', 'IDC' => '992'), 'TZ' => array('Name' => 'Tanzania, United Republic of', 'Alpha2' => 'TZ', 'Alpha3' => 'TZA', 'IDC' => '255'), 'TH' => array('Name' => 'Thailand', 'Alpha2' => 'TH', 'Alpha3' => 'THA', 'IDC' => '66'), 'TL' => array('Name' => 'Timor-Leste', 'Alpha2' => 'TL', 'Alpha3' => 'TLS', 'IDC' => '670'), 'TG' => array('Name' => 'Togo', 'Alpha2' => 'TG', 'Alpha3' => 'TGO', 'IDC' => '228'), 'TK' => array('Name' => 'Tokelau', 'Alpha2' => 'TK', 'Alpha3' => 'TKL', 'IDC' => '690'), 'TO' => array('Name' => 'Tonga', 'Alpha2' => 'TO', 'Alpha3' => 'TON', 'IDC' => '676'), 'TT' => array('Name' => 'Trinidad and Tobago', 'Alpha2' => 'TT', 'Alpha3' => 'TTO', 'IDC' => '1868'), 'TN' => array('Name' => 'Tunisia', 'Alpha2' => 'TN', 'Alpha3' => 'TUN', 'IDC' => '216'), 'TR' => array('Name' => 'Turkey', 'Alpha2' => 'TR', 'Alpha3' => 'TUR', 'IDC' => '90'), 'TM' => array('Name' => 'Turkmenistan', 'Alpha2' => 'TM', 'Alpha3' => 'TKM', 'IDC' => '993'), 'TC' => array('Name' => 'Turks and Caicos Islands', 'Alpha2' => 'TC', 'Alpha3' => 'TCA', 'IDC' => '1649'), 'TV' => array('Name' => 'Tuvalu', 'Alpha2' => 'TV', 'Alpha3' => 'TUV', 'IDC' => '688'), 'UG' => array('Name' => 'Uganda', 'Alpha2' => 'UG', 'Alpha3' => 'UGA', 'IDC' => '256'), 'UA' => array('Name' => 'Ukraine', 'Alpha2' => 'UA', 'Alpha3' => 'UKR', 'IDC' => '380'), 'AE' => array('Name' => 'United Arab Emirates', 'Alpha2' => 'AE', 'Alpha3' => 'ARE', 'IDC' => '971'), 'GB' => array('Name' => 'United Kingdom', 'Alpha2' => 'GB', 'Alpha3' => 'GBR', 'IDC' => '44'), 'UM' => array('Name' => 'United States Minor Outlying Islands', 'Alpha2' => 'UM', 'Alpha3' => 'UMI', 'IDC' => '1'), 'US' => array('Name' => 'United States of America', 'Alpha2' => 'US', 'Alpha3' => 'USA', 'IDC' => '1'), 'UY' => array('Name' => 'Uruguay', 'Alpha2' => 'UY', 'Alpha3' => 'URY', 'IDC' => '598'), 'UZ' => array('Name' => 'Uzbekistan', 'Alpha2' => 'UZ', 'Alpha3' => 'UZB', 'IDC' => '998'), 'VU' => array('Name' => 'Vanuatu', 'Alpha2' => 'VU', 'Alpha3' => 'VUT', 'IDC' => '678'), 'VA' => array('Name' => 'Holy See (Vatican City State)', 'Alpha2' => 'VA', 'Alpha3' => 'VAT', 'IDC' => '3906'), 'VE' => array('Name' => 'Venezuela', 'Alpha2' => 'VE', 'Alpha3' => 'VEN', 'IDC' => '58'), 'VN' => array('Name' => 'Viet Nam', 'Alpha2' => 'VN', 'Alpha3' => 'VNM', 'IDC' => '84'), 'VG' => array('Name' => 'Virgin Islands, British', 'Alpha2' => 'VG', 'Alpha3' => 'VGB', 'IDC' => '1284'), 'VI' => array('Name' => 'Virgin Islands, U.S.', 'Alpha2' => 'VI', 'Alpha3' => 'VIR', 'IDC' => '1340'), 'WF' => array('Name' => 'Wallis and Futuna', 'Alpha2' => 'WF', 'Alpha3' => 'WLF', 'IDC' => '681'), 'EH' => array('Name' => 'Western Sahara', 'Alpha2' => 'EH', 'Alpha3' => 'ESH', 'IDC' => '212'), 'YE' => array('Name' => 'Yemen', 'Alpha2' => 'YE', 'Alpha3' => 'YEM', 'IDC' => '967'), 'ZM' => array('Name' => 'Zambia', 'Alpha2' => 'ZM', 'Alpha3' => 'ZMB', 'IDC' => '260'), 'ZW' => array('Name' => 'Zimbabwe', 'Alpha2' => 'ZW', 'Alpha3' => 'ZWE', 'IDC' => '263')));
    }

    /**
     * Gets the 'ezsystems.platformui.application_config.provider.languages' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\ApplicationConfig\Providers\Languages A EzSystems\PlatformUIBundle\ApplicationConfig\Providers\Languages instance.
     */
    protected function getEzsystems_Platformui_ApplicationConfig_Provider_LanguagesService()
    {
        return $this->services['ezsystems.platformui.application_config.provider.languages'] = new \EzSystems\PlatformUIBundle\ApplicationConfig\Providers\Languages($this->get('ezpublish.api.service.language'));
    }

    /**
     * Gets the 'ezsystems.platformui.application_config.provider.root_info' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\ApplicationConfig\Providers\RootInfo A EzSystems\PlatformUIBundle\ApplicationConfig\Providers\RootInfo instance.
     */
    protected function getEzsystems_Platformui_ApplicationConfig_Provider_RootInfoService()
    {
        return $this->services['ezsystems.platformui.application_config.provider.root_info'] = new \EzSystems\PlatformUIBundle\ApplicationConfig\Providers\RootInfo($this->get('request_stack'), $this->get('templating.helper.assets'), 'bundles/ezplatformuiassets');
    }

    /**
     * Gets the 'ezsystems.platformui.application_config.provider.session_info' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\ApplicationConfig\Providers\SessionInfo A EzSystems\PlatformUIBundle\ApplicationConfig\Providers\SessionInfo instance.
     */
    protected function getEzsystems_Platformui_ApplicationConfig_Provider_SessionInfoService()
    {
        return $this->services['ezsystems.platformui.application_config.provider.session_info'] = new \EzSystems\PlatformUIBundle\ApplicationConfig\Providers\SessionInfo($this->get('session'), $this->get('security.csrf.token_manager'), 'rest', $this->get('ezpublish.chain_router'));
    }

    /**
     * Gets the 'ezsystems.platformui.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\Controller\PlatformUIController A EzSystems\PlatformUIBundle\Controller\PlatformUIController instance.
     */
    protected function getEzsystems_Platformui_ControllerService()
    {
        $this->services['ezsystems.platformui.controller'] = $instance = new \EzSystems\PlatformUIBundle\Controller\PlatformUIController($this->get('ezsystems.platformui.application_config.aggregator'), $this->get('ezsystems.platformui.loader.combo_loader'));

        $instance->setContainer($this);
        $instance->setNotificationPool($this->get('ezsystems.platformui.notification_pool'));
        $instance->performAccessChecks();

        return $instance;
    }

    /**
     * Gets the 'ezsystems.platformui.controller.content_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\Controller\ContentTypeController A EzSystems\PlatformUIBundle\Controller\ContentTypeController instance.
     */
    protected function getEzsystems_Platformui_Controller_ContentTypeService()
    {
        $this->services['ezsystems.platformui.controller.content_type'] = $instance = new \EzSystems\PlatformUIBundle\Controller\ContentTypeController($this->get('ezpublish.api.service.content_type'), $this->get('ezpublish.api.service.search'), $this->get('ezpublish.api.service.user'), $this->get('ezrepoforms.action_dispatcher.content_type.group'), $this->get('ezrepoforms.action_dispatcher.content_type'), $this->get('ezrepoforms.field_type_form_mapper.registry'));

        $instance->setContainer($this);
        $instance->setNotificationPool($this->get('ezsystems.platformui.notification_pool'));
        $instance->performAccessChecks();
        $instance->setPrioritizedLanguages($this->get("ezpublish.config.resolver")->getParameter("languages", null, null));

        return $instance;
    }

    /**
     * Gets the 'ezsystems.platformui.controller.dashboard' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\Controller\DashboardController A EzSystems\PlatformUIBundle\Controller\DashboardController instance.
     */
    protected function getEzsystems_Platformui_Controller_DashboardService()
    {
        $this->services['ezsystems.platformui.controller.dashboard'] = $instance = new \EzSystems\PlatformUIBundle\Controller\DashboardController();

        $instance->setContainer($this);
        $instance->setNotificationPool($this->get('ezsystems.platformui.notification_pool'));
        $instance->performAccessChecks();

        return $instance;
    }

    /**
     * Gets the 'ezsystems.platformui.controller.exception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\Controller\ExceptionController A EzSystems\PlatformUIBundle\Controller\ExceptionController instance.
     */
    protected function getEzsystems_Platformui_Controller_ExceptionService()
    {
        return $this->services['ezsystems.platformui.controller.exception'] = new \EzSystems\PlatformUIBundle\Controller\ExceptionController($this->get('twig'), true);
    }

    /**
     * Gets the 'ezsystems.platformui.controller.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\Controller\LanguageController A EzSystems\PlatformUIBundle\Controller\LanguageController instance.
     */
    protected function getEzsystems_Platformui_Controller_LanguageService()
    {
        $a = $this->get('ezsystems.platformui.notification_pool');

        $this->services['ezsystems.platformui.controller.language'] = $instance = new \EzSystems\PlatformUIBundle\Controller\LanguageController($this->get('ezrepoforms.action_dispatcher.language'), $this->get('ezpublish.api.service.language'), $a);

        $instance->setContainer($this);
        $instance->setNotificationPool($a);
        $instance->performAccessChecks();

        return $instance;
    }

    /**
     * Gets the 'ezsystems.platformui.controller.role' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\Controller\RoleController A EzSystems\PlatformUIBundle\Controller\RoleController instance.
     */
    protected function getEzsystems_Platformui_Controller_RoleService()
    {
        $this->services['ezsystems.platformui.controller.role'] = $instance = new \EzSystems\PlatformUIBundle\Controller\RoleController($this->get('ezpublish.api.service.role'), $this->get('ezrepoforms.action_dispatcher.role'), $this->get('ezrepoforms.action_dispatcher.policy'), $this->get('translator'));

        $instance->setContainer($this);
        $instance->setNotificationPool($this->get('ezsystems.platformui.notification_pool'));
        $instance->performAccessChecks();

        return $instance;
    }

    /**
     * Gets the 'ezsystems.platformui.controller.section' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\Controller\SectionController A EzSystems\PlatformUIBundle\Controller\SectionController instance.
     */
    protected function getEzsystems_Platformui_Controller_SectionService()
    {
        $a = $this->get('ezsystems.platformui.notification_pool');

        $this->services['ezsystems.platformui.controller.section'] = $instance = new \EzSystems\PlatformUIBundle\Controller\SectionController($this->get('ezrepoforms.action_dispatcher.section'), $this->get('ezpublish.api.service.section'), $a);

        $instance->setContainer($this);
        $instance->setNotificationPool($a);
        $instance->performAccessChecks();

        return $instance;
    }

    /**
     * Gets the 'ezsystems.platformui.controller.systeminfo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\Controller\SystemInfoController A EzSystems\PlatformUIBundle\Controller\SystemInfoController instance.
     */
    protected function getEzsystems_Platformui_Controller_SysteminfoService()
    {
        $this->services['ezsystems.platformui.controller.systeminfo'] = $instance = new \EzSystems\PlatformUIBundle\Controller\SystemInfoController($this->get('ezsystems.platformui.helper.systeminfo'));

        $instance->setContainer($this);
        $instance->setNotificationPool($this->get('ezsystems.platformui.notification_pool'));
        $instance->performAccessChecks();

        return $instance;
    }

    /**
     * Gets the 'ezsystems.platformui.controller.template' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\Controller\TemplateController A EzSystems\PlatformUIBundle\Controller\TemplateController instance.
     */
    protected function getEzsystems_Platformui_Controller_TemplateService()
    {
        $this->services['ezsystems.platformui.controller.template'] = $instance = new \EzSystems\PlatformUIBundle\Controller\TemplateController($this->get('ezpublish.config.resolver.chain'));

        $instance->setContainer($this);
        $instance->setNotificationPool($this->get('ezsystems.platformui.notification_pool'));
        $instance->performAccessChecks();

        return $instance;
    }

    /**
     * Gets the 'ezsystems.platformui.exception_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\EventListener\ExceptionListener A EzSystems\PlatformUIBundle\EventListener\ExceptionListener instance.
     */
    protected function getEzsystems_Platformui_ExceptionListenerService()
    {
        return $this->services['ezsystems.platformui.exception_listener'] = new \EzSystems\PlatformUIBundle\EventListener\ExceptionListener('ezsystems.platformui.controller.exception:showAction', $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'ezsystems.platformui.form_processor.content_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\Form\Processor\ContentTypeFormProcessor A EzSystems\PlatformUIBundle\Form\Processor\ContentTypeFormProcessor instance.
     */
    protected function getEzsystems_Platformui_FormProcessor_ContentTypeService()
    {
        return $this->services['ezsystems.platformui.form_processor.content_type'] = new \EzSystems\PlatformUIBundle\Form\Processor\ContentTypeFormProcessor($this->get('ezpublish.chain_router'), $this->get('ezsystems.platformui.notification_pool'), $this->get('ezpublish.api.service.content_type'));
    }

    /**
     * Gets the 'ezsystems.platformui.form_processor.content_type_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\Form\Processor\ContentTypeGroupFormProcessor A EzSystems\PlatformUIBundle\Form\Processor\ContentTypeGroupFormProcessor instance.
     */
    protected function getEzsystems_Platformui_FormProcessor_ContentTypeGroupService()
    {
        return $this->services['ezsystems.platformui.form_processor.content_type_group'] = new \EzSystems\PlatformUIBundle\Form\Processor\ContentTypeGroupFormProcessor($this->get('ezsystems.platformui.notification_pool'), $this->get('ezpublish.chain_router'));
    }

    /**
     * Gets the 'ezsystems.platformui.form_processor.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\Form\Processor\LanguageFormProcessor A EzSystems\PlatformUIBundle\Form\Processor\LanguageFormProcessor instance.
     */
    protected function getEzsystems_Platformui_FormProcessor_LanguageService()
    {
        return $this->services['ezsystems.platformui.form_processor.language'] = new \EzSystems\PlatformUIBundle\Form\Processor\LanguageFormProcessor($this->get('ezsystems.platformui.notification_pool'), $this->get('ezpublish.chain_router'));
    }

    /**
     * Gets the 'ezsystems.platformui.form_processor.policy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\Form\Processor\PolicyFormProcessor A EzSystems\PlatformUIBundle\Form\Processor\PolicyFormProcessor instance.
     */
    protected function getEzsystems_Platformui_FormProcessor_PolicyService()
    {
        return $this->services['ezsystems.platformui.form_processor.policy'] = new \EzSystems\PlatformUIBundle\Form\Processor\PolicyFormProcessor($this->get('ezpublish.chain_router'), $this->get('ezsystems.platformui.notification_pool'));
    }

    /**
     * Gets the 'ezsystems.platformui.form_processor.role' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\Form\Processor\RoleFormProcessor A EzSystems\PlatformUIBundle\Form\Processor\RoleFormProcessor instance.
     */
    protected function getEzsystems_Platformui_FormProcessor_RoleService()
    {
        return $this->services['ezsystems.platformui.form_processor.role'] = new \EzSystems\PlatformUIBundle\Form\Processor\RoleFormProcessor($this->get('ezpublish.chain_router'), $this->get('ezsystems.platformui.notification_pool'), $this->get('ezpublish.api.service.role'));
    }

    /**
     * Gets the 'ezsystems.platformui.form_processor.section' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\Form\Processor\SectionFormProcessor A EzSystems\PlatformUIBundle\Form\Processor\SectionFormProcessor instance.
     */
    protected function getEzsystems_Platformui_FormProcessor_SectionService()
    {
        return $this->services['ezsystems.platformui.form_processor.section'] = new \EzSystems\PlatformUIBundle\Form\Processor\SectionFormProcessor($this->get('ezsystems.platformui.notification_pool'), $this->get('ezpublish.chain_router'));
    }

    /**
     * Gets the 'ezsystems.platformui.helper.systeminfo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\Helper\SystemInfoHelper A EzSystems\PlatformUIBundle\Helper\SystemInfoHelper instance.
     */
    protected function getEzsystems_Platformui_Helper_SysteminfoService()
    {
        return $this->services['ezsystems.platformui.helper.systeminfo'] = new \EzSystems\PlatformUIBundle\Helper\SystemInfoHelper($this->get('doctrine.dbal.default_connection'), array('FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle', 'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle', 'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle', 'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle', 'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle', 'AsseticBundle' => 'Symfony\\Bundle\\AsseticBundle\\AsseticBundle', 'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle', 'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle', 'TedivmStashBundle' => 'Tedivm\\StashBundle\\TedivmStashBundle', 'HautelookTemplatedUriBundle' => 'Hautelook\\TemplatedUriBundle\\HautelookTemplatedUriBundle', 'LiipImagineBundle' => 'Liip\\ImagineBundle\\LiipImagineBundle', 'FOSHttpCacheBundle' => 'FOS\\HttpCacheBundle\\FOSHttpCacheBundle', 'EzPublishCoreBundle' => 'eZ\\Bundle\\EzPublishCoreBundle\\EzPublishCoreBundle', 'EzPublishLegacySearchEngineBundle' => 'eZ\\Bundle\\EzPublishLegacySearchEngineBundle\\EzPublishLegacySearchEngineBundle', 'EzPublishIOBundle' => 'eZ\\Bundle\\EzPublishIOBundle\\EzPublishIOBundle', 'EzPublishRestBundle' => 'eZ\\Bundle\\EzPublishRestBundle\\EzPublishRestBundle', 'eZPlatformUIAssetsBundle' => 'EzSystems\\PlatformUIAssetsBundle\\EzSystemsPlatformUIAssetsBundle', 'eZPlatformUIBundle' => 'EzSystems\\PlatformUIBundle\\EzSystemsPlatformUIBundle', 'NelmioCorsBundle' => 'Nelmio\\CorsBundle\\NelmioCorsBundle', 'WhiteOctoberPagerfantaBundle' => 'WhiteOctober\\PagerfantaBundle\\WhiteOctoberPagerfantaBundle', 'OneupFlysystemBundle' => 'Oneup\\FlysystemBundle\\OneupFlysystemBundle', 'EzSystemsPlatformInstallerBundle' => 'EzSystems\\PlatformInstallerBundle\\EzSystemsPlatformInstallerBundle', 'EzSystemsRepositoryFormsBundle' => 'EzSystems\\RepositoryFormsBundle\\EzSystemsRepositoryFormsBundle', 'EzSystemsEzPlatformSolrSearchEngineBundle' => 'EzSystems\\EzPlatformSolrSearchEngineBundle\\EzSystemsEzPlatformSolrSearchEngineBundle', 'AppBundle' => 'AppBundle\\AppBundle', 'EzPublishDebugBundle' => 'eZ\\Bundle\\EzPublishDebugBundle\\EzPublishDebugBundle', 'DebugBundle' => 'Symfony\\Bundle\\DebugBundle\\DebugBundle', 'WebProfilerBundle' => 'Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle', 'SensioDistributionBundle' => 'Sensio\\Bundle\\DistributionBundle\\SensioDistributionBundle', 'SensioGeneratorBundle' => 'Sensio\\Bundle\\GeneratorBundle\\SensioGeneratorBundle', 'EguliasListenersDebugCommandBundle' => 'Egulias\\ListenersDebugCommandBundle\\EguliasListenersDebugCommandBundle'));
    }

    /**
     * Gets the 'ezsystems.platformui.loader.combo_loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\Loader\ComboLoader A EzSystems\PlatformUIBundle\Loader\ComboLoader instance.
     */
    protected function getEzsystems_Platformui_Loader_ComboLoaderService()
    {
        return $this->services['ezsystems.platformui.loader.combo_loader'] = new \EzSystems\PlatformUIBundle\Loader\ComboLoader($this->get('ezpublish.config.resolver.chain'), $this->get('templating'), $this->get("ezpublish.config.resolver")->getParameter("yui.build_dir", "ez_platformui", null), ($this->targetDirs[2].'/../web'));
    }

    /**
     * Gets the 'ezsystems.platformui.notification_pool' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\Notification\NotificationPool A EzSystems\PlatformUIBundle\Notification\NotificationPool instance.
     */
    protected function getEzsystems_Platformui_NotificationPoolService()
    {
        return $this->services['ezsystems.platformui.notification_pool'] = new \EzSystems\PlatformUIBundle\Notification\NotificationPool($this->get('translator'), $this->get('session'));
    }

    /**
     * Gets the 'ezsystems.platformui.rest.user_field_type_processor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\Rest\UserFieldTypeProcessor A EzSystems\PlatformUIBundle\Rest\UserFieldTypeProcessor instance.
     */
    protected function getEzsystems_Platformui_Rest_UserFieldTypeProcessorService()
    {
        return $this->services['ezsystems.platformui.rest.user_field_type_processor'] = new \EzSystems\PlatformUIBundle\Rest\UserFieldTypeProcessor();
    }

    /**
     * Gets the 'ezsystems.platformui.twig.yui_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \EzSystems\PlatformUIBundle\Twig\TwigYuiExtension A EzSystems\PlatformUIBundle\Twig\TwigYuiExtension instance.
     */
    protected function getEzsystems_Platformui_Twig_YuiExtensionService()
    {
        return $this->services['ezsystems.platformui.twig.yui_extension'] = new \EzSystems\PlatformUIBundle\Twig\TwigYuiExtension($this->get('ezpublish.config.resolver.chain'), $this->get('ezpublish.chain_router'), $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'file_locator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Config\FileLocator A Symfony\Component\HttpKernel\Config\FileLocator instance.
     */
    protected function getFileLocatorService()
    {
        return $this->services['file_locator'] = new \Symfony\Component\HttpKernel\Config\FileLocator($this->get('kernel'), ($this->targetDirs[2].'/Resources'));
    }

    /**
     * Gets the 'filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Filesystem\Filesystem A Symfony\Component\Filesystem\Filesystem instance.
     */
    protected function getFilesystemService()
    {
        return $this->services['filesystem'] = new \Symfony\Component\Filesystem\Filesystem();
    }

    /**
     * Gets the 'form.csrf_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Csrf\CsrfProvider\CsrfTokenManagerAdapter A Symfony\Component\Form\Extension\Csrf\CsrfProvider\CsrfTokenManagerAdapter instance.
     */
    protected function getForm_CsrfProviderService()
    {
        return $this->services['form.csrf_provider'] = new \Symfony\Component\Form\Extension\Csrf\CsrfProvider\CsrfTokenManagerAdapter($this->get('security.csrf.token_manager'));
    }

    /**
     * Gets the 'form.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\FormFactory A Symfony\Component\Form\FormFactory instance.
     */
    protected function getForm_FactoryService()
    {
        return $this->services['form.factory'] = new \Symfony\Component\Form\FormFactory($this->get('form.registry'), $this->get('form.resolved_type_factory'));
    }

    /**
     * Gets the 'form.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\FormRegistry A Symfony\Component\Form\FormRegistry instance.
     */
    protected function getForm_RegistryService()
    {
        return $this->services['form.registry'] = new \Symfony\Component\Form\FormRegistry(array(0 => new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension($this, array('form' => 'form.type.form', 'birthday' => 'form.type.birthday', 'checkbox' => 'form.type.checkbox', 'choice' => 'form.type.choice', 'collection' => 'form.type.collection', 'country' => 'form.type.country', 'date' => 'form.type.date', 'datetime' => 'form.type.datetime', 'email' => 'form.type.email', 'file' => 'form.type.file', 'hidden' => 'form.type.hidden', 'integer' => 'form.type.integer', 'language' => 'form.type.language', 'locale' => 'form.type.locale', 'money' => 'form.type.money', 'number' => 'form.type.number', 'password' => 'form.type.password', 'percent' => 'form.type.percent', 'radio' => 'form.type.radio', 'repeated' => 'form.type.repeated', 'search' => 'form.type.search', 'textarea' => 'form.type.textarea', 'text' => 'form.type.text', 'time' => 'form.type.time', 'timezone' => 'form.type.timezone', 'url' => 'form.type.url', 'button' => 'form.type.button', 'submit' => 'form.type.submit', 'reset' => 'form.type.reset', 'currency' => 'form.type.currency', 'liip_imagine_image' => 'liip_imagine.form.type.image', 'ezrepoforms_policy_edit' => 'ezrepoforms.policy.edit.form', 'ezrepoforms_policy_limitation_edit' => 'ezrepoforms.policy.limitation.form', 'ezrepoforms_contenttype_update' => 'ezrepoforms.content_type.update.form_type', 'ezrepoforms_fielddefinition_update' => 'ezrepoforms.field_definition.form_type'), array('form' => array(0 => 'form.type_extension.form.http_foundation', 1 => 'form.type_extension.form.validator', 2 => 'form.type_extension.csrf', 3 => 'form.type_extension.form.data_collector'), 'repeated' => array(0 => 'form.type_extension.repeated.validator'), 'submit' => array(0 => 'form.type_extension.submit.validator')), array(0 => 'form.type_guesser.validator'))), $this->get('form.resolved_type_factory'));
    }

    /**
     * Gets the 'form.resolved_type_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy A Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy instance.
     */
    protected function getForm_ResolvedTypeFactoryService()
    {
        return $this->services['form.resolved_type_factory'] = new \Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy(new \Symfony\Component\Form\ResolvedFormTypeFactory(), $this->get('data_collector.form'));
    }

    /**
     * Gets the 'form.type.birthday' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\BirthdayType A Symfony\Component\Form\Extension\Core\Type\BirthdayType instance.
     */
    protected function getForm_Type_BirthdayService()
    {
        return $this->services['form.type.birthday'] = new \Symfony\Component\Form\Extension\Core\Type\BirthdayType();
    }

    /**
     * Gets the 'form.type.button' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ButtonType A Symfony\Component\Form\Extension\Core\Type\ButtonType instance.
     */
    protected function getForm_Type_ButtonService()
    {
        return $this->services['form.type.button'] = new \Symfony\Component\Form\Extension\Core\Type\ButtonType();
    }

    /**
     * Gets the 'form.type.checkbox' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CheckboxType A Symfony\Component\Form\Extension\Core\Type\CheckboxType instance.
     */
    protected function getForm_Type_CheckboxService()
    {
        return $this->services['form.type.checkbox'] = new \Symfony\Component\Form\Extension\Core\Type\CheckboxType();
    }

    /**
     * Gets the 'form.type.choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ChoiceType A Symfony\Component\Form\Extension\Core\Type\ChoiceType instance.
     */
    protected function getForm_Type_ChoiceService()
    {
        return $this->services['form.type.choice'] = new \Symfony\Component\Form\Extension\Core\Type\ChoiceType();
    }

    /**
     * Gets the 'form.type.collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CollectionType A Symfony\Component\Form\Extension\Core\Type\CollectionType instance.
     */
    protected function getForm_Type_CollectionService()
    {
        return $this->services['form.type.collection'] = new \Symfony\Component\Form\Extension\Core\Type\CollectionType();
    }

    /**
     * Gets the 'form.type.country' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CountryType A Symfony\Component\Form\Extension\Core\Type\CountryType instance.
     */
    protected function getForm_Type_CountryService()
    {
        return $this->services['form.type.country'] = new \Symfony\Component\Form\Extension\Core\Type\CountryType();
    }

    /**
     * Gets the 'form.type.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CurrencyType A Symfony\Component\Form\Extension\Core\Type\CurrencyType instance.
     */
    protected function getForm_Type_CurrencyService()
    {
        return $this->services['form.type.currency'] = new \Symfony\Component\Form\Extension\Core\Type\CurrencyType();
    }

    /**
     * Gets the 'form.type.date' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\DateType A Symfony\Component\Form\Extension\Core\Type\DateType instance.
     */
    protected function getForm_Type_DateService()
    {
        return $this->services['form.type.date'] = new \Symfony\Component\Form\Extension\Core\Type\DateType();
    }

    /**
     * Gets the 'form.type.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\DateTimeType A Symfony\Component\Form\Extension\Core\Type\DateTimeType instance.
     */
    protected function getForm_Type_DatetimeService()
    {
        return $this->services['form.type.datetime'] = new \Symfony\Component\Form\Extension\Core\Type\DateTimeType();
    }

    /**
     * Gets the 'form.type.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\EmailType A Symfony\Component\Form\Extension\Core\Type\EmailType instance.
     */
    protected function getForm_Type_EmailService()
    {
        return $this->services['form.type.email'] = new \Symfony\Component\Form\Extension\Core\Type\EmailType();
    }

    /**
     * Gets the 'form.type.file' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\FileType A Symfony\Component\Form\Extension\Core\Type\FileType instance.
     */
    protected function getForm_Type_FileService()
    {
        return $this->services['form.type.file'] = new \Symfony\Component\Form\Extension\Core\Type\FileType();
    }

    /**
     * Gets the 'form.type.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\FormType A Symfony\Component\Form\Extension\Core\Type\FormType instance.
     */
    protected function getForm_Type_FormService()
    {
        return $this->services['form.type.form'] = new \Symfony\Component\Form\Extension\Core\Type\FormType($this->get('property_accessor'));
    }

    /**
     * Gets the 'form.type.hidden' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\HiddenType A Symfony\Component\Form\Extension\Core\Type\HiddenType instance.
     */
    protected function getForm_Type_HiddenService()
    {
        return $this->services['form.type.hidden'] = new \Symfony\Component\Form\Extension\Core\Type\HiddenType();
    }

    /**
     * Gets the 'form.type.integer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\IntegerType A Symfony\Component\Form\Extension\Core\Type\IntegerType instance.
     */
    protected function getForm_Type_IntegerService()
    {
        return $this->services['form.type.integer'] = new \Symfony\Component\Form\Extension\Core\Type\IntegerType();
    }

    /**
     * Gets the 'form.type.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\LanguageType A Symfony\Component\Form\Extension\Core\Type\LanguageType instance.
     */
    protected function getForm_Type_LanguageService()
    {
        return $this->services['form.type.language'] = new \Symfony\Component\Form\Extension\Core\Type\LanguageType();
    }

    /**
     * Gets the 'form.type.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\LocaleType A Symfony\Component\Form\Extension\Core\Type\LocaleType instance.
     */
    protected function getForm_Type_LocaleService()
    {
        return $this->services['form.type.locale'] = new \Symfony\Component\Form\Extension\Core\Type\LocaleType();
    }

    /**
     * Gets the 'form.type.money' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\MoneyType A Symfony\Component\Form\Extension\Core\Type\MoneyType instance.
     */
    protected function getForm_Type_MoneyService()
    {
        return $this->services['form.type.money'] = new \Symfony\Component\Form\Extension\Core\Type\MoneyType();
    }

    /**
     * Gets the 'form.type.number' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\NumberType A Symfony\Component\Form\Extension\Core\Type\NumberType instance.
     */
    protected function getForm_Type_NumberService()
    {
        return $this->services['form.type.number'] = new \Symfony\Component\Form\Extension\Core\Type\NumberType();
    }

    /**
     * Gets the 'form.type.password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\PasswordType A Symfony\Component\Form\Extension\Core\Type\PasswordType instance.
     */
    protected function getForm_Type_PasswordService()
    {
        return $this->services['form.type.password'] = new \Symfony\Component\Form\Extension\Core\Type\PasswordType();
    }

    /**
     * Gets the 'form.type.percent' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\PercentType A Symfony\Component\Form\Extension\Core\Type\PercentType instance.
     */
    protected function getForm_Type_PercentService()
    {
        return $this->services['form.type.percent'] = new \Symfony\Component\Form\Extension\Core\Type\PercentType();
    }

    /**
     * Gets the 'form.type.radio' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RadioType A Symfony\Component\Form\Extension\Core\Type\RadioType instance.
     */
    protected function getForm_Type_RadioService()
    {
        return $this->services['form.type.radio'] = new \Symfony\Component\Form\Extension\Core\Type\RadioType();
    }

    /**
     * Gets the 'form.type.repeated' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RepeatedType A Symfony\Component\Form\Extension\Core\Type\RepeatedType instance.
     */
    protected function getForm_Type_RepeatedService()
    {
        return $this->services['form.type.repeated'] = new \Symfony\Component\Form\Extension\Core\Type\RepeatedType();
    }

    /**
     * Gets the 'form.type.reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ResetType A Symfony\Component\Form\Extension\Core\Type\ResetType instance.
     */
    protected function getForm_Type_ResetService()
    {
        return $this->services['form.type.reset'] = new \Symfony\Component\Form\Extension\Core\Type\ResetType();
    }

    /**
     * Gets the 'form.type.search' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\SearchType A Symfony\Component\Form\Extension\Core\Type\SearchType instance.
     */
    protected function getForm_Type_SearchService()
    {
        return $this->services['form.type.search'] = new \Symfony\Component\Form\Extension\Core\Type\SearchType();
    }

    /**
     * Gets the 'form.type.submit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\SubmitType A Symfony\Component\Form\Extension\Core\Type\SubmitType instance.
     */
    protected function getForm_Type_SubmitService()
    {
        return $this->services['form.type.submit'] = new \Symfony\Component\Form\Extension\Core\Type\SubmitType();
    }

    /**
     * Gets the 'form.type.text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TextType A Symfony\Component\Form\Extension\Core\Type\TextType instance.
     */
    protected function getForm_Type_TextService()
    {
        return $this->services['form.type.text'] = new \Symfony\Component\Form\Extension\Core\Type\TextType();
    }

    /**
     * Gets the 'form.type.textarea' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TextareaType A Symfony\Component\Form\Extension\Core\Type\TextareaType instance.
     */
    protected function getForm_Type_TextareaService()
    {
        return $this->services['form.type.textarea'] = new \Symfony\Component\Form\Extension\Core\Type\TextareaType();
    }

    /**
     * Gets the 'form.type.time' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TimeType A Symfony\Component\Form\Extension\Core\Type\TimeType instance.
     */
    protected function getForm_Type_TimeService()
    {
        return $this->services['form.type.time'] = new \Symfony\Component\Form\Extension\Core\Type\TimeType();
    }

    /**
     * Gets the 'form.type.timezone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TimezoneType A Symfony\Component\Form\Extension\Core\Type\TimezoneType instance.
     */
    protected function getForm_Type_TimezoneService()
    {
        return $this->services['form.type.timezone'] = new \Symfony\Component\Form\Extension\Core\Type\TimezoneType();
    }

    /**
     * Gets the 'form.type.url' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\UrlType A Symfony\Component\Form\Extension\Core\Type\UrlType instance.
     */
    protected function getForm_Type_UrlService()
    {
        return $this->services['form.type.url'] = new \Symfony\Component\Form\Extension\Core\Type\UrlType();
    }

    /**
     * Gets the 'form.type_extension.csrf' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension A Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension instance.
     */
    protected function getForm_TypeExtension_CsrfService()
    {
        return $this->services['form.type_extension.csrf'] = new \Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension($this->get('security.csrf.token_manager'), true, 'ezxform_token', $this->get('translator.default'), 'validators');
    }

    /**
     * Gets the 'form.type_extension.form.data_collector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension A Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension instance.
     */
    protected function getForm_TypeExtension_Form_DataCollectorService()
    {
        return $this->services['form.type_extension.form.data_collector'] = new \Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension($this->get('data_collector.form'));
    }

    /**
     * Gets the 'form.type_extension.form.http_foundation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension A Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension instance.
     */
    protected function getForm_TypeExtension_Form_HttpFoundationService()
    {
        return $this->services['form.type_extension.form.http_foundation'] = new \Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension(new \Symfony\Component\Form\Extension\HttpFoundation\HttpFoundationRequestHandler(new \Symfony\Component\Form\Util\ServerParams($this->get('request_stack'))));
    }

    /**
     * Gets the 'form.type_extension.form.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension instance.
     */
    protected function getForm_TypeExtension_Form_ValidatorService()
    {
        return $this->services['form.type_extension.form.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension($this->get('validator'));
    }

    /**
     * Gets the 'form.type_extension.repeated.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension instance.
     */
    protected function getForm_TypeExtension_Repeated_ValidatorService()
    {
        return $this->services['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension();
    }

    /**
     * Gets the 'form.type_extension.submit.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension instance.
     */
    protected function getForm_TypeExtension_Submit_ValidatorService()
    {
        return $this->services['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension();
    }

    /**
     * Gets the 'form.type_guesser.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser A Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser instance.
     */
    protected function getForm_TypeGuesser_ValidatorService()
    {
        return $this->services['form.type_guesser.validator'] = new \Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser($this->get('validator'));
    }

    /**
     * Gets the 'fos_http_cache.cache_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\HttpCacheBundle\CacheManager A FOS\HttpCacheBundle\CacheManager instance.
     */
    protected function getFosHttpCache_CacheManagerService()
    {
        $this->services['fos_http_cache.cache_manager'] = $instance = new \FOS\HttpCacheBundle\CacheManager($this->get('fos_http_cache.proxy_client.varnish'), $this->get('ezpublish.chain_router'));

        if ($this->has('debug.event_dispatcher')) {
            $instance->setEventDispatcher($this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }
        $instance->setGenerateUrlType(true);
        $instance->setTagsHeader('X-Cache-Tags');
        $instance->addSubscriber(new \FOS\HttpCache\EventListener\LogSubscriber($this->get('logger')));

        return $instance;
    }

    /**
     * Gets the 'fos_http_cache.command.invalidate_path' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\HttpCacheBundle\Command\InvalidatePathCommand A FOS\HttpCacheBundle\Command\InvalidatePathCommand instance.
     */
    protected function getFosHttpCache_Command_InvalidatePathService()
    {
        return $this->services['fos_http_cache.command.invalidate_path'] = new \FOS\HttpCacheBundle\Command\InvalidatePathCommand($this->get('fos_http_cache.cache_manager'));
    }

    /**
     * Gets the 'fos_http_cache.command.invalidate_regex' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\HttpCacheBundle\Command\InvalidateRegexCommand A FOS\HttpCacheBundle\Command\InvalidateRegexCommand instance.
     */
    protected function getFosHttpCache_Command_InvalidateRegexService()
    {
        return $this->services['fos_http_cache.command.invalidate_regex'] = new \FOS\HttpCacheBundle\Command\InvalidateRegexCommand($this->get('fos_http_cache.cache_manager'));
    }

    /**
     * Gets the 'fos_http_cache.command.invalidate_tag' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\HttpCacheBundle\Command\InvalidateTagCommand A FOS\HttpCacheBundle\Command\InvalidateTagCommand instance.
     */
    protected function getFosHttpCache_Command_InvalidateTagService()
    {
        return $this->services['fos_http_cache.command.invalidate_tag'] = new \FOS\HttpCacheBundle\Command\InvalidateTagCommand($this->get('fos_http_cache.handler.tag_handler'));
    }

    /**
     * Gets the 'fos_http_cache.command.refresh_path' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\HttpCacheBundle\Command\RefreshPathCommand A FOS\HttpCacheBundle\Command\RefreshPathCommand instance.
     */
    protected function getFosHttpCache_Command_RefreshPathService()
    {
        return $this->services['fos_http_cache.command.refresh_path'] = new \FOS\HttpCacheBundle\Command\RefreshPathCommand($this->get('fos_http_cache.cache_manager'));
    }

    /**
     * Gets the 'fos_http_cache.event_listener.cache_control' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\HttpCacheBundle\EventListener\CacheControlSubscriber A FOS\HttpCacheBundle\EventListener\CacheControlSubscriber instance.
     */
    protected function getFosHttpCache_EventListener_CacheControlService()
    {
        return $this->services['fos_http_cache.event_listener.cache_control'] = new \FOS\HttpCacheBundle\EventListener\CacheControlSubscriber('X-Cache-Debug');
    }

    /**
     * Gets the 'fos_http_cache.event_listener.invalidation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\HttpCacheBundle\EventListener\InvalidationSubscriber A FOS\HttpCacheBundle\EventListener\InvalidationSubscriber instance.
     */
    protected function getFosHttpCache_EventListener_InvalidationService()
    {
        return $this->services['fos_http_cache.event_listener.invalidation'] = new \FOS\HttpCacheBundle\EventListener\InvalidationSubscriber($this->get('fos_http_cache.cache_manager'), $this->get('ezpublish.chain_router'));
    }

    /**
     * Gets the 'fos_http_cache.event_listener.log' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\HttpCache\EventListener\LogSubscriber A FOS\HttpCache\EventListener\LogSubscriber instance.
     */
    protected function getFosHttpCache_EventListener_LogService()
    {
        return $this->services['fos_http_cache.event_listener.log'] = new \FOS\HttpCache\EventListener\LogSubscriber($this->get('logger'));
    }

    /**
     * Gets the 'fos_http_cache.event_listener.tag' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\HttpCacheBundle\EventListener\TagSubscriber A FOS\HttpCacheBundle\EventListener\TagSubscriber instance.
     */
    protected function getFosHttpCache_EventListener_TagService()
    {
        return $this->services['fos_http_cache.event_listener.tag'] = new \FOS\HttpCacheBundle\EventListener\TagSubscriber($this->get('fos_http_cache.handler.tag_handler'));
    }

    /**
     * Gets the 'fos_http_cache.event_listener.user_context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\HttpCacheBundle\EventListener\UserContextSubscriber A FOS\HttpCacheBundle\EventListener\UserContextSubscriber instance.
     */
    protected function getFosHttpCache_EventListener_UserContextService()
    {
        return $this->services['fos_http_cache.event_listener.user_context'] = new \FOS\HttpCacheBundle\EventListener\UserContextSubscriber($this->get('fos_http_cache.user_context.request_matcher'), $this->get('fos_http_cache.user_context.hash_generator'), array(0 => 'Cookie', 1 => 'Authorization'), 'X-User-Hash', 600);
    }

    /**
     * Gets the 'fos_http_cache.handler.tag_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\HttpCacheBundle\Handler\TagHandler A FOS\HttpCacheBundle\Handler\TagHandler instance.
     */
    protected function getFosHttpCache_Handler_TagHandlerService()
    {
        return $this->services['fos_http_cache.handler.tag_handler'] = new \FOS\HttpCacheBundle\Handler\TagHandler($this->get('fos_http_cache.cache_manager'), 'X-Cache-Tags');
    }

    /**
     * Gets the 'fos_http_cache.proxy_client.varnish' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\HttpCache\ProxyClient\Varnish A FOS\HttpCache\ProxyClient\Varnish instance.
     */
    protected function getFosHttpCache_ProxyClient_VarnishService()
    {
        return $this->services['fos_http_cache.proxy_client.varnish'] = $this->get('ezpublish.http_cache.proxy_client.varnish.factory')->buildProxyClient(array(0 => '$http_cache.purge_servers$'), NULL, NULL);
    }

    /**
     * Gets the 'fos_http_cache.twig.tag_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\HttpCacheBundle\Twig\CacheTagExtension A FOS\HttpCacheBundle\Twig\CacheTagExtension instance.
     */
    protected function getFosHttpCache_Twig_TagExtensionService()
    {
        return $this->services['fos_http_cache.twig.tag_extension'] = new \FOS\HttpCacheBundle\Twig\CacheTagExtension($this->get('fos_http_cache.handler.tag_handler'));
    }

    /**
     * Gets the 'fos_http_cache.user_context.hash_generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\HttpCache\UserContext\HashGenerator A FOS\HttpCache\UserContext\HashGenerator instance.
     */
    protected function getFosHttpCache_UserContext_HashGeneratorService()
    {
        return $this->services['fos_http_cache.user_context.hash_generator'] = new \FOS\HttpCache\UserContext\HashGenerator(array(0 => $this->get('ezpublish.user.hash_generator'), 1 => $this->get('ezpublish.user.identity_definer.role_id')));
    }

    /**
     * Gets the 'fos_http_cache.user_context.logout_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\HttpCacheBundle\Security\Http\Logout\ContextInvalidationLogoutHandler A FOS\HttpCacheBundle\Security\Http\Logout\ContextInvalidationLogoutHandler instance.
     */
    protected function getFosHttpCache_UserContext_LogoutHandlerService()
    {
        return $this->services['fos_http_cache.user_context.logout_handler'] = new \FOS\HttpCacheBundle\Security\Http\Logout\ContextInvalidationLogoutHandler($this->get('fos_http_cache.proxy_client.varnish'), array(0 => 'Cookie', 1 => 'Authorization'), 'application/vnd.fos.user-context-hash');
    }

    /**
     * Gets the 'fos_http_cache.user_context.request_matcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\HttpCacheBundle\UserContext\RequestMatcher A FOS\HttpCacheBundle\UserContext\RequestMatcher instance.
     */
    protected function getFosHttpCache_UserContext_RequestMatcherService()
    {
        return $this->services['fos_http_cache.user_context.request_matcher'] = new \FOS\HttpCacheBundle\UserContext\RequestMatcher('application/vnd.fos.user-context-hash', NULL);
    }

    /**
     * Gets the 'fragment.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler A Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler instance.
     */
    protected function getFragment_HandlerService()
    {
        $this->services['fragment.handler'] = $instance = new \Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler($this, true, $this->get('request_stack'));

        $instance->addRendererService('inline', 'fragment.renderer.inline');
        $instance->addRendererService('hinclude', 'fragment.renderer.hinclude');
        $instance->addRendererService('hinclude', 'fragment.renderer.hinclude');
        $instance->addRendererService('esi', 'fragment.renderer.esi');
        $instance->addRendererService('ssi', 'fragment.renderer.ssi');

        return $instance;
    }

    /**
     * Gets the 'fragment.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\FragmentListener A Symfony\Component\HttpKernel\EventListener\FragmentListener instance.
     */
    protected function getFragment_ListenerService()
    {
        return $this->services['fragment.listener'] = $this->get('ezpublish.fragment_listener.factory')->buildFragmentListener($this->get('uri_signer'), '/_fragment', 'Symfony\\Component\\HttpKernel\\EventListener\\FragmentListener');
    }

    /**
     * Gets the 'fragment.renderer.esi' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Fragment\DecoratedFragmentRenderer A eZ\Bundle\EzPublishCoreBundle\Fragment\DecoratedFragmentRenderer instance.
     */
    protected function getFragment_Renderer_EsiService()
    {
        $a = new \Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer($this->get('esi', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('fragment.renderer.inline'), $this->get('uri_signer'));
        $a->setFragmentPath('/_fragment');

        $this->services['fragment.renderer.esi'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\Fragment\DecoratedFragmentRenderer($a);

        $instance->setFragmentPath('/_fragment');
        $instance->setSiteAccess($this->get('ezpublish.siteaccess'));

        return $instance;
    }

    /**
     * Gets the 'fragment.renderer.hinclude' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Fragment\DecoratedFragmentRenderer A eZ\Bundle\EzPublishCoreBundle\Fragment\DecoratedFragmentRenderer instance.
     */
    protected function getFragment_Renderer_HincludeService()
    {
        $a = new \Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer($this->get('twig'), $this->get('uri_signer'), NULL);
        $a->setFragmentPath('/_fragment');

        $this->services['fragment.renderer.hinclude'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\Fragment\DecoratedFragmentRenderer($a);

        $instance->setFragmentPath('/_fragment');
        $instance->setSiteAccess($this->get('ezpublish.siteaccess'));

        return $instance;
    }

    /**
     * Gets the 'fragment.renderer.inline' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Fragment\InlineFragmentRenderer A eZ\Bundle\EzPublishCoreBundle\Fragment\InlineFragmentRenderer instance.
     */
    protected function getFragment_Renderer_InlineService()
    {
        $a = new \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer($this->get('http_kernel'), $this->get('debug.event_dispatcher'));
        $a->setFragmentPath('/_fragment');

        $this->services['fragment.renderer.inline'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\Fragment\InlineFragmentRenderer($a);

        $instance->setFragmentPath('/_fragment');
        $instance->setSiteAccess($this->get('ezpublish.siteaccess'));

        return $instance;
    }

    /**
     * Gets the 'fragment.renderer.ssi' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Fragment\DecoratedFragmentRenderer A eZ\Bundle\EzPublishCoreBundle\Fragment\DecoratedFragmentRenderer instance.
     */
    protected function getFragment_Renderer_SsiService()
    {
        $a = new \Symfony\Component\HttpKernel\Fragment\SsiFragmentRenderer(NULL, $this->get('fragment.renderer.inline'), $this->get('uri_signer'));
        $a->setFragmentPath('/_fragment');

        $this->services['fragment.renderer.ssi'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\Fragment\DecoratedFragmentRenderer($a);

        $instance->setFragmentPath('/_fragment');
        $instance->setSiteAccess($this->get('ezpublish.siteaccess'));

        return $instance;
    }

    /**
     * Gets the 'hautelook.router.template' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\Router A Symfony\Bundle\FrameworkBundle\Routing\Router instance.
     */
    protected function getHautelook_Router_TemplateService()
    {
        return $this->services['hautelook.router.template'] = new \Symfony\Bundle\FrameworkBundle\Routing\Router($this, (__DIR__.'/assetic/routing.yml'), array('cache_dir' => __DIR__, 'debug' => true, 'generator_class' => 'Hautelook\\TemplatedUriRouter\\Routing\\Generator\\Rfc6570Generator', 'generator_base_class' => 'Hautelook\\TemplatedUriRouter\\Routing\\Generator\\Rfc6570Generator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper', 'generator_cache_class' => 'appdevRF6570UrlGenerator', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_base_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper', 'matcher_cache_class' => 'appdevRFC6570UrlMatcher'), $this->get('router.request_context', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('monolog.logger.router', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'http_kernel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel A Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel instance.
     */
    protected function getHttpKernelService()
    {
        return $this->services['http_kernel'] = new \Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel($this->get('debug.event_dispatcher'), $this, $this->get('debug.controller_resolver'), $this->get('request_stack'), false);
    }

    /**
     * Gets the 'kernel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     */
    protected function getKernelService()
    {
        throw new RuntimeException('You have requested a synthetic service ("kernel"). The DIC does not know how to construct this service.');
    }

    /**
     * Gets the 'liip_imagine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Imagine\Gd\Imagine A Imagine\Gd\Imagine instance.
     */
    protected function getLiipImagineService()
    {
        $this->services['liip_imagine'] = $instance = new \Imagine\Gd\Imagine();

        $instance->setMetadataReader(new \Imagine\Image\Metadata\ExifMetadataReader());

        return $instance;
    }

    /**
     * Gets the 'liip_imagine.binary.loader.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Binary\Loader\FileSystemLoader A Liip\ImagineBundle\Binary\Loader\FileSystemLoader instance.
     */
    protected function getLiipImagine_Binary_Loader_DefaultService()
    {
        return $this->services['liip_imagine.binary.loader.default'] = new \Liip\ImagineBundle\Binary\Loader\FileSystemLoader($this->get('liip_imagine.mime_type_guesser'), $this->get('liip_imagine.extension_guesser'), ($this->targetDirs[2].'/../web'));
    }

    /**
     * Gets the 'liip_imagine.binary.loader.prototype.filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Binary\Loader\FileSystemLoader A Liip\ImagineBundle\Binary\Loader\FileSystemLoader instance.
     */
    protected function getLiipImagine_Binary_Loader_Prototype_FilesystemService()
    {
        return $this->services['liip_imagine.binary.loader.prototype.filesystem'] = new \Liip\ImagineBundle\Binary\Loader\FileSystemLoader($this->get('liip_imagine.mime_type_guesser'), $this->get('liip_imagine.extension_guesser'), '');
    }

    /**
     * Gets the 'liip_imagine.binary.loader.prototype.stream' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Binary\Loader\StreamLoader A Liip\ImagineBundle\Binary\Loader\StreamLoader instance.
     */
    protected function getLiipImagine_Binary_Loader_Prototype_StreamService()
    {
        return $this->services['liip_imagine.binary.loader.prototype.stream'] = new \Liip\ImagineBundle\Binary\Loader\StreamLoader('', '');
    }

    /**
     * Gets the 'liip_imagine.binary.mime_type_guesser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Binary\SimpleMimeTypeGuesser A Liip\ImagineBundle\Binary\SimpleMimeTypeGuesser instance.
     */
    protected function getLiipImagine_Binary_MimeTypeGuesserService()
    {
        return $this->services['liip_imagine.binary.mime_type_guesser'] = new \Liip\ImagineBundle\Binary\SimpleMimeTypeGuesser($this->get('liip_imagine.mime_type_guesser'));
    }

    /**
     * Gets the 'liip_imagine.cache.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Cache\CacheManager A Liip\ImagineBundle\Imagine\Cache\CacheManager instance.
     */
    protected function getLiipImagine_Cache_ManagerService()
    {
        $this->services['liip_imagine.cache.manager'] = $instance = new \Liip\ImagineBundle\Imagine\Cache\CacheManager($this->get('liip_imagine.filter.configuration'), $this->get('ezpublish.chain_router'), $this->get('liip_imagine.cache.signer'), $this->get('debug.event_dispatcher'), 'default');

        $instance->addResolver('default', $this->get('liip_imagine.cache.resolver.default'));
        $instance->addResolver('no_cache', $this->get('liip_imagine.cache.resolver.no_cache_web_path'));
        $instance->addResolver('ezpublish', $this->get('ezpublish.image_alias.imagine.cache_resolver'));

        return $instance;
    }

    /**
     * Gets the 'liip_imagine.cache.resolver.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Cache\Resolver\WebPathResolver A Liip\ImagineBundle\Imagine\Cache\Resolver\WebPathResolver instance.
     */
    protected function getLiipImagine_Cache_Resolver_DefaultService()
    {
        return $this->services['liip_imagine.cache.resolver.default'] = new \Liip\ImagineBundle\Imagine\Cache\Resolver\WebPathResolver($this->get('filesystem'), $this->get('router.request_context'), ($this->targetDirs[2].'/../web'), 'media/cache');
    }

    /**
     * Gets the 'liip_imagine.cache.resolver.no_cache_web_path' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Cache\Resolver\NoCacheWebPathResolver A Liip\ImagineBundle\Imagine\Cache\Resolver\NoCacheWebPathResolver instance.
     */
    protected function getLiipImagine_Cache_Resolver_NoCacheWebPathService()
    {
        return $this->services['liip_imagine.cache.resolver.no_cache_web_path'] = new \Liip\ImagineBundle\Imagine\Cache\Resolver\NoCacheWebPathResolver($this->get('router.request_context'));
    }

    /**
     * Gets the 'liip_imagine.cache.signer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Cache\Signer A Liip\ImagineBundle\Imagine\Cache\Signer instance.
     */
    protected function getLiipImagine_Cache_SignerService()
    {
        return $this->services['liip_imagine.cache.signer'] = new \Liip\ImagineBundle\Imagine\Cache\Signer('ThisTokenIsNotSoSecretChangeIt');
    }

    /**
     * Gets the 'liip_imagine.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Controller\ImagineController A Liip\ImagineBundle\Controller\ImagineController instance.
     */
    protected function getLiipImagine_ControllerService()
    {
        return $this->services['liip_imagine.controller'] = new \Liip\ImagineBundle\Controller\ImagineController($this->get('liip_imagine.data.manager'), $this->get('liip_imagine.filter.manager'), $this->get('liip_imagine.cache.manager'), $this->get('liip_imagine.cache.signer'), $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'liip_imagine.data.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Data\DataManager A Liip\ImagineBundle\Imagine\Data\DataManager instance.
     */
    protected function getLiipImagine_Data_ManagerService()
    {
        $this->services['liip_imagine.data.manager'] = $instance = new \Liip\ImagineBundle\Imagine\Data\DataManager($this->get('liip_imagine.binary.mime_type_guesser'), $this->get('liip_imagine.extension_guesser'), $this->get('liip_imagine.filter.configuration'), 'default', NULL);

        $instance->addLoader('default', $this->get('liip_imagine.binary.loader.default'));
        $instance->addLoader('ezpublish', $this->get('ezpublish.image_alias.imagine.binary_loader'));

        return $instance;
    }

    /**
     * Gets the 'liip_imagine.extension_guesser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\File\MimeType\ExtensionGuesserInterface A Symfony\Component\HttpFoundation\File\MimeType\ExtensionGuesserInterface instance.
     */
    protected function getLiipImagine_ExtensionGuesserService()
    {
        return $this->services['liip_imagine.extension_guesser'] = \Symfony\Component\HttpFoundation\File\MimeType\ExtensionGuesser::getInstance();
    }

    /**
     * Gets the 'liip_imagine.filter.configuration' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Imagine\Filter\FilterConfiguration A eZ\Bundle\EzPublishCoreBundle\Imagine\Filter\FilterConfiguration instance.
     */
    protected function getLiipImagine_Filter_ConfigurationService()
    {
        $this->services['liip_imagine.filter.configuration'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\Imagine\Filter\FilterConfiguration(array());

        $instance->setConfigResolver($this->get('ezpublish.config.resolver.chain'));

        return $instance;
    }

    /**
     * Gets the 'liip_imagine.filter.loader.auto_rotate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\AutoRotateFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\AutoRotateFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_AutoRotateService()
    {
        return $this->services['liip_imagine.filter.loader.auto_rotate'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\AutoRotateFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.background' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\BackgroundFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\BackgroundFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_BackgroundService()
    {
        return $this->services['liip_imagine.filter.loader.background'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\BackgroundFilterLoader($this->get('liip_imagine'));
    }

    /**
     * Gets the 'liip_imagine.filter.loader.crop' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\CropFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\CropFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_CropService()
    {
        return $this->services['liip_imagine.filter.loader.crop'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\CropFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.interlace' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\InterlaceFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\InterlaceFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_InterlaceService()
    {
        return $this->services['liip_imagine.filter.loader.interlace'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\InterlaceFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.paste' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\PasteFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\PasteFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_PasteService()
    {
        return $this->services['liip_imagine.filter.loader.paste'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\PasteFilterLoader($this->get('liip_imagine'), $this->targetDirs[2]);
    }

    /**
     * Gets the 'liip_imagine.filter.loader.relative_resize' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\RelativeResizeFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\RelativeResizeFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_RelativeResizeService()
    {
        return $this->services['liip_imagine.filter.loader.relative_resize'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\RelativeResizeFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.resize' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\ResizeFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\ResizeFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_ResizeService()
    {
        return $this->services['liip_imagine.filter.loader.resize'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\ResizeFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.rotate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\RotateFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\RotateFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_RotateService()
    {
        return $this->services['liip_imagine.filter.loader.rotate'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\RotateFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.strip' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\StripFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\StripFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_StripService()
    {
        return $this->services['liip_imagine.filter.loader.strip'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\StripFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.thumbnail' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\ThumbnailFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\ThumbnailFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_ThumbnailService()
    {
        return $this->services['liip_imagine.filter.loader.thumbnail'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\ThumbnailFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.upscale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\UpscaleFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\UpscaleFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_UpscaleService()
    {
        return $this->services['liip_imagine.filter.loader.upscale'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\UpscaleFilterLoader();
    }

    /**
     * Gets the 'liip_imagine.filter.loader.watermark' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\WatermarkFilterLoader A Liip\ImagineBundle\Imagine\Filter\Loader\WatermarkFilterLoader instance.
     */
    protected function getLiipImagine_Filter_Loader_WatermarkService()
    {
        return $this->services['liip_imagine.filter.loader.watermark'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\WatermarkFilterLoader($this->get('liip_imagine'), $this->targetDirs[2]);
    }

    /**
     * Gets the 'liip_imagine.filter.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\FilterManager A Liip\ImagineBundle\Imagine\Filter\FilterManager instance.
     */
    protected function getLiipImagine_Filter_ManagerService()
    {
        $a = $this->get('liip_imagine.filter.loader.relative_resize');
        $b = $this->get('liip_imagine.filter.loader.resize');
        $c = $this->get('liip_imagine.filter.loader.thumbnail');
        $d = $this->get('liip_imagine.filter.loader.crop');
        $e = $this->get('ezpublish.image_alias.imagine.filter.reduce_noise');

        $f = new \eZ\Bundle\EzPublishCoreBundle\Imagine\Filter\Loader\ScaleDownOnlyFilterLoader();
        $f->setInnerLoader($c);

        $g = new \eZ\Bundle\EzPublishCoreBundle\Imagine\Filter\Loader\ScaleWidthDownOnlyFilterLoader();
        $g->setInnerLoader($c);

        $h = new \eZ\Bundle\EzPublishCoreBundle\Imagine\Filter\Loader\ScaleHeightDownOnlyFilterLoader();
        $h->setInnerLoader($c);

        $i = new \eZ\Bundle\EzPublishCoreBundle\Imagine\Filter\Loader\ScaleWidthFilterLoader();
        $i->setInnerLoader($a);

        $j = new \eZ\Bundle\EzPublishCoreBundle\Imagine\Filter\Loader\ScaleHeightFilterLoader();
        $j->setInnerLoader($a);

        $k = new \eZ\Bundle\EzPublishCoreBundle\Imagine\Filter\Loader\ScaleFilterLoader();
        $k->setInnerLoader($a);

        $l = new \eZ\Bundle\EzPublishCoreBundle\Imagine\Filter\Loader\ScaleExactFilterLoader();
        $l->setInnerLoader($b);

        $m = new \eZ\Bundle\EzPublishCoreBundle\Imagine\Filter\Loader\ScalePercentFilterLoader();
        $m->setInnerLoader($b);

        $n = new \eZ\Bundle\EzPublishCoreBundle\Imagine\Filter\Loader\CropFilterLoader();
        $n->setInnerLoader($d);

        $this->services['liip_imagine.filter.manager'] = $instance = new \Liip\ImagineBundle\Imagine\Filter\FilterManager($this->get('liip_imagine.filter.configuration'), $this->get('liip_imagine'), $this->get('liip_imagine.binary.mime_type_guesser'));

        $instance->addLoader('relative_resize', $a);
        $instance->addLoader('resize', $b);
        $instance->addLoader('thumbnail', $c);
        $instance->addLoader('crop', $d);
        $instance->addLoader('paste', $this->get('liip_imagine.filter.loader.paste'));
        $instance->addLoader('watermark', $this->get('liip_imagine.filter.loader.watermark'));
        $instance->addLoader('background', $this->get('liip_imagine.filter.loader.background'));
        $instance->addLoader('strip', $this->get('liip_imagine.filter.loader.strip'));
        $instance->addLoader('upscale', $this->get('liip_imagine.filter.loader.upscale'));
        $instance->addLoader('auto_rotate', $this->get('liip_imagine.filter.loader.auto_rotate'));
        $instance->addLoader('rotate', $this->get('liip_imagine.filter.loader.rotate'));
        $instance->addLoader('interlace', $this->get('liip_imagine.filter.loader.interlace'));
        $instance->addLoader('geometry/scaledownonly', $f);
        $instance->addLoader('geometry/scalewidthdownonly', $g);
        $instance->addLoader('geometry/scaleheightdownonly', $h);
        $instance->addLoader('geometry/scalewidth', $i);
        $instance->addLoader('geometry/scaleheight', $j);
        $instance->addLoader('geometry/scale', $k);
        $instance->addLoader('geometry/scaleexact', $l);
        $instance->addLoader('geometry/scalepercent', $m);
        $instance->addLoader('geometry/crop', $n);
        $instance->addLoader('border', new \eZ\Bundle\EzPublishCoreBundle\Imagine\Filter\Loader\BorderFilterLoader());
        $instance->addLoader('filter/noise', new \eZ\Bundle\EzPublishCoreBundle\Imagine\Filter\Loader\ReduceNoiseFilterLoader($e));
        $instance->addLoader('filter/swirl', new \eZ\Bundle\EzPublishCoreBundle\Imagine\Filter\Loader\SwirlFilterLoader($e));
        $instance->addLoader('colorspace/gray', new \eZ\Bundle\EzPublishCoreBundle\Imagine\Filter\Loader\GrayscaleFilterLoader());
        $instance->addPostProcessor('jpegoptim', $this->get('liip_imagine.filter.post_processor.jpegoptim'));

        return $instance;
    }

    /**
     * Gets the 'liip_imagine.filter.post_processor.jpegoptim' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\PostProcessor\JpegOptimPostProcessor A Liip\ImagineBundle\Imagine\Filter\PostProcessor\JpegOptimPostProcessor instance.
     */
    protected function getLiipImagine_Filter_PostProcessor_JpegoptimService()
    {
        return $this->services['liip_imagine.filter.post_processor.jpegoptim'] = new \Liip\ImagineBundle\Imagine\Filter\PostProcessor\JpegOptimPostProcessor('/usr/bin/jpegoptim');
    }

    /**
     * Gets the 'liip_imagine.form.type.image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Form\Type\ImageType A Liip\ImagineBundle\Form\Type\ImageType instance.
     */
    protected function getLiipImagine_Form_Type_ImageService()
    {
        return $this->services['liip_imagine.form.type.image'] = new \Liip\ImagineBundle\Form\Type\ImageType();
    }

    /**
     * Gets the 'liip_imagine.mime_type_guesser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface A Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface instance.
     */
    protected function getLiipImagine_MimeTypeGuesserService()
    {
        return $this->services['liip_imagine.mime_type_guesser'] = \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesser::getInstance();
    }

    /**
     * Gets the 'liip_imagine.templating.helper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Liip\ImagineBundle\Templating\Helper\ImagineHelper A Liip\ImagineBundle\Templating\Helper\ImagineHelper instance.
     */
    protected function getLiipImagine_Templating_HelperService()
    {
        return $this->services['liip_imagine.templating.helper'] = new \Liip\ImagineBundle\Templating\Helper\ImagineHelper($this->get('liip_imagine.cache.manager'));
    }

    /**
     * Gets the 'locale_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\EventListener\LocaleListener A eZ\Bundle\EzPublishCoreBundle\EventListener\LocaleListener instance.
     */
    protected function getLocaleListenerService()
    {
        $this->services['locale_listener'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\EventListener\LocaleListener('en', $this->get('ezpublish.chain_router', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('request_stack'));

        $instance->setConfigResolver($this->get('ezpublish.config.resolver.chain'));
        $instance->setLocaleConverter($this->get('ezpublish.locale.converter'));

        return $instance;
    }

    /**
     * Gets the 'logger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getLoggerService()
    {
        $this->services['logger'] = $instance = new \Symfony\Bridge\Monolog\Logger('app');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.handler.console' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\ConsoleHandler A Symfony\Bridge\Monolog\Handler\ConsoleHandler instance.
     */
    protected function getMonolog_Handler_ConsoleService()
    {
        return $this->services['monolog.handler.console'] = new \Symfony\Bridge\Monolog\Handler\ConsoleHandler(NULL, false, array(2 => 200, 3 => 100, 1 => 300, 4 => 100));
    }

    /**
     * Gets the 'monolog.handler.console_very_verbose' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\ConsoleHandler A Symfony\Bridge\Monolog\Handler\ConsoleHandler instance.
     */
    protected function getMonolog_Handler_ConsoleVeryVerboseService()
    {
        return $this->services['monolog.handler.console_very_verbose'] = new \Symfony\Bridge\Monolog\Handler\ConsoleHandler(NULL, false, array(2 => 250, 3 => 250, 4 => 100, 1 => 300));
    }

    /**
     * Gets the 'monolog.handler.debug' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\DebugHandler A Symfony\Bridge\Monolog\Handler\DebugHandler instance.
     */
    protected function getMonolog_Handler_DebugService()
    {
        return $this->services['monolog.handler.debug'] = new \Symfony\Bridge\Monolog\Handler\DebugHandler(100, true);
    }

    /**
     * Gets the 'monolog.handler.main' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Monolog\Handler\StreamHandler A Monolog\Handler\StreamHandler instance.
     */
    protected function getMonolog_Handler_MainService()
    {
        return $this->services['monolog.handler.main'] = new \Monolog\Handler\StreamHandler(($this->targetDirs[2].'/logs/dev.log'), 100, true, NULL);
    }

    /**
     * Gets the 'monolog.logger.assetic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_AsseticService()
    {
        $this->services['monolog.logger.assetic'] = $instance = new \Symfony\Bridge\Monolog\Logger('assetic');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_DoctrineService()
    {
        $this->services['monolog.logger.doctrine'] = $instance = new \Symfony\Bridge\Monolog\Logger('doctrine');

        $instance->pushHandler($this->get('monolog.handler.console_very_verbose'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.event' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_EventService()
    {
        $this->services['monolog.logger.event'] = $instance = new \Symfony\Bridge\Monolog\Logger('event');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_PhpService()
    {
        $this->services['monolog.logger.php'] = $instance = new \Symfony\Bridge\Monolog\Logger('php');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.profiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_ProfilerService()
    {
        $this->services['monolog.logger.profiler'] = $instance = new \Symfony\Bridge\Monolog\Logger('profiler');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_RequestService()
    {
        $this->services['monolog.logger.request'] = $instance = new \Symfony\Bridge\Monolog\Logger('request');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_RouterService()
    {
        $this->services['monolog.logger.router'] = $instance = new \Symfony\Bridge\Monolog\Logger('router');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.security' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_SecurityService()
    {
        $this->services['monolog.logger.security'] = $instance = new \Symfony\Bridge\Monolog\Logger('security');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.templating' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_TemplatingService()
    {
        $this->services['monolog.logger.templating'] = $instance = new \Symfony\Bridge\Monolog\Logger('templating');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_TranslationService()
    {
        $this->services['monolog.logger.translation'] = $instance = new \Symfony\Bridge\Monolog\Logger('translation');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'nelmio_cors.cors_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Nelmio\CorsBundle\EventListener\CorsListener A Nelmio\CorsBundle\EventListener\CorsListener instance.
     */
    protected function getNelmioCors_CorsListenerService()
    {
        return $this->services['nelmio_cors.cors_listener'] = new \Nelmio\CorsBundle\EventListener\CorsListener($this->get('debug.event_dispatcher'), new \Nelmio\CorsBundle\Options\Resolver(array(0 => $this->get('nelmio_cors.options_provider.config'), 1 => $this->get('ezpublish_rest.cors_option_provider'))));
    }

    /**
     * Gets the 'nelmio_cors.options_provider.config' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Nelmio\CorsBundle\Options\ConfigProvider A Nelmio\CorsBundle\Options\ConfigProvider instance.
     */
    protected function getNelmioCors_OptionsProvider_ConfigService()
    {
        return $this->services['nelmio_cors.options_provider.config'] = new \Nelmio\CorsBundle\Options\ConfigProvider(array('^/api/ezp/v2/' => array('max_age' => 60, 'allow_credentials' => true, 'allow_headers' => array(0 => 'authorization', 1 => 'accept', 2 => 'content-type', 3 => 'x-csrf-token', 4 => 'destination', 5 => 'x-siteaccess'))), array('allow_origin' => array(), 'allow_credentials' => false, 'allow_headers' => array(), 'expose_headers' => array(), 'allow_methods' => array(), 'max_age' => 0, 'hosts' => array(), 'origin_regex' => false));
    }

    /**
     * Gets the 'oneup_flysystem.mount_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \League\Flysystem\MountManager A League\Flysystem\MountManager instance.
     */
    protected function getOneupFlysystem_MountManagerService()
    {
        return $this->services['oneup_flysystem.mount_manager'] = new \League\Flysystem\MountManager();
    }

    /**
     * Gets the 'pagerfanta.convert_not_valid_current_page_to_not_found_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \WhiteOctober\PagerfantaBundle\EventListener\ConvertNotValidCurrentPageToNotFoundListener A WhiteOctober\PagerfantaBundle\EventListener\ConvertNotValidCurrentPageToNotFoundListener instance.
     */
    protected function getPagerfanta_ConvertNotValidCurrentPageToNotFoundListenerService()
    {
        return $this->services['pagerfanta.convert_not_valid_current_page_to_not_found_listener'] = new \WhiteOctober\PagerfantaBundle\EventListener\ConvertNotValidCurrentPageToNotFoundListener();
    }

    /**
     * Gets the 'pagerfanta.convert_not_valid_max_per_page_to_not_found_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \WhiteOctober\PagerfantaBundle\EventListener\ConvertNotValidMaxPerPageToNotFoundListener A WhiteOctober\PagerfantaBundle\EventListener\ConvertNotValidMaxPerPageToNotFoundListener instance.
     */
    protected function getPagerfanta_ConvertNotValidMaxPerPageToNotFoundListenerService()
    {
        return $this->services['pagerfanta.convert_not_valid_max_per_page_to_not_found_listener'] = new \WhiteOctober\PagerfantaBundle\EventListener\ConvertNotValidMaxPerPageToNotFoundListener();
    }

    /**
     * Gets the 'profiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Profiler\Profiler A Symfony\Component\HttpKernel\Profiler\Profiler instance.
     */
    protected function getProfilerService()
    {
        $a = $this->get('monolog.logger.profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $b = $this->get('kernel', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        $c = new \Symfony\Component\HttpKernel\DataCollector\ConfigDataCollector();
        if ($this->has('kernel')) {
            $c->setKernel($b);
        }

        $d = new \Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector($this->get('doctrine'));
        $d->addLogger('default', $this->get('doctrine.dbal.logger.profiling.default'));

        $this->services['profiler'] = $instance = new \Symfony\Component\HttpKernel\Profiler\Profiler(new \Symfony\Component\HttpKernel\Profiler\FileProfilerStorage(('file:'.__DIR__.'/profiler'), '', '', 86400), $a);

        $instance->add($c);
        $instance->add($this->get('data_collector.request'));
        $instance->add(new \Symfony\Bundle\FrameworkBundle\DataCollector\AjaxDataCollector());
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\ExceptionDataCollector());
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\EventDataCollector($this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\LoggerDataCollector($a));
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\TimeDataCollector($b, $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\MemoryDataCollector());
        $instance->add($this->get('data_collector.router'));
        $instance->add($this->get('data_collector.form'));
        $instance->add($this->get('data_collector.translation'));
        $instance->add(new \Symfony\Bridge\Twig\DataCollector\TwigDataCollector($this->get('twig.profile')));
        $instance->add($d);
        $instance->add(new \Symfony\Bundle\SwiftmailerBundle\DataCollector\MessageDataCollector($this));
        $instance->add(new \Symfony\Bundle\SecurityBundle\DataCollector\SecurityDataCollector($this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('security.role_hierarchy')));
        $instance->add($this->get('data_collector.stash'));
        $instance->add($this->get('ezpublish_debug.data_collector'));
        $instance->add($this->get('data_collector.dump'));

        return $instance;
    }

    /**
     * Gets the 'profiler_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ProfilerListener A Symfony\Component\HttpKernel\EventListener\ProfilerListener instance.
     */
    protected function getProfilerListenerService()
    {
        return $this->services['profiler_listener'] = new \Symfony\Component\HttpKernel\EventListener\ProfilerListener($this->get('profiler'), NULL, false, false, $this->get('request_stack'));
    }

    /**
     * Gets the 'property_accessor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\PropertyAccess\PropertyAccessor A Symfony\Component\PropertyAccess\PropertyAccessor instance.
     */
    protected function getPropertyAccessorService()
    {
        return $this->services['property_accessor'] = new \Symfony\Component\PropertyAccess\PropertyAccessor(false, false);
    }

    /**
     * Gets the 'request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     * @throws InactiveScopeException when the 'request' service is requested while the 'request' scope is not active
     */
    protected function getRequestService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('request', 'request');
        }

        throw new RuntimeException('You have requested a synthetic service ("request"). The DIC does not know how to construct this service.');
    }

    /**
     * Gets the 'request_stack' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestStack A Symfony\Component\HttpFoundation\RequestStack instance.
     */
    protected function getRequestStackService()
    {
        return $this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack();
    }

    /**
     * Gets the 'response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ResponseListener A Symfony\Component\HttpKernel\EventListener\ResponseListener instance.
     */
    protected function getResponseListenerService()
    {
        return $this->services['response_listener'] = new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8');
    }

    /**
     * Gets the 'router_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\RouterListener A Symfony\Component\HttpKernel\EventListener\RouterListener instance.
     */
    protected function getRouterListenerService()
    {
        return $this->services['router_listener'] = new \Symfony\Component\HttpKernel\EventListener\RouterListener($this->get('ezpublish.chain_router'), $this->get('router.request_context', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('request_stack'));
    }

    /**
     * Gets the 'routing.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader A Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader instance.
     */
    protected function getRouting_LoaderService()
    {
        $a = $this->get('file_locator');
        $b = $this->get('annotation_reader');

        $c = new \Sensio\Bundle\FrameworkExtraBundle\Routing\AnnotatedRouteControllerLoader($b);

        $d = new \Symfony\Component\Config\Loader\LoaderResolver();
        $d->addLoader(new \Symfony\Component\Routing\Loader\XmlFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\YamlFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\PhpFileLoader($a));
        $d->addLoader(new \Symfony\Bundle\AsseticBundle\Routing\AsseticLoader($this->get('assetic.asset_manager'), array()));
        $d->addLoader(new \Symfony\Component\Routing\Loader\AnnotationDirectoryLoader($a, $c));
        $d->addLoader(new \Symfony\Component\Routing\Loader\AnnotationFileLoader($a, $c));
        $d->addLoader($c);
        $d->addLoader($this->get('ezpublish_rest.routing.options_loader'));

        return $this->services['routing.loader'] = new \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader($this->get('controller_name_converter'), $this->get('monolog.logger.router', ContainerInterface::NULL_ON_INVALID_REFERENCE), $d);
    }

    /**
     * Gets the 'security.authentication_utils' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Http\Authentication\AuthenticationUtils A Symfony\Component\Security\Http\Authentication\AuthenticationUtils instance.
     */
    protected function getSecurity_AuthenticationUtilsService()
    {
        return $this->services['security.authentication_utils'] = new \Symfony\Component\Security\Http\Authentication\AuthenticationUtils($this->get('request_stack'));
    }

    /**
     * Gets the 'security.authorization_checker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AuthorizationChecker A Symfony\Component\Security\Core\Authorization\AuthorizationChecker instance.
     */
    protected function getSecurity_AuthorizationCheckerService()
    {
        return $this->services['security.authorization_checker'] = new \Symfony\Component\Security\Core\Authorization\AuthorizationChecker($this->get('security.token_storage'), $this->get('security.authentication.manager'), $this->get('security.access.decision_manager'), false);
    }

    /**
     * Gets the 'security.context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\SecurityContext A Symfony\Component\Security\Core\SecurityContext instance.
     */
    protected function getSecurity_ContextService()
    {
        return $this->services['security.context'] = new \Symfony\Component\Security\Core\SecurityContext($this->get('security.token_storage'), $this->get('security.authorization_checker'));
    }

    /**
     * Gets the 'security.csrf.token_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Csrf\CsrfTokenManager A Symfony\Component\Security\Csrf\CsrfTokenManager instance.
     */
    protected function getSecurity_Csrf_TokenManagerService()
    {
        return $this->services['security.csrf.token_manager'] = new \Symfony\Component\Security\Csrf\CsrfTokenManager(new \Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator($this->get('security.secure_random')), new \Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage($this->get('session')));
    }

    /**
     * Gets the 'security.encoder_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Encoder\EncoderFactory A Symfony\Component\Security\Core\Encoder\EncoderFactory instance.
     */
    protected function getSecurity_EncoderFactoryService()
    {
        return $this->services['security.encoder_factory'] = new \Symfony\Component\Security\Core\Encoder\EncoderFactory(array());
    }

    /**
     * Gets the 'security.firewall' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Http\Firewall A Symfony\Component\Security\Http\Firewall instance.
     */
    protected function getSecurity_FirewallService()
    {
        return $this->services['security.firewall'] = new \Symfony\Component\Security\Http\Firewall(new \Symfony\Bundle\SecurityBundle\Security\FirewallMap($this, array('security.firewall.map.context.dev' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/(_(profiler|wdt)|css|images|js)/'), 'security.firewall.map.context.ezpublish_front' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/'), 'security.firewall.map.context.default' => NULL)), $this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'security.firewall.map.context.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_DefaultService()
    {
        $a = $this->get('security.token_storage');
        $b = $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        return $this->services['security.firewall.map.context.default'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => $this->get('security.channel_listener'), 1 => new \Symfony\Component\Security\Http\Firewall\ContextListener($a, array(0 => $this->get('ezpublish.security.user_provider')), 'default', $b, $this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)), 2 => new \Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener($a, '56b479dd466603.02699037', $b, $this->get('security.authentication.manager')), 3 => $this->get('security.access_listener')), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($a, $this->get('security.authentication.trust_resolver'), $this->get('security.http_utils'), 'default', NULL, NULL, NULL, $b, false));
    }

    /**
     * Gets the 'security.firewall.map.context.dev' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_DevService()
    {
        return $this->services['security.firewall.map.context.dev'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(), NULL);
    }

    /**
     * Gets the 'security.firewall.map.context.ezpublish_front' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_EzpublishFrontService()
    {
        $a = $this->get('security.token_storage');
        $b = $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $c = $this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $d = $this->get('security.http_utils');
        $e = $this->get('http_kernel');
        $f = $this->get('security.authentication.manager');

        $g = new \Symfony\Component\Security\Http\Firewall\LogoutListener($a, $d, new \Symfony\Component\Security\Http\Logout\DefaultLogoutSuccessHandler($d, '/'), array('csrf_parameter' => '_csrf_token', 'intention' => 'logout', 'logout_path' => '/logout'));
        $g->addHandler($this->get('security.logout.handler.session'));
        $g->addHandler($this->get('ezpublish_rest.security.authentication.logout_handler'));

        $h = new \eZ\Publish\Core\MVC\Symfony\Security\Authentication\DefaultAuthenticationSuccessHandler($d, array());
        $h->setConfigResolver($this->get('ezpublish.config.resolver.chain'));
        $h->setOptions(array('always_use_default_target_path' => false, 'default_target_path' => '/', 'login_path' => '/login', 'target_path_parameter' => '_target_path', 'use_referer' => false));
        $h->setProviderKey('ezpublish_front');

        $i = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationFailureHandler($e, $d, array(), $b);
        $i->setOptions(array('login_path' => '/login', 'failure_path' => NULL, 'failure_forward' => false, 'failure_path_parameter' => '_failure_path'));

        return $this->services['security.firewall.map.context.ezpublish_front'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => $this->get('security.channel_listener'), 1 => new \Symfony\Component\Security\Http\Firewall\ContextListener($a, array(0 => $this->get('ezpublish.security.user_provider')), 'ezpublish_front', $b, $c), 2 => $g, 3 => new \Symfony\Component\Security\Http\Firewall\UsernamePasswordFormAuthenticationListener($a, $f, new \Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy('migrate'), $d, 'ezpublish_front', $h, $i, array('require_previous_session' => false, 'check_path' => '/login_check', 'use_forward' => false, 'username_parameter' => '_username', 'password_parameter' => '_password', 'csrf_parameter' => '_csrf_token', 'intention' => 'authenticate', 'post_only' => true), $b, $c, NULL), 4 => $this->get('ezpublish_rest.security.authentication.listener.session.ezpublish_front'), 5 => new \Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener($a, '56b479dd466603.02699037', $b, $f), 6 => $this->get('security.access_listener')), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($a, $this->get('security.authentication.trust_resolver'), $d, 'ezpublish_front', new \Symfony\Component\Security\Http\EntryPoint\FormAuthenticationEntryPoint($e, $d, '/login', false), NULL, NULL, $b, false));
    }

    /**
     * Gets the 'security.password_encoder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Encoder\UserPasswordEncoder A Symfony\Component\Security\Core\Encoder\UserPasswordEncoder instance.
     */
    protected function getSecurity_PasswordEncoderService()
    {
        return $this->services['security.password_encoder'] = new \Symfony\Component\Security\Core\Encoder\UserPasswordEncoder($this->get('security.encoder_factory'));
    }

    /**
     * Gets the 'security.rememberme.response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Http\RememberMe\ResponseListener A Symfony\Component\Security\Http\RememberMe\ResponseListener instance.
     */
    protected function getSecurity_Rememberme_ResponseListenerService()
    {
        return $this->services['security.rememberme.response_listener'] = new \Symfony\Component\Security\Http\RememberMe\ResponseListener();
    }

    /**
     * Gets the 'security.secure_random' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Util\SecureRandom A Symfony\Component\Security\Core\Util\SecureRandom instance.
     */
    protected function getSecurity_SecureRandomService()
    {
        return $this->services['security.secure_random'] = new \Symfony\Component\Security\Core\Util\SecureRandom((__DIR__.'/secure_random.seed'), $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'security.token_storage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage A Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage instance.
     */
    protected function getSecurity_TokenStorageService()
    {
        return $this->services['security.token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage();
    }

    /**
     * Gets the 'security.validator.user_password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator A Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator instance.
     */
    protected function getSecurity_Validator_UserPasswordService()
    {
        return $this->services['security.validator.user_password'] = new \Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator($this->get('security.token_storage'), $this->get('security.encoder_factory'));
    }

    /**
     * Gets the 'sensio_distribution.security_checker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \SensioLabs\Security\SecurityChecker A SensioLabs\Security\SecurityChecker instance.
     */
    protected function getSensioDistribution_SecurityCheckerService()
    {
        return $this->services['sensio_distribution.security_checker'] = new \SensioLabs\Security\SecurityChecker();
    }

    /**
     * Gets the 'sensio_distribution.security_checker.command' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \SensioLabs\Security\Command\SecurityCheckerCommand A SensioLabs\Security\Command\SecurityCheckerCommand instance.
     */
    protected function getSensioDistribution_SecurityChecker_CommandService()
    {
        return $this->services['sensio_distribution.security_checker.command'] = new \SensioLabs\Security\Command\SecurityCheckerCommand($this->get('sensio_distribution.security_checker'));
    }

    /**
     * Gets the 'sensio_distribution.webconfigurator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\DistributionBundle\Configurator\Configurator A Sensio\Bundle\DistributionBundle\Configurator\Configurator instance.
     */
    protected function getSensioDistribution_WebconfiguratorService()
    {
        $this->services['sensio_distribution.webconfigurator'] = $instance = new \Sensio\Bundle\DistributionBundle\Configurator\Configurator($this->targetDirs[2]);

        $instance->addStep(new \Sensio\Bundle\DistributionBundle\Configurator\Step\DoctrineStep(), 10);
        $instance->addStep(new \Sensio\Bundle\DistributionBundle\Configurator\Step\SecretStep(), 0);

        return $instance;
    }

    /**
     * Gets the 'sensio_framework_extra.cache.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener instance.
     */
    protected function getSensioFrameworkExtra_Cache_ListenerService()
    {
        return $this->services['sensio_framework_extra.cache.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener();
    }

    /**
     * Gets the 'sensio_framework_extra.controller.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener instance.
     */
    protected function getSensioFrameworkExtra_Controller_ListenerService()
    {
        return $this->services['sensio_framework_extra.controller.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener($this->get('annotation_reader'));
    }

    /**
     * Gets the 'sensio_framework_extra.converter.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter A Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter instance.
     */
    protected function getSensioFrameworkExtra_Converter_DatetimeService()
    {
        return $this->services['sensio_framework_extra.converter.datetime'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter();
    }

    /**
     * Gets the 'sensio_framework_extra.converter.doctrine.orm' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter A Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter instance.
     */
    protected function getSensioFrameworkExtra_Converter_Doctrine_OrmService()
    {
        return $this->services['sensio_framework_extra.converter.doctrine.orm'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter($this->get('doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'sensio_framework_extra.converter.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener instance.
     */
    protected function getSensioFrameworkExtra_Converter_ListenerService()
    {
        return $this->services['sensio_framework_extra.converter.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener($this->get('sensio_framework_extra.converter.manager'), true);
    }

    /**
     * Gets the 'sensio_framework_extra.converter.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager A Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager instance.
     */
    protected function getSensioFrameworkExtra_Converter_ManagerService()
    {
        $this->services['sensio_framework_extra.converter.manager'] = $instance = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager();

        $instance->add($this->get('sensio_framework_extra.converter.doctrine.orm'), 0, 'doctrine.orm');
        $instance->add($this->get('sensio_framework_extra.converter.datetime'), 0, 'datetime');
        $instance->add($this->get('ezpublish.param_converter.content'), -2, 'ez_content_converter');
        $instance->add($this->get('ezpublish.param_converter.location'), -2, 'ez_location_converter');

        return $instance;
    }

    /**
     * Gets the 'sensio_framework_extra.security.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener instance.
     */
    protected function getSensioFrameworkExtra_Security_ListenerService()
    {
        return $this->services['sensio_framework_extra.security.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener(NULL, new \Sensio\Bundle\FrameworkExtraBundle\Security\ExpressionLanguage(), $this->get('security.authentication.trust_resolver', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('security.role_hierarchy', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'sensio_framework_extra.view.guesser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser A Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser instance.
     */
    protected function getSensioFrameworkExtra_View_GuesserService()
    {
        return $this->services['sensio_framework_extra.view.guesser'] = new \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser($this->get('kernel'));
    }

    /**
     * Gets the 'sensio_framework_extra.view.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener instance.
     */
    protected function getSensioFrameworkExtra_View_ListenerService()
    {
        return $this->services['sensio_framework_extra.view.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener($this);
    }

    /**
     * Gets the 'service_container' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     */
    protected function getServiceContainerService()
    {
        throw new RuntimeException('You have requested a synthetic service ("service_container"). The DIC does not know how to construct this service.');
    }

    /**
     * Gets the 'session' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Session A Symfony\Component\HttpFoundation\Session\Session instance.
     */
    protected function getSessionService()
    {
        return $this->services['session'] = new \Symfony\Component\HttpFoundation\Session\Session($this->get('session.storage.native'), $this->get('session.attribute_bag'), new \Symfony\Component\HttpFoundation\Session\Flash\FlashBag());
    }

    /**
     * Gets the 'session.attribute_bag' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag A Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag instance.
     */
    protected function getSession_AttributeBagService()
    {
        return $this->services['session.attribute_bag'] = new \Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag('_ezpublish');
    }

    /**
     * Gets the 'session.save_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SaveSessionListener A Symfony\Component\HttpKernel\EventListener\SaveSessionListener instance.
     */
    protected function getSession_SaveListenerService()
    {
        return $this->services['session.save_listener'] = new \Symfony\Component\HttpKernel\EventListener\SaveSessionListener();
    }

    /**
     * Gets the 'session.storage.filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage instance.
     */
    protected function getSession_Storage_FilesystemService()
    {
        return $this->services['session.storage.filesystem'] = new \Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage((__DIR__.'/sessions'), 'MOCKSESSID', $this->get('session.storage.metadata_bag'));
    }

    /**
     * Gets the 'session.storage.native' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage instance.
     */
    protected function getSession_Storage_NativeService()
    {
        return $this->services['session.storage.native'] = new \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage(array('gc_probability' => 1), NULL, $this->get('session.storage.metadata_bag'));
    }

    /**
     * Gets the 'session.storage.php_bridge' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage instance.
     */
    protected function getSession_Storage_PhpBridgeService()
    {
        return $this->services['session.storage.php_bridge'] = new \Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage(NULL, $this->get('session.storage.metadata_bag'));
    }

    /**
     * Gets the 'session_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\EventListener\SessionListener A Symfony\Bundle\FrameworkBundle\EventListener\SessionListener instance.
     */
    protected function getSessionListenerService()
    {
        return $this->services['session_listener'] = new \Symfony\Bundle\FrameworkBundle\EventListener\SessionListener($this);
    }

    /**
     * Gets the 'stash.default_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Tedivm\StashBundle\Service\CacheService A Tedivm\StashBundle\Service\CacheService instance.
     */
    protected function getStash_DefaultCacheService()
    {
        return $this->services['stash.default_cache'] = new \Tedivm\StashBundle\Service\CacheService('default', $this->get('stash.driver.default_cache'), $this->get('stash.tracker.default_cache'));
    }

    /**
     * Gets the 'stash.driver.default_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Stash\Interfaces\DriverInterface A Stash\Interfaces\DriverInterface instance.
     */
    protected function getStash_Driver_DefaultCacheService()
    {
        return $this->services['stash.driver.default_cache'] = \Tedivm\StashBundle\Factory\DriverFactory::createDriver(array(0 => 'Ephemeral', 1 => 'FileSystem'), array('BlackHole' => array(), 'Ephemeral' => array(), 'FileSystem' => array('dirSplit' => 2, 'path' => (__DIR__.'/stash'), 'filePermissions' => 432, 'dirPermissions' => 504, 'memKeyLimit' => 200, 'keyHashFunction' => 'md5', 'encoder' => 'Native'), 'SQLite' => array('filePermissions' => 432, 'dirPermissions' => 504, 'busyTimeout' => 500, 'nesting' => 0, 'subhandler' => 'PDO', 'version' => NULL, 'path' => (__DIR__.'/stash'))));
    }

    /**
     * Gets the 'stash.tracker.default_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Tedivm\StashBundle\Service\CacheTracker A Tedivm\StashBundle\Service\CacheTracker instance.
     */
    protected function getStash_Tracker_DefaultCacheService()
    {
        $this->services['stash.tracker.default_cache'] = $instance = new \Tedivm\StashBundle\Service\CacheTracker('default');

        $instance->enableQueryLogging(true);
        $instance->enableQueryValueLogging(false);

        return $instance;
    }

    /**
     * Gets the 'streamed_response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener A Symfony\Component\HttpKernel\EventListener\StreamedResponseListener instance.
     */
    protected function getStreamedResponseListenerService()
    {
        return $this->services['streamed_response_listener'] = new \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener();
    }

    /**
     * Gets the 'swiftmailer.email_sender.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener A Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener instance.
     */
    protected function getSwiftmailer_EmailSender_ListenerService()
    {
        return $this->services['swiftmailer.email_sender.listener'] = new \Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener($this, $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'swiftmailer.mailer.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Mailer A Swift_Mailer instance.
     */
    protected function getSwiftmailer_Mailer_DefaultService()
    {
        return $this->services['swiftmailer.mailer.default'] = new \Swift_Mailer($this->get('swiftmailer.mailer.default.transport'));
    }

    /**
     * Gets the 'swiftmailer.mailer.default.plugin.messagelogger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Plugins_MessageLogger A Swift_Plugins_MessageLogger instance.
     */
    protected function getSwiftmailer_Mailer_Default_Plugin_MessageloggerService()
    {
        return $this->services['swiftmailer.mailer.default.plugin.messagelogger'] = new \Swift_Plugins_MessageLogger();
    }

    /**
     * Gets the 'swiftmailer.mailer.default.spool' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_MemorySpool A Swift_MemorySpool instance.
     */
    protected function getSwiftmailer_Mailer_Default_SpoolService()
    {
        return $this->services['swiftmailer.mailer.default.spool'] = new \Swift_MemorySpool();
    }

    /**
     * Gets the 'swiftmailer.mailer.default.transport' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Transport_SpoolTransport A Swift_Transport_SpoolTransport instance.
     */
    protected function getSwiftmailer_Mailer_Default_TransportService()
    {
        $this->services['swiftmailer.mailer.default.transport'] = $instance = new \Swift_Transport_SpoolTransport($this->get('swiftmailer.mailer.default.transport.eventdispatcher'), $this->get('swiftmailer.mailer.default.spool'));

        $instance->registerPlugin($this->get('swiftmailer.mailer.default.plugin.messagelogger'));

        return $instance;
    }

    /**
     * Gets the 'swiftmailer.mailer.default.transport.real' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Transport_EsmtpTransport A Swift_Transport_EsmtpTransport instance.
     */
    protected function getSwiftmailer_Mailer_Default_Transport_RealService()
    {
        $a = new \Swift_Transport_Esmtp_AuthHandler(array(0 => new \Swift_Transport_Esmtp_Auth_CramMd5Authenticator(), 1 => new \Swift_Transport_Esmtp_Auth_LoginAuthenticator(), 2 => new \Swift_Transport_Esmtp_Auth_PlainAuthenticator()));
        $a->setUsername(NULL);
        $a->setPassword(NULL);
        $a->setAuthMode(NULL);

        $this->services['swiftmailer.mailer.default.transport.real'] = $instance = new \Swift_Transport_EsmtpTransport(new \Swift_Transport_StreamBuffer(new \Swift_StreamFilters_StringReplacementFilterFactory()), array(0 => $a), $this->get('swiftmailer.mailer.default.transport.eventdispatcher'));

        $instance->setHost('127.0.0.1');
        $instance->setPort(25);
        $instance->setEncryption(NULL);
        $instance->setTimeout(30);
        $instance->setSourceIp(NULL);

        return $instance;
    }

    /**
     * Gets the 'templating' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\TwigEngine A Symfony\Bundle\TwigBundle\TwigEngine instance.
     */
    protected function getTemplatingService()
    {
        return $this->services['templating'] = new \Symfony\Bundle\TwigBundle\TwigEngine($this->get('twig'), $this->get('templating.name_parser'), $this->get('templating.locator'));
    }

    /**
     * Gets the 'templating.filename_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser A Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser instance.
     */
    protected function getTemplating_FilenameParserService()
    {
        return $this->services['templating.filename_parser'] = new \Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser();
    }

    /**
     * Gets the 'templating.helper.assets' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\AssetsHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\AssetsHelper instance.
     */
    protected function getTemplating_Helper_AssetsService()
    {
        return $this->services['templating.helper.assets'] = new \Symfony\Bundle\FrameworkBundle\Templating\Helper\AssetsHelper($this->get('assets.packages'), array());
    }

    /**
     * Gets the 'templating.helper.logout_url' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper A Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper instance.
     */
    protected function getTemplating_Helper_LogoutUrlService()
    {
        return $this->services['templating.helper.logout_url'] = new \Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper($this->get('security.logout_url_generator'));
    }

    /**
     * Gets the 'templating.helper.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\RouterHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\RouterHelper instance.
     */
    protected function getTemplating_Helper_RouterService()
    {
        return $this->services['templating.helper.router'] = new \Symfony\Bundle\FrameworkBundle\Templating\Helper\RouterHelper($this->get('ezpublish.chain_router'));
    }

    /**
     * Gets the 'templating.helper.security' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper A Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper instance.
     */
    protected function getTemplating_Helper_SecurityService()
    {
        return $this->services['templating.helper.security'] = new \Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper($this->get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'templating.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader A Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader instance.
     */
    protected function getTemplating_LoaderService()
    {
        return $this->services['templating.loader'] = new \Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader($this->get('templating.locator'));
    }

    /**
     * Gets the 'templating.name_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser A Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser instance.
     */
    protected function getTemplating_NameParserService()
    {
        return $this->services['templating.name_parser'] = new \Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser($this->get('kernel'));
    }

    /**
     * Gets the 'translation.dumper.csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\CsvFileDumper A Symfony\Component\Translation\Dumper\CsvFileDumper instance.
     */
    protected function getTranslation_Dumper_CsvService()
    {
        return $this->services['translation.dumper.csv'] = new \Symfony\Component\Translation\Dumper\CsvFileDumper();
    }

    /**
     * Gets the 'translation.dumper.ini' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\IniFileDumper A Symfony\Component\Translation\Dumper\IniFileDumper instance.
     */
    protected function getTranslation_Dumper_IniService()
    {
        return $this->services['translation.dumper.ini'] = new \Symfony\Component\Translation\Dumper\IniFileDumper();
    }

    /**
     * Gets the 'translation.dumper.json' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\JsonFileDumper A Symfony\Component\Translation\Dumper\JsonFileDumper instance.
     */
    protected function getTranslation_Dumper_JsonService()
    {
        return $this->services['translation.dumper.json'] = new \Symfony\Component\Translation\Dumper\JsonFileDumper();
    }

    /**
     * Gets the 'translation.dumper.mo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\MoFileDumper A Symfony\Component\Translation\Dumper\MoFileDumper instance.
     */
    protected function getTranslation_Dumper_MoService()
    {
        return $this->services['translation.dumper.mo'] = new \Symfony\Component\Translation\Dumper\MoFileDumper();
    }

    /**
     * Gets the 'translation.dumper.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\PhpFileDumper A Symfony\Component\Translation\Dumper\PhpFileDumper instance.
     */
    protected function getTranslation_Dumper_PhpService()
    {
        return $this->services['translation.dumper.php'] = new \Symfony\Component\Translation\Dumper\PhpFileDumper();
    }

    /**
     * Gets the 'translation.dumper.po' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\PoFileDumper A Symfony\Component\Translation\Dumper\PoFileDumper instance.
     */
    protected function getTranslation_Dumper_PoService()
    {
        return $this->services['translation.dumper.po'] = new \Symfony\Component\Translation\Dumper\PoFileDumper();
    }

    /**
     * Gets the 'translation.dumper.qt' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\QtFileDumper A Symfony\Component\Translation\Dumper\QtFileDumper instance.
     */
    protected function getTranslation_Dumper_QtService()
    {
        return $this->services['translation.dumper.qt'] = new \Symfony\Component\Translation\Dumper\QtFileDumper();
    }

    /**
     * Gets the 'translation.dumper.res' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\IcuResFileDumper A Symfony\Component\Translation\Dumper\IcuResFileDumper instance.
     */
    protected function getTranslation_Dumper_ResService()
    {
        return $this->services['translation.dumper.res'] = new \Symfony\Component\Translation\Dumper\IcuResFileDumper();
    }

    /**
     * Gets the 'translation.dumper.xliff' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\XliffFileDumper A Symfony\Component\Translation\Dumper\XliffFileDumper instance.
     */
    protected function getTranslation_Dumper_XliffService()
    {
        return $this->services['translation.dumper.xliff'] = new \Symfony\Component\Translation\Dumper\XliffFileDumper();
    }

    /**
     * Gets the 'translation.dumper.yml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\YamlFileDumper A Symfony\Component\Translation\Dumper\YamlFileDumper instance.
     */
    protected function getTranslation_Dumper_YmlService()
    {
        return $this->services['translation.dumper.yml'] = new \Symfony\Component\Translation\Dumper\YamlFileDumper();
    }

    /**
     * Gets the 'translation.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Extractor\ChainExtractor A Symfony\Component\Translation\Extractor\ChainExtractor instance.
     */
    protected function getTranslation_ExtractorService()
    {
        $this->services['translation.extractor'] = $instance = new \Symfony\Component\Translation\Extractor\ChainExtractor();

        $instance->addExtractor('php', $this->get('translation.extractor.php'));
        $instance->addExtractor('twig', $this->get('twig.translation.extractor'));

        return $instance;
    }

    /**
     * Gets the 'translation.extractor.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor A Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor instance.
     */
    protected function getTranslation_Extractor_PhpService()
    {
        return $this->services['translation.extractor.php'] = new \Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor();
    }

    /**
     * Gets the 'translation.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader A Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader instance.
     */
    protected function getTranslation_LoaderService()
    {
        $a = $this->get('translation.loader.xliff');

        $this->services['translation.loader'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader();

        $instance->addLoader('php', $this->get('translation.loader.php'));
        $instance->addLoader('yml', $this->get('translation.loader.yml'));
        $instance->addLoader('xlf', $a);
        $instance->addLoader('xliff', $a);
        $instance->addLoader('po', $this->get('translation.loader.po'));
        $instance->addLoader('mo', $this->get('translation.loader.mo'));
        $instance->addLoader('ts', $this->get('translation.loader.qt'));
        $instance->addLoader('csv', $this->get('translation.loader.csv'));
        $instance->addLoader('res', $this->get('translation.loader.res'));
        $instance->addLoader('dat', $this->get('translation.loader.dat'));
        $instance->addLoader('ini', $this->get('translation.loader.ini'));
        $instance->addLoader('json', $this->get('translation.loader.json'));

        return $instance;
    }

    /**
     * Gets the 'translation.loader.csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\CsvFileLoader A Symfony\Component\Translation\Loader\CsvFileLoader instance.
     */
    protected function getTranslation_Loader_CsvService()
    {
        return $this->services['translation.loader.csv'] = new \Symfony\Component\Translation\Loader\CsvFileLoader();
    }

    /**
     * Gets the 'translation.loader.dat' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuDatFileLoader A Symfony\Component\Translation\Loader\IcuDatFileLoader instance.
     */
    protected function getTranslation_Loader_DatService()
    {
        return $this->services['translation.loader.dat'] = new \Symfony\Component\Translation\Loader\IcuDatFileLoader();
    }

    /**
     * Gets the 'translation.loader.ini' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\IniFileLoader A Symfony\Component\Translation\Loader\IniFileLoader instance.
     */
    protected function getTranslation_Loader_IniService()
    {
        return $this->services['translation.loader.ini'] = new \Symfony\Component\Translation\Loader\IniFileLoader();
    }

    /**
     * Gets the 'translation.loader.json' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\JsonFileLoader A Symfony\Component\Translation\Loader\JsonFileLoader instance.
     */
    protected function getTranslation_Loader_JsonService()
    {
        return $this->services['translation.loader.json'] = new \Symfony\Component\Translation\Loader\JsonFileLoader();
    }

    /**
     * Gets the 'translation.loader.mo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\MoFileLoader A Symfony\Component\Translation\Loader\MoFileLoader instance.
     */
    protected function getTranslation_Loader_MoService()
    {
        return $this->services['translation.loader.mo'] = new \Symfony\Component\Translation\Loader\MoFileLoader();
    }

    /**
     * Gets the 'translation.loader.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\PhpFileLoader A Symfony\Component\Translation\Loader\PhpFileLoader instance.
     */
    protected function getTranslation_Loader_PhpService()
    {
        return $this->services['translation.loader.php'] = new \Symfony\Component\Translation\Loader\PhpFileLoader();
    }

    /**
     * Gets the 'translation.loader.po' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\PoFileLoader A Symfony\Component\Translation\Loader\PoFileLoader instance.
     */
    protected function getTranslation_Loader_PoService()
    {
        return $this->services['translation.loader.po'] = new \Symfony\Component\Translation\Loader\PoFileLoader();
    }

    /**
     * Gets the 'translation.loader.qt' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\QtFileLoader A Symfony\Component\Translation\Loader\QtFileLoader instance.
     */
    protected function getTranslation_Loader_QtService()
    {
        return $this->services['translation.loader.qt'] = new \Symfony\Component\Translation\Loader\QtFileLoader();
    }

    /**
     * Gets the 'translation.loader.res' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuResFileLoader A Symfony\Component\Translation\Loader\IcuResFileLoader instance.
     */
    protected function getTranslation_Loader_ResService()
    {
        return $this->services['translation.loader.res'] = new \Symfony\Component\Translation\Loader\IcuResFileLoader();
    }

    /**
     * Gets the 'translation.loader.xliff' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\XliffFileLoader A Symfony\Component\Translation\Loader\XliffFileLoader instance.
     */
    protected function getTranslation_Loader_XliffService()
    {
        return $this->services['translation.loader.xliff'] = new \Symfony\Component\Translation\Loader\XliffFileLoader();
    }

    /**
     * Gets the 'translation.loader.yml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\YamlFileLoader A Symfony\Component\Translation\Loader\YamlFileLoader instance.
     */
    protected function getTranslation_Loader_YmlService()
    {
        return $this->services['translation.loader.yml'] = new \Symfony\Component\Translation\Loader\YamlFileLoader();
    }

    /**
     * Gets the 'translation.writer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Writer\TranslationWriter A Symfony\Component\Translation\Writer\TranslationWriter instance.
     */
    protected function getTranslation_WriterService()
    {
        $this->services['translation.writer'] = $instance = new \Symfony\Component\Translation\Writer\TranslationWriter();

        $instance->addDumper('php', $this->get('translation.dumper.php'));
        $instance->addDumper('xlf', $this->get('translation.dumper.xliff'));
        $instance->addDumper('po', $this->get('translation.dumper.po'));
        $instance->addDumper('mo', $this->get('translation.dumper.mo'));
        $instance->addDumper('yml', $this->get('translation.dumper.yml'));
        $instance->addDumper('ts', $this->get('translation.dumper.qt'));
        $instance->addDumper('csv', $this->get('translation.dumper.csv'));
        $instance->addDumper('ini', $this->get('translation.dumper.ini'));
        $instance->addDumper('json', $this->get('translation.dumper.json'));
        $instance->addDumper('res', $this->get('translation.dumper.res'));

        return $instance;
    }

    /**
     * Gets the 'translator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\DataCollectorTranslator A Symfony\Component\Translation\DataCollectorTranslator instance.
     */
    protected function getTranslatorService()
    {
        return $this->services['translator'] = new \Symfony\Component\Translation\DataCollectorTranslator(new \Symfony\Component\Translation\LoggingTranslator($this->get('translator.default'), $this->get('monolog.logger.translation')));
    }

    /**
     * Gets the 'translator.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\Translator A Symfony\Bundle\FrameworkBundle\Translation\Translator instance.
     */
    protected function getTranslator_DefaultService()
    {
        $this->services['translator.default'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\Translator($this, new \Symfony\Component\Translation\MessageSelector(), array('translation.loader.php' => array(0 => 'php'), 'translation.loader.yml' => array(0 => 'yml'), 'translation.loader.xliff' => array(0 => 'xlf', 1 => 'xliff'), 'translation.loader.po' => array(0 => 'po'), 'translation.loader.mo' => array(0 => 'mo'), 'translation.loader.qt' => array(0 => 'ts'), 'translation.loader.csv' => array(0 => 'csv'), 'translation.loader.res' => array(0 => 'res'), 'translation.loader.dat' => array(0 => 'dat'), 'translation.loader.ini' => array(0 => 'ini'), 'translation.loader.json' => array(0 => 'json')), array('cache_dir' => (__DIR__.'/translations'), 'debug' => true, 'resource_files' => array('af' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.af.xlf'), 'ar' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ar.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ar.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.ar.xlf', 3 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.ar.xliff'), 'az' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.az.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.az.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.az.xlf', 3 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.az.xliff'), 'bg' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.bg.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.bg.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.bg.xlf'), 'ca' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ca.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ca.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.ca.xlf', 3 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.ca.xliff'), 'cs' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.cs.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.cs.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.cs.xlf', 3 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.cs.xliff'), 'cy' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.cy.xlf'), 'da' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.da.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.da.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.da.xlf', 3 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.da.xliff'), 'de' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.de.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.de.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.de.xlf', 3 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.de.xliff'), 'el' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.el.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.el.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.el.xlf'), 'en' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.en.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.en.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.en.xlf', 3 => '/app/vendor/ezsystems/ezpublish-kernel/eZ/Bundle/EzPublishCoreBundle/Resources/translations/repository_exceptions.en.xlf', 4 => '/app/vendor/ezsystems/platform-ui-bundle/Resources/translations/content_type.en.xlf', 5 => '/app/vendor/ezsystems/platform-ui-bundle/Resources/translations/dashboard.en.xlf', 6 => '/app/vendor/ezsystems/platform-ui-bundle/Resources/translations/fieldtypes.en.yml', 7 => '/app/vendor/ezsystems/platform-ui-bundle/Resources/translations/general.en.xlf', 8 => '/app/vendor/ezsystems/platform-ui-bundle/Resources/translations/language.en.xlf', 9 => '/app/vendor/ezsystems/platform-ui-bundle/Resources/translations/role.en.xlf', 10 => '/app/vendor/ezsystems/platform-ui-bundle/Resources/translations/section.en.xlf', 11 => '/app/vendor/ezsystems/platform-ui-bundle/Resources/translations/systeminfo.en.xlf', 12 => '/app/vendor/ezsystems/platform-ui-bundle/Resources/translations/validators.en.xlf', 13 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.en.xliff', 14 => '/app/vendor/ezsystems/repository-forms/bundle/Resources/translations/ezrepoforms_content_type.en.xlf', 15 => '/app/vendor/ezsystems/repository-forms/bundle/Resources/translations/ezrepoforms_language.en.xlf', 16 => '/app/vendor/ezsystems/repository-forms/bundle/Resources/translations/ezrepoforms_role.en.xlf', 17 => '/app/vendor/ezsystems/repository-forms/bundle/Resources/translations/ezrepoforms_section.en.xlf', 18 => '/app/vendor/ezsystems/repository-forms/bundle/Resources/translations/validators.en.xlf'), 'es' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.es.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.es.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.es.xlf', 3 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.es.xliff'), 'et' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.et.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.et.xlf'), 'eu' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.eu.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.eu.xlf'), 'fa' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fa.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fa.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.fa.xlf', 3 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.fa.xliff'), 'fi' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fi.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fi.xlf'), 'fr' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fr.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fr.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.fr.xlf', 3 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.fr.xliff'), 'gl' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.gl.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.gl.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.gl.xlf'), 'he' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.he.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.he.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.he.xlf'), 'hr' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hr.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hr.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.hr.xlf', 3 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.hr.xliff'), 'hu' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hu.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hu.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.hu.xlf'), 'hy' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hy.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hy.xlf'), 'id' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.id.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.id.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.id.xlf'), 'it' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.it.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.it.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.it.xlf', 3 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.it.xliff'), 'ja' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ja.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ja.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.ja.xlf'), 'lb' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.lb.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lb.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.lb.xlf'), 'lt' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.lt.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lt.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.lt.xlf'), 'mn' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.mn.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.mn.xlf'), 'nb' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.nb.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.nb.xlf'), 'nl' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.nl.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.nl.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.nl.xlf', 3 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.nl.xliff'), 'no' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.no.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.no.xlf'), 'pl' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pl.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pl.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.pl.xlf', 3 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.pl.xliff'), 'pt' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pt.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pt.xlf', 2 => '/app/vendor/ezsystems/ezpublish-kernel/eZ/Bundle/EzPublishCoreBundle/Resources/translations/repository_exceptions.pt.xlf', 3 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.pt.xliff'), 'pt_BR' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pt_BR.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pt_BR.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.pt_BR.xlf'), 'ro' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ro.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ro.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.ro.xlf', 3 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.ro.xliff'), 'ru' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ru.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ru.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.ru.xlf', 3 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.ru.xliff'), 'sk' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sk.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sk.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.sk.xlf', 3 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.sk.xliff'), 'sl' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sl.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sl.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.sl.xlf', 3 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.sl.xliff'), 'sq' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sq.xlf'), 'sr_Cyrl' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sr_Cyrl.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sr_Cyrl.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.sr_Cyrl.xlf', 3 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.sr_Cyrl.xliff'), 'sr_Latn' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sr_Latn.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sr_Latn.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.sr_Latn.xlf', 3 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.sr_Latn.xliff'), 'sv' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sv.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sv.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.sv.xlf'), 'th' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.th.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.th.xlf', 2 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.th.xliff'), 'tr' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.tr.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.tr.xlf', 2 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.tr.xliff'), 'uk' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.uk.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.uk.xlf', 2 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.uk.xliff'), 'vi' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.vi.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.vi.xlf'), 'zh_CN' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.zh_CN.xlf', 1 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.zh_CN.xlf', 2 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.zh_CN.xlf', 3 => '/app/vendor/white-october/pagerfanta-bundle/Resources/translations/pagerfanta.zh_CN.xliff'), 'zh_TW' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.zh_TW.xlf'), 'lv' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lv.xlf'), 'pt_PT' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.pt_PT.xlf'), 'ua' => array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.ua.xlf'))), array());

        $instance->setFallbackLocales(array(0 => 'en'));

        return $instance;
    }

    /**
     * Gets the 'translator_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\TranslatorListener A Symfony\Component\HttpKernel\EventListener\TranslatorListener instance.
     */
    protected function getTranslatorListenerService()
    {
        return $this->services['translator_listener'] = new \Symfony\Component\HttpKernel\EventListener\TranslatorListener($this->get('translator'), $this->get('request_stack'));
    }

    /**
     * Gets the 'twig' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Twig_Environment A Twig_Environment instance.
     */
    protected function getTwigService()
    {
        $a = $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $b = $this->get('request_stack');
        $c = $this->get('fragment.handler');

        $d = new \Symfony\Bridge\Twig\Extension\HttpFoundationExtension($b);

        $e = new \Symfony\Bridge\Twig\AppVariable();
        $e->setEnvironment('dev');
        $e->setDebug(true);
        if ($this->has('security.token_storage')) {
            $e->setTokenStorage($this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }
        if ($this->has('request_stack')) {
            $e->setRequestStack($b);
        }
        $e->setContainer($this);

        $this->services['twig'] = $instance = new \Twig_Environment($this->get('twig.loader'), array('base_template_class' => 'eZ\\Bundle\\EzPublishDebugBundle\\Twig\\DebugTemplate', 'debug' => true, 'strict_variables' => true, 'exception_controller' => 'twig.controller.exception:showAction', 'form_themes' => array(0 => 'form_div_layout.html.twig'), 'autoescape' => 'filename', 'cache' => (__DIR__.'/twig'), 'charset' => 'UTF-8', 'paths' => array(), 'date' => array('format' => 'F j, Y H:i', 'interval_format' => '%d days', 'timezone' => NULL), 'number_format' => array('decimals' => 0, 'decimal_point' => '.', 'thousands_separator' => ',')));

        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\LogoutUrlExtension($this->get('security.logout_url_generator')));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\SecurityExtension($this->get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\ProfilerExtension($this->get('twig.profile'), $a));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\TranslationExtension($this->get('translator')));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\AssetExtension($this->get('assets.packages'), $d));
        $instance->addExtension(new \Symfony\Bundle\TwigBundle\Extension\ActionsExtension($c));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\CodeExtension(NULL, $this->targetDirs[2], 'UTF-8'));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\RoutingExtension($this->get('ezpublish.chain_router')));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\YamlExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\StopwatchExtension($a, true));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\ExpressionExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpKernelExtension($c));
        $instance->addExtension($d);
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\FormExtension(new \Symfony\Bridge\Twig\Form\TwigRenderer(new \Symfony\Bridge\Twig\Form\TwigRendererEngine(array(0 => 'form_div_layout.html.twig', 1 => 'LiipImagineBundle:Form:form_div_layout.html.twig')), $this->get('security.csrf.token_manager', ContainerInterface::NULL_ON_INVALID_REFERENCE))));
        $instance->addExtension(new \Twig_Extension_Debug());
        $instance->addExtension(new \Symfony\Bundle\AsseticBundle\Twig\AsseticExtension($this->get('assetic.asset_factory'), $this->get('templating.name_parser'), true, array(), array(0 => 'eZPlatformUIBundle'), new \Symfony\Bundle\AsseticBundle\DefaultValueSupplier($this)));
        $instance->addExtension(new \Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension());
        $instance->addExtension(new \Liip\ImagineBundle\Templating\ImagineExtension($this->get('liip_imagine.cache.manager')));
        $instance->addExtension($this->get('fos_http_cache.twig.tag_extension'));
        $instance->addExtension($this->get('twig.extension.intl'));
        $instance->addExtension($this->get('ezpublish.twig.extension.content'));
        $instance->addExtension($this->get('ezpublish.twig.extension.core'));
        $instance->addExtension($this->get('ezpublish.twig.extension.filesize'));
        $instance->addExtension($this->get('ezpublish.templating.extension.routing'));
        $instance->addExtension($this->get('ezpublish.twig.extension.field_rendering'));
        $instance->addExtension($this->get('ezpublish.twig.extension.image'));
        $instance->addExtension($this->get('ezpublish.twig.extension.rich_text'));
        $instance->addExtension($this->get('ezsystems.platformui.twig.yui_extension'));
        $instance->addExtension(new \WhiteOctober\PagerfantaBundle\Twig\PagerfantaExtension($this));
        $instance->addExtension($this->get('ezrepoforms.twig.field_edit_rendering_extension'));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\DumpExtension($this->get('var_dumper.cloner')));
        $instance->addExtension(new \Symfony\Bundle\WebProfilerBundle\Twig\WebProfilerExtension());
        $instance->addGlobal('app', $e);
        call_user_func(array(new \Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator('F j, Y H:i', '%d days', NULL, 0, '.', ','), 'configure'), $instance);

        return $instance;
    }

    /**
     * Gets the 'twig.controller.exception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\Controller\ExceptionController A Symfony\Bundle\TwigBundle\Controller\ExceptionController instance.
     */
    protected function getTwig_Controller_ExceptionService()
    {
        return $this->services['twig.controller.exception'] = new \Symfony\Bundle\TwigBundle\Controller\ExceptionController($this->get('twig'), true);
    }

    /**
     * Gets the 'twig.controller.preview_error' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\Controller\PreviewErrorController A Symfony\Bundle\TwigBundle\Controller\PreviewErrorController instance.
     */
    protected function getTwig_Controller_PreviewErrorService()
    {
        return $this->services['twig.controller.preview_error'] = new \Symfony\Bundle\TwigBundle\Controller\PreviewErrorController($this->get('http_kernel'), 'twig.controller.exception:showAction');
    }

    /**
     * Gets the 'twig.exception_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ExceptionListener A Symfony\Component\HttpKernel\EventListener\ExceptionListener instance.
     */
    protected function getTwig_ExceptionListenerService()
    {
        return $this->services['twig.exception_listener'] = new \Symfony\Component\HttpKernel\EventListener\ExceptionListener('twig.controller.exception:showAction', $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'twig.extension.intl' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Twig_Extensions_Extension_Intl A Twig_Extensions_Extension_Intl instance.
     */
    protected function getTwig_Extension_IntlService()
    {
        return $this->services['twig.extension.intl'] = new \Twig_Extensions_Extension_Intl();
    }

    /**
     * Gets the 'twig.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\Loader\FilesystemLoader A Symfony\Bundle\TwigBundle\Loader\FilesystemLoader instance.
     */
    protected function getTwig_LoaderService()
    {
        $this->services['twig.loader'] = $instance = new \Symfony\Bundle\TwigBundle\Loader\FilesystemLoader($this->get('templating.locator'), $this->get('templating.name_parser'));

        $instance->addPath('/app/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/views', 'Framework');
        $instance->addPath('/app/vendor/symfony/symfony/src/Symfony/Bundle/SecurityBundle/Resources/views', 'Security');
        $instance->addPath('/app/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle/Resources/views', 'Twig');
        $instance->addPath('/app/vendor/symfony/swiftmailer-bundle/Resources/views', 'Swiftmailer');
        $instance->addPath('/app/vendor/doctrine/doctrine-bundle/Resources/views', 'Doctrine');
        $instance->addPath('/app/vendor/tedivm/stash-bundle/Resources/views', 'TedivmStash');
        $instance->addPath('/app/vendor/liip/imagine-bundle/Liip/ImagineBundle/Resources/views', 'LiipImagine');
        $instance->addPath('/app/vendor/ezsystems/ezpublish-kernel/eZ/Bundle/EzPublishCoreBundle/Resources/views', 'EzPublishCore');
        $instance->addPath('/app/vendor/ezsystems/platform-ui-bundle/Resources/views', 'eZPlatformUI');
        $instance->addPath('/app/vendor/ezsystems/repository-forms/bundle/Resources/views', 'EzSystemsRepositoryForms');
        $instance->addPath('/app/vendor/ezsystems/ezpublish-kernel/eZ/Bundle/EzPublishDebugBundle/Resources/views', 'EzPublishDebug');
        $instance->addPath('/app/vendor/symfony/symfony/src/Symfony/Bundle/DebugBundle/Resources/views', 'Debug');
        $instance->addPath('/app/vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/views', 'WebProfiler');
        $instance->addPath('/app/vendor/sensio/distribution-bundle/Sensio/Bundle/DistributionBundle/Resources/views', 'SensioDistribution');
        $instance->addPath(($this->targetDirs[2].'/Resources/views'));
        $instance->addPath('/app/vendor/symfony/symfony/src/Symfony/Bridge/Twig/Resources/views/Form');

        return $instance;
    }

    /**
     * Gets the 'twig.profile' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Twig_Profiler_Profile A Twig_Profiler_Profile instance.
     */
    protected function getTwig_ProfileService()
    {
        return $this->services['twig.profile'] = new \Twig_Profiler_Profile();
    }

    /**
     * Gets the 'twig.translation.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Twig\Translation\TwigExtractor A Symfony\Bridge\Twig\Translation\TwigExtractor instance.
     */
    protected function getTwig_Translation_ExtractorService()
    {
        return $this->services['twig.translation.extractor'] = new \Symfony\Bridge\Twig\Translation\TwigExtractor($this->get('twig'));
    }

    /**
     * Gets the 'uri_signer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\UriSigner A Symfony\Component\HttpKernel\UriSigner instance.
     */
    protected function getUriSignerService()
    {
        return $this->services['uri_signer'] = new \Symfony\Component\HttpKernel\UriSigner('ThisTokenIsNotSoSecretChangeIt');
    }

    /**
     * Gets the 'validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\Validator\ValidatorInterface A Symfony\Component\Validator\Validator\ValidatorInterface instance.
     */
    protected function getValidatorService()
    {
        return $this->services['validator'] = $this->get('validator.builder')->getValidator();
    }

    /**
     * Gets the 'validator.builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\ValidatorBuilderInterface A Symfony\Component\Validator\ValidatorBuilderInterface instance.
     */
    protected function getValidator_BuilderService()
    {
        $this->services['validator.builder'] = $instance = \Symfony\Component\Validator\Validation::createValidatorBuilder();

        $instance->setConstraintValidatorFactory(new \Symfony\Bundle\FrameworkBundle\Validator\ConstraintValidatorFactory($this, array('validator.expression' => 'validator.expression', 'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => 'validator.email', 'security.validator.user_password' => 'security.validator.user_password', 'ezrepoforms.validator.unique_language_code' => 'ezrepoforms.validator.unique_language_code', 'ezrepoforms.validator.unique_section_identifier' => 'ezrepoforms.validator.unique_section_identifier', 'ezrepoforms.validator.unique_role_identifier' => 'ezrepoforms.validator.unique_role_identifier', 'ezrepoforms.validator.unique_content_type_identifier' => 'ezrepoforms.validator.unique_content_type_identifier', 'ezrepoforms.validator.validator_configuration' => 'ezrepoforms.validator.validator_configuration', 'ezrepoforms.validator.field_settings' => 'ezrepoforms.validator.field_settings', 'ezrepoforms.validator.default_field_value' => 'ezrepoforms.validator.default_field_value')));
        $instance->setTranslator($this->get('translator'));
        $instance->setTranslationDomain('validators');
        $instance->addXmlMappings(array(0 => '/app/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/config/validation.xml'));
        $instance->addYamlMappings(array(0 => '/app/vendor/ezsystems/repository-forms/bundle/Resources/config/validation.yml'));
        $instance->enableAnnotationMapping($this->get('annotation_reader'));
        $instance->addMethodMapping('loadValidatorMetadata');
        $instance->addObjectInitializers(array());

        return $instance;
    }

    /**
     * Gets the 'validator.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\Constraints\EmailValidator A Symfony\Component\Validator\Constraints\EmailValidator instance.
     */
    protected function getValidator_EmailService()
    {
        return $this->services['validator.email'] = new \Symfony\Component\Validator\Constraints\EmailValidator(false);
    }

    /**
     * Gets the 'validator.expression' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\Constraints\ExpressionValidator A Symfony\Component\Validator\Constraints\ExpressionValidator instance.
     */
    protected function getValidator_ExpressionService()
    {
        return $this->services['validator.expression'] = new \Symfony\Component\Validator\Constraints\ExpressionValidator($this->get('property_accessor'));
    }

    /**
     * Gets the 'var_dumper.cli_dumper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\VarDumper\Dumper\CliDumper A Symfony\Component\VarDumper\Dumper\CliDumper instance.
     */
    protected function getVarDumper_CliDumperService()
    {
        return $this->services['var_dumper.cli_dumper'] = new \Symfony\Component\VarDumper\Dumper\CliDumper(NULL, 'UTF-8');
    }

    /**
     * Gets the 'var_dumper.cloner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\VarDumper\Cloner\VarCloner A Symfony\Component\VarDumper\Cloner\VarCloner instance.
     */
    protected function getVarDumper_ClonerService()
    {
        $this->services['var_dumper.cloner'] = $instance = new \Symfony\Component\VarDumper\Cloner\VarCloner();

        $instance->setMaxItems(2500);
        $instance->setMaxString(-1);

        return $instance;
    }

    /**
     * Gets the 'web_profiler.controller.exception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController A Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController instance.
     */
    protected function getWebProfiler_Controller_ExceptionService()
    {
        return $this->services['web_profiler.controller.exception'] = new \Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController($this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('twig'), true);
    }

    /**
     * Gets the 'web_profiler.controller.profiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController A Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController instance.
     */
    protected function getWebProfiler_Controller_ProfilerService()
    {
        return $this->services['web_profiler.controller.profiler'] = new \Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController($this->get('ezpublish.chain_router', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('twig'), array('data_collector.config' => array(0 => 'config', 1 => '@WebProfiler/Collector/config.html.twig'), 'data_collector.request' => array(0 => 'request', 1 => '@WebProfiler/Collector/request.html.twig'), 'data_collector.ajax' => array(0 => 'ajax', 1 => '@WebProfiler/Collector/ajax.html.twig'), 'data_collector.exception' => array(0 => 'exception', 1 => '@WebProfiler/Collector/exception.html.twig'), 'data_collector.events' => array(0 => 'events', 1 => '@WebProfiler/Collector/events.html.twig'), 'data_collector.logger' => array(0 => 'logger', 1 => '@WebProfiler/Collector/logger.html.twig'), 'data_collector.time' => array(0 => 'time', 1 => '@WebProfiler/Collector/time.html.twig'), 'data_collector.memory' => array(0 => 'memory', 1 => '@WebProfiler/Collector/memory.html.twig'), 'data_collector.router' => array(0 => 'router', 1 => '@WebProfiler/Collector/router.html.twig'), 'data_collector.form' => array(0 => 'form', 1 => '@WebProfiler/Collector/form.html.twig'), 'data_collector.translation' => array(0 => 'translation', 1 => '@WebProfiler/Collector/translation.html.twig'), 'data_collector.twig' => array(0 => 'twig', 1 => '@WebProfiler/Collector/twig.html.twig'), 'data_collector.doctrine' => array(0 => 'db', 1 => '@Doctrine/Collector/db.html.twig'), 'swiftmailer.data_collector' => array(0 => 'swiftmailer', 1 => '@Swiftmailer/Collector/swiftmailer.html.twig'), 'data_collector.security' => array(0 => 'security', 1 => '@Security/Collector/security.html.twig'), 'data_collector.stash' => array(0 => 'stash', 1 => 'TedivmStashBundle:Profiler:layout'), 'ezpublish_debug.data_collector' => array(0 => 'ezpublish.debug.toolbar', 1 => 'EzPublishDebugBundle:Profiler:layout'), 'data_collector.dump' => array(0 => 'dump', 1 => '@Debug/Profiler/dump.html.twig')), 'bottom');
    }

    /**
     * Gets the 'web_profiler.controller.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\RouterController A Symfony\Bundle\WebProfilerBundle\Controller\RouterController instance.
     */
    protected function getWebProfiler_Controller_RouterService()
    {
        return $this->services['web_profiler.controller.router'] = new \Symfony\Bundle\WebProfilerBundle\Controller\RouterController($this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('twig'), $this->get('ezpublish.chain_router', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'web_profiler.debug_toolbar' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener A Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener instance.
     */
    protected function getWebProfiler_DebugToolbarService()
    {
        return $this->services['web_profiler.debug_toolbar'] = new \Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener($this->get('twig'), false, 2, 'bottom', $this->get('ezpublish.chain_router', ContainerInterface::NULL_ON_INVALID_REFERENCE), '^/(app(_[\\w]+)?\\.php/)?_wdt');
    }

    /**
     * Gets the 'white_october_pagerfanta.view_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Pagerfanta\View\ViewFactory A Pagerfanta\View\ViewFactory instance.
     */
    protected function getWhiteOctoberPagerfanta_ViewFactoryService()
    {
        $a = $this->get('translator');

        $b = new \Pagerfanta\View\DefaultView();

        $c = new \Pagerfanta\View\TwitterBootstrapView();

        $d = new \Pagerfanta\View\TwitterBootstrap3View();

        $this->services['white_october_pagerfanta.view_factory'] = $instance = new \Pagerfanta\View\ViewFactory(array());

        $instance->add(array('default' => $b, 'default_translated' => new \WhiteOctober\PagerfantaBundle\View\DefaultTranslatedView($b, $a), 'twitter_bootstrap' => $c, 'twitter_bootstrap3' => $d, 'twitter_bootstrap3_translated' => new \WhiteOctober\PagerfantaBundle\View\TwitterBootstrap3TranslatedView($d, $a), 'twitter_bootstrap_translated' => new \WhiteOctober\PagerfantaBundle\View\TwitterBootstrapTranslatedView($c, $a)));

        return $instance;
    }

    /**
     * Gets the 'assetic.asset_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Assetic\AssetFactory A eZ\Bundle\EzPublishCoreBundle\Assetic\AssetFactory instance.
     */
    protected function getAssetic_AssetFactoryService()
    {
        $this->services['assetic.asset_factory'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\Assetic\AssetFactory($this->get('kernel'), $this, $this->getParameterBag(), ($this->targetDirs[2].'/../web'), true);

        $instance->addWorker(new \Symfony\Bundle\AsseticBundle\Factory\Worker\UseControllerWorker());
        $instance->setConfigResolver($this->get('ezpublish.config.resolver.chain'));
        $instance->setDynamicSettingParser($this->get('ezpublish.config.dynamic_setting.parser'));

        return $instance;
    }

    /**
     * Gets the 'controller_name_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser A Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser instance.
     */
    protected function getControllerNameConverterService()
    {
        return $this->services['controller_name_converter'] = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser($this->get('kernel'));
    }

    /**
     * Gets the 'controller_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver A Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver instance.
     */
    protected function getControllerResolverService()
    {
        return $this->services['controller_resolver'] = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver($this, $this->get('controller_name_converter'), $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'doctrine.dbal.logger.profiling.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Doctrine\DBAL\Logging\DebugStack A Doctrine\DBAL\Logging\DebugStack instance.
     */
    protected function getDoctrine_Dbal_Logger_Profiling_DefaultService()
    {
        return $this->services['doctrine.dbal.logger.profiling.default'] = new \Doctrine\DBAL\Logging\DebugStack();
    }

    /**
     * Gets the 'ezpublish.api.storage_engine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \eZ\Publish\SPI\Persistence\Handler A eZ\Publish\SPI\Persistence\Handler instance.
     */
    protected function getEzpublish_Api_StorageEngineService()
    {
        return $this->services['ezpublish.api.storage_engine'] = $this->get('ezpublish.api.storage_engine.factory')->buildStorageEngine();
    }

    /**
     * Gets the 'router.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \eZ\Bundle\EzPublishCoreBundle\Routing\DefaultRouter A eZ\Bundle\EzPublishCoreBundle\Routing\DefaultRouter instance.
     */
    protected function getRouter_DefaultService()
    {
        $this->services['router.default'] = $instance = new \eZ\Bundle\EzPublishCoreBundle\Routing\DefaultRouter($this, (__DIR__.'/assetic/routing.yml'), array('cache_dir' => __DIR__, 'debug' => true, 'generator_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_base_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper', 'generator_cache_class' => 'appDevUrlGenerator', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_base_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper', 'matcher_cache_class' => 'appDevUrlMatcher', 'strict_requirements' => true, 'resource_type' => 'yaml'), $this->get('router.request_context', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('monolog.logger.router', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->setSiteAccess($this->get('ezpublish.siteaccess'));
        $instance->setConfigResolver($this->get('ezpublish.config.resolver.chain'));
        $instance->setNonSiteAccessAwareRoutes(array(0 => '_assetic_', 1 => '_wdt', 2 => '_profiler', 3 => '_configurator_'));
        $instance->setSiteAccessRouter($this->get('ezpublish.siteaccess_router'));

        return $instance;
    }

    /**
     * Gets the 'router.request_context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Routing\RequestContext A Symfony\Component\Routing\RequestContext instance.
     */
    protected function getRouter_RequestContextService()
    {
        return $this->services['router.request_context'] = new \Symfony\Component\Routing\RequestContext('', 'GET', 'localhost', 'http', 80, 443);
    }

    /**
     * Gets the 'security.access.decision_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AccessDecisionManager A Symfony\Component\Security\Core\Authorization\AccessDecisionManager instance.
     */
    protected function getSecurity_Access_DecisionManagerService()
    {
        $a = $this->get('ezpublish.signalslot.repository');
        $b = $this->get('security.authentication.trust_resolver');
        $c = $this->get('security.role_hierarchy');

        return $this->services['security.access.decision_manager'] = new \Symfony\Component\Security\Core\Authorization\AccessDecisionManager(array(0 => new \eZ\Publish\Core\MVC\Symfony\Security\Authorization\Voter\ValueObjectVoter($a), 1 => new \eZ\Publish\Core\MVC\Symfony\Security\Authorization\Voter\CoreVoter($a), 2 => new \Symfony\Component\Security\Core\Authorization\Voter\ExpressionVoter(new \Symfony\Component\Security\Core\Authorization\ExpressionLanguage(), $b, $c), 3 => new \Symfony\Component\Security\Core\Authorization\Voter\RoleHierarchyVoter($c), 4 => new \Symfony\Component\Security\Core\Authorization\Voter\AuthenticatedVoter($b)), 'affirmative', false, true);
    }

    /**
     * Gets the 'security.access_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\Firewall\AccessListener A Symfony\Component\Security\Http\Firewall\AccessListener instance.
     */
    protected function getSecurity_AccessListenerService()
    {
        return $this->services['security.access_listener'] = new \Symfony\Component\Security\Http\Firewall\AccessListener($this->get('security.token_storage'), $this->get('security.access.decision_manager'), $this->get('security.access_map'), $this->get('security.authentication.manager'));
    }

    /**
     * Gets the 'security.access_map' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\AccessMap A Symfony\Component\Security\Http\AccessMap instance.
     */
    protected function getSecurity_AccessMapService()
    {
        return $this->services['security.access_map'] = new \Symfony\Component\Security\Http\AccessMap();
    }

    /**
     * Gets the 'security.authentication.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager A Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager instance.
     */
    protected function getSecurity_Authentication_ManagerService()
    {
        $a = $this->get('ezpublish.signalslot.repository');
        $b = $this->get('ezpublish.config.resolver.chain');

        $c = new \eZ\Publish\Core\MVC\Symfony\Security\Authentication\RepositoryAuthenticationProvider($this->get('ezpublish.security.user_provider'), new \Symfony\Component\Security\Core\User\UserChecker(), 'ezpublish_front', $this->get('security.encoder_factory'), true);
        $c->setRepository($a);

        $d = new \eZ\Publish\Core\MVC\Symfony\Security\Authentication\AnonymousAuthenticationProvider('56b479dd466603.02699037');
        $d->setRepository($a);
        $d->setConfigResolver($b);

        $e = new \eZ\Publish\Core\MVC\Symfony\Security\Authentication\AnonymousAuthenticationProvider('56b479dd466603.02699037');
        $e->setRepository($a);
        $e->setConfigResolver($b);

        $this->services['security.authentication.manager'] = $instance = new \Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager(array(0 => $c, 1 => $d, 2 => $e), true);

        $instance->setEventDispatcher($this->get('debug.event_dispatcher'));

        return $instance;
    }

    /**
     * Gets the 'security.authentication.trust_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver A Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver instance.
     */
    protected function getSecurity_Authentication_TrustResolverService()
    {
        return $this->services['security.authentication.trust_resolver'] = new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver('Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken', 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\RememberMeToken');
    }

    /**
     * Gets the 'security.channel_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\Firewall\ChannelListener A Symfony\Component\Security\Http\Firewall\ChannelListener instance.
     */
    protected function getSecurity_ChannelListenerService()
    {
        return $this->services['security.channel_listener'] = new \Symfony\Component\Security\Http\Firewall\ChannelListener($this->get('security.access_map'), new \Symfony\Component\Security\Http\EntryPoint\RetryAuthenticationEntryPoint(80, 443), $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'security.http_utils' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \eZ\Publish\Core\MVC\Symfony\Security\HttpUtils A eZ\Publish\Core\MVC\Symfony\Security\HttpUtils instance.
     */
    protected function getSecurity_HttpUtilsService()
    {
        $a = $this->get('ezpublish.chain_router', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        $this->services['security.http_utils'] = $instance = new \eZ\Publish\Core\MVC\Symfony\Security\HttpUtils($a, $a);

        $instance->setSiteAccess($this->get('ezpublish.siteaccess'));

        return $instance;
    }

    /**
     * Gets the 'security.logout.handler.session' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\Logout\SessionLogoutHandler A Symfony\Component\Security\Http\Logout\SessionLogoutHandler instance.
     */
    protected function getSecurity_Logout_Handler_SessionService()
    {
        return $this->services['security.logout.handler.session'] = new \Symfony\Component\Security\Http\Logout\SessionLogoutHandler();
    }

    /**
     * Gets the 'security.logout_url_generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator A Symfony\Component\Security\Http\Logout\LogoutUrlGenerator instance.
     */
    protected function getSecurity_LogoutUrlGeneratorService()
    {
        $this->services['security.logout_url_generator'] = $instance = new \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator($this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('ezpublish.chain_router', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->registerListener('ezpublish_front', '/logout', 'logout', '_csrf_token', NULL);

        return $instance;
    }

    /**
     * Gets the 'security.role_hierarchy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Role\RoleHierarchy A Symfony\Component\Security\Core\Role\RoleHierarchy instance.
     */
    protected function getSecurity_RoleHierarchyService()
    {
        return $this->services['security.role_hierarchy'] = new \Symfony\Component\Security\Core\Role\RoleHierarchy(array());
    }

    /**
     * Gets the 'session.storage.metadata_bag' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\MetadataBag A Symfony\Component\HttpFoundation\Session\Storage\MetadataBag instance.
     */
    protected function getSession_Storage_MetadataBagService()
    {
        return $this->services['session.storage.metadata_bag'] = new \Symfony\Component\HttpFoundation\Session\Storage\MetadataBag('_sf2_meta', '0');
    }

    /**
     * Gets the 'swiftmailer.mailer.default.transport.eventdispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Swift_Events_SimpleEventDispatcher A Swift_Events_SimpleEventDispatcher instance.
     */
    protected function getSwiftmailer_Mailer_Default_Transport_EventdispatcherService()
    {
        return $this->services['swiftmailer.mailer.default.transport.eventdispatcher'] = new \Swift_Events_SimpleEventDispatcher();
    }

    /**
     * Gets the 'templating.locator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator A Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator instance.
     */
    protected function getTemplating_LocatorService()
    {
        return $this->services['templating.locator'] = new \Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator($this->get('file_locator'), __DIR__);
    }

    /**
     * {@inheritdoc}
     */
    public function getParameter($name)
    {
        $name = strtolower($name);

        if (!(isset($this->parameters[$name]) || array_key_exists($name, $this->parameters))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }

        return $this->parameters[$name];
    }

    /**
     * {@inheritdoc}
     */
    public function hasParameter($name)
    {
        $name = strtolower($name);

        return isset($this->parameters[$name]) || array_key_exists($name, $this->parameters);
    }

    /**
     * {@inheritdoc}
     */
    public function setParameter($name, $value)
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    /**
     * {@inheritdoc}
     */
    public function getParameterBag()
    {
        if (null === $this->parameterBag) {
            $this->parameterBag = new FrozenParameterBag($this->parameters);
        }

        return $this->parameterBag;
    }

    /**
     * Gets the default parameters.
     *
     * @return array An array of the default parameters
     */
    protected function getDefaultParameters()
    {
        return array(
            'kernel.root_dir' => $this->targetDirs[2],
            'kernel.environment' => 'dev',
            'kernel.debug' => true,
            'kernel.name' => 'app',
            'kernel.cache_dir' => __DIR__,
            'kernel.logs_dir' => ($this->targetDirs[2].'/logs'),
            'kernel.bundles' => array(
                'FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle',
                'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle',
                'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle',
                'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle',
                'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle',
                'AsseticBundle' => 'Symfony\\Bundle\\AsseticBundle\\AsseticBundle',
                'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle',
                'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle',
                'TedivmStashBundle' => 'Tedivm\\StashBundle\\TedivmStashBundle',
                'HautelookTemplatedUriBundle' => 'Hautelook\\TemplatedUriBundle\\HautelookTemplatedUriBundle',
                'LiipImagineBundle' => 'Liip\\ImagineBundle\\LiipImagineBundle',
                'FOSHttpCacheBundle' => 'FOS\\HttpCacheBundle\\FOSHttpCacheBundle',
                'EzPublishCoreBundle' => 'eZ\\Bundle\\EzPublishCoreBundle\\EzPublishCoreBundle',
                'EzPublishLegacySearchEngineBundle' => 'eZ\\Bundle\\EzPublishLegacySearchEngineBundle\\EzPublishLegacySearchEngineBundle',
                'EzPublishIOBundle' => 'eZ\\Bundle\\EzPublishIOBundle\\EzPublishIOBundle',
                'EzPublishRestBundle' => 'eZ\\Bundle\\EzPublishRestBundle\\EzPublishRestBundle',
                'eZPlatformUIAssetsBundle' => 'EzSystems\\PlatformUIAssetsBundle\\EzSystemsPlatformUIAssetsBundle',
                'eZPlatformUIBundle' => 'EzSystems\\PlatformUIBundle\\EzSystemsPlatformUIBundle',
                'NelmioCorsBundle' => 'Nelmio\\CorsBundle\\NelmioCorsBundle',
                'WhiteOctoberPagerfantaBundle' => 'WhiteOctober\\PagerfantaBundle\\WhiteOctoberPagerfantaBundle',
                'OneupFlysystemBundle' => 'Oneup\\FlysystemBundle\\OneupFlysystemBundle',
                'EzSystemsPlatformInstallerBundle' => 'EzSystems\\PlatformInstallerBundle\\EzSystemsPlatformInstallerBundle',
                'EzSystemsRepositoryFormsBundle' => 'EzSystems\\RepositoryFormsBundle\\EzSystemsRepositoryFormsBundle',
                'EzSystemsEzPlatformSolrSearchEngineBundle' => 'EzSystems\\EzPlatformSolrSearchEngineBundle\\EzSystemsEzPlatformSolrSearchEngineBundle',
                'AppBundle' => 'AppBundle\\AppBundle',
                'EzPublishDebugBundle' => 'eZ\\Bundle\\EzPublishDebugBundle\\EzPublishDebugBundle',
                'DebugBundle' => 'Symfony\\Bundle\\DebugBundle\\DebugBundle',
                'WebProfilerBundle' => 'Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle',
                'SensioDistributionBundle' => 'Sensio\\Bundle\\DistributionBundle\\SensioDistributionBundle',
                'SensioGeneratorBundle' => 'Sensio\\Bundle\\GeneratorBundle\\SensioGeneratorBundle',
                'EguliasListenersDebugCommandBundle' => 'Egulias\\ListenersDebugCommandBundle\\EguliasListenersDebugCommandBundle',
            ),
            'kernel.charset' => 'UTF-8',
            'kernel.container_class' => 'appDevDebugProjectContainer',
            'log_type' => 'stream',
            'log_path' => ($this->targetDirs[2].'/logs/dev.log'),
            'secret' => 'ThisTokenIsNotSoSecretChangeIt',
            'locale_fallback' => 'en',
            'mailer_transport' => 'smtp',
            'mailer_host' => '127.0.0.1',
            'mailer_user' => NULL,
            'mailer_password' => NULL,
            'database_driver' => 'pdo_mysql',
            'database_host' => 'dockerezpublish_mysql_1.mysql.docker',
            'database_port' => 3306,
            'database_name' => 'ezplatform',
            'database_user' => 'ezuser',
            'database_password' => 'ezpass',
            'search_engine' => 'legacy',
            'solr_dsn' => 'http://localhost:8983/solr',
            'ez_platformui.public_dir' => 'bundles/ezplatformui',
            'ez_platformui.external_assets_public_dir' => 'bundles/ezplatformuiassets',
            'controller_resolver.class' => 'Symfony\\Bundle\\FrameworkBundle\\Controller\\ControllerResolver',
            'controller_name_converter.class' => 'Symfony\\Bundle\\FrameworkBundle\\Controller\\ControllerNameParser',
            'response_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener',
            'streamed_response_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener',
            'locale_listener.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\LocaleListener',
            'event_dispatcher.class' => 'Symfony\\Component\\EventDispatcher\\ContainerAwareEventDispatcher',
            'http_kernel.class' => 'Symfony\\Component\\HttpKernel\\DependencyInjection\\ContainerAwareHttpKernel',
            'filesystem.class' => 'Symfony\\Component\\Filesystem\\Filesystem',
            'cache_warmer.class' => 'Symfony\\Component\\HttpKernel\\CacheWarmer\\CacheWarmerAggregate',
            'cache_clearer.class' => 'Symfony\\Component\\HttpKernel\\CacheClearer\\ChainCacheClearer',
            'file_locator.class' => 'Symfony\\Component\\HttpKernel\\Config\\FileLocator',
            'uri_signer.class' => 'Symfony\\Component\\HttpKernel\\UriSigner',
            'request_stack.class' => 'Symfony\\Component\\HttpFoundation\\RequestStack',
            'fragment.handler.class' => 'Symfony\\Component\\HttpKernel\\DependencyInjection\\LazyLoadingFragmentHandler',
            'fragment.renderer.inline.class' => 'Symfony\\Component\\HttpKernel\\Fragment\\InlineFragmentRenderer',
            'fragment.renderer.hinclude.class' => 'Symfony\\Component\\HttpKernel\\Fragment\\HIncludeFragmentRenderer',
            'fragment.renderer.hinclude.global_template' => NULL,
            'fragment.renderer.esi.class' => 'Symfony\\Component\\HttpKernel\\Fragment\\EsiFragmentRenderer',
            'fragment.path' => '/_fragment',
            'translator.class' => 'Symfony\\Bundle\\FrameworkBundle\\Translation\\Translator',
            'translator.identity.class' => 'Symfony\\Component\\Translation\\IdentityTranslator',
            'translator.selector.class' => 'Symfony\\Component\\Translation\\MessageSelector',
            'translation.loader.php.class' => 'Symfony\\Component\\Translation\\Loader\\PhpFileLoader',
            'translation.loader.yml.class' => 'Symfony\\Component\\Translation\\Loader\\YamlFileLoader',
            'translation.loader.xliff.class' => 'Symfony\\Component\\Translation\\Loader\\XliffFileLoader',
            'translation.loader.po.class' => 'Symfony\\Component\\Translation\\Loader\\PoFileLoader',
            'translation.loader.mo.class' => 'Symfony\\Component\\Translation\\Loader\\MoFileLoader',
            'translation.loader.qt.class' => 'Symfony\\Component\\Translation\\Loader\\QtFileLoader',
            'translation.loader.csv.class' => 'Symfony\\Component\\Translation\\Loader\\CsvFileLoader',
            'translation.loader.res.class' => 'Symfony\\Component\\Translation\\Loader\\IcuResFileLoader',
            'translation.loader.dat.class' => 'Symfony\\Component\\Translation\\Loader\\IcuDatFileLoader',
            'translation.loader.ini.class' => 'Symfony\\Component\\Translation\\Loader\\IniFileLoader',
            'translation.loader.json.class' => 'Symfony\\Component\\Translation\\Loader\\JsonFileLoader',
            'translation.dumper.php.class' => 'Symfony\\Component\\Translation\\Dumper\\PhpFileDumper',
            'translation.dumper.xliff.class' => 'Symfony\\Component\\Translation\\Dumper\\XliffFileDumper',
            'translation.dumper.po.class' => 'Symfony\\Component\\Translation\\Dumper\\PoFileDumper',
            'translation.dumper.mo.class' => 'Symfony\\Component\\Translation\\Dumper\\MoFileDumper',
            'translation.dumper.yml.class' => 'Symfony\\Component\\Translation\\Dumper\\YamlFileDumper',
            'translation.dumper.qt.class' => 'Symfony\\Component\\Translation\\Dumper\\QtFileDumper',
            'translation.dumper.csv.class' => 'Symfony\\Component\\Translation\\Dumper\\CsvFileDumper',
            'translation.dumper.ini.class' => 'Symfony\\Component\\Translation\\Dumper\\IniFileDumper',
            'translation.dumper.json.class' => 'Symfony\\Component\\Translation\\Dumper\\JsonFileDumper',
            'translation.dumper.res.class' => 'Symfony\\Component\\Translation\\Dumper\\IcuResFileDumper',
            'translation.extractor.php.class' => 'Symfony\\Bundle\\FrameworkBundle\\Translation\\PhpExtractor',
            'translation.loader.class' => 'Symfony\\Bundle\\FrameworkBundle\\Translation\\TranslationLoader',
            'translation.extractor.class' => 'Symfony\\Component\\Translation\\Extractor\\ChainExtractor',
            'translation.writer.class' => 'Symfony\\Component\\Translation\\Writer\\TranslationWriter',
            'property_accessor.class' => 'Symfony\\Component\\PropertyAccess\\PropertyAccessor',
            'kernel.secret' => 'ThisTokenIsNotSoSecretChangeIt',
            'kernel.http_method_override' => true,
            'kernel.trusted_hosts' => array(

            ),
            'kernel.trusted_proxies' => array(

            ),
            'kernel.default_locale' => 'en',
            'session.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Session',
            'session.flashbag.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Flash\\FlashBag',
            'session.attribute_bag.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag',
            'session.storage.metadata_bag.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\MetadataBag',
            'session.metadata.storage_key' => '_sf2_meta',
            'session.storage.native.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\NativeSessionStorage',
            'session.storage.php_bridge.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\PhpBridgeSessionStorage',
            'session.storage.mock_file.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\MockFileSessionStorage',
            'session.handler.native_file.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\NativeFileSessionHandler',
            'session.handler.write_check.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\WriteCheckSessionHandler',
            'session_listener.class' => 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\SessionListener',
            'session.storage.options' => array(
                'gc_probability' => 1,
            ),
            'session.save_path' => (__DIR__.'/sessions'),
            'session.metadata.update_threshold' => '0',
            'security.secure_random.class' => 'Symfony\\Component\\Security\\Core\\Util\\SecureRandom',
            'form.resolved_type_factory.class' => 'Symfony\\Component\\Form\\ResolvedFormTypeFactory',
            'form.registry.class' => 'Symfony\\Component\\Form\\FormRegistry',
            'form.factory.class' => 'Symfony\\Component\\Form\\FormFactory',
            'form.extension.class' => 'Symfony\\Component\\Form\\Extension\\DependencyInjection\\DependencyInjectionExtension',
            'form.type_guesser.validator.class' => 'Symfony\\Component\\Form\\Extension\\Validator\\ValidatorTypeGuesser',
            'form.type_extension.form.request_handler.class' => 'Symfony\\Component\\Form\\Extension\\HttpFoundation\\HttpFoundationRequestHandler',
            'form.type_extension.csrf.enabled' => true,
            'form.type_extension.csrf.field_name' => 'ezxform_token',
            'security.csrf.token_generator.class' => 'Symfony\\Component\\Security\\Csrf\\TokenGenerator\\UriSafeTokenGenerator',
            'security.csrf.token_storage.class' => 'Symfony\\Component\\Security\\Csrf\\TokenStorage\\SessionTokenStorage',
            'security.csrf.token_manager.class' => 'Symfony\\Component\\Security\\Csrf\\CsrfTokenManager',
            'templating.engine.delegating.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\DelegatingEngine',
            'templating.name_parser.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\TemplateNameParser',
            'templating.filename_parser.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\TemplateFilenameParser',
            'templating.cache_warmer.template_paths.class' => 'Symfony\\Bundle\\FrameworkBundle\\CacheWarmer\\TemplatePathsCacheWarmer',
            'templating.locator.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Loader\\TemplateLocator',
            'templating.loader.filesystem.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Loader\\FilesystemLoader',
            'templating.loader.cache.class' => 'Symfony\\Component\\Templating\\Loader\\CacheLoader',
            'templating.loader.chain.class' => 'Symfony\\Component\\Templating\\Loader\\ChainLoader',
            'templating.finder.class' => 'Symfony\\Bundle\\FrameworkBundle\\CacheWarmer\\TemplateFinder',
            'templating.helper.assets.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Helper\\AssetsHelper',
            'templating.helper.router.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Helper\\RouterHelper',
            'templating.helper.code.file_link_format' => NULL,
            'templating.loader.cache.path' => NULL,
            'templating.engines' => array(
                0 => 'twig',
            ),
            'validator.class' => 'Symfony\\Component\\Validator\\Validator\\ValidatorInterface',
            'validator.builder.class' => 'Symfony\\Component\\Validator\\ValidatorBuilderInterface',
            'validator.builder.factory.class' => 'Symfony\\Component\\Validator\\Validation',
            'validator.mapping.cache.apc.class' => 'Symfony\\Component\\Validator\\Mapping\\Cache\\ApcCache',
            'validator.mapping.cache.prefix' => '',
            'validator.validator_factory.class' => 'Symfony\\Bundle\\FrameworkBundle\\Validator\\ConstraintValidatorFactory',
            'validator.expression.class' => 'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator',
            'validator.email.class' => 'Symfony\\Component\\Validator\\Constraints\\EmailValidator',
            'validator.translation_domain' => 'validators',
            'validator.api' => '2.5-bc',
            'esi.class' => 'Symfony\\Component\\HttpKernel\\HttpCache\\Esi',
            'esi_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\SurrogateListener',
            'fragment.listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\FragmentListener',
            'translator.logging' => true,
            'profiler.class' => 'Symfony\\Component\\HttpKernel\\Profiler\\Profiler',
            'profiler_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener',
            'data_collector.config.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\ConfigDataCollector',
            'data_collector.request.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\RequestDataCollector',
            'data_collector.exception.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\ExceptionDataCollector',
            'data_collector.events.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\EventDataCollector',
            'data_collector.logger.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\LoggerDataCollector',
            'data_collector.time.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\TimeDataCollector',
            'data_collector.memory.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\MemoryDataCollector',
            'data_collector.router.class' => 'Symfony\\Bundle\\FrameworkBundle\\DataCollector\\RouterDataCollector',
            'form.resolved_type_factory.data_collector_proxy.class' => 'Symfony\\Component\\Form\\Extension\\DataCollector\\Proxy\\ResolvedTypeFactoryDataCollectorProxy',
            'form.type_extension.form.data_collector.class' => 'Symfony\\Component\\Form\\Extension\\DataCollector\\Type\\DataCollectorTypeExtension',
            'data_collector.form.class' => 'Symfony\\Component\\Form\\Extension\\DataCollector\\FormDataCollector',
            'data_collector.form.extractor.class' => 'Symfony\\Component\\Form\\Extension\\DataCollector\\FormDataExtractor',
            'profiler_listener.only_exceptions' => false,
            'profiler_listener.only_master_requests' => false,
            'profiler.storage.dsn' => ('file:'.__DIR__.'/profiler'),
            'profiler.storage.username' => '',
            'profiler.storage.password' => '',
            'profiler.storage.lifetime' => 86400,
            'router.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Routing\\DefaultRouter',
            'router.request_context.class' => 'Symfony\\Component\\Routing\\RequestContext',
            'routing.loader.class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\DelegatingLoader',
            'routing.resolver.class' => 'Symfony\\Component\\Config\\Loader\\LoaderResolver',
            'routing.loader.xml.class' => 'Symfony\\Component\\Routing\\Loader\\XmlFileLoader',
            'routing.loader.yml.class' => 'Symfony\\Component\\Routing\\Loader\\YamlFileLoader',
            'routing.loader.php.class' => 'Symfony\\Component\\Routing\\Loader\\PhpFileLoader',
            'router.options.generator_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator',
            'router.options.generator_base_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator',
            'router.options.generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper',
            'router.options.matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher',
            'router.options.matcher_base_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher',
            'router.options.matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper',
            'router.cache_warmer.class' => 'Symfony\\Bundle\\FrameworkBundle\\CacheWarmer\\RouterCacheWarmer',
            'router.options.matcher.cache_class' => 'appDevUrlMatcher',
            'router.options.generator.cache_class' => 'appDevUrlGenerator',
            'router_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener',
            'router.request_context.host' => 'localhost',
            'router.request_context.scheme' => 'http',
            'router.request_context.base_url' => '',
            'router.resource' => (__DIR__.'/assetic/routing.yml'),
            'router.cache_class_prefix' => 'appDev',
            'request_listener.http_port' => 80,
            'request_listener.https_port' => 443,
            'annotations.reader.class' => 'Doctrine\\Common\\Annotations\\AnnotationReader',
            'annotations.cached_reader.class' => 'Doctrine\\Common\\Annotations\\CachedReader',
            'annotations.file_cache_reader.class' => 'Doctrine\\Common\\Annotations\\FileCacheReader',
            'debug.debug_handlers_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener',
            'debug.stopwatch.class' => 'Symfony\\Component\\Stopwatch\\Stopwatch',
            'debug.error_handler.throw_at' => -1,
            'debug.event_dispatcher.class' => 'Symfony\\Component\\HttpKernel\\Debug\\TraceableEventDispatcher',
            'debug.container.dump' => (__DIR__.'/appDevDebugProjectContainer.xml'),
            'debug.controller_resolver.class' => 'Symfony\\Component\\HttpKernel\\Controller\\TraceableControllerResolver',
            'security.context.class' => 'Symfony\\Component\\Security\\Core\\SecurityContext',
            'security.user_checker.class' => 'Symfony\\Component\\Security\\Core\\User\\UserChecker',
            'security.encoder_factory.generic.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactory',
            'security.encoder.digest.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\MessageDigestPasswordEncoder',
            'security.encoder.plain.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\PlaintextPasswordEncoder',
            'security.encoder.pbkdf2.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\Pbkdf2PasswordEncoder',
            'security.encoder.bcrypt.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\BCryptPasswordEncoder',
            'security.user.provider.in_memory.class' => 'Symfony\\Component\\Security\\Core\\User\\InMemoryUserProvider',
            'security.user.provider.in_memory.user.class' => 'Symfony\\Component\\Security\\Core\\User\\User',
            'security.user.provider.chain.class' => 'Symfony\\Component\\Security\\Core\\User\\ChainUserProvider',
            'security.authentication.trust_resolver.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationTrustResolver',
            'security.authentication.trust_resolver.anonymous_class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken',
            'security.authentication.trust_resolver.rememberme_class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\RememberMeToken',
            'security.authentication.manager.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationProviderManager',
            'security.authentication.session_strategy.class' => 'Symfony\\Component\\Security\\Http\\Session\\SessionAuthenticationStrategy',
            'security.access.decision_manager.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\AccessDecisionManager',
            'security.access.simple_role_voter.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\Voter\\RoleVoter',
            'security.access.authenticated_voter.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\Voter\\AuthenticatedVoter',
            'security.access.role_hierarchy_voter.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\Voter\\RoleHierarchyVoter',
            'security.access.expression_voter.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\Voter\\ExpressionVoter',
            'security.firewall.class' => 'Symfony\\Component\\Security\\Http\\Firewall',
            'security.firewall.map.class' => 'Symfony\\Bundle\\SecurityBundle\\Security\\FirewallMap',
            'security.firewall.context.class' => 'Symfony\\Bundle\\SecurityBundle\\Security\\FirewallContext',
            'security.matcher.class' => 'Symfony\\Component\\HttpFoundation\\RequestMatcher',
            'security.expression_matcher.class' => 'Symfony\\Component\\HttpFoundation\\ExpressionRequestMatcher',
            'security.role_hierarchy.class' => 'Symfony\\Component\\Security\\Core\\Role\\RoleHierarchy',
            'security.http_utils.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Security\\HttpUtils',
            'security.validator.user_password.class' => 'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator',
            'security.expression_language.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\ExpressionLanguage',
            'security.authentication.retry_entry_point.class' => 'Symfony\\Component\\Security\\Http\\EntryPoint\\RetryAuthenticationEntryPoint',
            'security.channel_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\ChannelListener',
            'security.authentication.form_entry_point.class' => 'Symfony\\Component\\Security\\Http\\EntryPoint\\FormAuthenticationEntryPoint',
            'security.authentication.listener.form.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\UsernamePasswordFormAuthenticationListener',
            'security.authentication.listener.simple_form.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\SimpleFormAuthenticationListener',
            'security.authentication.listener.simple_preauth.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\SimplePreAuthenticationListener',
            'security.authentication.listener.basic.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\BasicAuthenticationListener',
            'security.authentication.basic_entry_point.class' => 'Symfony\\Component\\Security\\Http\\EntryPoint\\BasicAuthenticationEntryPoint',
            'security.authentication.listener.digest.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\DigestAuthenticationListener',
            'security.authentication.digest_entry_point.class' => 'Symfony\\Component\\Security\\Http\\EntryPoint\\DigestAuthenticationEntryPoint',
            'security.authentication.listener.x509.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\X509AuthenticationListener',
            'security.authentication.listener.anonymous.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\AnonymousAuthenticationListener',
            'security.authentication.switchuser_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\SwitchUserListener',
            'security.logout_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\LogoutListener',
            'security.logout.handler.session.class' => 'Symfony\\Component\\Security\\Http\\Logout\\SessionLogoutHandler',
            'security.logout.handler.cookie_clearing.class' => 'Symfony\\Component\\Security\\Http\\Logout\\CookieClearingLogoutHandler',
            'security.logout.success_handler.class' => 'Symfony\\Component\\Security\\Http\\Logout\\DefaultLogoutSuccessHandler',
            'security.access_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\AccessListener',
            'security.access_map.class' => 'Symfony\\Component\\Security\\Http\\AccessMap',
            'security.exception_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\ExceptionListener',
            'security.context_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\ContextListener',
            'security.authentication.provider.dao.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Security\\Authentication\\RepositoryAuthenticationProvider',
            'security.authentication.provider.simple.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\SimpleAuthenticationProvider',
            'security.authentication.provider.pre_authenticated.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\PreAuthenticatedAuthenticationProvider',
            'security.authentication.provider.anonymous.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Security\\Authentication\\AnonymousAuthenticationProvider',
            'security.authentication.success_handler.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Security\\Authentication\\DefaultAuthenticationSuccessHandler',
            'security.authentication.failure_handler.class' => 'Symfony\\Component\\Security\\Http\\Authentication\\DefaultAuthenticationFailureHandler',
            'security.authentication.simple_success_failure_handler.class' => 'Symfony\\Component\\Security\\Http\\Authentication\\SimpleAuthenticationHandler',
            'security.authentication.provider.rememberme.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\RememberMeAuthenticationProvider',
            'security.authentication.listener.rememberme.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\RememberMeListener',
            'security.rememberme.token.provider.in_memory.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\RememberMe\\InMemoryTokenProvider',
            'security.authentication.rememberme.services.persistent.class' => 'Symfony\\Component\\Security\\Http\\RememberMe\\PersistentTokenBasedRememberMeServices',
            'security.authentication.rememberme.services.simplehash.class' => 'Symfony\\Component\\Security\\Http\\RememberMe\\TokenBasedRememberMeServices',
            'security.rememberme.response_listener.class' => 'Symfony\\Component\\Security\\Http\\RememberMe\\ResponseListener',
            'templating.helper.logout_url.class' => 'Symfony\\Bundle\\SecurityBundle\\Templating\\Helper\\LogoutUrlHelper',
            'templating.helper.security.class' => 'Symfony\\Bundle\\SecurityBundle\\Templating\\Helper\\SecurityHelper',
            'twig.extension.logout_url.class' => 'Symfony\\Bridge\\Twig\\Extension\\LogoutUrlExtension',
            'twig.extension.security.class' => 'Symfony\\Bridge\\Twig\\Extension\\SecurityExtension',
            'data_collector.security.class' => 'Symfony\\Bundle\\SecurityBundle\\DataCollector\\SecurityDataCollector',
            'security.access.denied_url' => NULL,
            'security.authentication.manager.erase_credentials' => true,
            'security.authentication.session_strategy.strategy' => 'migrate',
            'security.access.always_authenticate_before_granting' => false,
            'security.authentication.hide_user_not_found' => true,
            'security.role_hierarchy.roles' => array(

            ),
            'twig.class' => 'Twig_Environment',
            'twig.loader.filesystem.class' => 'Symfony\\Bundle\\TwigBundle\\Loader\\FilesystemLoader',
            'twig.loader.chain.class' => 'Twig_Loader_Chain',
            'templating.engine.twig.class' => 'Symfony\\Bundle\\TwigBundle\\TwigEngine',
            'twig.cache_warmer.class' => 'Symfony\\Bundle\\TwigBundle\\CacheWarmer\\TemplateCacheCacheWarmer',
            'twig.extension.trans.class' => 'Symfony\\Bridge\\Twig\\Extension\\TranslationExtension',
            'twig.extension.actions.class' => 'Symfony\\Bundle\\TwigBundle\\Extension\\ActionsExtension',
            'twig.extension.code.class' => 'Symfony\\Bridge\\Twig\\Extension\\CodeExtension',
            'twig.extension.routing.class' => 'Symfony\\Bridge\\Twig\\Extension\\RoutingExtension',
            'twig.extension.yaml.class' => 'Symfony\\Bridge\\Twig\\Extension\\YamlExtension',
            'twig.extension.form.class' => 'Symfony\\Bridge\\Twig\\Extension\\FormExtension',
            'twig.extension.httpkernel.class' => 'Symfony\\Bridge\\Twig\\Extension\\HttpKernelExtension',
            'twig.extension.debug.stopwatch.class' => 'Symfony\\Bridge\\Twig\\Extension\\StopwatchExtension',
            'twig.extension.expression.class' => 'Symfony\\Bridge\\Twig\\Extension\\ExpressionExtension',
            'twig.form.engine.class' => 'Symfony\\Bridge\\Twig\\Form\\TwigRendererEngine',
            'twig.form.renderer.class' => 'Symfony\\Bridge\\Twig\\Form\\TwigRenderer',
            'twig.translation.extractor.class' => 'Symfony\\Bridge\\Twig\\Translation\\TwigExtractor',
            'twig.exception_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener',
            'twig.controller.exception.class' => 'Symfony\\Bundle\\TwigBundle\\Controller\\ExceptionController',
            'twig.controller.preview_error.class' => 'Symfony\\Bundle\\TwigBundle\\Controller\\PreviewErrorController',
            'twig.exception_listener.controller' => 'twig.controller.exception:showAction',
            'twig.form.resources' => array(
                0 => 'form_div_layout.html.twig',
                1 => 'LiipImagineBundle:Form:form_div_layout.html.twig',
            ),
            'monolog.logger.class' => 'Symfony\\Bridge\\Monolog\\Logger',
            'monolog.gelf.publisher.class' => 'Gelf\\MessagePublisher',
            'monolog.gelfphp.publisher.class' => 'Gelf\\Publisher',
            'monolog.handler.stream.class' => 'Monolog\\Handler\\StreamHandler',
            'monolog.handler.console.class' => 'Symfony\\Bridge\\Monolog\\Handler\\ConsoleHandler',
            'monolog.handler.group.class' => 'Monolog\\Handler\\GroupHandler',
            'monolog.handler.buffer.class' => 'Monolog\\Handler\\BufferHandler',
            'monolog.handler.rotating_file.class' => 'Monolog\\Handler\\RotatingFileHandler',
            'monolog.handler.syslog.class' => 'Monolog\\Handler\\SyslogHandler',
            'monolog.handler.syslogudp.class' => 'Monolog\\Handler\\SyslogUdpHandler',
            'monolog.handler.null.class' => 'Monolog\\Handler\\NullHandler',
            'monolog.handler.test.class' => 'Monolog\\Handler\\TestHandler',
            'monolog.handler.gelf.class' => 'Monolog\\Handler\\GelfHandler',
            'monolog.handler.rollbar.class' => 'Monolog\\Handler\\RollbarHandler',
            'monolog.handler.flowdock.class' => 'Monolog\\Handler\\FlowdockHandler',
            'monolog.handler.browser_console.class' => 'Monolog\\Handler\\BrowserConsoleHandler',
            'monolog.handler.firephp.class' => 'Symfony\\Bridge\\Monolog\\Handler\\FirePHPHandler',
            'monolog.handler.chromephp.class' => 'Symfony\\Bridge\\Monolog\\Handler\\ChromePhpHandler',
            'monolog.handler.debug.class' => 'Symfony\\Bridge\\Monolog\\Handler\\DebugHandler',
            'monolog.handler.swift_mailer.class' => 'Symfony\\Bridge\\Monolog\\Handler\\SwiftMailerHandler',
            'monolog.handler.native_mailer.class' => 'Monolog\\Handler\\NativeMailerHandler',
            'monolog.handler.socket.class' => 'Monolog\\Handler\\SocketHandler',
            'monolog.handler.pushover.class' => 'Monolog\\Handler\\PushoverHandler',
            'monolog.handler.raven.class' => 'Monolog\\Handler\\RavenHandler',
            'monolog.handler.newrelic.class' => 'Monolog\\Handler\\NewRelicHandler',
            'monolog.handler.hipchat.class' => 'Monolog\\Handler\\HipChatHandler',
            'monolog.handler.slack.class' => 'Monolog\\Handler\\SlackHandler',
            'monolog.handler.cube.class' => 'Monolog\\Handler\\CubeHandler',
            'monolog.handler.amqp.class' => 'Monolog\\Handler\\AmqpHandler',
            'monolog.handler.error_log.class' => 'Monolog\\Handler\\ErrorLogHandler',
            'monolog.handler.loggly.class' => 'Monolog\\Handler\\LogglyHandler',
            'monolog.handler.logentries.class' => 'Monolog\\Handler\\LogEntriesHandler',
            'monolog.handler.whatfailuregroup.class' => 'Monolog\\Handler\\WhatFailureGroupHandler',
            'monolog.activation_strategy.not_found.class' => 'Symfony\\Bundle\\MonologBundle\\NotFoundActivationStrategy',
            'monolog.handler.fingers_crossed.class' => 'Monolog\\Handler\\FingersCrossedHandler',
            'monolog.handler.fingers_crossed.error_level_activation_strategy.class' => 'Monolog\\Handler\\FingersCrossed\\ErrorLevelActivationStrategy',
            'monolog.handler.filter.class' => 'Monolog\\Handler\\FilterHandler',
            'monolog.handler.mongo.class' => 'Monolog\\Handler\\MongoDBHandler',
            'monolog.mongo.client.class' => 'MongoClient',
            'monolog.handler.elasticsearch.class' => 'Monolog\\Handler\\ElasticSearchHandler',
            'monolog.elastica.client.class' => 'Elastica\\Client',
            'monolog.swift_mailer.handlers' => array(

            ),
            'monolog.handlers_to_channels' => array(
                'monolog.handler.console_very_verbose' => array(
                    'type' => 'inclusive',
                    'elements' => array(
                        0 => 'doctrine',
                    ),
                ),
                'monolog.handler.console' => array(
                    'type' => 'exclusive',
                    'elements' => array(
                        0 => 'doctrine',
                    ),
                ),
                'monolog.handler.main' => NULL,
            ),
            'swiftmailer.class' => 'Swift_Mailer',
            'swiftmailer.transport.sendmail.class' => 'Swift_Transport_SendmailTransport',
            'swiftmailer.transport.mail.class' => 'Swift_Transport_MailTransport',
            'swiftmailer.transport.failover.class' => 'Swift_Transport_FailoverTransport',
            'swiftmailer.plugin.redirecting.class' => 'Swift_Plugins_RedirectingPlugin',
            'swiftmailer.plugin.impersonate.class' => 'Swift_Plugins_ImpersonatePlugin',
            'swiftmailer.plugin.messagelogger.class' => 'Swift_Plugins_MessageLogger',
            'swiftmailer.plugin.antiflood.class' => 'Swift_Plugins_AntiFloodPlugin',
            'swiftmailer.transport.smtp.class' => 'Swift_Transport_EsmtpTransport',
            'swiftmailer.plugin.blackhole.class' => 'Swift_Plugins_BlackholePlugin',
            'swiftmailer.spool.file.class' => 'Swift_FileSpool',
            'swiftmailer.spool.memory.class' => 'Swift_MemorySpool',
            'swiftmailer.email_sender.listener.class' => 'Symfony\\Bundle\\SwiftmailerBundle\\EventListener\\EmailSenderListener',
            'swiftmailer.data_collector.class' => 'Symfony\\Bundle\\SwiftmailerBundle\\DataCollector\\MessageDataCollector',
            'swiftmailer.mailer.default.transport.name' => 'smtp',
            'swiftmailer.mailer.default.delivery.enabled' => true,
            'swiftmailer.mailer.default.transport.smtp.encryption' => NULL,
            'swiftmailer.mailer.default.transport.smtp.port' => 25,
            'swiftmailer.mailer.default.transport.smtp.host' => '127.0.0.1',
            'swiftmailer.mailer.default.transport.smtp.username' => NULL,
            'swiftmailer.mailer.default.transport.smtp.password' => NULL,
            'swiftmailer.mailer.default.transport.smtp.auth_mode' => NULL,
            'swiftmailer.mailer.default.transport.smtp.timeout' => 30,
            'swiftmailer.mailer.default.transport.smtp.source_ip' => NULL,
            'swiftmailer.spool.default.memory.path' => (__DIR__.'/swiftmailer/spool/default'),
            'swiftmailer.mailer.default.spool.enabled' => true,
            'swiftmailer.mailer.default.plugin.impersonate' => NULL,
            'swiftmailer.mailer.default.single_address' => NULL,
            'swiftmailer.spool.enabled' => true,
            'swiftmailer.delivery.enabled' => true,
            'swiftmailer.single_address' => NULL,
            'swiftmailer.mailers' => array(
                'default' => 'swiftmailer.mailer.default',
            ),
            'swiftmailer.default_mailer' => 'default',
            'assetic.asset_factory.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Assetic\\AssetFactory',
            'assetic.asset_manager.class' => 'Assetic\\Factory\\LazyAssetManager',
            'assetic.asset_manager_cache_warmer.class' => 'Symfony\\Bundle\\AsseticBundle\\CacheWarmer\\AssetManagerCacheWarmer',
            'assetic.cached_formula_loader.class' => 'Assetic\\Factory\\Loader\\CachedFormulaLoader',
            'assetic.config_cache.class' => 'Assetic\\Cache\\ConfigCache',
            'assetic.config_loader.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Loader\\ConfigurationLoader',
            'assetic.config_resource.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\ConfigurationResource',
            'assetic.coalescing_directory_resource.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\CoalescingDirectoryResource',
            'assetic.directory_resource.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\DirectoryResource',
            'assetic.filter_manager.class' => 'Symfony\\Bundle\\AsseticBundle\\FilterManager',
            'assetic.worker.ensure_filter.class' => 'Assetic\\Factory\\Worker\\EnsureFilterWorker',
            'assetic.worker.cache_busting.class' => 'Assetic\\Factory\\Worker\\CacheBustingWorker',
            'assetic.value_supplier.class' => 'Symfony\\Bundle\\AsseticBundle\\DefaultValueSupplier',
            'assetic.node.paths' => array(

            ),
            'assetic.cache_dir' => (__DIR__.'/assetic'),
            'assetic.bundles' => array(
                0 => 'eZPlatformUIBundle',
            ),
            'assetic.twig_extension.class' => 'Symfony\\Bundle\\AsseticBundle\\Twig\\AsseticExtension',
            'assetic.twig_formula_loader.class' => 'Assetic\\Extension\\Twig\\TwigFormulaLoader',
            'assetic.helper.dynamic.class' => 'Symfony\\Bundle\\AsseticBundle\\Templating\\DynamicAsseticHelper',
            'assetic.helper.static.class' => 'Symfony\\Bundle\\AsseticBundle\\Templating\\StaticAsseticHelper',
            'assetic.php_formula_loader.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Loader\\AsseticHelperFormulaLoader',
            'assetic.debug' => true,
            'assetic.use_controller' => true,
            'assetic.enable_profiler' => false,
            'assetic.read_from' => ($this->targetDirs[2].'/../web'),
            'assetic.write_to' => ($this->targetDirs[2].'/../web'),
            'assetic.variables' => array(

            ),
            'assetic.java.bin' => '/usr/bin/java',
            'assetic.node.bin' => '/usr/bin/node',
            'assetic.ruby.bin' => '/usr/bin/ruby',
            'assetic.sass.bin' => '/usr/bin/sass',
            'assetic.reactjsx.bin' => '/usr/bin/jsx',
            'assetic.filter.cssrewrite.class' => 'Assetic\\Filter\\CssRewriteFilter',
            'assetic.twig_extension.functions' => array(

            ),
            'assetic.controller.class' => 'Symfony\\Bundle\\AsseticBundle\\Controller\\AsseticController',
            'assetic.routing_loader.class' => 'Symfony\\Bundle\\AsseticBundle\\Routing\\AsseticLoader',
            'assetic.cache.class' => 'Assetic\\Cache\\FilesystemCache',
            'assetic.use_controller_worker.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Worker\\UseControllerWorker',
            'assetic.request_listener.class' => 'Symfony\\Bundle\\AsseticBundle\\EventListener\\RequestListener',
            'doctrine_cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine_cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine_cache.chain.class' => 'Doctrine\\Common\\Cache\\ChainCache',
            'doctrine_cache.couchbase.class' => 'Doctrine\\Common\\Cache\\CouchbaseCache',
            'doctrine_cache.couchbase.connection.class' => 'Couchbase',
            'doctrine_cache.couchbase.hostnames' => 'localhost:8091',
            'doctrine_cache.file_system.class' => 'Doctrine\\Common\\Cache\\FilesystemCache',
            'doctrine_cache.php_file.class' => 'Doctrine\\Common\\Cache\\PhpFileCache',
            'doctrine_cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine_cache.memcache.connection.class' => 'Memcache',
            'doctrine_cache.memcache.host' => 'localhost',
            'doctrine_cache.memcache.port' => 11211,
            'doctrine_cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine_cache.memcached.connection.class' => 'Memcached',
            'doctrine_cache.memcached.host' => 'localhost',
            'doctrine_cache.memcached.port' => 11211,
            'doctrine_cache.mongodb.class' => 'Doctrine\\Common\\Cache\\MongoDBCache',
            'doctrine_cache.mongodb.collection.class' => 'MongoCollection',
            'doctrine_cache.mongodb.connection.class' => 'MongoClient',
            'doctrine_cache.mongodb.server' => 'localhost:27017',
            'doctrine_cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine_cache.redis.connection.class' => 'Redis',
            'doctrine_cache.redis.host' => 'localhost',
            'doctrine_cache.redis.port' => 6379,
            'doctrine_cache.riak.class' => 'Doctrine\\Common\\Cache\\RiakCache',
            'doctrine_cache.riak.bucket.class' => 'Riak\\Bucket',
            'doctrine_cache.riak.connection.class' => 'Riak\\Connection',
            'doctrine_cache.riak.bucket_property_list.class' => 'Riak\\BucketPropertyList',
            'doctrine_cache.riak.host' => 'localhost',
            'doctrine_cache.riak.port' => 8087,
            'doctrine_cache.sqlite3.class' => 'Doctrine\\Common\\Cache\\SQLite3Cache',
            'doctrine_cache.sqlite3.connection.class' => 'SQLite3',
            'doctrine_cache.void.class' => 'Doctrine\\Common\\Cache\\VoidCache',
            'doctrine_cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine_cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine_cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine_cache.security.acl.cache.class' => 'Doctrine\\Bundle\\DoctrineCacheBundle\\Acl\\Model\\AclCache',
            'doctrine.dbal.logger.chain.class' => 'Doctrine\\DBAL\\Logging\\LoggerChain',
            'doctrine.dbal.logger.profiling.class' => 'Doctrine\\DBAL\\Logging\\DebugStack',
            'doctrine.dbal.logger.class' => 'Symfony\\Bridge\\Doctrine\\Logger\\DbalLogger',
            'doctrine.dbal.configuration.class' => 'Doctrine\\DBAL\\Configuration',
            'doctrine.data_collector.class' => 'Doctrine\\Bundle\\DoctrineBundle\\DataCollector\\DoctrineDataCollector',
            'doctrine.dbal.connection.event_manager.class' => 'Symfony\\Bridge\\Doctrine\\ContainerAwareEventManager',
            'doctrine.dbal.connection_factory.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ConnectionFactory',
            'doctrine.dbal.events.mysql_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\MysqlSessionInit',
            'doctrine.dbal.events.oracle_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\OracleSessionInit',
            'doctrine.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Registry',
            'doctrine.entity_managers' => array(

            ),
            'doctrine.default_entity_manager' => '',
            'doctrine.dbal.connection_factory.types' => array(

            ),
            'doctrine.connections' => array(
                'default' => 'doctrine.dbal.default_connection',
            ),
            'doctrine.default_connection' => 'default',
            'sensio_framework_extra.view.guesser.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Templating\\TemplateGuesser',
            'sensio_framework_extra.controller.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener',
            'sensio_framework_extra.routing.loader.annot_dir.class' => 'Symfony\\Component\\Routing\\Loader\\AnnotationDirectoryLoader',
            'sensio_framework_extra.routing.loader.annot_file.class' => 'Symfony\\Component\\Routing\\Loader\\AnnotationFileLoader',
            'sensio_framework_extra.routing.loader.annot_class.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Routing\\AnnotatedRouteControllerLoader',
            'sensio_framework_extra.converter.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener',
            'sensio_framework_extra.converter.manager.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\ParamConverterManager',
            'sensio_framework_extra.converter.doctrine.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\DoctrineParamConverter',
            'sensio_framework_extra.converter.datetime.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\DateTimeParamConverter',
            'sensio_framework_extra.view.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener',
            'stash.cache.class' => 'Tedivm\\StashBundle\\Service\\CacheService',
            'stash.tracker.class' => 'Tedivm\\StashBundle\\Service\\CacheTracker',
            'stash.driver.class' => 'Stash\\Interfaces\\DriverInterface',
            'stash.factory.class' => 'Tedivm\\StashBundle\\Factory\\DriverFactory',
            'stash.adapter.doctrine.class' => 'Tedivm\\StashBundle\\Adapters\\DoctrineAdapter',
            'stash.adapter.session.class' => 'Tedivm\\StashBundle\\Adapters\\SessionHandlerAdapter',
            'stash.data_collector.class' => 'Tedivm\\StashBundle\\Collector\\CacheDataCollector',
            'stash.tracker' => true,
            'stash.tracking_values' => false,
            'stash.caches' => array(
                'default' => 'stash.default_cache',
            ),
            'stash.caches.options' => array(
                'default' => array(
                    'drivers' => array(
                        0 => 'FileSystem',
                    ),
                    'inMemory' => true,
                    'registerDoctrineAdapter' => false,
                    'registerSessionHandler' => false,
                    'BlackHole' => array(

                    ),
                    'Ephemeral' => array(

                    ),
                    'FileSystem' => array(
                        'dirSplit' => 2,
                        'path' => (__DIR__.'/stash'),
                        'filePermissions' => 432,
                        'dirPermissions' => 504,
                        'memKeyLimit' => 200,
                        'keyHashFunction' => 'md5',
                        'encoder' => 'Native',
                    ),
                    'SQLite' => array(
                        'filePermissions' => 432,
                        'dirPermissions' => 504,
                        'busyTimeout' => 500,
                        'nesting' => 0,
                        'subhandler' => 'PDO',
                        'version' => NULL,
                        'path' => (__DIR__.'/stash'),
                    ),
                ),
            ),
            'stash.default_cache' => 'default',
            'hautelook.router.template.generator.class' => 'Hautelook\\TemplatedUriRouter\\Routing\\Generator\\Rfc6570Generator',
            'liip_imagine.filter.configuration.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\Filter\\FilterConfiguration',
            'liip_imagine.filter.manager.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\FilterManager',
            'liip_imagine.data.manager.class' => 'Liip\\ImagineBundle\\Imagine\\Data\\DataManager',
            'liip_imagine.cache.manager.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\CacheManager',
            'liip_imagine.cache.signer.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Signer',
            'liip_imagine.binary.mime_type_guesser.class' => 'Liip\\ImagineBundle\\Binary\\SimpleMimeTypeGuesser',
            'liip_imagine.controller.class' => 'Liip\\ImagineBundle\\Controller\\ImagineController',
            'liip_imagine.twig.extension.class' => 'Liip\\ImagineBundle\\Templating\\ImagineExtension',
            'liip_imagine.templating.helper.class' => 'Liip\\ImagineBundle\\Templating\\Helper\\ImagineHelper',
            'liip_imagine.gd.class' => 'Imagine\\Gd\\Imagine',
            'liip_imagine.imagick.class' => 'Imagine\\Imagick\\Imagine',
            'liip_imagine.gmagick.class' => 'Imagine\\Gmagick\\Imagine',
            'liip_imagine.filter.loader.relative_resize.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\RelativeResizeFilterLoader',
            'liip_imagine.filter.loader.resize.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\ResizeFilterLoader',
            'liip_imagine.filter.loader.thumbnail.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\ThumbnailFilterLoader',
            'liip_imagine.filter.loader.crop.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\CropFilterLoader',
            'liip_imagine.filter.loader.paste.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\PasteFilterLoader',
            'liip_imagine.filter.loader.watermark.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\WatermarkFilterLoader',
            'liip_imagine.filter.loader.strip.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\StripFilterLoader',
            'liip_imagine.filter.loader.background.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\BackgroundFilterLoader',
            'liip_imagine.filter.loader.upscale.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\UpscaleFilterLoader',
            'liip_imagine.filter.loader.auto_rotate.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\AutoRotateFilterLoader',
            'liip_imagine.filter.loader.rotate.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\RotateFilterLoader',
            'liip_imagine.filter.loader.interlace.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\InterlaceFilterLoader',
            'liip_imagine.binary.loader.filesystem.class' => 'Liip\\ImagineBundle\\Binary\\Loader\\FileSystemLoader',
            'liip_imagine.binary.loader.stream.class' => 'Liip\\ImagineBundle\\Binary\\Loader\\StreamLoader',
            'liip_imagine.cache.resolver.web_path.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Resolver\\WebPathResolver',
            'liip_imagine.cache.resolver.no_cache_web_path.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Resolver\\NoCacheWebPathResolver',
            'liip_imagine.cache.resolver.aws_s3.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Resolver\\AwsS3Resolver',
            'liip_imagine.cache.resolver.cache.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Resolver\\CacheResolver',
            'liip_imagine.cache.resolver.proxy.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Resolver\\ProxyResolver',
            'liip_imagine.form.type.image.class' => 'Liip\\ImagineBundle\\Form\\Type\\ImageType',
            'liip_imagine.meta_data.reader.class' => 'Imagine\\Image\\Metadata\\ExifMetadataReader',
            'liip_imagine.filter.post_processor.jpegoptim.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\PostProcessor\\JpegOptimPostProcessor',
            'liip_imagine.jpegoptim.binary' => '/usr/bin/jpegoptim',
            'liip_imagine.cache.resolver.default' => 'default',
            'liip_imagine.default_image' => NULL,
            'liip_imagine.filter_sets' => array(

            ),
            'liip_imagine.binary.loader.default' => 'default',
            'liip_imagine.controller.filter_action' => 'liip_imagine.controller:filterAction',
            'liip_imagine.controller.filter_runtime_action' => 'liip_imagine.controller:filterRuntimeAction',
            'fos_http_cache.request_matcher.class' => 'Symfony\\Component\\HttpFoundation\\RequestMatcher',
            'fos_http_cache.rule_matcher.class' => 'FOS\\HttpCacheBundle\\Http\\RuleMatcher',
            'fos_http_cache.debug_header' => 'X-Cache-Debug',
            'fos_http_cache.event_listener.cache_control.class' => 'FOS\\HttpCacheBundle\\EventListener\\CacheControlSubscriber',
            'fos_http_cache.proxy_client.varnish.class' => 'FOS\\HttpCache\\ProxyClient\\Varnish',
            'fos_http_cache.proxy_client.varnish.servers' => array(
                0 => '$http_cache.purge_servers$',
            ),
            'fos_http_cache.proxy_client.varnish.base_url' => NULL,
            'fos_http_cache.cache_manager.generate_url_type' => true,
            'fos_http_cache.cache_manager.class' => 'FOS\\HttpCacheBundle\\CacheManager',
            'fos_http_cache.event_listener.log.class' => 'FOS\\HttpCache\\EventListener\\LogSubscriber',
            'fos_http_cache.command.invalidate_path.class' => 'FOS\\HttpCacheBundle\\Command\\InvalidatePathCommand',
            'fos_http_cache.command.invalidate_regex.class' => 'FOS\\HttpCacheBundle\\Command\\InvalidateRegexCommand',
            'fos_http_cache.command.refresh_path.class' => 'FOS\\HttpCacheBundle\\Command\\RefreshPathCommand',
            'fos_http_cache.compiler_pass.tag_annotations' => true,
            'fos_http_cache.tag_handler.header' => 'X-Cache-Tags',
            'fos_http_cache.event_listener.tag.class' => 'FOS\\HttpCacheBundle\\EventListener\\TagSubscriber',
            'fos_http_cache.command.invalidate_tag.class' => 'FOS\\HttpCacheBundle\\Command\\InvalidateTagCommand',
            'fos_http_cache.event_listener.invalidation.class' => 'FOS\\HttpCacheBundle\\EventListener\\InvalidationSubscriber',
            'fos_http_cache.event_listener.user_context.class' => 'FOS\\HttpCacheBundle\\EventListener\\UserContextSubscriber',
            'fos_http_cache.user_context.hash_generator.class' => 'FOS\\HttpCache\\UserContext\\HashGenerator',
            'fos_http_cache.user_context.role_provider.class' => 'FOS\\HttpCacheBundle\\UserContext\\RoleProvider',
            'fos_http_cache.user_context.request_matcher.class' => 'FOS\\HttpCacheBundle\\UserContext\\RequestMatcher',
            'fos_http_cache.user_context.logout_handler.class' => 'FOS\\HttpCacheBundle\\Security\\Http\\Logout\\ContextInvalidationLogoutHandler',
            'ezpublish.siteaccess.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\SiteAccess',
            'ezpublish.siteaccess.default.name' => 'default',
            'ezpublish.config.resolver.dynamic.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\DependencyInjection\\Configuration\\ConfigResolver',
            'ezpublish.config.resolver.chain.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\DependencyInjection\\Configuration\\ChainConfigResolver',
            'ezpublish.config.default_scope' => 'ezsettings',
            'ezpublish.config.dynamic_setting.parser.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\DependencyInjection\\Configuration\\SiteAccessAware\\DynamicSettingParser',
            'ezpublish.config.complex_setting_value.resolver.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\DependencyInjection\\Configuration\\ComplexSettings\\ComplexSettingValueResolver',
            'ezpublish.console_event_listener.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\ConsoleCommandListener',
            'ezpublish.controller.base.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Controller\\Controller',
            'ezpublish.controller.content.view.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Controller\\Content\\ViewController',
            'ezpublish.controller.content.preview.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Controller\\Content\\PreviewController',
            'ezpublish.controller.content.download.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Controller\\Content\\DownloadController',
            'ezpublish.controller.content.download_redirection.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Controller\\Content\\DownloadRedirectionController',
            'ezpublish.controller.page.view.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Controller\\PageController',
            'ezpublish.param_converter.content.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Converter\\ContentParamConverter',
            'ezpublish.param_converter.content.priority' => -2,
            'ezpublish.param_converter.location.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Converter\\LocationParamConverter',
            'ezpublish.param_converter.location.priority' => -2,
            'ezpublish.decorated_fragment_renderer.inline.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Fragment\\InlineFragmentRenderer',
            'ezpublish.decorated_fragment_renderer.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Fragment\\DecoratedFragmentRenderer',
            'ezpublish.fragment_listener.factory.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Fragment\\FragmentListenerFactory',
            'ezpublish.view_controller_listener.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\ViewControllerListener',
            'ezpublish.exception_listener.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\ExceptionListener',
            'ezpublish.security.user_provider.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Security\\User\\Provider',
            'ezpublish.security.voter.core.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Security\\Authorization\\Voter\\CoreVoter',
            'ezpublish.security.voter.value_object.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Security\\Authorization\\Voter\\ValueObjectVoter',
            'ezpublish.security.controller.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Controller\\SecurityController',
            'ezpublish.security.login_listener.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Security\\EventListener\\SecurityListener',
            'ezpublish.user.identity.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Security\\User\\Identity',
            'ezpublish.user.hash_generator.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Security\\User\\HashGenerator',
            'ezpublish.user.identity_definer.role_id.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Security\\User\\ContextProvider\\RoleContextProvider',
            'ezpublish.http_cache.signalslot.http_cache.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\SignalSlot\\HttpCacheSlot',
            'ezpublish.http_cache.signalslot.assign_section.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\SignalSlot\\AssignSectionSlot',
            'ezpublish.http_cache.signalslot.copy_content.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\SignalSlot\\CopyContentSlot',
            'ezpublish.http_cache.signalslot.create_location.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\SignalSlot\\CreateLocationSlot',
            'ezpublish.http_cache.signalslot.delete_content.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\SignalSlot\\DeleteContentSlot',
            'ezpublish.http_cache.signalslot.delete_location.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\SignalSlot\\DeleteLocationSlot',
            'ezpublish.http_cache.signalslot.delete_version.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\SignalSlot\\DeleteVersionSlot',
            'ezpublish.http_cache.signalslot.hide_location.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\SignalSlot\\HideLocationSlot',
            'ezpublish.http_cache.signalslot.move_subtree.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\SignalSlot\\MoveSubtreeSlot',
            'ezpublish.http_cache.signalslot.publish_version.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\SignalSlot\\PublishVersionSlot',
            'ezpublish.http_cache.signalslot.set_content_state.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\SignalSlot\\SetContentStateSlot',
            'ezpublish.http_cache.signalslot.swap_location.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\SignalSlot\\SwapLocationSlot',
            'ezpublish.http_cache.signalslot.unhide_location.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\SignalSlot\\UnhideLocationSlot',
            'ezpublish.http_cache.signalslot.update_location.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\SignalSlot\\UpdateLocationSlot',
            'ezpublish.http_cache.signalslot.update_user.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\SignalSlot\\UpdateUserSlot',
            'ezpublish.http_cache.signalslot.assign_user_to_user_group.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\SignalSlot\\AssignUserToUserGroupSlot',
            'ezpublish.http_cache.signalslot.unassign_user_from_user_group.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\SignalSlot\\UnassignUserFromUserGroupSlot',
            'webroot_dir' => ($this->targetDirs[2].'/../web'),
            'ezsettings.default.location_view' => array(

            ),
            'ezsettings.default.content_view' => array(
                '_platformui_content_name' => array(
                    'content_name' => array(
                        'template' => 'EzSystemsRepositoryFormsBundle:content_name:content_name.html.twig',
                        'match' => array(

                        ),
                        'params' => array(

                        ),
                    ),
                ),
            ),
            'ezsettings.default.block_view' => array(

            ),
            'ezplatform.default_view_templates.content.full' => 'EzPublishCoreBundle:default:content/full.html.twig',
            'ezplatform.default_view_templates.content.line' => 'EzPublishCoreBundle:default:content/line.html.twig',
            'ezplatform.default_view_templates.content.embed' => 'EzPublishCoreBundle:default:content/embed.html.twig',
            'ezplatform.default_view_templates.block' => 'EzPublishCoreBundle:default:block/block.html.twig',
            'ezsettings.default.content_view_defaults' => array(
                'full' => array(
                    'default' => array(
                        'template' => 'EzPublishCoreBundle:default:content/full.html.twig',
                        'match' => array(

                        ),
                    ),
                ),
                'line' => array(
                    'default' => array(
                        'template' => 'EzPublishCoreBundle:default:content/line.html.twig',
                        'match' => array(

                        ),
                    ),
                ),
                'embed' => array(
                    'default' => array(
                        'template' => 'EzPublishCoreBundle:default:content/embed.html.twig',
                        'match' => array(

                        ),
                    ),
                ),
            ),
            'ezsettings.default.block_view_defaults' => array(
                'block' => array(
                    'default' => array(
                        'template' => 'EzPublishCoreBundle:default:block/block.html.twig',
                        'match' => array(

                        ),
                    ),
                ),
            ),
            'ezpublish.repositories' => array(
                'default' => array(
                    'storage' => array(
                        'engine' => 'legacy',
                        'connection' => NULL,
                        'config' => array(

                        ),
                    ),
                    'search' => array(
                        'engine' => 'legacy',
                        'connection' => 'default',
                        'config' => array(

                        ),
                    ),
                ),
            ),
            'ezsettings.default.repository' => NULL,
            'ezpublish.session_name.default' => 'eZSESSID{siteaccess_hash}',
            'ezsettings.default.session_name' => 'eZSESSID{siteaccess_hash}',
            'ezsettings.default.session' => array(
                'name' => 'eZSESSID{siteaccess_hash}',
            ),
            'ezsettings.default.url_alias_router' => true,
            'ezsettings.default.index_page' => NULL,
            'ezsettings.default.default_page' => NULL,
            'ezsettings.default.languages' => array(

            ),
            'ezsettings.default.translation_siteaccesses' => array(

            ),
            'ezsettings.default.related_siteaccesses' => array(

            ),
            'ezsettings.default.cache_pool_name' => 'default',
            'ezsettings.default.var_dir' => 'var',
            'ezsettings.default.storage_dir' => 'storage',
            'ezsettings.default.binary_dir' => 'original',
            'ezsettings.default.anonymous_user_id' => 10,
            'ezsettings.default.io.metadata_handler' => 'default',
            'ezsettings.default.io.binarydata_handler' => 'default',
            'ezsettings.default.io.url_prefix' => 'var/storage',
            'ezsettings.default.io.legacy_url_prefix' => 'var/storage',
            'ezsettings.default.io.root_dir' => ($this->targetDirs[2].'/../web/var/storage'),
            'ezsettings.default.content.view_cache' => true,
            'ezsettings.default.content.ttl_cache' => true,
            'ezsettings.default.content.default_ttl' => 60,
            'ezsettings.default.content.tree_root.location_id' => 2,
            'ezsettings.default.content.tree_root.excluded_uri_prefixes' => array(

            ),
            'ezsettings.default.fieldtypes.ezrichtext.output_custom_xsl' => array(
                0 => array(
                    'path' => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/FieldType/RichText/Resources/stylesheets/docbook/xhtml5/output/core.xsl'),
                    'priority' => 0,
                ),
            ),
            'ezsettings.default.fieldtypes.ezrichtext.edit_custom_xsl' => array(
                0 => array(
                    'path' => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/FieldType/RichText/Resources/stylesheets/docbook/xhtml5/edit/core.xsl'),
                    'priority' => 0,
                ),
            ),
            'ezsettings.default.fieldtypes.ezrichtext.input_custom_xsl' => array(

            ),
            'ezsettings.default.fieldtypes.ezrichtext.tags.default' => array(
                'template' => 'EzPublishCoreBundle:FieldType/RichText/tag:default.html.twig',
            ),
            'ezsettings.default.fieldtypes.ezrichtext.tags.default_inline' => array(
                'template' => 'EzPublishCoreBundle:FieldType/RichText/tag:default_inline.html.twig',
            ),
            'ezsettings.default.fieldtypes.ezrichtext.embed.content' => array(
                'template' => 'EzPublishCoreBundle:FieldType/RichText/embed:content.html.twig',
            ),
            'ezsettings.default.fieldtypes.ezrichtext.embed.content_denied' => array(
                'template' => 'EzPublishCoreBundle:FieldType/RichText/embed:content_denied.html.twig',
            ),
            'ezsettings.default.fieldtypes.ezrichtext.embed.content_inline' => array(
                'template' => 'EzPublishCoreBundle:FieldType/RichText/embed:content_inline.html.twig',
            ),
            'ezsettings.default.fieldtypes.ezrichtext.embed.content_inline_denied' => array(
                'template' => 'EzPublishCoreBundle:FieldType/RichText/embed:content_inline_denied.html.twig',
            ),
            'ezsettings.default.fieldtypes.ezrichtext.embed.location' => array(
                'template' => 'EzPublishCoreBundle:FieldType/RichText/embed:location.html.twig',
            ),
            'ezsettings.default.fieldtypes.ezrichtext.embed.location_denied' => array(
                'template' => 'EzPublishCoreBundle:FieldType/RichText/embed:location_denied.html.twig',
            ),
            'ezsettings.default.fieldtypes.ezrichtext.embed.location_inline' => array(
                'template' => 'EzPublishCoreBundle:FieldType/RichText/embed:location_inline.html.twig',
            ),
            'ezsettings.default.fieldtypes.ezrichtext.embed.location_inline_denied' => array(
                'template' => 'EzPublishCoreBundle:FieldType/RichText/embed:location_inline_denied.html.twig',
            ),
            'ezsettings.default.http_cache.purge_servers' => array(

            ),
            'ezsettings.default.treemenu.http_cache' => true,
            'ezsettings.default.treemenu.ttl_cache' => 86400,
            'ezsettings.default.field_templates' => array(
                0 => array(
                    'template' => 'EzPublishCoreBundle::content_fields.html.twig',
                    'priority' => 0,
                ),
            ),
            'ezsettings.default.field_edit_templates' => array(

            ),
            'ezsettings.default.fielddefinition_settings_templates' => array(
                0 => array(
                    'template' => 'EzPublishCoreBundle::fielddefinition_settings.html.twig',
                    'priority' => 0,
                ),
            ),
            'ezsettings.default.fielddefinition_edit_templates' => array(
                0 => array(
                    'template' => 'EzSystemsRepositoryFormsBundle:ContentType:field_types.html.twig',
                    'priority' => 0,
                ),
            ),
            'ezsettings.default.security.login_template' => 'EzPublishCoreBundle:Security:login.html.twig',
            'ezsettings.default.security.base_layout' => 'EzPublishCoreBundle::viewbase_layout.html.twig',
            'ezsettings.default.image.temporary_dir' => 'imagetmp',
            'ezsettings.default.image.published_images_dir' => 'images',
            'ezsettings.default.image.versioned_images_dir' => 'images-versioned',
            'ezsettings.default.image_variations' => array(
                'reference' => array(
                    'reference' => NULL,
                    'filters' => array(
                        'geometry/scaledownonly' => array(
                            0 => 600,
                            1 => 600,
                        ),
                    ),
                ),
                'small' => array(
                    'reference' => 'reference',
                    'filters' => array(
                        'geometry/scaledownonly' => array(
                            0 => 100,
                            1 => 100,
                        ),
                    ),
                ),
                'tiny' => array(
                    'reference' => 'reference',
                    'filters' => array(
                        'geometry/scaledownonly' => array(
                            0 => 30,
                            1 => 30,
                        ),
                    ),
                ),
                'medium' => array(
                    'reference' => 'reference',
                    'filters' => array(
                        'geometry/scaledownonly' => array(
                            0 => 200,
                            1 => 200,
                        ),
                    ),
                ),
                'large' => array(
                    'reference' => 'reference',
                    'filters' => array(
                        'geometry/scaledownonly' => array(
                            0 => 300,
                            1 => 300,
                        ),
                    ),
                ),
                'platformui_rawcontentview' => array(
                    'reference' => 'reference',
                    'filters' => array(
                        'geometry/scaleheightdownonly' => array(
                            0 => 250,
                        ),
                    ),
                    'post_processors' => array(

                    ),
                ),
                'platformui_editview' => array(
                    'reference' => 'reference',
                    'filters' => array(
                        'geometry/scalewidthdownonly' => array(
                            0 => 300,
                        ),
                    ),
                    'post_processors' => array(

                    ),
                ),
            ),
            'ezpublish.image.imagemagick.enabled' => false,
            'ezpublish.image.imagemagick.executable_path' => NULL,
            'ezpublish.image.imagemagick.executable' => 'convert',
            'ezsettings.default.imagemagick.pre_parameters' => NULL,
            'ezsettings.default.imagemagick.post_parameters' => NULL,
            'ezpublish.image.imagemagick.filters' => array(
                'geometry/scale' => '-geometry {1}x{2}',
                'geometry/scalewidth' => '-geometry {1}',
                'geometry/scaleheight' => '-geometry x{1}',
                'geometry/scaledownonly' => '-geometry {1}x{2}>',
                'geometry/scalewidthdownonly' => '-geometry {1}>',
                'geometry/scaleheightdownonly' => '-geometry x{1}>',
                'geometry/scaleexact' => '-geometry {1}x{2}!',
                'geometry/scalepercent' => '-geometry {1}x{2}%',
                'geometry/crop' => '-crop {1}x{2}+{3}+{4}',
                'filter/noise' => '-noise {1}',
                'filter/swirl' => '-swirl {1}',
                'colorspace/gray' => '-colorspace GRAY',
                'colorspace/transparent' => '-colorspace Transparent',
                'colorspace' => '-colorspace {1}',
                'border' => '-border {1}x{2}',
                'border/color' => '-bordercolor rgb({1},{2},{3})',
                'border/width' => '-borderwidth {1}',
                'flatten' => '-flatten',
                'resize' => '-resize {1}',
                'optimize' => '-strip',
            ),
            'ezpublish.ezpage.enabledlayouts' => array(

            ),
            'ezpublish.ezpage.enabledblocks' => array(

            ),
            'ezpublish.ezpage.layouts' => array(
                'GlobalZoneLayout' => array(
                    'name' => 'Global zone layout',
                    'template' => 'globalzonelayout.tpl',
                ),
                '2ZonesLayout1' => array(
                    'name' => '2 zones (layout 1)',
                    'template' => '2zoneslayout1.tpl',
                ),
                '2ZonesLayout2' => array(
                    'name' => '2 zones (layout 2)',
                    'template' => '2zoneslayout2.tpl',
                ),
                '2ZonesLayout3' => array(
                    'name' => '2 zones (layout 3)',
                    'template' => '2zoneslayout3.tpl',
                ),
                '3ZonesLayout1' => array(
                    'name' => '3 zones (layout 1)',
                    'template' => '3zoneslayout1.tpl',
                ),
                '3ZonesLayout2' => array(
                    'name' => '3 zones (layout 2)',
                    'template' => '3zoneslayout2.tpl',
                ),
                'CallForActionLayout' => array(
                    'name' => 'Call For Action zone layout',
                    'template' => 'callforactionlayout.tpl',
                ),
            ),
            'ezpublish.ezpage.blocks' => array(
                'DemoBlock' => array(
                    'name' => 'Demo Block',
                ),
                'Manual2Items' => array(
                    'name' => '2 items (Manual)',
                ),
                'Manual3Items' => array(
                    'name' => '3 items (Manual)',
                ),
                'Manual4Items' => array(
                    'name' => '4 items (Manual)',
                ),
                'Manual5Items' => array(
                    'name' => '5 items (Manual)',
                ),
                'Dynamic3Items' => array(
                    'name' => '3 items (Dynamic)',
                ),
                'Gallery' => array(
                    'name' => 'Gallery (Manual)',
                ),
                'Video' => array(
                    'name' => 'Video (Manual)',
                ),
                'ItemList' => array(
                    'name' => 'Item list',
                ),
                'MainStory' => array(
                    'name' => 'Main story (Manual)',
                ),
                'Banner' => array(
                    'name' => 'Banner',
                ),
                'TagCloud' => array(
                    'name' => 'Tag cloud',
                ),
                'Poll' => array(
                    'name' => 'Poll',
                ),
                'FlashRecorder' => array(
                    'name' => 'Flash Recorder',
                ),
                'FeedReader' => array(
                    'name' => 'Feed reader',
                ),
                'Keyword' => array(
                    'name' => 'Keyword',
                ),
                'GMap' => array(
                    'name' => 'Google Map',
                ),
                'OnlineUsers' => array(
                    'name' => 'Online Users',
                ),
                'MultimediaCarousel' => array(
                    'name' => 'Multimedia carousel',
                ),
                'Search' => array(
                    'name' => 'Search',
                ),
                'Ads' => array(
                    'name' => 'Advertisement',
                ),
                'LatestContent' => array(
                    'name' => 'Latest content',
                ),
                'TopRated' => array(
                    'name' => 'Top Rated',
                ),
                'GMapItems' => array(
                    'name' => 'Google Map Items',
                ),
            ),
            'ezpublish.siteaccess.list' => array(
                0 => 'site',
            ),
            'ezpublish.siteaccess.groups' => array(
                'site_group' => array(
                    0 => 'site',
                ),
            ),
            'ezpublish.siteaccess.groups_by_siteaccess' => array(
                'site' => array(
                    0 => 'site_group',
                ),
            ),
            'ezpublish.siteaccess.default' => 'site',
            'ezpublish.siteaccess.relation_map' => array(
                '' => array(
                    2 => array(
                        0 => 'site',
                    ),
                ),
            ),
            'ezpublish.siteaccesses_by_language' => array(

            ),
            'ezpublish.siteaccess.match_config' => array(
                'URIElement' => array(
                    'value' => 1,
                ),
            ),
            'ezpublish.default_router.non_siteaccess_aware_routes' => array(
                0 => '_assetic_',
                1 => '_wdt',
                2 => '_profiler',
                3 => '_configurator_',
            ),
            'ezpublish.urlalias_generator.charmap' => array(
                '"' => '%22',
                '\'' => '%27',
                '<' => '%3C',
                '>' => '%3E',
            ),
            'ezpublish.chain_router.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Routing\\ChainRouter',
            'ezpublish.url_generator.base.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Routing\\Generator',
            'ezpublish.urlalias_router.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Routing\\UrlAliasRouter',
            'ezpublish.urlalias_generator.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Routing\\Generator\\UrlAliasGenerator',
            'ezpublish.siteaccess.matcher_builder.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\SiteAccess\\MatcherBuilder',
            'ezpublish.siteaccess_router.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\SiteAccess\\Router',
            'ezpublish.siteaccess_listener.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\SiteAccessListener',
            'ezpublish.siteaccess_listener.routing.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\RoutingListener',
            'ezpublish.request_redirect_listener.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\RequestEventListener',
            'ezpublish.request_index_listener.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\IndexRequestListener',
            'ezpublish.siteaccess_match_listener.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\EventListener\\SiteAccessMatchListener',
            'ezpublish.route_reference.generator.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Routing\\Generator\\RouteReferenceGenerator',
            'ezpublish.route_reference.listener.language_switch.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\EventListener\\LanguageSwitchListener',
            'ezpublish.original_request_listener.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\OriginalRequestListener',
            'ezpublish.route_reference.listener.content_download.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\ContentDownloadRouteReferenceListener',
            'ezpublish.api.repository.factory.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\ApiLoader\\RepositoryFactory',
            'ezpublish.api.inner_repository.class' => 'eZ\\Publish\\Core\\Repository\\Repository',
            'ezpublish.field_type_collection.factory.class' => 'eZ\\Publish\\Core\\Base\\Container\\ApiLoader\\FieldTypeCollectionFactory',
            'ezpublish.api.storage_engine.class' => 'eZ\\Publish\\SPI\\Persistence\\Handler',
            'ezpublish.api.search_engine.class' => 'eZ\\Publish\\SPI\\Search\\Handler',
            'ezpublish.api.service.content.class' => 'eZ\\Publish\\Core\\Repository\\ContentService',
            'ezpublish.api.service.content_type.class' => 'eZ\\Publish\\Core\\Repository\\ContentTypeService',
            'ezpublish.api.service.field_type.class' => 'eZ\\Publish\\Core\\Repository\\FieldTypeService',
            'ezpublish.api.service.role.class' => 'eZ\\Publish\\Core\\Repository\\RoleService',
            'ezpublish.api.service.object_state.class' => 'eZ\\Publish\\Core\\Repository\\ObjectStateService',
            'ezpublish.api.service.url_wildcard.class' => 'eZ\\Publish\\Core\\Repository\\URLWildcardService',
            'ezpublish.api.service.url_alias.class' => 'eZ\\Publish\\Core\\Repository\\URLAliasService',
            'ezpublish.api.service.user.class' => 'eZ\\Publish\\Core\\Repository\\UserService',
            'ezpublish.api.service.search.class' => 'eZ\\Publish\\Core\\Repository\\SearchService',
            'ezpublish.api.service.section.class' => 'eZ\\Publish\\Core\\Repository\\SectionService',
            'ezpublish.api.service.trash.class' => 'eZ\\Publish\\Core\\Repository\\TrashService',
            'ezpublish.api.service.location.class' => 'eZ\\Publish\\Core\\Repository\\LocationService',
            'ezpublish.api.service.language.class' => 'eZ\\Publish\\Core\\Repository\\LanguageService',
            'ezpublish.signalslot.repository.class' => 'eZ\\Publish\\Core\\SignalSlot\\Repository',
            'ezpublish.signalslot.signal_dispatcher.class' => 'eZ\\Publish\\Core\\SignalSlot\\SignalDispatcher\\DefaultSignalDispatcher',
            'ezpublish.signalslot.signal_dispatcher_transaction_wrapper.class' => 'eZ\\Publish\\Core\\SignalSlot\\SignalDispatcher\\SignalDispatcherTransactionWrapper',
            'ezpublish.fieldtype.ezbinaryfile.externalstorage.class' => 'eZ\\Publish\\Core\\FieldType\\BinaryFile\\BinaryFileStorage',
            'ezpublish.fieldtype.ezimage.externalstorage.class' => 'eZ\\Publish\\Core\\FieldType\\Image\\ImageStorage',
            'ezpublish.fieldtype.ezkeyword.externalstorage.class' => 'eZ\\Publish\\Core\\FieldType\\Keyword\\KeywordStorage',
            'ezpublish.fieldtype.ezmedia.externalstorage.class' => 'eZ\\Publish\\Core\\FieldType\\Media\\MediaStorage',
            'ezpublish.fieldtype.ezurl.externalstorage.class' => 'eZ\\Publish\\Core\\FieldType\\Url\\UrlStorage',
            'ezpublish.fieldtype.ezgmaplocation.externalstorage.class' => 'eZ\\Publish\\Core\\FieldType\\MapLocation\\MapLocationStorage',
            'ezpublish.fieldtype.ezuser.externalstorage.class' => 'eZ\\Publish\\Core\\FieldType\\User\\UserStorage',
            'ezpublish.fieldtype.ezrichtext.externalstorage.class' => 'eZ\\Publish\\Core\\FieldType\\RichText\\RichTextStorage',
            'ezpublish.fieldtype.class' => 'eZ\\Publish\\Core\\FieldType\\FieldType',
            'ezpublish.fieldtype.ezauthor.class' => 'eZ\\Publish\\Core\\FieldType\\Author\\Type',
            'ezpublish.fieldtype.ezbinaryfile.class' => 'eZ\\Publish\\Core\\FieldType\\BinaryFile\\Type',
            'ezpublish.fieldtype.ezboolean.class' => 'eZ\\Publish\\Core\\FieldType\\Checkbox\\Type',
            'ezpublish.fieldtype.ezdatetime.class' => 'eZ\\Publish\\Core\\FieldType\\DateAndTime\\Type',
            'ezpublish.fieldtype.ezdate.class' => 'eZ\\Publish\\Core\\FieldType\\Date\\Type',
            'ezpublish.fieldtype.eztime.class' => 'eZ\\Publish\\Core\\FieldType\\Time\\Type',
            'ezpublish.fieldtype.ezemail.class' => 'eZ\\Publish\\Core\\FieldType\\EmailAddress\\Type',
            'ezpublish.fieldtype.ezfloat.class' => 'eZ\\Publish\\Core\\FieldType\\Float\\Type',
            'ezpublish.fieldtype.ezinteger.class' => 'eZ\\Publish\\Core\\FieldType\\Integer\\Type',
            'ezpublish.fieldtype.ezimage.class' => 'eZ\\Publish\\Core\\FieldType\\Image\\Type',
            'ezpublish.fieldtype.ezisbn.class' => 'eZ\\Publish\\Core\\FieldType\\ISBN\\Type',
            'ezpublish.fieldtype.ezkeyword.class' => 'eZ\\Publish\\Core\\FieldType\\Keyword\\Type',
            'ezpublish.fieldtype.ezmedia.class' => 'eZ\\Publish\\Core\\FieldType\\Media\\Type',
            'ezpublish.fieldtype.ezobjectrelation.class' => 'eZ\\Publish\\Core\\FieldType\\Relation\\Type',
            'ezpublish.fieldtype.ezsrrating.class' => 'eZ\\Publish\\Core\\FieldType\\Rating\\Type',
            'ezpublish.fieldtype.ezselection.class' => 'eZ\\Publish\\Core\\FieldType\\Selection\\Type',
            'ezpublish.fieldtype.eztext.class' => 'eZ\\Publish\\Core\\FieldType\\TextBlock\\Type',
            'ezpublish.fieldtype.ezstring.class' => 'eZ\\Publish\\Core\\FieldType\\TextLine\\Type',
            'ezpublish.fieldtype.ezurl.class' => 'eZ\\Publish\\Core\\FieldType\\Url\\Type',
            'ezpublish.fieldtype.ezpage.class' => 'eZ\\Publish\\Core\\FieldType\\Page\\Type',
            'ezpublish.fieldtype.ezgmaplocation.class' => 'eZ\\Publish\\Core\\FieldType\\MapLocation\\Type',
            'ezpublish.fieldtype.ezobjectrelationlist.class' => 'eZ\\Publish\\Core\\FieldType\\RelationList\\Type',
            'ezpublish.fieldtype.ezuser.class' => 'eZ\\Publish\\Core\\FieldType\\User\\Type',
            'ezpublish.fieldtype.ezcountry.class' => 'eZ\\Publish\\Core\\FieldType\\Country\\Type',
            'ezpublish.fieldtype.ezcountry.data' => array(
                'AF' => array(
                    'Name' => 'Afghanistan',
                    'Alpha2' => 'AF',
                    'Alpha3' => 'AFG',
                    'IDC' => '93',
                ),
                'AX' => array(
                    'Name' => 'Åland',
                    'Alpha2' => 'AX',
                    'Alpha3' => 'ALA',
                    'IDC' => '358',
                ),
                'AL' => array(
                    'Name' => 'Albania',
                    'Alpha2' => 'AL',
                    'Alpha3' => 'ALB',
                    'IDC' => '355',
                ),
                'DZ' => array(
                    'Name' => 'Algeria',
                    'Alpha2' => 'DZ',
                    'Alpha3' => 'DZA',
                    'IDC' => '213',
                ),
                'AS' => array(
                    'Name' => 'American Samoa',
                    'Alpha2' => 'AS',
                    'Alpha3' => 'ASM',
                    'IDC' => '1684',
                ),
                'AD' => array(
                    'Name' => 'Andorra',
                    'Alpha2' => 'AD',
                    'Alpha3' => 'AND',
                    'IDC' => '376',
                ),
                'AO' => array(
                    'Name' => 'Angola',
                    'Alpha2' => 'AO',
                    'Alpha3' => 'AGO',
                    'IDC' => '244',
                ),
                'AI' => array(
                    'Name' => 'Anguilla',
                    'Alpha2' => 'AI',
                    'Alpha3' => 'AIA',
                    'IDC' => '1264',
                ),
                'AQ' => array(
                    'Name' => 'Antarctica',
                    'Alpha2' => 'AQ',
                    'Alpha3' => 'ATA',
                    'IDC' => '672',
                ),
                'AG' => array(
                    'Name' => 'Antigua and Barbuda',
                    'Alpha2' => 'AG',
                    'Alpha3' => 'ATG',
                    'IDC' => '1268',
                ),
                'AR' => array(
                    'Name' => 'Argentina',
                    'Alpha2' => 'AR',
                    'Alpha3' => 'ARG',
                    'IDC' => '54',
                ),
                'AM' => array(
                    'Name' => 'Armenia',
                    'Alpha2' => 'AM',
                    'Alpha3' => 'ARM',
                    'IDC' => '374',
                ),
                'AW' => array(
                    'Name' => 'Aruba',
                    'Alpha2' => 'AW',
                    'Alpha3' => 'ABW',
                    'IDC' => '297',
                ),
                'AU' => array(
                    'Name' => 'Australia',
                    'Alpha2' => 'AU',
                    'Alpha3' => 'AUS',
                    'IDC' => '61',
                ),
                'AT' => array(
                    'Name' => 'Austria',
                    'Alpha2' => 'AT',
                    'Alpha3' => 'AUT',
                    'IDC' => '43',
                ),
                'AZ' => array(
                    'Name' => 'Azerbaijan',
                    'Alpha2' => 'AZ',
                    'Alpha3' => 'AZE',
                    'IDC' => '994',
                ),
                'BS' => array(
                    'Name' => 'Bahamas',
                    'Alpha2' => 'BS',
                    'Alpha3' => 'BHS',
                    'IDC' => '1242',
                ),
                'BH' => array(
                    'Name' => 'Bahrain',
                    'Alpha2' => 'BH',
                    'Alpha3' => 'BHR',
                    'IDC' => '973',
                ),
                'BD' => array(
                    'Name' => 'Bangladesh',
                    'Alpha2' => 'BD',
                    'Alpha3' => 'BGD',
                    'IDC' => '880',
                ),
                'BB' => array(
                    'Name' => 'Barbados',
                    'Alpha2' => 'BB',
                    'Alpha3' => 'BRB',
                    'IDC' => '1246',
                ),
                'BY' => array(
                    'Name' => 'Belarus',
                    'Alpha2' => 'BY',
                    'Alpha3' => 'BLR',
                    'IDC' => '375',
                ),
                'BE' => array(
                    'Name' => 'Belgium',
                    'Alpha2' => 'BE',
                    'Alpha3' => 'BEL',
                    'IDC' => '32',
                ),
                'BZ' => array(
                    'Name' => 'Belize',
                    'Alpha2' => 'BZ',
                    'Alpha3' => 'BLZ',
                    'IDC' => '501',
                ),
                'BJ' => array(
                    'Name' => 'Benin',
                    'Alpha2' => 'BJ',
                    'Alpha3' => 'BEN',
                    'IDC' => '229',
                ),
                'BM' => array(
                    'Name' => 'Bermuda',
                    'Alpha2' => 'BM',
                    'Alpha3' => 'BMU',
                    'IDC' => '1441',
                ),
                'BT' => array(
                    'Name' => 'Bhutan',
                    'Alpha2' => 'BT',
                    'Alpha3' => 'BTN',
                    'IDC' => '975',
                ),
                'BO' => array(
                    'Name' => 'Bolivia',
                    'Alpha2' => 'BO',
                    'Alpha3' => 'BOL',
                    'IDC' => '591',
                ),
                'BA' => array(
                    'Name' => 'Bosnia and Herzegovina',
                    'Alpha2' => 'BA',
                    'Alpha3' => 'BIH',
                    'IDC' => '387',
                ),
                'BW' => array(
                    'Name' => 'Botswana',
                    'Alpha2' => 'BW',
                    'Alpha3' => 'BWA',
                    'IDC' => '267',
                ),
                'BV' => array(
                    'Name' => 'Bouvet Island',
                    'Alpha2' => 'BV',
                    'Alpha3' => 'BVT',
                    'IDC' => '47',
                ),
                'BR' => array(
                    'Name' => 'Brazil',
                    'Alpha2' => 'BR',
                    'Alpha3' => 'BRA',
                    'IDC' => '55',
                ),
                'IO' => array(
                    'Name' => 'British Indian Ocean Territory',
                    'Alpha2' => 'IO',
                    'Alpha3' => 'IOT',
                    'IDC' => '246',
                ),
                'BN' => array(
                    'Name' => 'Brunei Darussalam',
                    'Alpha2' => 'BN',
                    'Alpha3' => 'BRN',
                    'IDC' => '673',
                ),
                'BG' => array(
                    'Name' => 'Bulgaria',
                    'Alpha2' => 'BG',
                    'Alpha3' => 'BGR',
                    'IDC' => '359',
                ),
                'BF' => array(
                    'Name' => 'Burkina Faso',
                    'Alpha2' => 'BF',
                    'Alpha3' => 'BFA',
                    'IDC' => '226',
                ),
                'BI' => array(
                    'Name' => 'Burundi',
                    'Alpha2' => 'BI',
                    'Alpha3' => 'BDI',
                    'IDC' => '257',
                ),
                'KH' => array(
                    'Name' => 'Cambodia',
                    'Alpha2' => 'KH',
                    'Alpha3' => 'KHM',
                    'IDC' => '855',
                ),
                'CM' => array(
                    'Name' => 'Cameroon',
                    'Alpha2' => 'CM',
                    'Alpha3' => 'CMR',
                    'IDC' => '237',
                ),
                'CA' => array(
                    'Name' => 'Canada',
                    'Alpha2' => 'CA',
                    'Alpha3' => 'CAN',
                    'IDC' => '1',
                ),
                'CV' => array(
                    'Name' => 'Cape Verde',
                    'Alpha2' => 'CV',
                    'Alpha3' => 'CPV',
                    'IDC' => '238',
                ),
                'KY' => array(
                    'Name' => 'Cayman Islands',
                    'Alpha2' => 'KY',
                    'Alpha3' => 'CYM',
                    'IDC' => '1345',
                ),
                'CF' => array(
                    'Name' => 'Central African Republic',
                    'Alpha2' => 'CF',
                    'Alpha3' => 'CAF',
                    'IDC' => '236',
                ),
                'TD' => array(
                    'Name' => 'Chad',
                    'Alpha2' => 'TD',
                    'Alpha3' => 'TCD',
                    'IDC' => '235',
                ),
                'CL' => array(
                    'Name' => 'Chile',
                    'Alpha2' => 'CL',
                    'Alpha3' => 'CHL',
                    'IDC' => '56',
                ),
                'CN' => array(
                    'Name' => 'China',
                    'Alpha2' => 'CN',
                    'Alpha3' => 'CHN',
                    'IDC' => '86',
                ),
                'CX' => array(
                    'Name' => 'Christmas Island',
                    'Alpha2' => 'CX',
                    'Alpha3' => 'CXR',
                    'IDC' => '61',
                ),
                'CC' => array(
                    'Name' => 'Cocos (Keeling) Islands',
                    'Alpha2' => 'CC',
                    'Alpha3' => 'CCK',
                    'IDC' => '61',
                ),
                'CO' => array(
                    'Name' => 'Colombia',
                    'Alpha2' => 'CO',
                    'Alpha3' => 'COL',
                    'IDC' => '57',
                ),
                'KM' => array(
                    'Name' => 'Comoros',
                    'Alpha2' => 'KM',
                    'Alpha3' => 'COM',
                    'IDC' => '269',
                ),
                'CG' => array(
                    'Name' => 'Congo',
                    'Alpha2' => 'CG',
                    'Alpha3' => 'COG',
                    'IDC' => '242',
                ),
                'CD' => array(
                    'Name' => 'Congo, The Democratic Republic Of The',
                    'Alpha2' => 'CD',
                    'Alpha3' => 'COD',
                    'IDC' => '243',
                ),
                'CK' => array(
                    'Name' => 'Cook Islands',
                    'Alpha2' => 'CK',
                    'Alpha3' => 'COK',
                    'IDC' => '682',
                ),
                'CR' => array(
                    'Name' => 'Costa Rica',
                    'Alpha2' => 'CR',
                    'Alpha3' => 'CRI',
                    'IDC' => '506',
                ),
                'CI' => array(
                    'Name' => 'Côte d\'Ivoire',
                    'Alpha2' => 'CI',
                    'Alpha3' => 'CIV',
                    'IDC' => '225',
                ),
                'HR' => array(
                    'Name' => 'Croatia',
                    'Alpha2' => 'HR',
                    'Alpha3' => 'HRV',
                    'IDC' => '385',
                ),
                'CU' => array(
                    'Name' => 'Cuba',
                    'Alpha2' => 'CU',
                    'Alpha3' => 'CUB',
                    'IDC' => '53',
                ),
                'CY' => array(
                    'Name' => 'Cyprus',
                    'Alpha2' => 'CY',
                    'Alpha3' => 'CYP',
                    'IDC' => '357',
                ),
                'CZ' => array(
                    'Name' => 'Czech Republic',
                    'Alpha2' => 'CZ',
                    'Alpha3' => 'CZE',
                    'IDC' => '420',
                ),
                'DK' => array(
                    'Name' => 'Denmark',
                    'Alpha2' => 'DK',
                    'Alpha3' => 'DNK',
                    'IDC' => '45',
                ),
                'DJ' => array(
                    'Name' => 'Djibouti',
                    'Alpha2' => 'DJ',
                    'Alpha3' => 'DJI',
                    'IDC' => '253',
                ),
                'DM' => array(
                    'Name' => 'Dominica',
                    'Alpha2' => 'DM',
                    'Alpha3' => 'DMA',
                    'IDC' => '1767',
                ),
                'DO' => array(
                    'Name' => 'Dominican Republic',
                    'Alpha2' => 'DO',
                    'Alpha3' => 'DOM',
                    'IDC' => '1809',
                ),
                'EC' => array(
                    'Name' => 'Ecuador',
                    'Alpha2' => 'EC',
                    'Alpha3' => 'ECU',
                    'IDC' => '593',
                ),
                'EG' => array(
                    'Name' => 'Egypt',
                    'Alpha2' => 'EG',
                    'Alpha3' => 'EGY',
                    'IDC' => '20',
                ),
                'SV' => array(
                    'Name' => 'El Salvador',
                    'Alpha2' => 'SV',
                    'Alpha3' => 'SLV',
                    'IDC' => '503',
                ),
                'GQ' => array(
                    'Name' => 'Equatorial Guinea',
                    'Alpha2' => 'GQ',
                    'Alpha3' => 'GNQ',
                    'IDC' => '240',
                ),
                'ER' => array(
                    'Name' => 'Eritrea',
                    'Alpha2' => 'ER',
                    'Alpha3' => 'ERI',
                    'IDC' => '291',
                ),
                'EE' => array(
                    'Name' => 'Estonia',
                    'Alpha2' => 'EE',
                    'Alpha3' => 'EST',
                    'IDC' => '372',
                ),
                'ET' => array(
                    'Name' => 'Ethiopia',
                    'Alpha2' => 'ET',
                    'Alpha3' => 'ETH',
                    'IDC' => '251',
                ),
                'FK' => array(
                    'Name' => 'Falkland Islands (Malvinas)',
                    'Alpha2' => 'FK',
                    'Alpha3' => 'FLK',
                    'IDC' => '500',
                ),
                'FO' => array(
                    'Name' => 'Faroe Islands',
                    'Alpha2' => 'FO',
                    'Alpha3' => 'FRO',
                    'IDC' => '298',
                ),
                'FJ' => array(
                    'Name' => 'Fiji',
                    'Alpha2' => 'FJ',
                    'Alpha3' => 'FJI',
                    'IDC' => '679',
                ),
                'FI' => array(
                    'Name' => 'Finland',
                    'Alpha2' => 'FI',
                    'Alpha3' => 'FIN',
                    'IDC' => '358',
                ),
                'FR' => array(
                    'Name' => 'France',
                    'Alpha2' => 'FR',
                    'Alpha3' => 'FRA',
                    'IDC' => '33',
                ),
                'GF' => array(
                    'Name' => 'French Guiana',
                    'Alpha2' => 'GF',
                    'Alpha3' => 'GUF',
                    'IDC' => '594',
                ),
                'PF' => array(
                    'Name' => 'French Polynesia',
                    'Alpha2' => 'PF',
                    'Alpha3' => 'PYF',
                    'IDC' => '689',
                ),
                'TF' => array(
                    'Name' => 'French Southern Territories',
                    'Alpha2' => 'TF',
                    'Alpha3' => 'ATF',
                    'IDC' => '0',
                ),
                'GA' => array(
                    'Name' => 'Gabon',
                    'Alpha2' => 'GA',
                    'Alpha3' => 'GAB',
                    'IDC' => '241',
                ),
                'GM' => array(
                    'Name' => 'Gambia',
                    'Alpha2' => 'GM',
                    'Alpha3' => 'GMB',
                    'IDC' => '220',
                ),
                'GE' => array(
                    'Name' => 'Georgia',
                    'Alpha2' => 'GE',
                    'Alpha3' => 'GEO',
                    'IDC' => '995',
                ),
                'DE' => array(
                    'Name' => 'Germany',
                    'Alpha2' => 'DE',
                    'Alpha3' => 'DEU',
                    'IDC' => '49',
                ),
                'GH' => array(
                    'Name' => 'Ghana',
                    'Alpha2' => 'GH',
                    'Alpha3' => 'GHA',
                    'IDC' => '233',
                ),
                'GI' => array(
                    'Name' => 'Gibraltar',
                    'Alpha2' => 'GI',
                    'Alpha3' => 'GIB',
                    'IDC' => '350',
                ),
                'GR' => array(
                    'Name' => 'Greece',
                    'Alpha2' => 'GR',
                    'Alpha3' => 'GRC',
                    'IDC' => '30',
                ),
                'GL' => array(
                    'Name' => 'Greenland',
                    'Alpha2' => 'GL',
                    'Alpha3' => 'GRL',
                    'IDC' => '299',
                ),
                'GD' => array(
                    'Name' => 'Grenada',
                    'Alpha2' => 'GD',
                    'Alpha3' => 'GRD',
                    'IDC' => '1473',
                ),
                'GP' => array(
                    'Name' => 'Guadeloupe',
                    'Alpha2' => 'GP',
                    'Alpha3' => 'GLP',
                    'IDC' => '590',
                ),
                'GU' => array(
                    'Name' => 'Guam',
                    'Alpha2' => 'GU',
                    'Alpha3' => 'GUM',
                    'IDC' => '1671',
                ),
                'GT' => array(
                    'Name' => 'Guatemala',
                    'Alpha2' => 'GT',
                    'Alpha3' => 'GTM',
                    'IDC' => '502',
                ),
                'GG' => array(
                    'Name' => 'Guernsey',
                    'Alpha2' => 'GG',
                    'Alpha3' => 'GGY',
                    'IDC' => '44',
                ),
                'GN' => array(
                    'Name' => 'Guinea',
                    'Alpha2' => 'GN',
                    'Alpha3' => 'GIN',
                    'IDC' => '224',
                ),
                'GW' => array(
                    'Name' => 'Guinea-Bissau',
                    'Alpha2' => 'GW',
                    'Alpha3' => 'GNB',
                    'IDC' => '245',
                ),
                'GY' => array(
                    'Name' => 'Guyana',
                    'Alpha2' => 'GY',
                    'Alpha3' => 'GUY',
                    'IDC' => '592',
                ),
                'HT' => array(
                    'Name' => 'Haiti',
                    'Alpha2' => 'HT',
                    'Alpha3' => 'HTI',
                    'IDC' => '509',
                ),
                'HM' => array(
                    'Name' => 'Heard Island and McDonald Islands',
                    'Alpha2' => 'HM',
                    'Alpha3' => 'HMD',
                    'IDC' => '672',
                ),
                'HN' => array(
                    'Name' => 'Honduras',
                    'Alpha2' => 'HN',
                    'Alpha3' => 'HND',
                    'IDC' => '504',
                ),
                'HK' => array(
                    'Name' => 'Hong Kong',
                    'Alpha2' => 'HK',
                    'Alpha3' => 'HKG',
                    'IDC' => '852',
                ),
                'HU' => array(
                    'Name' => 'Hungary',
                    'Alpha2' => 'HU',
                    'Alpha3' => 'HUN',
                    'IDC' => '36',
                ),
                'IS' => array(
                    'Name' => 'Iceland',
                    'Alpha2' => 'IS',
                    'Alpha3' => 'ISL',
                    'IDC' => '354',
                ),
                'IN' => array(
                    'Name' => 'India',
                    'Alpha2' => 'IN',
                    'Alpha3' => 'IND',
                    'IDC' => '91',
                ),
                'ID' => array(
                    'Name' => 'Indonesia',
                    'Alpha2' => 'ID',
                    'Alpha3' => 'IDN',
                    'IDC' => '62',
                ),
                'IR' => array(
                    'Name' => 'Iran, Islamic Republic of',
                    'Alpha2' => 'IR',
                    'Alpha3' => 'IRN',
                    'IDC' => '98',
                ),
                'IQ' => array(
                    'Name' => 'Iraq',
                    'Alpha2' => 'IQ',
                    'Alpha3' => 'IRQ',
                    'IDC' => '964',
                ),
                'IE' => array(
                    'Name' => 'Ireland',
                    'Alpha2' => 'IE',
                    'Alpha3' => 'IRL',
                    'IDC' => '353',
                ),
                'IM' => array(
                    'Name' => 'Isle of Man',
                    'Alpha2' => 'IM',
                    'Alpha3' => 'IMN',
                    'IDC' => '44',
                ),
                'IL' => array(
                    'Name' => 'Israel',
                    'Alpha2' => 'IL',
                    'Alpha3' => 'ISR',
                    'IDC' => '972',
                ),
                'IT' => array(
                    'Name' => 'Italy',
                    'Alpha2' => 'IT',
                    'Alpha3' => 'ITA',
                    'IDC' => '39',
                ),
                'JM' => array(
                    'Name' => 'Jamaica',
                    'Alpha2' => 'JM',
                    'Alpha3' => 'JAM',
                    'IDC' => '1876',
                ),
                'JP' => array(
                    'Name' => 'Japan',
                    'Alpha2' => 'JP',
                    'Alpha3' => 'JPN',
                    'IDC' => '81',
                ),
                'JE' => array(
                    'Name' => 'Jersey',
                    'Alpha2' => 'JE',
                    'Alpha3' => 'JEY',
                    'IDC' => '44',
                ),
                'JO' => array(
                    'Name' => 'Jordan',
                    'Alpha2' => 'JO',
                    'Alpha3' => 'JOR',
                    'IDC' => '962',
                ),
                'KZ' => array(
                    'Name' => 'Kazakhstan',
                    'Alpha2' => 'KZ',
                    'Alpha3' => 'KAZ',
                    'IDC' => '7',
                ),
                'KE' => array(
                    'Name' => 'Kenya',
                    'Alpha2' => 'KE',
                    'Alpha3' => 'KEN',
                    'IDC' => '254',
                ),
                'KI' => array(
                    'Name' => 'Kiribati',
                    'Alpha2' => 'KI',
                    'Alpha3' => 'KIR',
                    'IDC' => '686',
                ),
                'KP' => array(
                    'Name' => 'Korea, Democratic People\'s Republic of',
                    'Alpha2' => 'KP',
                    'Alpha3' => 'PRK',
                    'IDC' => '850',
                ),
                'KR' => array(
                    'Name' => 'Korea, Republic of',
                    'Alpha2' => 'KR',
                    'Alpha3' => 'KOR',
                    'IDC' => '82',
                ),
                'KW' => array(
                    'Name' => 'Kuwait',
                    'Alpha2' => 'KW',
                    'Alpha3' => 'KWT',
                    'IDC' => '965',
                ),
                'KG' => array(
                    'Name' => 'Kyrgyzstan',
                    'Alpha2' => 'KG',
                    'Alpha3' => 'KGZ',
                    'IDC' => '996',
                ),
                'LA' => array(
                    'Name' => 'Lao People\'s Democratic Republic',
                    'Alpha2' => 'LA',
                    'Alpha3' => 'LAO',
                    'IDC' => '856',
                ),
                'LV' => array(
                    'Name' => 'Latvia',
                    'Alpha2' => 'LV',
                    'Alpha3' => 'LVA',
                    'IDC' => '371',
                ),
                'LB' => array(
                    'Name' => 'Lebanon',
                    'Alpha2' => 'LB',
                    'Alpha3' => 'LBN',
                    'IDC' => '961',
                ),
                'LS' => array(
                    'Name' => 'Lesotho',
                    'Alpha2' => 'LS',
                    'Alpha3' => 'LSO',
                    'IDC' => '266',
                ),
                'LR' => array(
                    'Name' => 'Liberia',
                    'Alpha2' => 'LR',
                    'Alpha3' => 'LBR',
                    'IDC' => '231',
                ),
                'LY' => array(
                    'Name' => 'Libyan Arab Jamahiriya',
                    'Alpha2' => 'LY',
                    'Alpha3' => 'LBY',
                    'IDC' => '218',
                ),
                'LI' => array(
                    'Name' => 'Liechtenstein',
                    'Alpha2' => 'LI',
                    'Alpha3' => 'LIE',
                    'IDC' => '423',
                ),
                'LT' => array(
                    'Name' => 'Lithuania',
                    'Alpha2' => 'LT',
                    'Alpha3' => 'LTU',
                    'IDC' => '370',
                ),
                'LU' => array(
                    'Name' => 'Luxembourg',
                    'Alpha2' => 'LU',
                    'Alpha3' => 'LUX',
                    'IDC' => '352',
                ),
                'MO' => array(
                    'Name' => 'Macau',
                    'Alpha2' => 'MO',
                    'Alpha3' => 'MAC',
                    'IDC' => '853',
                ),
                'MK' => array(
                    'Name' => 'Macedonia, The Former Yugoslav Republic of',
                    'Alpha2' => 'MK',
                    'Alpha3' => 'MKD',
                    'IDC' => '389',
                ),
                'MG' => array(
                    'Name' => 'Madagascar',
                    'Alpha2' => 'MG',
                    'Alpha3' => 'MDG',
                    'IDC' => '261',
                ),
                'MW' => array(
                    'Name' => 'Malawi',
                    'Alpha2' => 'MW',
                    'Alpha3' => 'MWI',
                    'IDC' => '265',
                ),
                'MY' => array(
                    'Name' => 'Malaysia',
                    'Alpha2' => 'MY',
                    'Alpha3' => 'MYS',
                    'IDC' => '60',
                ),
                'MV' => array(
                    'Name' => 'Maldives',
                    'Alpha2' => 'MV',
                    'Alpha3' => 'MDV',
                    'IDC' => '960',
                ),
                'ML' => array(
                    'Name' => 'Mali',
                    'Alpha2' => 'ML',
                    'Alpha3' => 'MLI',
                    'IDC' => '223',
                ),
                'MT' => array(
                    'Name' => 'Malta',
                    'Alpha2' => 'MT',
                    'Alpha3' => 'MLT',
                    'IDC' => '356',
                ),
                'MH' => array(
                    'Name' => 'Marshall Islands',
                    'Alpha2' => 'MH',
                    'Alpha3' => 'MHL',
                    'IDC' => '692',
                ),
                'MQ' => array(
                    'Name' => 'Martinique',
                    'Alpha2' => 'MQ',
                    'Alpha3' => 'MTQ',
                    'IDC' => '596',
                ),
                'MR' => array(
                    'Name' => 'Mauritania',
                    'Alpha2' => 'MR',
                    'Alpha3' => 'MRT',
                    'IDC' => '222',
                ),
                'MU' => array(
                    'Name' => 'Mauritius',
                    'Alpha2' => 'MU',
                    'Alpha3' => 'MUS',
                    'IDC' => '230',
                ),
                'YT' => array(
                    'Name' => 'Mayotte',
                    'Alpha2' => 'YT',
                    'Alpha3' => 'MYT',
                    'IDC' => '262',
                ),
                'MX' => array(
                    'Name' => 'Mexico',
                    'Alpha2' => 'MX',
                    'Alpha3' => 'MEX',
                    'IDC' => '52',
                ),
                'FM' => array(
                    'Name' => 'Micronesia, Federated States of',
                    'Alpha2' => 'FM',
                    'Alpha3' => 'FSM',
                    'IDC' => '691',
                ),
                'MD' => array(
                    'Name' => 'Moldova, Republic of',
                    'Alpha2' => 'MD',
                    'Alpha3' => 'MDA',
                    'IDC' => '373',
                ),
                'MC' => array(
                    'Name' => 'Monaco',
                    'Alpha2' => 'MC',
                    'Alpha3' => 'MCO',
                    'IDC' => '377',
                ),
                'MN' => array(
                    'Name' => 'Mongolia',
                    'Alpha2' => 'MN',
                    'Alpha3' => 'MNG',
                    'IDC' => '976',
                ),
                'ME' => array(
                    'Name' => 'Montenegro',
                    'Alpha2' => 'ME',
                    'Alpha3' => 'MNE',
                    'IDC' => '382',
                ),
                'MS' => array(
                    'Name' => 'Montserrat',
                    'Alpha2' => 'MS',
                    'Alpha3' => 'MSR',
                    'IDC' => '1664',
                ),
                'MA' => array(
                    'Name' => 'Morocco',
                    'Alpha2' => 'MA',
                    'Alpha3' => 'MAR',
                    'IDC' => '212',
                ),
                'MZ' => array(
                    'Name' => 'Mozambique',
                    'Alpha2' => 'MZ',
                    'Alpha3' => 'MOZ',
                    'IDC' => '258',
                ),
                'MM' => array(
                    'Name' => 'Myanmar',
                    'Alpha2' => 'MM',
                    'Alpha3' => 'MMR',
                    'IDC' => '95',
                ),
                'NA' => array(
                    'Name' => 'Namibia',
                    'Alpha2' => 'NA',
                    'Alpha3' => 'NAM',
                    'IDC' => '264',
                ),
                'NR' => array(
                    'Name' => 'Nauru',
                    'Alpha2' => 'NR',
                    'Alpha3' => 'NRU',
                    'IDC' => '674',
                ),
                'NP' => array(
                    'Name' => 'Nepal',
                    'Alpha2' => 'NP',
                    'Alpha3' => 'NPL',
                    'IDC' => '977',
                ),
                'NL' => array(
                    'Name' => 'Netherlands',
                    'Alpha2' => 'NL',
                    'Alpha3' => 'NLD',
                    'IDC' => '31',
                ),
                'AN' => array(
                    'Name' => 'Netherlands Antilles',
                    'Alpha2' => 'AN',
                    'Alpha3' => 'ANT',
                    'IDC' => '599',
                ),
                'NC' => array(
                    'Name' => 'New Caledonia',
                    'Alpha2' => 'NC',
                    'Alpha3' => 'NCL',
                    'IDC' => '687',
                ),
                'NZ' => array(
                    'Name' => 'New Zealand',
                    'Alpha2' => 'NZ',
                    'Alpha3' => 'NZL',
                    'IDC' => '64',
                ),
                'NI' => array(
                    'Name' => 'Nicaragua',
                    'Alpha2' => 'NI',
                    'Alpha3' => 'NIC',
                    'IDC' => '505',
                ),
                'NE' => array(
                    'Name' => 'Niger',
                    'Alpha2' => 'NE',
                    'Alpha3' => 'NER',
                    'IDC' => '227',
                ),
                'NG' => array(
                    'Name' => 'Nigeria',
                    'Alpha2' => 'NG',
                    'Alpha3' => 'NGA',
                    'IDC' => '234',
                ),
                'NU' => array(
                    'Name' => 'Niue',
                    'Alpha2' => 'NU',
                    'Alpha3' => 'NIU',
                    'IDC' => '683',
                ),
                'NF' => array(
                    'Name' => 'Norfolk Island',
                    'Alpha2' => 'NF',
                    'Alpha3' => 'NFK',
                    'IDC' => '6723',
                ),
                'MP' => array(
                    'Name' => 'Northern Mariana Islands',
                    'Alpha2' => 'MP',
                    'Alpha3' => 'MNP',
                    'IDC' => '1670',
                ),
                'NO' => array(
                    'Name' => 'Norway',
                    'Alpha2' => 'NO',
                    'Alpha3' => 'NOR',
                    'IDC' => '47',
                ),
                'OM' => array(
                    'Name' => 'Oman',
                    'Alpha2' => 'OM',
                    'Alpha3' => 'OMN',
                    'IDC' => '968',
                ),
                'PK' => array(
                    'Name' => 'Pakistan',
                    'Alpha2' => 'PK',
                    'Alpha3' => 'PAK',
                    'IDC' => '92',
                ),
                'PW' => array(
                    'Name' => 'Palau',
                    'Alpha2' => 'PW',
                    'Alpha3' => 'PLW',
                    'IDC' => '680',
                ),
                'PS' => array(
                    'Name' => 'Palestinian Territory, Occupied',
                    'Alpha2' => 'PS',
                    'Alpha3' => 'PSE',
                    'IDC' => '970',
                ),
                'PA' => array(
                    'Name' => 'Panama',
                    'Alpha2' => 'PA',
                    'Alpha3' => 'PAN',
                    'IDC' => '507',
                ),
                'PG' => array(
                    'Name' => 'Papua New Guinea',
                    'Alpha2' => 'PG',
                    'Alpha3' => 'PNG',
                    'IDC' => '675',
                ),
                'PY' => array(
                    'Name' => 'Paraguay',
                    'Alpha2' => 'PY',
                    'Alpha3' => 'PRY',
                    'IDC' => '595',
                ),
                'PE' => array(
                    'Name' => 'Peru',
                    'Alpha2' => 'PE',
                    'Alpha3' => 'PER',
                    'IDC' => '51',
                ),
                'PH' => array(
                    'Name' => 'Philippines',
                    'Alpha2' => 'PH',
                    'Alpha3' => 'PHL',
                    'IDC' => '63',
                ),
                'PN' => array(
                    'Name' => 'Pitcairn',
                    'Alpha2' => 'PN',
                    'Alpha3' => 'PCN',
                    'IDC' => '64',
                ),
                'PL' => array(
                    'Name' => 'Poland',
                    'Alpha2' => 'PL',
                    'Alpha3' => 'POL',
                    'IDC' => '48',
                ),
                'PT' => array(
                    'Name' => 'Portugal',
                    'Alpha2' => 'PT',
                    'Alpha3' => 'PRT',
                    'IDC' => '351',
                ),
                'PR' => array(
                    'Name' => 'Puerto Rico',
                    'Alpha2' => 'PR',
                    'Alpha3' => 'PRI',
                    'IDC' => '1787',
                ),
                'QA' => array(
                    'Name' => 'Qatar',
                    'Alpha2' => 'QA',
                    'Alpha3' => 'QAT',
                    'IDC' => '974',
                ),
                'RE' => array(
                    'Name' => 'Reunion',
                    'Alpha2' => 'RE',
                    'Alpha3' => 'REU',
                    'IDC' => '262',
                ),
                'RO' => array(
                    'Name' => 'Romania',
                    'Alpha2' => 'RO',
                    'Alpha3' => 'ROU',
                    'IDC' => '40',
                ),
                'RU' => array(
                    'Name' => 'Russian Federation',
                    'Alpha2' => 'RU',
                    'Alpha3' => 'RUS',
                    'IDC' => '7',
                ),
                'RW' => array(
                    'Name' => 'Rwanda',
                    'Alpha2' => 'RW',
                    'Alpha3' => 'RWA',
                    'IDC' => '250',
                ),
                'BL' => array(
                    'Name' => 'Saint Barthélemy',
                    'Alpha2' => 'BL',
                    'Alpha3' => 'BLM',
                    'IDC' => '590',
                ),
                'SH' => array(
                    'Name' => 'Saint Helena',
                    'Alpha2' => 'SH',
                    'Alpha3' => 'SHN',
                    'IDC' => '290',
                ),
                'KN' => array(
                    'Name' => 'Saint Kitts and Nevis',
                    'Alpha2' => 'KN',
                    'Alpha3' => 'KNA',
                    'IDC' => '1869',
                ),
                'LC' => array(
                    'Name' => 'Saint Lucia',
                    'Alpha2' => 'LC',
                    'Alpha3' => 'LCA',
                    'IDC' => '1758',
                ),
                'MF' => array(
                    'Name' => 'Saint Martin',
                    'Alpha2' => 'MF',
                    'Alpha3' => 'MAF',
                    'IDC' => '590',
                ),
                'PM' => array(
                    'Name' => 'Saint Pierre and Miquelon',
                    'Alpha2' => 'PM',
                    'Alpha3' => 'SPM',
                    'IDC' => '508',
                ),
                'VC' => array(
                    'Name' => 'Saint Vincent and The Grenadines',
                    'Alpha2' => 'VC',
                    'Alpha3' => 'VCT',
                    'IDC' => '1784',
                ),
                'WS' => array(
                    'Name' => 'Samoa',
                    'Alpha2' => 'WS',
                    'Alpha3' => 'WSM',
                    'IDC' => '685',
                ),
                'SM' => array(
                    'Name' => 'San Marino',
                    'Alpha2' => 'SM',
                    'Alpha3' => 'SMR',
                    'IDC' => '378',
                ),
                'ST' => array(
                    'Name' => 'Sao Tome and Principe',
                    'Alpha2' => 'ST',
                    'Alpha3' => 'STP',
                    'IDC' => '239',
                ),
                'SA' => array(
                    'Name' => 'Saudi Arabia',
                    'Alpha2' => 'SA',
                    'Alpha3' => 'SAU',
                    'IDC' => '966',
                ),
                'SN' => array(
                    'Name' => 'Senegal',
                    'Alpha2' => 'SN',
                    'Alpha3' => 'SEN',
                    'IDC' => '221',
                ),
                'RS' => array(
                    'Name' => 'Serbia',
                    'Alpha2' => 'RS',
                    'Alpha3' => 'SRB',
                    'IDC' => '381',
                ),
                'SC' => array(
                    'Name' => 'Seychelles',
                    'Alpha2' => 'SC',
                    'Alpha3' => 'SYC',
                    'IDC' => '248',
                ),
                'SL' => array(
                    'Name' => 'Sierra Leone',
                    'Alpha2' => 'SL',
                    'Alpha3' => 'SLE',
                    'IDC' => '232',
                ),
                'SG' => array(
                    'Name' => 'Singapore',
                    'Alpha2' => 'SG',
                    'Alpha3' => 'SGP',
                    'IDC' => '65',
                ),
                'SK' => array(
                    'Name' => 'Slovakia',
                    'Alpha2' => 'SK',
                    'Alpha3' => 'SVK',
                    'IDC' => '421',
                ),
                'SI' => array(
                    'Name' => 'Slovenia',
                    'Alpha2' => 'SI',
                    'Alpha3' => 'SVN',
                    'IDC' => '386',
                ),
                'SB' => array(
                    'Name' => 'Solomon Islands',
                    'Alpha2' => 'SB',
                    'Alpha3' => 'SLB',
                    'IDC' => '677',
                ),
                'SO' => array(
                    'Name' => 'Somalia',
                    'Alpha2' => 'SO',
                    'Alpha3' => 'SOM',
                    'IDC' => '252',
                ),
                'ZA' => array(
                    'Name' => 'South Africa',
                    'Alpha2' => 'ZA',
                    'Alpha3' => 'ZAF',
                    'IDC' => '27',
                ),
                'GS' => array(
                    'Name' => 'South Georgia and The South Sandwich Islands',
                    'Alpha2' => 'GS',
                    'Alpha3' => 'SGS',
                    'IDC' => '500',
                ),
                'ES' => array(
                    'Name' => 'Spain',
                    'Alpha2' => 'ES',
                    'Alpha3' => 'ESP',
                    'IDC' => '34',
                ),
                'LK' => array(
                    'Name' => 'Sri Lanka',
                    'Alpha2' => 'LK',
                    'Alpha3' => 'LKA',
                    'IDC' => '94',
                ),
                'SD' => array(
                    'Name' => 'Sudan',
                    'Alpha2' => 'SD',
                    'Alpha3' => 'SDN',
                    'IDC' => '249',
                ),
                'SR' => array(
                    'Name' => 'Suriname',
                    'Alpha2' => 'SR',
                    'Alpha3' => 'SUR',
                    'IDC' => '597',
                ),
                'SJ' => array(
                    'Name' => 'Svalbard and Jan Mayen',
                    'Alpha2' => 'SJ',
                    'Alpha3' => 'SJM',
                    'IDC' => '47',
                ),
                'SZ' => array(
                    'Name' => 'Swaziland',
                    'Alpha2' => 'SZ',
                    'Alpha3' => 'SWZ',
                    'IDC' => '268',
                ),
                'SE' => array(
                    'Name' => 'Sweden',
                    'Alpha2' => 'SE',
                    'Alpha3' => 'SWE',
                    'IDC' => '46',
                ),
                'CH' => array(
                    'Name' => 'Switzerland',
                    'Alpha2' => 'CH',
                    'Alpha3' => 'CHE',
                    'IDC' => '41',
                ),
                'SY' => array(
                    'Name' => 'Syrian Arab Republic',
                    'Alpha2' => 'SY',
                    'Alpha3' => 'SYR',
                    'IDC' => '963',
                ),
                'TW' => array(
                    'Name' => 'Taiwan',
                    'Alpha2' => 'TW',
                    'Alpha3' => 'TWN',
                    'IDC' => '886',
                ),
                'TJ' => array(
                    'Name' => 'Tajikistan',
                    'Alpha2' => 'TJ',
                    'Alpha3' => 'TJK',
                    'IDC' => '992',
                ),
                'TZ' => array(
                    'Name' => 'Tanzania, United Republic of',
                    'Alpha2' => 'TZ',
                    'Alpha3' => 'TZA',
                    'IDC' => '255',
                ),
                'TH' => array(
                    'Name' => 'Thailand',
                    'Alpha2' => 'TH',
                    'Alpha3' => 'THA',
                    'IDC' => '66',
                ),
                'TL' => array(
                    'Name' => 'Timor-Leste',
                    'Alpha2' => 'TL',
                    'Alpha3' => 'TLS',
                    'IDC' => '670',
                ),
                'TG' => array(
                    'Name' => 'Togo',
                    'Alpha2' => 'TG',
                    'Alpha3' => 'TGO',
                    'IDC' => '228',
                ),
                'TK' => array(
                    'Name' => 'Tokelau',
                    'Alpha2' => 'TK',
                    'Alpha3' => 'TKL',
                    'IDC' => '690',
                ),
                'TO' => array(
                    'Name' => 'Tonga',
                    'Alpha2' => 'TO',
                    'Alpha3' => 'TON',
                    'IDC' => '676',
                ),
                'TT' => array(
                    'Name' => 'Trinidad and Tobago',
                    'Alpha2' => 'TT',
                    'Alpha3' => 'TTO',
                    'IDC' => '1868',
                ),
                'TN' => array(
                    'Name' => 'Tunisia',
                    'Alpha2' => 'TN',
                    'Alpha3' => 'TUN',
                    'IDC' => '216',
                ),
                'TR' => array(
                    'Name' => 'Turkey',
                    'Alpha2' => 'TR',
                    'Alpha3' => 'TUR',
                    'IDC' => '90',
                ),
                'TM' => array(
                    'Name' => 'Turkmenistan',
                    'Alpha2' => 'TM',
                    'Alpha3' => 'TKM',
                    'IDC' => '993',
                ),
                'TC' => array(
                    'Name' => 'Turks and Caicos Islands',
                    'Alpha2' => 'TC',
                    'Alpha3' => 'TCA',
                    'IDC' => '1649',
                ),
                'TV' => array(
                    'Name' => 'Tuvalu',
                    'Alpha2' => 'TV',
                    'Alpha3' => 'TUV',
                    'IDC' => '688',
                ),
                'UG' => array(
                    'Name' => 'Uganda',
                    'Alpha2' => 'UG',
                    'Alpha3' => 'UGA',
                    'IDC' => '256',
                ),
                'UA' => array(
                    'Name' => 'Ukraine',
                    'Alpha2' => 'UA',
                    'Alpha3' => 'UKR',
                    'IDC' => '380',
                ),
                'AE' => array(
                    'Name' => 'United Arab Emirates',
                    'Alpha2' => 'AE',
                    'Alpha3' => 'ARE',
                    'IDC' => '971',
                ),
                'GB' => array(
                    'Name' => 'United Kingdom',
                    'Alpha2' => 'GB',
                    'Alpha3' => 'GBR',
                    'IDC' => '44',
                ),
                'UM' => array(
                    'Name' => 'United States Minor Outlying Islands',
                    'Alpha2' => 'UM',
                    'Alpha3' => 'UMI',
                    'IDC' => '1',
                ),
                'US' => array(
                    'Name' => 'United States of America',
                    'Alpha2' => 'US',
                    'Alpha3' => 'USA',
                    'IDC' => '1',
                ),
                'UY' => array(
                    'Name' => 'Uruguay',
                    'Alpha2' => 'UY',
                    'Alpha3' => 'URY',
                    'IDC' => '598',
                ),
                'UZ' => array(
                    'Name' => 'Uzbekistan',
                    'Alpha2' => 'UZ',
                    'Alpha3' => 'UZB',
                    'IDC' => '998',
                ),
                'VU' => array(
                    'Name' => 'Vanuatu',
                    'Alpha2' => 'VU',
                    'Alpha3' => 'VUT',
                    'IDC' => '678',
                ),
                'VA' => array(
                    'Name' => 'Holy See (Vatican City State)',
                    'Alpha2' => 'VA',
                    'Alpha3' => 'VAT',
                    'IDC' => '3906',
                ),
                'VE' => array(
                    'Name' => 'Venezuela',
                    'Alpha2' => 'VE',
                    'Alpha3' => 'VEN',
                    'IDC' => '58',
                ),
                'VN' => array(
                    'Name' => 'Viet Nam',
                    'Alpha2' => 'VN',
                    'Alpha3' => 'VNM',
                    'IDC' => '84',
                ),
                'VG' => array(
                    'Name' => 'Virgin Islands, British',
                    'Alpha2' => 'VG',
                    'Alpha3' => 'VGB',
                    'IDC' => '1284',
                ),
                'VI' => array(
                    'Name' => 'Virgin Islands, U.S.',
                    'Alpha2' => 'VI',
                    'Alpha3' => 'VIR',
                    'IDC' => '1340',
                ),
                'WF' => array(
                    'Name' => 'Wallis and Futuna',
                    'Alpha2' => 'WF',
                    'Alpha3' => 'WLF',
                    'IDC' => '681',
                ),
                'EH' => array(
                    'Name' => 'Western Sahara',
                    'Alpha2' => 'EH',
                    'Alpha3' => 'ESH',
                    'IDC' => '212',
                ),
                'YE' => array(
                    'Name' => 'Yemen',
                    'Alpha2' => 'YE',
                    'Alpha3' => 'YEM',
                    'IDC' => '967',
                ),
                'ZM' => array(
                    'Name' => 'Zambia',
                    'Alpha2' => 'ZM',
                    'Alpha3' => 'ZMB',
                    'IDC' => '260',
                ),
                'ZW' => array(
                    'Name' => 'Zimbabwe',
                    'Alpha2' => 'ZW',
                    'Alpha3' => 'ZWE',
                    'IDC' => '263',
                ),
            ),
            'ezpublish.fieldtype.eznull.class' => 'eZ\\Publish\\Core\\FieldType\\Null\\Type',
            'ezpublish.fieldtype.ezrichtext.class' => 'eZ\\Publish\\Core\\FieldType\\RichText\\Type',
            'ezpublish.fieldtype.indexable.ezauthor.class' => 'eZ\\Publish\\Core\\FieldType\\Author\\SearchField',
            'ezpublish.fieldtype.indexable.ezstring.class' => 'eZ\\Publish\\Core\\FieldType\\TextLine\\SearchField',
            'ezpublish.fieldtype.indexable.ezrichtext.class' => 'eZ\\Publish\\Core\\FieldType\\RichText\\SearchField',
            'ezpublish.fieldtype.indexable.eztext.class' => 'eZ\\Publish\\Core\\FieldType\\TextBlock\\SearchField',
            'ezpublish.fieldtype.indexable.ezisbn.class' => 'eZ\\Publish\\Core\\FieldType\\ISBN\\SearchField',
            'ezpublish.fieldtype.indexable.ezboolean.class' => 'eZ\\Publish\\Core\\FieldType\\Checkbox\\SearchField',
            'ezpublish.fieldtype.indexable.ezdatetime.class' => 'eZ\\Publish\\Core\\FieldType\\DateAndTime\\SearchField',
            'ezpublish.fieldtype.indexable.ezemail.class' => 'eZ\\Publish\\Core\\FieldType\\EmailAddress\\SearchField',
            'ezpublish.fieldtype.indexable.ezimage.class' => 'eZ\\Publish\\Core\\FieldType\\Image\\SearchField',
            'ezpublish.fieldtype.indexable.ezmedia.class' => 'eZ\\Publish\\Core\\FieldType\\Media\\SearchField',
            'ezpublish.fieldtype.indexable.ezobjectrelation.class' => 'eZ\\Publish\\Core\\FieldType\\Relation\\SearchField',
            'ezpublish.fieldtype.indexable.ezbinaryfile.class' => 'eZ\\Publish\\Core\\FieldType\\BinaryFile\\SearchField',
            'ezpublish.fieldtype.indexable.ezdate.class' => 'eZ\\Publish\\Core\\FieldType\\Date\\SearchField',
            'ezpublish.fieldtype.indexable.ezprice.class' => 'eZ\\Publish\\Core\\FieldType\\Price\\SearchField',
            'ezpublish.fieldtype.indexable.ezgmaplocation.class' => 'eZ\\Publish\\Core\\FieldType\\MapLocation\\SearchField',
            'ezpublish.fieldtype.indexable.ezcountry.class' => 'eZ\\Publish\\Core\\FieldType\\Country\\SearchField',
            'ezpublish.fieldtype.indexable.ezinteger.class' => 'eZ\\Publish\\Core\\FieldType\\Integer\\SearchField',
            'ezpublish.fieldtype.indexable.ezfloat.class' => 'eZ\\Publish\\Core\\FieldType\\Float\\SearchField',
            'ezpublish.fieldtype.indexable.eztime.class' => 'eZ\\Publish\\Core\\FieldType\\Time\\SearchField',
            'ezpublish.fieldtype.indexable.ezselection.class' => 'eZ\\Publish\\Core\\FieldType\\Selection\\SearchField',
            'ezpublish.fieldtype.indexable.ezobjectrelationlist.class' => 'eZ\\Publish\\Core\\FieldType\\RelationList\\SearchField',
            'ezpublish.fieldtype.indexable.ezurl.class' => 'eZ\\Publish\\Core\\FieldType\\Url\\SearchField',
            'ezpublish.fieldtype.indexable.unindexed.class' => 'eZ\\Publish\\Core\\FieldType\\Unindexed',
            'ezpublish.api.role.limitation_type.blocking.class' => 'eZ\\Publish\\Core\\Limitation\\BlockingLimitationType',
            'ezpublish.api.role.limitation_type.content_type.class' => 'eZ\\Publish\\Core\\Limitation\\ContentTypeLimitationType',
            'ezpublish.api.role.limitation_type.language.class' => 'eZ\\Publish\\Core\\Limitation\\LanguageLimitationType',
            'ezpublish.api.role.limitation_type.location.class' => 'eZ\\Publish\\Core\\Limitation\\LocationLimitationType',
            'ezpublish.api.role.limitation_type.owner.class' => 'eZ\\Publish\\Core\\Limitation\\OwnerLimitationType',
            'ezpublish.api.role.limitation_type.parent_content_type.class' => 'eZ\\Publish\\Core\\Limitation\\ParentContentTypeLimitationType',
            'ezpublish.api.role.limitation_type.parent_depth.class' => 'eZ\\Publish\\Core\\Limitation\\ParentDepthLimitationType',
            'ezpublish.api.role.limitation_type.parent_owner.class' => 'eZ\\Publish\\Core\\Limitation\\ParentOwnerLimitationType',
            'ezpublish.api.role.limitation_type.parent_group.class' => 'eZ\\Publish\\Core\\Limitation\\ParentUserGroupLimitationType',
            'ezpublish.api.role.limitation_type.section.class' => 'eZ\\Publish\\Core\\Limitation\\SectionLimitationType',
            'ezpublish.api.role.limitation_type.new_section.class' => 'eZ\\Publish\\Core\\Limitation\\NewSectionLimitationType',
            'ezpublish.api.role.limitation_type.siteaccess.class' => 'eZ\\Publish\\Core\\Limitation\\SiteAccessLimitationType',
            'ezpublish.api.role.limitation_type.state.class' => 'eZ\\Publish\\Core\\Limitation\\ObjectStateLimitationType',
            'ezpublish.api.role.limitation_type.new_state.class' => 'eZ\\Publish\\Core\\Limitation\\NewObjectStateLimitationType',
            'ezpublish.api.role.limitation_type.subtree.class' => 'eZ\\Publish\\Core\\Limitation\\SubtreeLimitationType',
            'ezpublish.api.role.limitation_type.user_group.class' => 'eZ\\Publish\\Core\\Limitation\\UserGroupLimitationType',
            'ezpublish.api.role.limitation_type.status.class' => 'eZ\\Publish\\Core\\Limitation\\StatusLimitationType',
            'ezpublish.api.role.policy_map' => array(
                'content' => array(
                    'read' => array(
                        'Class' => true,
                        'Section' => true,
                        'Owner' => true,
                        'Group' => true,
                        'Node' => true,
                        'Subtree' => true,
                        'State' => true,
                    ),
                    'diff' => array(
                        'Class' => true,
                        'Section' => true,
                        'Owner' => true,
                        'Node' => true,
                        'Subtree' => true,
                    ),
                    'view_embed' => array(
                        'Class' => true,
                        'Section' => true,
                        'Owner' => true,
                        'Node' => true,
                        'Subtree' => true,
                    ),
                    'create' => array(
                        'Class' => true,
                        'Section' => true,
                        'ParentOwner' => true,
                        'ParentGroup' => true,
                        'ParentClass' => true,
                        'ParentDepth' => true,
                        'Node' => true,
                        'Subtree' => true,
                        'Language' => true,
                    ),
                    'edit' => array(
                        'Class' => true,
                        'Section' => true,
                        'Owner' => true,
                        'Group' => true,
                        'Node' => true,
                        'Subtree' => true,
                        'Language' => true,
                        'State' => true,
                    ),
                    'manage_locations' => array(
                        'Class' => true,
                        'Section' => true,
                        'Owner' => true,
                        'Subtree' => true,
                    ),
                    'hide' => array(
                        'Class' => true,
                        'Section' => true,
                        'Owner' => true,
                        'Group' => true,
                        'Node' => true,
                        'Subtree' => true,
                        'Language' => true,
                    ),
                    'reverserelatedlist' => array(

                    ),
                    'translate' => array(
                        'Class' => true,
                        'Section' => true,
                        'Owner' => true,
                        'Node' => true,
                        'Subtree' => true,
                        'Language' => true,
                    ),
                    'remove' => array(
                        'Class' => true,
                        'Section' => true,
                        'Owner' => true,
                        'Node' => true,
                        'Subtree' => true,
                        'State' => true,
                    ),
                    'versionread' => array(
                        'Class' => true,
                        'Section' => true,
                        'Owner' => true,
                        'Node' => true,
                        'Subtree' => true,
                    ),
                    'versionremove' => array(
                        'Class' => true,
                        'Section' => true,
                        'Owner' => true,
                        'Node' => true,
                        'Subtree' => true,
                    ),
                    'translations' => array(

                    ),
                    'urltranslator' => array(

                    ),
                    'pendinglist' => array(

                    ),
                    'restore' => array(

                    ),
                    'cleantrash' => array(

                    ),
                ),
                'class' => array(
                    'update' => array(

                    ),
                    'create' => array(

                    ),
                    'delete' => array(

                    ),
                ),
                'state' => array(
                    'assign' => array(
                        'Class' => true,
                        'Section' => true,
                        'Owner' => true,
                        'Group' => true,
                        'Node' => true,
                        'Subtree' => true,
                        'NewState' => true,
                    ),
                    'administrate' => array(

                    ),
                ),
                'role' => array(
                    'assign' => array(

                    ),
                    'update' => array(

                    ),
                    'create' => array(

                    ),
                    'delete' => array(

                    ),
                    'read' => array(

                    ),
                ),
                'section' => array(
                    'assign' => array(
                        'Class' => true,
                        'Section' => true,
                        'Owner' => true,
                        'NewSection' => true,
                    ),
                    'edit' => array(

                    ),
                    'view' => array(

                    ),
                ),
                'setup' => array(
                    'administrate' => array(

                    ),
                    'install' => array(

                    ),
                    'setup' => array(

                    ),
                    'system_info' => array(

                    ),
                ),
                'user' => array(
                    'login' => array(
                        'SiteAccess' => true,
                    ),
                    'password' => array(

                    ),
                    'preferences' => array(

                    ),
                    'register' => array(

                    ),
                    'selfedit' => array(

                    ),
                    'activation' => array(

                    ),
                ),
            ),
            'ezpublish.persistence.field_type_registry.factory.class' => 'eZ\\Publish\\Core\\Base\\Container\\ApiLoader\\Storage\\FieldTypeRegistryFactory',
            'ezpublish.persistence.field_type_registry.class' => 'eZ\\Publish\\Core\\Persistence\\FieldTypeRegistry',
            'ezpublish.persistence.external_storage_registry.factory.class' => 'eZ\\Publish\\Core\\Base\\Container\\ApiLoader\\Storage\\ExternalStorageRegistryFactory',
            'ezpublish.persistence.external_storage_registry.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\StorageRegistry',
            'ezpublish.persistence.slug_converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\UrlAlias\\SlugConverter',
            'ezpublish.api.storage_engine.pcre_compiler.class' => 'eZ\\Publish\\Core\\Persistence\\TransformationProcessor\\PcreCompiler',
            'ezpublish.api.storage_engine.transformation_converter.class' => 'eZ\\Publish\\Core\\Persistence\\Utf8Converter',
            'ezpublish.api.storage_engine.transformation_parser.class' => 'eZ\\Publish\\Core\\Persistence\\TransformationProcessor\\DefinitionBased\\Parser',
            'ezpublish.api.storage_engine.transformation_rules.resources' => array(
                0 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/Persistence/Tests/TransformationProcessor/_fixtures/transformations/ascii.tr'),
                1 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/Persistence/Tests/TransformationProcessor/_fixtures/transformations/basic.tr'),
                2 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/Persistence/Tests/TransformationProcessor/_fixtures/transformations/cyrillic.tr'),
                3 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/Persistence/Tests/TransformationProcessor/_fixtures/transformations/greek.tr'),
                4 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/Persistence/Tests/TransformationProcessor/_fixtures/transformations/hebrew.tr'),
                5 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/Persistence/Tests/TransformationProcessor/_fixtures/transformations/latin.tr'),
                6 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/Persistence/Tests/TransformationProcessor/_fixtures/transformations/search.tr'),
            ),
            'ezpublish.api.storage_engine.transformation_processor.class' => 'eZ\\Publish\\Core\\Persistence\\TransformationProcessor\\PreprocessedBased',
            'ezpublish.api.storage_engine.preprocessed_transformation_rules.resources' => array(
                0 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/Persistence/Tests/TransformationProcessor/_fixtures/transformations/ascii.tr.result'),
                1 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/Persistence/Tests/TransformationProcessor/_fixtures/transformations/basic.tr.result'),
                2 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/Persistence/Tests/TransformationProcessor/_fixtures/transformations/cyrillic.tr.result'),
                3 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/Persistence/Tests/TransformationProcessor/_fixtures/transformations/greek.tr.result'),
                4 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/Persistence/Tests/TransformationProcessor/_fixtures/transformations/hebrew.tr.result'),
                5 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/Persistence/Tests/TransformationProcessor/_fixtures/transformations/latin.tr.result'),
                6 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/Persistence/Tests/TransformationProcessor/_fixtures/transformations/search.tr.result'),
            ),
            'ezpublish.cache_pool.class' => 'Stash\\Pool',
            'ezpublish.cache_pool.spi.cache.decorator.class' => 'eZ\\Publish\\Core\\Persistence\\Cache\\CacheServiceDecorator',
            'ezpublish.spi.persistence.cache.class' => 'eZ\\Publish\\Core\\Persistence\\Cache\\Handler',
            'ezpublish.spi.persistence.cache.abstracthandler.class' => 'eZ\\Publish\\Core\\Persistence\\Cache\\AbstractHandler',
            'ezpublish.spi.persistence.cache.sectionhandler.class' => 'eZ\\Publish\\Core\\Persistence\\Cache\\SectionHandler',
            'ezpublish.spi.persistence.cache.locationhandler.class' => 'eZ\\Publish\\Core\\Persistence\\Cache\\LocationHandler',
            'ezpublish.spi.persistence.cache.contenthandler.class' => 'eZ\\Publish\\Core\\Persistence\\Cache\\ContentHandler',
            'ezpublish.spi.persistence.cache.contentlanguagehandler.class' => 'eZ\\Publish\\Core\\Persistence\\Cache\\ContentLanguageHandler',
            'ezpublish.spi.persistence.cache.contenttypehandler.class' => 'eZ\\Publish\\Core\\Persistence\\Cache\\ContentTypeHandler',
            'ezpublish.spi.persistence.cache.userhandler.class' => 'eZ\\Publish\\Core\\Persistence\\Cache\\UserHandler',
            'ezpublish.spi.persistence.cache.searchhandler.class' => 'eZ\\Publish\\Core\\Persistence\\Cache\\SearchHandler',
            'ezpublish.spi.persistence.cache.transactionhandler.class' => 'eZ\\Publish\\Core\\Persistence\\Cache\\TransactionHandler',
            'ezpublish.spi.persistence.cache.trashhandler.class' => 'eZ\\Publish\\Core\\Persistence\\Cache\\TrashHandler',
            'ezpublish.spi.persistence.cache.locationsearchhandler.class' => 'eZ\\Publish\\Core\\Persistence\\Cache\\LocationSearchHandler',
            'ezpublish.spi.persistence.cache.urlaliashandler.class' => 'eZ\\Publish\\Core\\Persistence\\Cache\\UrlAliasHandler',
            'ezpublish.spi.persistence.cache.objectstatehandler.class' => 'eZ\\Publish\\Core\\Persistence\\Cache\\ObjectStateHandler',
            'ezpublish.spi.persistence.cache.persistencelogger.class' => 'eZ\\Publish\\Core\\Persistence\\Cache\\PersistenceLogger',
            'ezpublish.spi.persistence.cache.persistencelogger.enablecalllogging' => true,
            'ezpublish.spi.persistence.legacy.content.handler.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Handler',
            'ezpublish.persistence.legacy.content.query_builder.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Gateway\\DoctrineDatabase\\QueryBuilder',
            'ezpublish.persistence.legacy.content.gateway.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Gateway\\DoctrineDatabase',
            'ezpublish.persistence.legacy.content.gateway.exception_conversion.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Gateway\\ExceptionConversion',
            'ezpublish.persistence.legacy.content.mapper.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Mapper',
            'ezpublish.persistence.legacy.field_handler.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldHandler',
            'ezpublish.persistence.legacy.tree_handler.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\TreeHandler',
            'ezpublish.spi.persistence.legacy.content_type.handler.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Type\\Handler',
            'ezpublish.spi.persistence.legacy.content_type.handler.caching.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Type\\MemoryCachingHandler',
            'ezpublish.persistence.legacy.content_type.gateway.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Type\\Gateway\\DoctrineDatabase',
            'ezpublish.persistence.legacy.content_type.gateway.exception_conversion.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Type\\Gateway\\ExceptionConversion',
            'ezpublish.persistence.legacy.content_type.mapper.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Type\\Mapper',
            'ezpublish.persistence.legacy.content_type.update_handler.base.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Type\\Update\\Handler',
            'ezpublish.persistence.legacy.content_type.update_handler.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Type\\Update\\Handler\\DoctrineDatabase',
            'ezpublish.persistence.legacy.content_type.update_handler.deferred.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Type\\Update\\Handler\\DeferredLegacy',
            'ezpublish.persistence.legacy.content_type.content_updater.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Type\\ContentUpdater',
            'ezpublish.persistence.legacy.external_storage_handler.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\StorageHandler',
            'ezpublish.fieldtype.ezbinaryfile.storage_gateway.class' => 'eZ\\Publish\\Core\\FieldType\\BinaryFile\\BinaryFileStorage\\Gateway\\LegacyStorage',
            'ezpublish.fieldtype.ezgmaplocation.storage_gateway.class' => 'eZ\\Publish\\Core\\FieldType\\MapLocation\\MapLocationStorage\\Gateway\\LegacyStorage',
            'ezpublish.fieldtype.ezimage.storage_gateway.class' => 'eZ\\Publish\\Core\\FieldType\\Image\\ImageStorage\\Gateway\\LegacyStorage',
            'ezpublish.fieldtype.ezkeyword.storage_gateway.class' => 'eZ\\Publish\\Core\\FieldType\\Keyword\\KeywordStorage\\Gateway\\LegacyStorage',
            'ezpublish.fieldtype.ezmedia.storage_gateway.class' => 'eZ\\Publish\\Core\\FieldType\\Media\\MediaStorage\\Gateway\\LegacyStorage',
            'ezpublish.fieldtype.ezrichtext.storage_gateway.class' => 'eZ\\Publish\\Core\\FieldType\\RichText\\RichTextStorage\\Gateway\\LegacyStorage',
            'ezpublish.fieldtype.ezurl.storage_gateway.class' => 'eZ\\Publish\\Core\\FieldType\\Url\\UrlStorage\\Gateway\\LegacyStorage',
            'ezpublish.fieldtype.ezuser.storage_gateway.class' => 'eZ\\Publish\\Core\\FieldType\\User\\UserStorage\\Gateway\\LegacyStorage',
            'ezpublish.fieldtype.ezpage.storage_gateway.class' => 'eZ\\Publish\\Core\\FieldType\\Page\\PageStorage\\Gateway\\LegacyStorage',
            'ezpublish.persistence.legacy.field_value_converter.registry.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\ConverterRegistry',
            'ezpublish.fieldtype.ezauthor.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\AuthorConverter',
            'ezpublish.fieldtype.ezbinaryfile.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\BinaryFileConverter',
            'ezpublish.fieldtype.ezboolean.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\CheckboxConverter',
            'ezpublish.fieldtype.ezcountry.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\CountryConverter',
            'ezpublish.fieldtype.ezdatetime.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\DateAndTimeConverter',
            'ezpublish.fieldtype.ezdate.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\DateConverter',
            'ezpublish.fieldtype.eztime.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\TimeConverter',
            'ezpublish.fieldtype.ezemail.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\EmailAddressConverter',
            'ezpublish.fieldtype.ezfloat.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\FloatConverter',
            'ezpublish.fieldtype.ezgmaplocation.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\MapLocationConverter',
            'ezpublish.fieldtype.ezinteger.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\IntegerConverter',
            'ezpublish.fieldtype.ezimage.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\ImageConverter',
            'ezpublish.fieldtype.ezisbn.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\ISBNConverter',
            'ezpublish.fieldtype.ezkeyword.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\KeywordConverter',
            'ezpublish.fieldtype.ezmedia.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\MediaConverter',
            'ezpublish.fieldtype.ezobjectrelation.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\RelationConverter',
            'ezpublish.fieldtype.ezobjectrelationlist.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\RelationListConverter',
            'ezpublish.fieldtype.ezselection.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\SelectionConverter',
            'ezpublish.fieldtype.ezstring.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\TextLineConverter',
            'ezpublish.fieldtype.eztext.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\TextBlockConverter',
            'ezpublish.fieldtype.ezrichtext.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\RichTextConverter',
            'ezpublish.fieldtype.ezsrrating.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\RatingConverter',
            'ezpublish.fieldtype.ezurl.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\UrlConverter',
            'ezpublish.fieldtype.ezuser.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\NullConverter',
            'ezpublish.fieldtype.ezpage.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\PageConverter',
            'ezpublish.fieldtype.eznull.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\FieldValue\\Converter\\NullConverter',
            'ezpublish.spi.persistence.legacy.language.handler.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Language\\Handler',
            'ezpublish.spi.persistence.legacy.language.handler.caching.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Language\\CachingHandler',
            'ezpublish.persistence.legacy.language.cache.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Language\\Cache',
            'ezpublish.persistence.legacy.language.mapper.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Language\\Mapper',
            'ezpublish.persistence.legacy.language.gateway.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Language\\Gateway\\DoctrineDatabase',
            'ezpublish.persistence.legacy.language.gateway.exception_conversion.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Language\\Gateway\\ExceptionConversion',
            'ezpublish.persistence.legacy.language.mask_generator.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Language\\MaskGenerator',
            'ezpublish.spi.persistence.legacy.location.handler.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Location\\Handler',
            'ezpublish.persistence.legacy.location.gateway.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Location\\Gateway\\DoctrineDatabase',
            'ezpublish.persistence.legacy.location.gateway.exception_conversion.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Location\\Gateway\\ExceptionConversion',
            'ezpublish.persistence.legacy.location.mapper.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Location\\Mapper',
            'ezpublish.spi.persistence.legacy.object_state.handler.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\ObjectState\\Handler',
            'ezpublish.persistence.legacy.object_state.mapper.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\ObjectState\\Mapper',
            'ezpublish.persistence.legacy.object_state.gateway.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\ObjectState\\Gateway\\DoctrineDatabase',
            'ezpublish.persistence.legacy.object_state.gateway.exception_conversion.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\ObjectState\\Gateway\\ExceptionConversion',
            'ezpublish.spi.persistence.legacy.section.handler.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Section\\Handler',
            'ezpublish.persistence.legacy.section.gateway.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Section\\Gateway\\DoctrineDatabase',
            'ezpublish.persistence.legacy.section.gateway.exception_conversion.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Section\\Gateway\\ExceptionConversion',
            'ezpublish.spi.persistence.legacy.trash.handler.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Location\\Trash\\Handler',
            'ezpublish.spi.persistence.legacy.url_alias.handler.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\UrlAlias\\Handler',
            'ezpublish.persistence.legacy.url_alias.mapper.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\UrlAlias\\Mapper',
            'ezpublish.persistence.legacy.url_alias.gateway.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\UrlAlias\\Gateway\\DoctrineDatabase',
            'ezpublish.persistence.legacy.url_alias.gateway.exception_conversion.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\UrlAlias\\Gateway\\ExceptionConversion',
            'ezpublish.spi.persistence.legacy.url_wildcard.handler.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\UrlWildcard\\Handler',
            'ezpublish.persistence.legacy.url_wildcard.mapper.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\UrlWildcard\\Mapper',
            'ezpublish.persistence.legacy.url_wildcard.gateway.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\UrlWildcard\\Gateway\\DoctrineDatabase',
            'ezpublish.persistence.legacy.url_wildcard.gateway.exception_conversion.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\UrlWildcard\\Gateway\\ExceptionConversion',
            'ezpublish.spi.persistence.legacy.user.handler.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\User\\Handler',
            'ezpublish.persistence.legacy.user.mapper.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\User\\Mapper',
            'ezpublish.persistence.legacy.user.gateway.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\User\\Gateway\\DoctrineDatabase',
            'ezpublish.persistence.legacy.user.gateway.exception_conversion.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\User\\Gateway\\ExceptionConversion',
            'ezpublish.persistence.legacy.role.gateway.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\User\\Role\\Gateway\\DoctrineDatabase',
            'ezpublish.persistence.legacy.role.gateway.exception_conversion.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\User\\Role\\Gateway\\ExceptionConversion',
            'ezpublish.persistence.legacy.role.limitation.handler.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\User\\Role\\LimitationHandler',
            'ezpublish.persistence.legacy.role.limitation.handler.object_state.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\User\\Role\\LimitationHandler\\ObjectStateHandler',
            'ezpublish.persistence.legacy.role.limitation.converter.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\User\\Role\\LimitationConverter',
            'ezpublish.spi.search.legacy.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Handler',
            'ezpublish.spi.persistence.legacy.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\Handler',
            'ezpublish.api.storage_engine.legacy.dbhandler.class' => 'eZ\\Publish\\Core\\Persistence\\Doctrine\\ConnectionHandler',
            'ezpublish.persistence.connection.class' => 'Doctrine\\DBAL\\Driver\\Connection',
            'ezpublish.spi.persistence.legacy.transactionhandler.class' => 'eZ\\Publish\\Core\\Persistence\\Legacy\\TransactionHandler',
            'ezpublish.spi.persistence.content_handler.class' => 'eZ\\Publish\\SPI\\Persistence\\Content\\Handler',
            'ezpublish.spi.persistence.content_type_handler.class' => 'eZ\\Publish\\SPI\\Persistence\\Content\\Type\\Handler',
            'ezpublish.spi.persistence.language_handler.class' => 'eZ\\Publish\\SPI\\Persistence\\Content\\Language\\Handler',
            'ezpublish.spi.persistence.location_handler.class' => 'eZ\\Publish\\SPI\\Persistence\\Content\\Location\\Handler',
            'ezpublish.spi.persistence.object_state_handler.class' => 'eZ\\Publish\\SPI\\Persistence\\Content\\ObjectState\\Handler',
            'ezpublish.spi.persistence.section_handler.class' => 'eZ\\Publish\\SPI\\Persistence\\Content\\Section\\Handler',
            'ezpublish.spi.persistence.trash_handler.class' => 'eZ\\Publish\\SPI\\Persistence\\Content\\Trash\\Handler',
            'ezpublish.spi.persistence.url_alias_handler.class' => 'eZ\\Publish\\SPI\\Persistence\\Content\\UrlAlias\\Handler',
            'ezpublish.spi.persistence.url_wildcard_handler.class' => 'eZ\\Publish\\SPI\\Persistence\\Content\\UrlWildcard\\Handler',
            'ezpublish.spi.persistence.user_handler.class' => 'eZ\\Publish\\SPI\\Persistence\\User\\Handler',
            'ezpublish.search.slot.class' => 'eZ\\Publish\\Core\\Search\\Common\\Slot',
            'ezpublish.search.slot.publish_version.class' => 'eZ\\Publish\\Core\\Search\\Common\\Slot\\PublishVersion',
            'ezpublish.search.slot.copy_content.class' => 'eZ\\Publish\\Core\\Search\\Common\\Slot\\CopyContent',
            'ezpublish.search.slot.delete_content.class' => 'eZ\\Publish\\Core\\Search\\Common\\Slot\\DeleteContent',
            'ezpublish.search.slot.delete_version.class' => 'eZ\\Publish\\Core\\Search\\Common\\Slot\\DeleteVersion',
            'ezpublish.search.slot.create_location.class' => 'eZ\\Publish\\Core\\Search\\Common\\Slot\\CreateLocation',
            'ezpublish.search.slot.delete_location.class' => 'eZ\\Publish\\Core\\Search\\Common\\Slot\\DeleteLocation',
            'ezpublish.search.slot.create_user.class' => 'eZ\\Publish\\Core\\Search\\Common\\Slot\\CreateUser',
            'ezpublish.search.slot.create_user_group.class' => 'eZ\\Publish\\Core\\Search\\Common\\Slot\\CreateUserGroup',
            'ezpublish.search.slot.move_user_group.class' => 'eZ\\Publish\\Core\\Search\\Common\\Slot\\MoveUserGroup',
            'ezpublish.search.slot.copy_subtree.class' => 'eZ\\Publish\\Core\\Search\\Common\\Slot\\CopySubtree',
            'ezpublish.search.slot.move_subtree.class' => 'eZ\\Publish\\Core\\Search\\Common\\Slot\\MoveSubtree',
            'ezpublish.search.slot.trash.class' => 'eZ\\Publish\\Core\\Search\\Common\\Slot\\Trash',
            'ezpublish.search.slot.recover.class' => 'eZ\\Publish\\Core\\Search\\Common\\Slot\\Recover',
            'ezpublish.search.slot.hide_location.class' => 'eZ\\Publish\\Core\\Search\\Common\\Slot\\HideLocation',
            'ezpublish.search.slot.unhide_location.class' => 'eZ\\Publish\\Core\\Search\\Common\\Slot\\UnhideLocation',
            'ezpublish.search.slot.set_content_state.class' => 'eZ\\Publish\\Core\\Search\\Common\\Slot\\SetContentState',
            'ezpublish.search.common.field_registry.class' => 'eZ\\Publish\\Core\\Search\\Common\\FieldRegistry',
            'ezpublish.search.common.field_name_resolver.class' => 'eZ\\Publish\\Core\\Search\\Common\\FieldNameResolver',
            'ezpublish.search.common.field_name_generator.class' => 'eZ\\Publish\\Core\\Search\\Common\\FieldNameGenerator',
            'ezpublish.search.common.field_name_generator.map' => array(
                'ez_integer' => 'i',
                'ez_minteger' => 'mi',
                'ez_id' => 'id',
                'ez_mid' => 'mid',
                'ez_string' => 's',
                'ez_mstring' => 'ms',
                'ez_long' => 'l',
                'ez_text' => 't',
                'ez_html' => 'h',
                'ez_boolean' => 'b',
                'ez_mboolean' => 'mb',
                'ez_float' => 'f',
                'ez_double' => 'd',
                'ez_date' => 'dt',
                'ez_point' => 'p',
                'ez_currency' => 'c',
                'ez_geolocation' => 'gl',
                'ez_document' => 'doc',
                'ez_fulltext' => 'fulltext',
            ),
            'ezpublish.utils.deprecation_warner.class' => 'eZ\\Publish\\Core\\Base\\Utils\\DeprecationWarner',
            'ezpublish.core.io.service.class' => 'eZ\\Publish\\Core\\IO\\IOService',
            'ezpublish.core.io.tolerant_service.class' => 'eZ\\Publish\\Core\\IO\\TolerantIOService',
            'ezpublish.core.io.metadatahandler.imagesize.class' => 'eZ\\Publish\\Core\\IO\\MetadataHandler\\ImageSize',
            'ezpublish.core.io.mimetypedetector.fileinfo.class' => 'eZ\\Publish\\Core\\IO\\MimeTypeDetector\\FileInfo',
            'ezpublish.core.io.binarydata_handler.flysystem.class' => 'eZ\\Publish\\Core\\IO\\IOBinarydataHandler\\Flysystem',
            'ezpublish.core.io.metadata_handler.flysystem.class' => 'eZ\\Publish\\Core\\IO\\IOMetadataHandler\\Flysystem',
            'ezpublish.core.io.url_decorator.prefix.class' => 'eZ\\Publish\\Core\\IO\\UrlDecorator\\Prefix',
            'ezpublish.core.io.url_decorator.absolute_prefix.class' => 'eZ\\Publish\\Core\\IO\\UrlDecorator\\AbsolutePrefix',
            'ezpublish.core.io.image_fieldtype.legacy_url_redecorator.class' => 'eZ\\Publish\\Core\\IO\\UrlRedecorator',
            'ezpublish.kernel.root_dir' => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel'),
            'ezpublish.api.repository.lazy_factory.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\ApiLoader\\LazyRepositoryFactory',
            'ezpublish.api.storage_engine.factory.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\ApiLoader\\StorageEngineFactory',
            'ezpublish.api.search_engine.factory.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\ApiLoader\\SearchEngineFactory',
            'ezpublish.signalslot.event_converter_slot.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\SignalSlot\\Slot\\SymfonyEventConverterSlot',
            'ezpublish.api.storage_engine.default' => 'legacy',
            'ezpublish.api.search_engine.default' => 'legacy',
            'ezpublish.api.content.class' => 'eZ\\Publish\\Core\\Repository\\Values\\Content\\Content',
            'ezpublish.api.location.class' => 'eZ\\Publish\\Core\\Repository\\Values\\Content\\Location',
            'ezpublish.api.version.class' => 'eZ\\Publish\\Core\\Repository\\Values\\Content\\VersionInfo',
            'ezpublish.fieldtype.parameterproviderregistry.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\FieldType\\View\\ParameterProviderRegistry',
            'ezpublish.fieldtype.ezpage.parameterprovider.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\FieldType\\Page\\ParameterProvider',
            'ezpublish.fieldtype.locale.parameterprovider.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\FieldType\\View\\ParameterProvider\\LocaleParameterProvider',
            'ezpublish.fieldtype.ezpage.pageservice.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\FieldType\\Page\\PageService',
            'ezpublish.fieldtype.ezpage.pageservice.factory.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\FieldType\\Page\\PageServiceFactory',
            'ezpublish.fieldtype.ezpage.block.class' => 'eZ\\Publish\\Core\\FieldType\\Page\\Parts\\Block',
            'ezpublish.fieldtype.ezpage.zone.class' => 'eZ\\Publish\\Core\\FieldType\\Page\\Parts\\Zone',
            'ezpublish.fieldtype.ezpage.hashconverter.class' => 'eZ\\Publish\\Core\\FieldType\\Page\\HashConverter',
            'ezpublish.fieldtype.ezrichtext.normalizer.document_type_definition.class' => 'eZ\\Publish\\Core\\FieldType\\RichText\\Normalizer\\DocumentTypeDefinition',
            'ezpublish.fieldtype.ezrichtext.converter.xslt.class' => 'eZ\\Publish\\Core\\FieldType\\RichText\\Converter\\Xslt',
            'ezpublish.fieldtype.ezrichtext.converter.aggregate.class' => 'eZ\\Publish\\Core\\FieldType\\RichText\\Converter\\Aggregate',
            'ezpublish.fieldtype.ezrichtext.converter.output.html5.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\FieldType\\RichText\\Converter\\Html5',
            'ezpublish.fieldtype.ezrichtext.converter.edit.html5.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\FieldType\\RichText\\Converter\\Html5Edit',
            'ezpublish.fieldtype.ezrichtext.converter.input.html5.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\FieldType\\RichText\\Converter\\Html5Input',
            'ezpublish.fieldtype.ezrichtext.converter.link.class' => 'eZ\\Publish\\Core\\FieldType\\RichText\\Converter\\Link',
            'ezpublish.fieldtype.ezrichtext.converter.embed.class' => 'eZ\\Publish\\Core\\FieldType\\RichText\\Converter\\Render\\Embed',
            'ezpublish.fieldtype.ezrichtext.converter.template.class' => 'eZ\\Publish\\Core\\FieldType\\RichText\\Converter\\Render\\Template',
            'ezpublish.fieldtype.ezrichtext.embed_renderer.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\FieldType\\RichText\\EmbedRenderer',
            'ezpublish.fieldtype.ezrichtext.renderer.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\FieldType\\RichText\\Renderer',
            'ezpublish.fieldtype.ezrichtext.tag.namespace' => 'fieldtypes.ezrichtext.tags',
            'ezpublish.fieldtype.ezrichtext.embed.namespace' => 'fieldtypes.ezrichtext.embed',
            'ezpublish.fieldtype.ezrichtext.converter.dispatcher.class' => 'eZ\\Publish\\Core\\FieldType\\RichText\\ConverterDispatcher',
            'ezpublish.fieldtype.ezrichtext.validator.xml.class' => 'eZ\\Publish\\Core\\FieldType\\RichText\\Validator',
            'ezpublish.fieldtype.ezrichtext.validator.dispatcher.class' => 'eZ\\Publish\\Core\\FieldType\\RichText\\ValidatorDispatcher',
            'ezpublish.fieldtype.ezrichtext.resources' => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/FieldType/RichText/Resources'),
            'ezpublish.fieldtype.ezrichtext.converter.input.xhtml5.resources' => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/FieldType/RichText/Resources/stylesheets/xhtml5/edit/docbook.xsl'),
            'ezpublish.fieldtype.ezrichtext.converter.edit.xhtml5.resources' => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/FieldType/RichText/Resources/stylesheets/docbook/xhtml5/edit/xhtml5.xsl'),
            'ezpublish.fieldtype.ezrichtext.converter.output.xhtml5.resources' => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/FieldType/RichText/Resources/stylesheets/docbook/xhtml5/output/xhtml5.xsl'),
            'ezpublish.fieldtype.ezrichtext.converter.output.xhtml5.fragment.resources' => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/FieldType/RichText/Resources/stylesheets/xhtml5/output/fragment.xsl'),
            'ezpublish.fieldtype.ezrichtext.validator.docbook.resources' => array(
                0 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/FieldType/RichText/Resources/schemas/docbook/ezpublish.rng'),
                1 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/FieldType/RichText/Resources/schemas/docbook/docbook.iso.sch.xsl'),
            ),
            'ezpublish.fieldtype.ezrichtext.validator.output.ezxhtml5.resources' => array(
                0 => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/FieldType/RichText/Resources/schemas/ezxhtml5/output/ezxhtml5.xsd'),
            ),
            'ezpublish.fieldtype.ezimage.pathgenerator.class' => 'eZ\\Publish\\Core\\FieldType\\Image\\PathGenerator\\LegacyPathGenerator',
            'ezpublish.fieldtype.ezimage.io_service.options_provider.class' => 'eZ\\Publish\\Core\\FieldType\\Image\\IO\\OptionsProvider',
            'ezpublish.fieldtype.ezimage.io_legacy.class' => 'eZ\\Publish\\Core\\FieldType\\Image\\IO\\Legacy',
            'ezpublish.fieldtype.ezbinaryfile.pathgenerator.class' => 'eZ\\Publish\\Core\\FieldType\\BinaryBase\\PathGenerator\\LegacyPathGenerator',
            'ezpublish.fieldtype.ezbinarybase.downloadurlgenerator.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\FieldType\\BinaryBase\\ContentDownloadUrlGenerator',
            'ezpublish.persistence.connection.factory.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\ApiLoader\\StorageConnectionFactory',
            'ezpublish.api.repository_configuration_provider.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\ApiLoader\\RepositoryConfigurationProvider',
            'twig.extension.intl.class' => 'Twig_Extensions_Extension_Intl',
            'ezpublish.twig.extension.content.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Templating\\Twig\\Extension\\ContentExtension',
            'ezpublish.view_manager.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\View\\Manager',
            'ezpublish.view_provider.configured.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\View\\Provider\\Configured',
            'ezpublish.view.matcher_factory.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Matcher\\ServiceAwareMatcherFactory',
            'ezpublish.content_view.matcher_factory.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Matcher\\ContentMatcherFactory',
            'ezpublish.location_view.matcher_factory.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Matcher\\LocationMatcherFactory',
            'ezpublish.block_view.matcher_factory.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Matcher\\BlockMatcherFactory',
            'ezpublish.content_view.viewbase_layout' => 'EzPublishCoreBundle::viewbase_layout.html.twig',
            'ezpublish.content_view.content_block_name' => 'content',
            'ezpublish.view.custom_location_controller_checker.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\CustomLocationControllerChecker',
            'ezpublish.templating.global_helper.core.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Templating\\GlobalHelper',
            'ezpublish.twig.extension.core.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Templating\\Twig\\Extension\\CoreExtension',
            'ezpublish.twig.extension.filesize.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Templating\\Twig\\Extension\\FileSizeExtension',
            'ezpublish.twig.extension.filesize.suffixes' => array(
                0 => 'B',
                1 => 'kB',
                2 => 'MB',
                3 => 'GB',
                4 => 'TB',
                5 => 'PB',
                6 => 'EB',
            ),
            'ezpublish.templating.extension.routing.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Templating\\Twig\\Extension\\RoutingExtension',
            'ezpublish.templating.field_block_renderer.twig.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Templating\\Twig\\FieldBlockRenderer',
            'ezpublish.twig.extension.field_rendering.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Templating\\Twig\\Extension\\FieldRenderingExtension',
            'ezpublish.twig.extension.image.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Templating\\Twig\\Extension\\ImageExtension',
            'ezpublish.twig.extension.rich_text.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Templating\\Twig\\Extension\\RichTextExtension',
            'ezpublish.view.cache_response_listener.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\CacheViewResponseListener',
            'ezpublish.view.block_cache_response_listener.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\BlockCacheResponseListener',
            'ezpublish.view.view_parameters.injector.viewbase_layout.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\ParametersInjector\\ViewbaseLayout',
            'ezpublish.view.view_parameters.injector.value_objects_ids.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\ParametersInjector\\ValueObjectsIds',
            'ezpublish.view.view_parameters.injector.no_layout.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\ParametersInjector\\NoLayout',
            'ezpublish.view.view_parameters.injector.embed_object_parameters.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\ParametersInjector\\EmbedObjectParameters',
            'ezpublish.view.view_parameters.injector.custom_parameters.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\ParametersInjector\\CustomParameters',
            'ezpublish.view.view_parameters.injector.block.valid_items.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\ParametersInjector\\Block\\ValidItems',
            'ezpublish.view.view_parameters.injector.block.valid_content_info_items.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\BlockValidContentInfoItemsListener',
            'ezpublish.view.view_parameters.injector.dispatcher.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\ParametersInjector\\EventDispatcherInjector',
            'ezpublish.view.renderer_listener.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\ViewRendererListener',
            'ezpublish.view.template_renderer.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\Renderer\\TemplateRenderer',
            'ezpublish.view.builder_parameter_collector.request_attributes.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\Builder\\ParametersFilter\\RequestAttributes',
            'ezpublish.view_builder.block.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\Builder\\BlockViewBuilder',
            'ezpublish.view_builder.content.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\Builder\\ContentViewBuilder',
            'ezpublish.view_builder.registry.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\Builder\\Registry\\ControllerMatch',
            'ezpublish.view.configurator.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\Configurator\\ViewProvider',
            'ezpublish.view_provider.registry.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\View\\Provider\\Registry',
            'ezpublish.session_set_dynamic_name_listener.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\SessionSetDynamicNameListener',
            'ezpublish.session_init_by_post_listener.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\SessionInitByPostListener',
            'ezpublish.session.attribute_bag.storage_key' => '_ezpublish',
            'ezpublish.cache_pool.factory.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\ApiLoader\\CacheFactory',
            'ezpublish.http_cache.purger.instant.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Cache\\Http\\InstantCachePurger',
            'ezpublish.http_cache.purge_client.local.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\LocalPurgeClient',
            'ezpublish.http_cache.store.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\LocationAwareStore',
            'ezpublish.http_cache.store.root' => (__DIR__.'/http_cache'),
            'ezpublish.http_cache.cache_manager.class' => 'FOS\\HttpCacheBundle\\CacheManager',
            'ezpublish.http_cache.proxy_client.varnish.factory.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Cache\\Http\\VarnishProxyClientFactory',
            'ezpublish.http_cache.purge_client.fos.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\FOSPurgeClient',
            'ezpublish.http_cache.event_dispatcher.class' => 'Symfony\\Component\\EventDispatcher\\ContainerAwareEventDispatcher',
            'ezpublish.http_cache.content.base_locations_listener.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\EventListener\\AssignedLocationsListener',
            'ezpublish.http_cache.content.parent_locations_listener.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\EventListener\\ParentLocationsListener',
            'ezpublish.cache_clear.content.related_locations_listener.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Cache\\Http\\EventListener\\RelatedLocationsListener',
            'ezpublish.locale.conversion_map' => array(
                'ara-SA' => 'ar_SA',
                'cat-ES' => 'ca_ES',
                'chi-CN' => 'zh_CN',
                'chi-HK' => 'zh_HK',
                'chi-TW' => 'zh_TW',
                'cro-HR' => 'hr_HR',
                'cze-CZ' => 'cs_CZ',
                'dan-DK' => 'da_DK',
                'dut-NL' => 'nl_NL',
                'ell-GR' => 'el_GR',
                'eng-AU' => 'en_AU',
                'eng-CA' => 'en_CA',
                'eng-GB' => 'en_GB',
                'eng-NZ' => 'en_NZ',
                'eng-US' => 'en_US',
                'epo-EO' => 'eo',
                'esl-ES' => 'es_ES',
                'esl-MX' => 'es_MX',
                'fin-FI' => 'fi_FI',
                'fre-BE' => 'fr_BE',
                'fre-CA' => 'fr_CA',
                'fre-FR' => 'fr_FR',
                'ger-DE' => 'de_DE',
                'heb-IL' => 'he_IL',
                'hin-IN' => 'hi_IN',
                'hun-HU' => 'hu_HU',
                'ind-ID' => 'id_ID',
                'ita-IT' => 'it_IT',
                'jpn-JP' => 'ja_JP',
                'kor-KR' => 'ko_KR',
                'nno-NO' => 'nn_NO',
                'nor-NO' => 'no_NO',
                'pol-PL' => 'pl_PL',
                'por-BR' => 'pt_BR',
                'por-MZ' => 'pt_MZ',
                'por-PT' => 'pt_PT',
                'rus-RU' => 'ru_RI',
                'ser-SR' => 'sr_RS',
                'slk-SK' => 'sk_SK',
                'srp-RS' => 'sr_RS',
                'swe-SE' => 'sv_SE',
                'tur-TR' => 'tr_TR',
                'ukr-UA' => 'uk_UA',
            ),
            'ezpublish.locale.converter.class' => 'eZ\\Publish\\Core\\MVC\\Symfony\\Locale\\LocaleConverter',
            'ezpublish.translation_helper.class' => 'eZ\\Publish\\Core\\Helper\\TranslationHelper',
            'ezpublish.field_helper.class' => 'eZ\\Publish\\Core\\Helper\\FieldHelper',
            'ezpublish.content_preview_helper.class' => 'eZ\\Publish\\Core\\Helper\\ContentPreviewHelper',
            'ezpublish.config_scope_listener.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\ConfigScopeListener',
            'ezpublish.dynamic_settings_listener.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\EventListener\\DynamicSettingsListener',
            'ezpublish.content_preview.location_provider.class' => 'eZ\\Publish\\Core\\Helper\\PreviewLocationProvider',
            'ezpublish.config_resolver.resettable_services' => array(
                0 => 'ezpublish.core.io.flysystem.default_adapter',
                1 => 'ezpublish.view.cache_response_listener',
                2 => 'ezpublish.image_alias.variation_purger.legacy_storage_image_file.image_file_list',
                3 => 'ezpublish.core.io.metadata_handler',
                4 => 'ezpublish.core.io.binarydata_handler',
                5 => 'ezsystems.platformui.application_config.provider.anonymous_user_id',
                6 => 'ezsystems.platformui.loader.combo_loader',
                7 => 'ezpublish.core.io.service',
                8 => 'ezpublish.core.io.flysystem.default_filesystem',
                9 => 'ezpublish.image_alias.variation_purger.legacy_storage_image_file',
                10 => 'ezsystems.platformui.controller',
            ),
            'ezpublish.config_resolver.updateable_services' => array(
                'ezpublish.core.io.prefix_url_decorator' => array(
                    0 => array(
                        0 => 'setPrefix',
                        1 => 'service("ezpublish.config.resolver").getParameter("io.url_prefix", null, null)',
                    ),
                ),
                'ezpublish.core.io.image_fieldtype.legacy_url_decorator' => array(
                    0 => array(
                        0 => 'setPrefix',
                        1 => 'service("ezpublish.config.resolver").getParameter("io.legacy_url_prefix", null, null)',
                    ),
                ),
                'ezpublish.fieldtype.ezimage.io_service.options_provider' => array(
                    0 => array(
                        0 => 'setVarDir',
                        1 => 'service("ezpublish.config.resolver").getParameter("var_dir", null, null)',
                    ),
                    1 => array(
                        0 => 'setStorageDir',
                        1 => 'service("ezpublish.config.resolver").getParameter("storage_dir", null, null)',
                    ),
                    2 => array(
                        0 => 'setDraftImagesDir',
                        1 => 'service("ezpublish.config.resolver").getParameter("image.versioned_images_dir", null, null)',
                    ),
                    3 => array(
                        0 => 'setPublishedImagesDir',
                        1 => 'service("ezpublish.config.resolver").getParameter("image.published_images_dir", null, null)',
                    ),
                ),
                'ezpublish.fieldtype.ezimage.io_service.published' => array(
                    0 => array(
                        0 => 'setPrefix',
                        1 => 'service("ezpublish.config.resolver").getParameter("image.published_images_dir", null, null)',
                    ),
                ),
                'ezpublish.fieldtype.ezimage.io_service.draft' => array(
                    0 => array(
                        0 => 'setPrefix',
                        1 => 'service("ezpublish.config.resolver").getParameter("image.versioned_images_dir", null, null)',
                    ),
                ),
                'ezpublish.fieldtype.ezbinaryfile.io_service' => array(
                    0 => array(
                        0 => 'setPrefix',
                        1 => 'service("ezpublish.config.resolver").getParameter("binary_dir", null, null)',
                    ),
                ),
                'ezpublish.content_view.matcher_factory' => array(
                    0 => array(
                        0 => 'setMatchConfig',
                        1 => 'service("ezpublish.config.resolver").getParameter("content_view", null, null)',
                    ),
                ),
                'ezpublish.content_view.default_matcher_factory' => array(
                    0 => array(
                        0 => 'setMatchConfig',
                        1 => 'service("ezpublish.config.resolver").getParameter("content_view_defaults", null, null)',
                    ),
                ),
                'ezpublish.location_view.matcher_factory' => array(
                    0 => array(
                        0 => 'setMatchConfig',
                        1 => 'service("ezpublish.config.resolver").getParameter("location_view", null, null)',
                    ),
                ),
                'ezpublish.block_view.matcher_factory' => array(
                    0 => array(
                        0 => 'setMatchConfig',
                        1 => 'service("ezpublish.config.resolver").getParameter("block_view", null, null)',
                    ),
                ),
                'ezpublish.block_view.default_matcher_factory' => array(
                    0 => array(
                        0 => 'setMatchConfig',
                        1 => 'service("ezpublish.config.resolver").getParameter("block_view_defaults", null, null)',
                    ),
                ),
                'ezpublish.templating.field_block_renderer.twig' => array(
                    0 => array(
                        0 => 'setFieldViewResources',
                        1 => 'service("ezpublish.config.resolver").getParameter("field_templates", null, null)',
                    ),
                    1 => array(
                        0 => 'setFieldEditResources',
                        1 => 'service("ezpublish.config.resolver").getParameter("field_edit_templates", null, null)',
                    ),
                    2 => array(
                        0 => 'setFieldDefinitionViewResources',
                        1 => 'service("ezpublish.config.resolver").getParameter("fielddefinition_settings_templates", null, null)',
                    ),
                    3 => array(
                        0 => 'setFieldDefinitionEditResources',
                        1 => 'service("ezpublish.config.resolver").getParameter("fielddefinition_edit_templates", null, null)',
                    ),
                ),
                'ezpublish.view.block_cache_response_listener' => array(
                    0 => array(
                        0 => 'setEnableViewCache',
                        1 => 'service("ezpublish.config.resolver").getParameter("content.view_cache", null, null)',
                    ),
                ),
                'ezsystems.platformui.controller.content_type' => array(
                    0 => array(
                        0 => 'setPrioritizedLanguages',
                        1 => 'service("ezpublish.config.resolver").getParameter("languages", null, null)',
                    ),
                ),
            ),
            'ezpublish.image_alias.imagine.binary_loader.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\BinaryLoader',
            'ezpublish.image_alias.imagine.cache_resolver.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\IORepositoryResolver',
            'ezpublish.image_alias.imagine.alias_generator.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\AliasGenerator',
            'ezpublish.image_alias.imagine.alias_cleaner.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\AliasCleaner',
            'ezpublish.image_alias.imagine.filter.loader.scaledownonly.width_height.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\Filter\\Loader\\ScaleDownOnlyFilterLoader',
            'ezpublish.image_alias.imagine.filter.loader.scaledownonly.width.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\Filter\\Loader\\ScaleWidthDownOnlyFilterLoader',
            'ezpublish.image_alias.imagine.filter.loader.scaledownonly.height.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\Filter\\Loader\\ScaleHeightDownOnlyFilterLoader',
            'ezpublish.image_alias.imagine.filter.loader.scalewidth.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\Filter\\Loader\\ScaleWidthFilterLoader',
            'ezpublish.image_alias.imagine.filter.loader.scaleheight.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\Filter\\Loader\\ScaleHeightFilterLoader',
            'ezpublish.image_alias.imagine.filter.loader.scale.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\Filter\\Loader\\ScaleFilterLoader',
            'ezpublish.image_alias.imagine.filter.loader.scale_exact.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\Filter\\Loader\\ScaleExactFilterLoader',
            'ezpublish.image_alias.imagine.filter.loader.scale_percent.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\Filter\\Loader\\ScalePercentFilterLoader',
            'ezpublish.image_alias.imagine.filter.loader.crop.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\Filter\\Loader\\CropFilterLoader',
            'ezpublish.image_alias.imagine.filter.loader.border.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\Filter\\Loader\\BorderFilterLoader',
            'ezpublish.image_alias.imagine.filter.loader.reduce_noise.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\Filter\\Loader\\ReduceNoiseFilterLoader',
            'ezpublish.image_alias.imagine.filter.loader.grayscale.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\Filter\\Loader\\GrayscaleFilterLoader',
            'ezpublish.image_alias.imagine.filter.loader.swirl.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\Filter\\Loader\\SwirlFilterLoader',
            'ezpublish.image_alias.imagine.filter.unsupported.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\Filter\\UnsupportedFilter',
            'ezpublish.image_alias.imagine.filter.reduce_noise.imagick.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\Filter\\Imagick\\ReduceNoiseFilter',
            'ezpublish.image_alias.imagine.filter.reduce_noise.gmagick.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\Filter\\Gmagick\\ReduceNoiseFilter',
            'ezpublish.image_alias.imagine.filter.swirl.imagick.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\Filter\\Imagick\\SwirlFilter',
            'ezpublish.image_alias.imagine.filter.swirl.gmagick.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\Filter\\Gmagick\\SwirlFilter',
            'ezpublish.image_alias.variation_purger.legacy_storage_image_file.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\VariationPurger\\ImageFileVariationPurger',
            'ezpublish.image_alias.variation_purger.legacy_storage_image_file.image_file_list.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\VariationPurger\\LegacyStorageImageFileList',
            'ezpublish.image_alias.variation_purger.legacy_storage_image_file.image_file_row_reader.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\VariationPurger\\LegacyStorageImageFileRowReader',
            'ezpublish.image_alias.variation_purger.io.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\VariationPurger\\IOVariationPurger',
            'ezpubish.image_alias.variation_path_generator.original_directory.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\VariationPathGenerator\\OriginalDirectoryVariationPathGenerator',
            'ezpubish.image_alias.variation_path_generator.alias_directory.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Imagine\\VariationPathGenerator\\AliasDirectoryVariationPathGenerator',
            'ezsettings.site.content_view' => array(
                '_platformui_content_name' => array(
                    'content_name' => array(
                        'template' => 'EzSystemsRepositoryFormsBundle:content_name:content_name.html.twig',
                        'match' => array(

                        ),
                        'params' => array(

                        ),
                    ),
                ),
            ),
            'ezsettings.site.location_view' => array(

            ),
            'ezsettings.site.block_view' => array(

            ),
            'ezsettings.site.session' => array(
                'name' => 'eZSESSID{siteaccess_hash}',
            ),
            'ezsettings.site_group.field_templates' => array(

            ),
            'ezsettings.site.field_templates' => array(
                0 => array(
                    'template' => 'EzPublishCoreBundle::content_fields.html.twig',
                    'priority' => 0,
                ),
            ),
            'ezsettings.site_group.field_edit_templates' => array(

            ),
            'ezsettings.site.field_edit_templates' => array(

            ),
            'ezsettings.site_group.fielddefinition_settings_templates' => array(

            ),
            'ezsettings.site.fielddefinition_settings_templates' => array(
                0 => array(
                    'template' => 'EzPublishCoreBundle::fielddefinition_settings.html.twig',
                    'priority' => 0,
                ),
            ),
            'ezsettings.site_group.fielddefinition_edit_templates' => array(

            ),
            'ezsettings.site.fielddefinition_edit_templates' => array(
                0 => array(
                    'template' => 'EzSystemsRepositoryFormsBundle:ContentType:field_types.html.twig',
                    'priority' => 0,
                ),
            ),
            'ezsettings.site.image_variations' => array(
                'reference' => array(
                    'reference' => NULL,
                    'filters' => array(
                        'geometry/scaledownonly' => array(
                            0 => 600,
                            1 => 600,
                        ),
                    ),
                ),
                'small' => array(
                    'reference' => 'reference',
                    'filters' => array(
                        'geometry/scaledownonly' => array(
                            0 => 100,
                            1 => 100,
                        ),
                    ),
                ),
                'tiny' => array(
                    'reference' => 'reference',
                    'filters' => array(
                        'geometry/scaledownonly' => array(
                            0 => 30,
                            1 => 30,
                        ),
                    ),
                ),
                'medium' => array(
                    'reference' => 'reference',
                    'filters' => array(
                        'geometry/scaledownonly' => array(
                            0 => 200,
                            1 => 200,
                        ),
                    ),
                ),
                'large' => array(
                    'reference' => 'reference',
                    'filters' => array(
                        'geometry/scaledownonly' => array(
                            0 => 300,
                            1 => 300,
                        ),
                    ),
                ),
                'platformui_rawcontentview' => array(
                    'reference' => 'reference',
                    'filters' => array(
                        'geometry/scaleheightdownonly' => array(
                            0 => 250,
                        ),
                    ),
                    'post_processors' => array(

                    ),
                ),
                'platformui_editview' => array(
                    'reference' => 'reference',
                    'filters' => array(
                        'geometry/scalewidthdownonly' => array(
                            0 => 300,
                        ),
                    ),
                    'post_processors' => array(

                    ),
                ),
            ),
            'ezsettings.default.ezpage' => array(
                'layouts' => array(
                    'GlobalZoneLayout' => array(
                        'name' => 'Global zone layout',
                        'template' => 'globalzonelayout.tpl',
                    ),
                    '2ZonesLayout1' => array(
                        'name' => '2 zones (layout 1)',
                        'template' => '2zoneslayout1.tpl',
                    ),
                    '2ZonesLayout2' => array(
                        'name' => '2 zones (layout 2)',
                        'template' => '2zoneslayout2.tpl',
                    ),
                    '2ZonesLayout3' => array(
                        'name' => '2 zones (layout 3)',
                        'template' => '2zoneslayout3.tpl',
                    ),
                    '3ZonesLayout1' => array(
                        'name' => '3 zones (layout 1)',
                        'template' => '3zoneslayout1.tpl',
                    ),
                    '3ZonesLayout2' => array(
                        'name' => '3 zones (layout 2)',
                        'template' => '3zoneslayout2.tpl',
                    ),
                    'CallForActionLayout' => array(
                        'name' => 'Call For Action zone layout',
                        'template' => 'callforactionlayout.tpl',
                    ),
                ),
                'blocks' => array(
                    'DemoBlock' => array(
                        'name' => 'Demo Block',
                    ),
                    'Manual2Items' => array(
                        'name' => '2 items (Manual)',
                    ),
                    'Manual3Items' => array(
                        'name' => '3 items (Manual)',
                    ),
                    'Manual4Items' => array(
                        'name' => '4 items (Manual)',
                    ),
                    'Manual5Items' => array(
                        'name' => '5 items (Manual)',
                    ),
                    'Dynamic3Items' => array(
                        'name' => '3 items (Dynamic)',
                    ),
                    'Gallery' => array(
                        'name' => 'Gallery (Manual)',
                    ),
                    'Video' => array(
                        'name' => 'Video (Manual)',
                    ),
                    'ItemList' => array(
                        'name' => 'Item list',
                    ),
                    'MainStory' => array(
                        'name' => 'Main story (Manual)',
                    ),
                    'Banner' => array(
                        'name' => 'Banner',
                    ),
                    'TagCloud' => array(
                        'name' => 'Tag cloud',
                    ),
                    'Poll' => array(
                        'name' => 'Poll',
                    ),
                    'FlashRecorder' => array(
                        'name' => 'Flash Recorder',
                    ),
                    'FeedReader' => array(
                        'name' => 'Feed reader',
                    ),
                    'Keyword' => array(
                        'name' => 'Keyword',
                    ),
                    'GMap' => array(
                        'name' => 'Google Map',
                    ),
                    'OnlineUsers' => array(
                        'name' => 'Online Users',
                    ),
                    'MultimediaCarousel' => array(
                        'name' => 'Multimedia carousel',
                    ),
                    'Search' => array(
                        'name' => 'Search',
                    ),
                    'Ads' => array(
                        'name' => 'Advertisement',
                    ),
                    'LatestContent' => array(
                        'name' => 'Latest content',
                    ),
                    'TopRated' => array(
                        'name' => 'Top Rated',
                    ),
                    'GMapItems' => array(
                        'name' => 'Google Map Items',
                    ),
                ),
                'enabledLayouts' => array(

                ),
                'enabledBlocks' => array(

                ),
            ),
            'ezsettings.site.ezpage' => array(
                'layouts' => array(

                ),
                'blocks' => array(

                ),
                'enabledLayouts' => array(

                ),
                'enabledBlocks' => array(

                ),
            ),
            'ezsettings.site.languages' => array(
                0 => 'eng-GB',
            ),
            'ezsettings.site.translation_siteaccesses' => array(

            ),
            'ezsettings.site.fieldtypes.ezrichtext.output_custom_xsl' => array(
                0 => array(
                    'path' => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/FieldType/RichText/Resources/stylesheets/docbook/xhtml5/output/core.xsl'),
                    'priority' => 0,
                ),
            ),
            'ezsettings.site.fieldtypes.ezrichtext.edit_custom_xsl' => array(
                0 => array(
                    'path' => ($this->targetDirs[2].'/../vendor/ezsystems/ezpublish-kernel/eZ/Publish/Core/FieldType/RichText/Resources/stylesheets/docbook/xhtml5/edit/core.xsl'),
                    'priority' => 0,
                ),
            ),
            'ezsettings.site.fieldtypes.ezrichtext.input_custom_xsl' => array(

            ),
            'ezsettings.site.related_siteaccesses' => array(
                0 => 'site',
            ),
            'ezpublish.search.legacy.gateway.criteria_converter.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriteriaConverter',
            'ezpublish.search.legacy.gateway.criterion_handler.common.content_id.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\ContentId',
            'ezpublish.search.legacy.gateway.criterion_handler.common.content_type_group_id.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\ContentTypeGroupId',
            'ezpublish.search.legacy.gateway.criterion_handler.common.content_type_id.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\ContentTypeId',
            'ezpublish.search.legacy.gateway.criterion_handler.common.content_type_identifier.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\ContentTypeIdentifier',
            'ezpublish.search.legacy.gateway.criterion_handler.common.date_metadata.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\DateMetadata',
            'ezpublish.search.legacy.gateway.criterion_handler.common.field.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\Field',
            'ezpublish.search.legacy.gateway.criterion_handler.common.full_text.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\FullText',
            'ezpublish.search.legacy.gateway.criterion_handler.common.language_code.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\LanguageCode',
            'ezpublish.search.legacy.gateway.criterion_handler.common.logical_and.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\LogicalAnd',
            'ezpublish.search.legacy.gateway.criterion_handler.common.logical_not.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\LogicalNot',
            'ezpublish.search.legacy.gateway.criterion_handler.common.logical_or.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\LogicalOr',
            'ezpublish.search.legacy.gateway.criterion_handler.common.map_location_distance.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\MapLocationDistance',
            'ezpublish.search.legacy.gateway.criterion_handler.common.match_all.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\MatchAll',
            'ezpublish.search.legacy.gateway.criterion_handler.common.match_none.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\MatchNone',
            'ezpublish.search.legacy.gateway.criterion_handler.common.object_state_id.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\ObjectStateId',
            'ezpublish.search.legacy.gateway.criterion_handler.common.field_relation.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\FieldRelation',
            'ezpublish.search.legacy.gateway.criterion_handler.common.remote_id.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\RemoteId',
            'ezpublish.search.legacy.gateway.criterion_handler.common.section_id.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\SectionId',
            'ezpublish.search.legacy.gateway.criterion_handler.common.user_metadata.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\UserMetadata',
            'ezpublish.search.legacy.gateway.criterion_field_value_converter.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\FieldValue\\Converter',
            'ezpublish.search.legacy.gateway.criterion_field_value_handler.registry.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\FieldValue\\HandlerRegistry',
            'ezpublish.search.legacy.gateway.criterion_field_value_handler.collection.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\FieldValue\\Handler\\Collection',
            'ezpublish.search.legacy.gateway.criterion_field_value_handler.composite.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\FieldValue\\Handler\\Composite',
            'ezpublish.search.legacy.gateway.criterion_field_value_handler.simple.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\CriterionHandler\\FieldValue\\Handler\\Simple',
            'ezpublish.search.legacy.gateway.criterion_handler.content.ancestor.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Gateway\\CriterionHandler\\Ancestor',
            'ezpublish.search.legacy.gateway.criterion_handler.content.location_id.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Gateway\\CriterionHandler\\LocationId',
            'ezpublish.search.legacy.gateway.criterion_handler.content.location_remote_id.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Gateway\\CriterionHandler\\LocationRemoteId',
            'ezpublish.search.legacy.gateway.criterion_handler.content.parent_location_id.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Gateway\\CriterionHandler\\ParentLocationId',
            'ezpublish.search.legacy.gateway.criterion_handler.content.subtree.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Gateway\\CriterionHandler\\Subtree',
            'ezpublish.search.legacy.gateway.criterion_handler.content.permission_subtree.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Gateway\\CriterionHandler\\PermissionSubtree',
            'ezpublish.search.legacy.gateway.criterion_handler.content.visibility.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Gateway\\CriterionHandler\\Visibility',
            'ezpublish.search.legacy.gateway.criterion_handler.location.ancestor.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Location\\Gateway\\CriterionHandler\\Ancestor',
            'ezpublish.search.legacy.gateway.criterion_handler.location.depth.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Location\\Gateway\\CriterionHandler\\Location\\Depth',
            'ezpublish.search.legacy.gateway.criterion_handler.location.location_id.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Location\\Gateway\\CriterionHandler\\LocationId',
            'ezpublish.search.legacy.gateway.criterion_handler.location.is_main_location.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Location\\Gateway\\CriterionHandler\\Location\\IsMainLocation',
            'ezpublish.search.legacy.gateway.criterion_handler.location.parent_location_id.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Location\\Gateway\\CriterionHandler\\ParentLocationId',
            'ezpublish.search.legacy.gateway.criterion_handler.location.priority.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Location\\Gateway\\CriterionHandler\\Location\\Priority',
            'ezpublish.search.legacy.gateway.criterion_handler.location.location_remote_id.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Location\\Gateway\\CriterionHandler\\LocationRemoteId',
            'ezpublish.search.legacy.gateway.criterion_handler.location.subtree.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Location\\Gateway\\CriterionHandler\\Subtree',
            'ezpublish.search.legacy.gateway.criterion_handler.location.visibility.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Location\\Gateway\\CriterionHandler\\Visibility',
            'ezpublish.spi.search.legacy.handler.content.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Handler',
            'ezpublish.spi.search.legacy.handler.location.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Location\\Handler',
            'ezpublish.search.legacy.gateway.content.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Gateway\\DoctrineDatabase',
            'ezpublish.search.legacy.gateway.content.exception_conversion.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Gateway\\ExceptionConversion',
            'ezpublish.search.legacy.gateway.location.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Location\\Gateway\\DoctrineDatabase',
            'ezpublish.search.legacy.gateway.location.exception_conversion.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Location\\Gateway\\ExceptionConversion',
            'ezpublish.search.legacy.gateway.sort_clause_converter.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\SortClauseConverter',
            'ezpublish.search.legacy.gateway.sort_clause_handler.common.content_id.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\SortClauseHandler\\ContentId',
            'ezpublish.search.legacy.gateway.sort_clause_handler.common.content_name.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\SortClauseHandler\\ContentName',
            'ezpublish.search.legacy.gateway.sort_clause_handler.common.date_modified.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\SortClauseHandler\\DateModified',
            'ezpublish.search.legacy.gateway.sort_clause_handler.common.date_published.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\SortClauseHandler\\DatePublished',
            'ezpublish.search.legacy.gateway.sort_clause_handler.common.field.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\SortClauseHandler\\Field',
            'ezpublish.search.legacy.gateway.sort_clause_handler.common.map_location_distance.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\SortClauseHandler\\MapLocationDistance',
            'ezpublish.search.legacy.gateway.sort_clause_handler.common.section_identifier.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\SortClauseHandler\\SectionIdentifier',
            'ezpublish.search.legacy.gateway.sort_clause_handler.common.section_name.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Common\\Gateway\\SortClauseHandler\\SectionName',
            'ezpublish.search.legacy.gateway.sort_clause_handler.location.id.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Location\\Gateway\\SortClauseHandler\\Location\\Id',
            'ezpublish.search.legacy.gateway.sort_clause_handler.location.depth.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Location\\Gateway\\SortClauseHandler\\Location\\Depth',
            'ezpublish.search.legacy.gateway.sort_clause_handler.location.path.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Location\\Gateway\\SortClauseHandler\\Location\\Path',
            'ezpublish.search.legacy.gateway.sort_clause_handler.location.is_main_location.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Location\\Gateway\\SortClauseHandler\\Location\\IsMainLocation',
            'ezpublish.search.legacy.gateway.sort_clause_handler.location.priority.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Location\\Gateway\\SortClauseHandler\\Location\\Priority',
            'ezpublish.search.legacy.gateway.sort_clause_handler.location.visibility.class' => 'eZ\\Publish\\Core\\Search\\Legacy\\Content\\Location\\Gateway\\SortClauseHandler\\Location\\Visibility',
            'ezpublish.search.legacy.dbhandler.class' => 'eZ\\Publish\\Core\\Persistence\\Doctrine\\ConnectionHandler',
            'ezpublish.search.connection.class' => 'Doctrine\\DBAL\\Driver\\Connection',
            'ezpublish.search.legacy.connection.factory.class' => 'eZ\\Bundle\\EzPublishLegacySearchEngineBundle\\ApiLoader\\ConnectionFactory',
            'ezpublish.search.legacy.connection.class' => 'Doctrine\\DBAL\\Driver\\Connection',
            'ezpublish.core.io.stream_file_listener.class' => 'eZ\\Bundle\\EzPublishIOBundle\\EventListener\\StreamFileListener',
            'ezpublish.core.io.flysystem.default_adapter.class' => 'League\\Flysystem\\Adapter\\Local',
            'ez_io.metadata_handlers' => array(

            ),
            'ez_io.binarydata_handlers' => array(

            ),
            'ezpublish_rest.routing.options_loader.class' => 'eZ\\Bundle\\EzPublishRestBundle\\Routing\\OptionsLoader',
            'ezpublish_rest.routing.options_loader.route_collection_mapper.class' => 'eZ\\Bundle\\EzPublishRestBundle\\Routing\\OptionsLoader\\RouteCollectionMapper',
            'ezpublish_rest.routing.options_loader.mapper.class' => 'eZ\\Bundle\\EzPublishRestBundle\\Routing\\OptionsLoader\\Mapper',
            'ezpublish_rest.cors_options_provider.class' => 'eZ\\Bundle\\EzPublishRestBundle\\CorsOptions\\RestProvider',
            'ezpublish_rest.controller.base.class' => 'eZ\\Publish\\Core\\REST\\Server\\Controller',
            'ezpublish_rest.controller.binary_content.class' => 'eZ\\Publish\\Core\\REST\\Server\\Controller\\BinaryContent',
            'ezpublish_rest.controller.content.class' => 'EzSystems\\PlatformUIBundle\\Controller\\Rest\\ContentController',
            'ezpublish_rest.controller.content_type.class' => 'eZ\\Publish\\Core\\REST\\Server\\Controller\\ContentType',
            'ezpublish_rest.controller.location.class' => 'eZ\\Publish\\Core\\REST\\Server\\Controller\\Location',
            'ezpublish_rest.controller.object_state.class' => 'eZ\\Publish\\Core\\REST\\Server\\Controller\\ObjectState',
            'ezpublish_rest.controller.role.class' => 'eZ\\Publish\\Core\\REST\\Server\\Controller\\Role',
            'ezpublish_rest.controller.root.class' => 'eZ\\Publish\\Core\\REST\\Server\\Controller\\Root',
            'ezpublish_rest.controller.section.class' => 'eZ\\Publish\\Core\\REST\\Server\\Controller\\Section',
            'ezpublish_rest.controller.trash.class' => 'eZ\\Publish\\Core\\REST\\Server\\Controller\\Trash',
            'ezpublish_rest.controller.user.class' => 'eZ\\Publish\\Core\\REST\\Server\\Controller\\User',
            'ezpublish_rest.controller.url_wildcard.class' => 'eZ\\Publish\\Core\\REST\\Server\\Controller\\URLWildcard',
            'ezpublish_rest.controller.url_alias.class' => 'eZ\\Publish\\Core\\REST\\Server\\Controller\\URLAlias',
            'ezpublish_rest.controller.options.class' => 'eZ\\Publish\\Core\\REST\\Server\\Controller\\Options',
            'ezpublish_rest.controller.services.class' => 'eZ\\Publish\\Core\\REST\\Server\\Controller\\Services',
            'ezpublish_rest.controller.views.class' => 'eZ\\Publish\\Core\\REST\\Server\\Controller\\Views',
            'ezpublish_rest.factory.class' => 'eZ\\Bundle\\EzPublishRestBundle\\ApiLoader\\Factory',
            'ezpublish_rest.request_parser.class' => 'eZ\\Bundle\\EzPublishRestBundle\\RequestParser\\Router',
            'ezpublish_rest.parser_tools.class' => 'eZ\\Publish\\Core\\REST\\Common\\Input\\ParserTools',
            'ezpublish_rest.field_type_parser.class' => 'eZ\\Publish\\Core\\REST\\Common\\Input\\FieldTypeParser',
            'ezpublish_rest.field_type_serializer.class' => 'eZ\\Publish\\Core\\REST\\Common\\Output\\FieldTypeSerializer',
            'ezpublish_rest.request_listener.class' => 'eZ\\Bundle\\EzPublishRestBundle\\EventListener\\RequestListener',
            'ezpublish_rest.csrf_listener.class' => 'eZ\\Bundle\\EzPublishRestBundle\\EventListener\\CsrfListener',
            'ezpublish_rest.response_listener.class' => 'eZ\\Bundle\\EzPublishRestBundle\\EventListener\\ResponseListener',
            'ezpublish_rest.field_type_processor_registry.class' => 'eZ\\Publish\\Core\\REST\\Common\\FieldTypeProcessorRegistry',
            'ezpublish_rest.field_type_processor.ezimage.class' => 'eZ\\Publish\\Core\\REST\\Common\\FieldTypeProcessor\\ImageProcessor',
            'ezpublish_rest.field_type_processor.ezdatetime.class' => 'eZ\\Publish\\Core\\REST\\Common\\FieldTypeProcessor\\DateAndTimeProcessor',
            'ezpublish_rest.field_type_processor.ezdate.class' => 'eZ\\Publish\\Core\\REST\\Common\\FieldTypeProcessor\\DateProcessor',
            'ezpublish_rest.field_type_processor.ezmedia.class' => 'eZ\\Publish\\Core\\REST\\Common\\FieldTypeProcessor\\MediaProcessor',
            'ezpublish_rest.field_type_processor.ezobjectrelationlist.class' => 'eZ\\Publish\\Core\\REST\\Common\\FieldTypeProcessor\\RelationListProcessor',
            'ezpublish_rest.field_type_processor.ezobjectrelation.class' => 'eZ\\Publish\\Core\\REST\\Common\\FieldTypeProcessor\\RelationProcessor',
            'ezpublish_rest.field_type_processor.eztime.class' => 'eZ\\Publish\\Core\\REST\\Common\\FieldTypeProcessor\\TimeProcessor',
            'ezpublish_rest.field_type_processor.ezrichtext.class' => 'eZ\\Publish\\Core\\REST\\Common\\FieldTypeProcessor\\RichTextProcessor',
            'ezpublish_rest.field_type_processor.ezbinaryfile.class' => 'eZ\\Publish\\Core\\REST\\Common\\FieldTypeProcessor\\BinaryProcessor',
            'ezpublish_rest.field_type_processor.ezpage.class' => 'eZ\\Publish\\Core\\REST\\Common\\FieldTypeProcessor\\PageProcessor',
            'ezpublish_rest.field_type_processor.ezfloat.class' => 'eZ\\Publish\\Core\\REST\\Common\\FieldTypeProcessor\\FloatProcessor',
            'ezpublish_rest.output.visitor.dispatcher.class' => 'eZ\\Publish\\Core\\REST\\Server\\View\\AcceptHeaderVisitorDispatcher',
            'ezpublish_rest.output.visitor.class' => 'eZ\\Publish\\Core\\REST\\Common\\Output\\Visitor',
            'ezpublish_rest.output.generator.json.class' => 'eZ\\Publish\\Core\\REST\\Common\\Output\\Generator\\Json',
            'ezpublish_rest.output.generator.json.field_type_hash_generator.class' => 'eZ\\Publish\\Core\\REST\\Common\\Output\\Generator\\Json\\FieldTypeHashGenerator',
            'ezpublish_rest.output.generator.xml.class' => 'eZ\\Publish\\Core\\REST\\Common\\Output\\Generator\\Xml',
            'ezpublish_rest.output.generator.xml.field_type_hash_generator.class' => 'eZ\\Publish\\Core\\REST\\Common\\Output\\Generator\\Xml\\FieldTypeHashGenerator',
            'ezpublish_rest.output.visitor.json.regexps' => array(
                0 => '(^application/vnd\\.ez\\.api\\.[A-Za-z]+\\+json$)',
                1 => '(^application/json$)',
            ),
            'ezpublish_rest.output.visitor.xml.regexps' => array(
                0 => '(^application/vnd\\.ez\\.api\\.[A-Za-z]+\\+xml$)',
                1 => '(^application/xml$)',
                2 => '(^.*/.*$)',
            ),
            'ezpublish_rest.output.value_object_visitor.dispatcher.class' => 'eZ\\Publish\\Core\\REST\\Common\\Output\\ValueObjectVisitorDispatcher',
            'ezpublish_rest.output.value_object_visitor.exception.invalidargumentexception.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\InvalidArgumentException',
            'ezpublish_rest.input.dispatcher.class' => 'eZ\\Publish\\Core\\REST\\Common\\Input\\Dispatcher',
            'ezpublish_rest.input.parsing_dispatcher.class' => 'eZ\\Publish\\Core\\REST\\Common\\Input\\ParsingDispatcher',
            'ezpublish_rest.input.handler.json.class' => 'eZ\\Publish\\Core\\REST\\Common\\Input\\Handler\\Json',
            'ezpublish_rest.input.handler.xml.class' => 'eZ\\Publish\\Core\\REST\\Common\\Input\\Handler\\Xml',
            'ezpublish_rest.templated_router.class' => 'eZ\\Bundle\\EzPublishCoreBundle\\Routing\\DefaultRouter',
            'ezpublish_rest.output.value_object_visitor.base.class' => 'eZ\\Publish\\Core\\REST\\Common\\Output\\ValueObjectVisitor',
            'ezpublish_rest.output.value_object_visitor.contentobjectstates.class' => 'eZ\\Publish\\Core\\REST\\Common\\Output\\ValueObjectVisitor\\ContentObjectStates',
            'ezpublish_rest.output.value_object_visitor.invalidargumentexception.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\InvalidArgumentException',
            'ezpublish_rest.output.value_object_visitor.notfoundexception.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\NotFoundException',
            'ezpublish_rest.output.value_object_visitor.unauthorizedexception.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\UnauthorizedException',
            'ezpublish_rest.output.value_object_visitor.badstateexception.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\BadStateException',
            'ezpublish_rest.output.value_object_visitor.badrequestexception.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\BadRequestException',
            'ezpublish_rest.output.value_object_visitor.forbiddenexception.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\ForbiddenException',
            'ezpublish_rest.output.value_object_visitor.exception.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\Exception',
            'ezpublish_rest.output.value_object_visitor.notimplementedexception.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\NotImplementedException',
            'ezpublish_rest.output.value_object_visitor.sectionlist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\SectionList',
            'ezpublish_rest.output.value_object_visitor.createdsection.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\CreatedSection',
            'ezpublish_rest.output.value_object_visitor.section.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\Section',
            'ezpublish_rest.output.value_object_visitor.sectioncreatestruct.class' => 'eZ\\Publish\\Core\\REST\\Client\\Output\\ValueObjectVisitor\\SectionCreateStruct',
            'ezpublish_rest.output.value_object_visitor.sectionupdatestruct.class' => 'eZ\\Publish\\Core\\REST\\Client\\Output\\ValueObjectVisitor\\SectionUpdateStruct',
            'ezpublish_rest.output.value_object_visitor.urlwildcardlist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\URLWildcardList',
            'ezpublish_rest.output.value_object_visitor.urlwildcard.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\URLWildcard',
            'ezpublish_rest.output.value_object_visitor.createdurlwildcard.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\CreatedURLWildcard',
            'ezpublish_rest.output.value_object_visitor.urlaliaslist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\URLAliasList',
            'ezpublish_rest.output.value_object_visitor.urlaliasreflist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\URLAliasRefList',
            'ezpublish_rest.output.value_object_visitor.urlalias.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\URLAlias',
            'ezpublish_rest.output.value_object_visitor.createdurlalias.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\CreatedURLAlias',
            'ezpublish_rest.output.value_object_visitor.contentlist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\ContentList',
            'ezpublish_rest.output.value_object_visitor.restcontent.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\RestContent',
            'ezpublish_rest.output.value_object_visitor.createdcontent.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\CreatedContent',
            'ezpublish_rest.output.value_object_visitor.versionlist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\VersionList',
            'ezpublish_rest.output.value_object_visitor.createdversion.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\CreatedVersion',
            'ezpublish_rest.output.value_object_visitor.versioninfo.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\VersionInfo',
            'ezpublish_rest.output.value_object_visitor.imagevariation.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\ImageVariation',
            'ezpublish_rest.output.value_object_visitor.version.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\Version',
            'ezpublish_rest.output.value_object_visitor.versionupdate.class' => 'eZ\\Publish\\Core\\REST\\Client\\Output\\ValueObjectVisitor\\VersionUpdate',
            'ezpublish_rest.output.value_object_visitor.restcontentcreatestruct.class' => 'eZ\\Publish\\Core\\REST\\Client\\Output\\ValueObjectVisitor\\RestContentCreateStruct',
            'ezpublish_rest.output.value_object_visitor.restusergroup.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\RestUserGroup',
            'ezpublish_rest.output.value_object_visitor.createdusergroup.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\CreatedUserGroup',
            'ezpublish_rest.output.value_object_visitor.usergrouplist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\UserGroupList',
            'ezpublish_rest.output.value_object_visitor.usergroupreflist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\UserGroupRefList',
            'ezpublish_rest.output.value_object_visitor.userlist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\UserList',
            'ezpublish_rest.output.value_object_visitor.userreflist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\UserRefList',
            'ezpublish_rest.output.value_object_visitor.createduser.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\CreatedUser',
            'ezpublish_rest.output.value_object_visitor.restuser.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\RestUser',
            'ezpublish_rest.output.value_object_visitor.usersession.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\UserSession',
            'ezpublish_rest.output.value_object_visitor.usersessiondeleted.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\DeletedUserSession',
            'ezpublish_rest.output.value_object_visitor.sessioninput.class' => 'eZ\\Publish\\Core\\REST\\Client\\Output\\ValueObjectVisitor\\SessionInput',
            'ezpublish_rest.output.value_object_visitor.restcontenttype.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\RestContentType',
            'ezpublish_rest.output.value_object_visitor.createdcontenttype.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\CreatedContentType',
            'ezpublish_rest.output.value_object_visitor.contenttypecreatestruct.class' => 'eZ\\Publish\\Core\\REST\\Client\\Output\\ValueObjectVisitor\\ContentTypeCreateStruct',
            'ezpublish_rest.output.value_object_visitor.objectstatelist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\ObjectStateList',
            'ezpublish_rest.output.value_object_visitor.createdobjectstate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\CreatedObjectState',
            'ezpublish_rest.output.value_object_visitor.restobjectstate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\RestObjectState',
            'ezpublish_rest.output.value_object_visitor.objectstategrouplist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\ObjectStateGroupList',
            'ezpublish_rest.output.value_object_visitor.createdobjectstategroup.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\CreatedObjectStateGroup',
            'ezpublish_rest.output.value_object_visitor.objectstategroup.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\ObjectStateGroup',
            'ezpublish_rest.output.value_object_visitor.objectstatecreatestruct.class' => 'eZ\\Publish\\Core\\REST\\Client\\Output\\ValueObjectVisitor\\ObjectStateCreateStruct',
            'ezpublish_rest.output.value_object_visitor.objectstateupdatestruct.class' => 'eZ\\Publish\\Core\\REST\\Client\\Output\\ValueObjectVisitor\\ObjectStateUpdateStruct',
            'ezpublish_rest.output.value_object_visitor.objectstategroupcreatestruct.class' => 'eZ\\Publish\\Core\\REST\\Client\\Output\\ValueObjectVisitor\\ObjectStateGroupCreateStruct',
            'ezpublish_rest.output.value_object_visitor.objectstategroupupdatestruct.class' => 'eZ\\Publish\\Core\\REST\\Client\\Output\\ValueObjectVisitor\\ObjectStateGroupUpdateStruct',
            'ezpublish_rest.output.value_object_visitor.restexecutedview.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\RestExecutedView',
            'ezpublish_rest.output.value_object_visitor.resttrashitem.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\RestTrashItem',
            'ezpublish_rest.output.value_object_visitor.trash.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\Trash',
            'ezpublish_rest.output.value_object_visitor.locationlist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\LocationList',
            'ezpublish_rest.output.value_object_visitor.restlocation.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\RestLocation',
            'ezpublish_rest.output.value_object_visitor.location.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\Location',
            'ezpublish_rest.output.value_object_visitor.createdlocation.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\CreatedLocation',
            'ezpublish_rest.output.value_object_visitor.locationcreatestruct.class' => 'eZ\\Publish\\Core\\REST\\Client\\Output\\ValueObjectVisitor\\LocationCreateStruct',
            'ezpublish_rest.output.value_object_visitor.locationupdatestruct.class' => 'eZ\\Publish\\Core\\REST\\Client\\Output\\ValueObjectVisitor\\LocationUpdateStruct',
            'ezpublish_rest.output.value_object_visitor.restusergrouproleassignment.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\RestUserGroupRoleAssignment',
            'ezpublish_rest.output.value_object_visitor.restuserroleassignment.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\RestUserRoleAssignment',
            'ezpublish_rest.output.value_object_visitor.roleassignmentlist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\RoleAssignmentList',
            'ezpublish_rest.output.value_object_visitor.policylist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\PolicyList',
            'ezpublish_rest.output.value_object_visitor.createdpolicy.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\CreatedPolicy',
            'ezpublish_rest.output.value_object_visitor.policy.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\Policy',
            'ezpublish_rest.output.value_object_visitor.role.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\Role',
            'ezpublish_rest.output.value_object_visitor.createdrole.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\CreatedRole',
            'ezpublish_rest.output.value_object_visitor.rolelist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\RoleList',
            'ezpublish_rest.output.value_object_visitor.rolecreatestruct.class' => 'eZ\\Publish\\Core\\REST\\Client\\Output\\ValueObjectVisitor\\RoleCreateStruct',
            'ezpublish_rest.output.value_object_visitor.roleupdatestruct.class' => 'eZ\\Publish\\Core\\REST\\Client\\Output\\ValueObjectVisitor\\RoleUpdateStruct',
            'ezpublish_rest.output.value_object_visitor.roleassignment.class' => 'eZ\\Publish\\Core\\REST\\Client\\Output\\ValueObjectVisitor\\RoleAssignment',
            'ezpublish_rest.output.value_object_visitor.policycreatestruct.class' => 'eZ\\Publish\\Core\\REST\\Client\\Output\\ValueObjectVisitor\\PolicyCreateStruct',
            'ezpublish_rest.output.value_object_visitor.policyupdatestruct.class' => 'eZ\\Publish\\Core\\REST\\Client\\Output\\ValueObjectVisitor\\PolicyUpdateStruct',
            'ezpublish_rest.output.value_object_visitor.createdrelation.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\CreatedRelation',
            'ezpublish_rest.output.value_object_visitor.restrelation.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\RestRelation',
            'ezpublish_rest.output.value_object_visitor.relationlist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\RelationList',
            'ezpublish_rest.output.value_object_visitor.restfielddefinition.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\RestFieldDefinition',
            'ezpublish_rest.output.value_object_visitor.createdfielddefinition.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\CreatedFieldDefinition',
            'ezpublish_rest.output.value_object_visitor.fielddefinitionlist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\FieldDefinitionList',
            'ezpublish_rest.output.value_object_visitor.fielddefinitioncreatestruct.class' => 'eZ\\Publish\\Core\\REST\\Client\\Output\\ValueObjectVisitor\\FieldDefinitionCreateStruct',
            'ezpublish_rest.output.value_object_visitor.contenttypegrouplist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\ContentTypeGroupList',
            'ezpublish_rest.output.value_object_visitor.createdcontenttypegroup.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\CreatedContentTypeGroup',
            'ezpublish_rest.output.value_object_visitor.contenttypegroup.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\ContentTypeGroup',
            'ezpublish_rest.output.value_object_visitor.contenttypeinfolist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\ContentTypeInfoList',
            'ezpublish_rest.output.value_object_visitor.contenttypelist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\ContentTypeList',
            'ezpublish_rest.output.value_object_visitor.contenttypegroupreflist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\ContentTypeGroupRefList',
            'ezpublish_rest.output.value_object_visitor.contenttypegroupcreatestruct.class' => 'eZ\\Publish\\Core\\REST\\Client\\Output\\ValueObjectVisitor\\ContentTypeGroupCreateStruct',
            'ezpublish_rest.output.value_object_visitor.contenttypegroupupdatestruct.class' => 'eZ\\Publish\\Core\\REST\\Client\\Output\\ValueObjectVisitor\\ContentTypeGroupUpdateStruct',
            'ezpublish_rest.output.value_object_visitor.conflict.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\Conflict',
            'ezpublish_rest.output.value_object_visitor.seeother.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\SeeOther',
            'ezpublish_rest.output.value_object_visitor.root.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\Root',
            'ezpublish_rest.output.value_object_visitor.nocontent.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\NoContent',
            'ezpublish_rest.output.value_object_visitor.resourcecreated.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\ResourceCreated',
            'ezpublish_rest.output.value_object_visitor.permanentredirect.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\PermanentRedirect',
            'ezpublish_rest.output.value_object_visitor.temporaryredirect.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\TemporaryRedirect',
            'ezpublish_rest.output.value_object_visitor.options.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\Options',
            'ezpublish_rest.output.value_object_visitor.ok.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\OK',
            'ezpublish_rest.output.value_object_visitor.cached_value.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\CachedValue',
            'ezpublish_rest.output.value_object_visitor.countrylist.class' => 'eZ\\Publish\\Core\\REST\\Server\\Output\\ValueObjectVisitor\\CountryList',
            'ezpublish_rest.output.value_object_visitor.limitation.class' => 'eZ\\Publish\\Core\\REST\\Client\\Output\\ValueObjectVisitor\\Limitation',
            'ezpublish_rest.output.value_object_visitor.viewinput.class' => 'eZ\\Publish\\Core\\REST\\Client\\Output\\ValueObjectVisitor\\ViewInput',
            'ezpublish_rest.input.parser.class' => 'eZ\\Publish\\Core\\REST\\Server\\Common\\Parser',
            'ezpublish_rest.input.parser.contentobjectstates.class' => 'eZ\\Publish\\Core\\REST\\Common\\Input\\Parser\\ContentObjectStates',
            'ezpublish_rest.input.parser.contentcreate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\ContentCreate',
            'ezpublish_rest.input.parser.contentupdate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\ContentUpdate',
            'ezpublish_rest.input.parser.contenttypegroupinput.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\ContentTypeGroupInput',
            'ezpublish_rest.input.parser.contenttypecreate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\ContentTypeCreate',
            'ezpublish_rest.input.parser.contenttypeupdate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\ContentTypeUpdate',
            'ezpublish_rest.input.parser.fielddefinitioncreate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\FieldDefinitionCreate',
            'ezpublish_rest.input.parser.fielddefinitionupdate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\FieldDefinitionUpdate',
            'ezpublish_rest.input.parser.locationcreate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\LocationCreate',
            'ezpublish_rest.input.parser.locationupdate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\LocationUpdate',
            'ezpublish_rest.input.parser.objectstatecreate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\ObjectStateCreate',
            'ezpublish_rest.input.parser.objectstategroupcreate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\ObjectStateGroupCreate',
            'ezpublish_rest.input.parser.objectstategroupupdate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\ObjectStateGroupUpdate',
            'ezpublish_rest.input.parser.objectstateupdate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\ObjectStateUpdate',
            'ezpublish_rest.input.parser.policycreate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\PolicyCreate',
            'ezpublish_rest.input.parser.policyupdate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\PolicyUpdate',
            'ezpublish_rest.input.parser.relationcreate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\RelationCreate',
            'ezpublish_rest.input.parser.roleassigninput.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\RoleAssignInput',
            'ezpublish_rest.input.parser.roleinput.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\RoleInput',
            'ezpublish_rest.input.parser.sectioninput.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\SectionInput',
            'ezpublish_rest.input.parser.usergroupupdate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\UserGroupUpdate',
            'ezpublish_rest.input.parser.userupdate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\UserUpdate',
            'ezpublish_rest.input.parser.urlwildcardcreate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\URLWildcardCreate',
            'ezpublish_rest.input.parser.urlaliascreate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\URLAliasCreate',
            'ezpublish_rest.input.parser.usercreate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\UserCreate',
            'ezpublish_rest.input.parser.usergroupcreate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\UserGroupCreate',
            'ezpublish_rest.input.parser.sessioninput.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\SessionInput',
            'ezpublish_rest.input.parser.versionupdate.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\VersionUpdate',
            'ezpublish_rest.input.parser.viewinput.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\ViewInput',
            'ezpublish_rest.input.parser.viewinputonedotone.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\ViewInputOneDotOne',
            'ezpublish_rest.input.parser.internal.view.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\View',
            'ezpublish_rest.input.parser.viewresult.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\ViewResult',
            'ezpublish_rest.input.parser.searchhit.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\SearchHit',
            'ezpublish_rest.input.parser.internal.contentquery.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\ContentQuery',
            'ezpublish_rest.input.parser.internal.locationquery.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\LocationQuery',
            'ezpublish_rest.input.parser.internal.criterion.ancestor.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\Ancestor',
            'ezpublish_rest.input.parser.internal.criterion.contentid.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\ContentId',
            'ezpublish_rest.input.parser.internal.criterion.contentremoteid.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\ContentRemoteId',
            'ezpublish_rest.input.parser.internal.criterion.contenttypegroupid.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\ContentTypeGroupId',
            'ezpublish_rest.input.parser.internal.criterion.contenttypeid.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\ContentTypeId',
            'ezpublish_rest.input.parser.internal.criterion.contenttypeidentifier.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\ContentTypeIdentifier',
            'ezpublish_rest.input.parser.internal.criterion.datemetadata.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\DateMetadata',
            'ezpublish_rest.input.parser.internal.criterion.field.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\Field',
            'ezpublish_rest.input.parser.internal.criterion.fulltext.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\FullText',
            'ezpublish_rest.input.parser.internal.criterion.languagecode.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\LanguageCode',
            'ezpublish_rest.input.parser.internal.criterion.locationid.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\LocationId',
            'ezpublish_rest.input.parser.internal.criterion.locationremoteid.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\LocationRemoteId',
            'ezpublish_rest.input.parser.internal.criterion.logicaland.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\LogicalAnd',
            'ezpublish_rest.input.parser.internal.criterion.logicalnot.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\LogicalNot',
            'ezpublish_rest.input.parser.internal.criterion.logicaloperator.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\LogicalOperator',
            'ezpublish_rest.input.parser.internal.criterion.logicalor.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\LogicalOr',
            'ezpublish_rest.input.parser.internal.criterion.morelikethis.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\MoreLikeThis',
            'ezpublish_rest.input.parser.internal.criterion.objectstateid.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\ObjectStateId',
            'ezpublish_rest.input.parser.internal.criterion.operator.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\Operator',
            'ezpublish_rest.input.parser.internal.criterion.parentlocationid.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\ParentLocationId',
            'ezpublish_rest.input.parser.internal.criterion.parentlocationremoteid.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\ParentLocationRemoteId',
            'ezpublish_rest.input.parser.internal.criterion.sectionidentifier.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\SectionIdentifier',
            'ezpublish_rest.input.parser.internal.criterion.sectionid.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\SectionId',
            'ezpublish_rest.input.parser.internal.criterion.subtree.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\Subtree',
            'ezpublish_rest.input.parser.internal.criterion.usermetadata.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\UserMetadata',
            'ezpublish_rest.input.parser.internal.criterion.visibility.class' => 'eZ\\Publish\\Core\\REST\\Server\\Input\\Parser\\Criterion\\Visibility',
            'ezpublish_rest.input.parser.content.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\Content',
            'ezpublish_rest.input.parser.contentinfo.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\ContentInfo',
            'ezpublish_rest.input.parser.contentlist.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\ContentList',
            'ezpublish_rest.input.parser.contenttype.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\ContentType',
            'ezpublish_rest.input.parser.contenttypegroup.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\ContentTypeGroup',
            'ezpublish_rest.input.parser.contenttypegrouplist.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\ContentTypeGroupList',
            'ezpublish_rest.input.parser.contenttypegroupreflist.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\ContentTypeGroupRefList',
            'ezpublish_rest.input.parser.contenttypelist.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\ContentTypeList',
            'ezpublish_rest.input.parser.errormessage.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\ErrorMessage',
            'ezpublish_rest.input.parser.fielddefinition.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\FieldDefinition',
            'ezpublish_rest.input.parser.fielddefinitionlist.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\FieldDefinitionList',
            'ezpublish_rest.input.parser.limitation.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\Limitation',
            'ezpublish_rest.input.parser.location.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\Location',
            'ezpublish_rest.input.parser.objectstate.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\ObjectState',
            'ezpublish_rest.input.parser.objectstatelist.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\ObjectStateList',
            'ezpublish_rest.input.parser.objectstategroup.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\ObjectStateGroup',
            'ezpublish_rest.input.parser.objectstategrouplist.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\ObjectStateGroupList',
            'ezpublish_rest.input.parser.policy.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\Policy',
            'ezpublish_rest.input.parser.policylist.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\PolicyList',
            'ezpublish_rest.input.parser.relation.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\Relation',
            'ezpublish_rest.input.parser.relationlist.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\RelationList',
            'ezpublish_rest.input.parser.role.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\Role',
            'ezpublish_rest.input.parser.rolelist.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\RoleList',
            'ezpublish_rest.input.parser.roleassignment.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\RoleAssignment',
            'ezpublish_rest.input.parser.roleassignmentlist.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\RoleAssignmentList',
            'ezpublish_rest.input.parser.section.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\Section',
            'ezpublish_rest.input.parser.sectionlist.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\SectionList',
            'ezpublish_rest.input.parser.versioninfo.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\VersionInfo',
            'ezpublish_rest.input.parser.version.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\Version',
            'ezpublish_rest.input.parser.session.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\Session',
            'ezpublish_rest.input.parser.userlist.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\UserList',
            'ezpublish_rest.input.parser.userreflist.class' => 'eZ\\Publish\\Core\\REST\\Client\\Input\\Parser\\UserRefList',
            'ezpublish_rest.security.authentication.listener.session.class' => 'eZ\\Publish\\Core\\REST\\Server\\Security\\RestAuthenticator',
            'ezpublish_rest.security.authentication.logout_handler.class' => 'eZ\\Publish\\Core\\REST\\Server\\Security\\RestLogoutHandler',
            'ezpublish_rest.csrf_token_intention' => 'rest',
            'ezpublish_rest.path_prefix' => '/api/ezp/v2',
            'ezsystems.platformui.twig.yui_extension.class' => 'EzSystems\\PlatformUIBundle\\Twig\\TwigYuiExtension',
            'ezsystems.platformui.controller.base.class' => 'EzSystems\\PlatformUIBundle\\Controller\\Controller',
            'ezsystems.platformui.controller.class' => 'EzSystems\\PlatformUIBundle\\Controller\\PlatformUIController',
            'ezsystems.platformui.controller.dashboard.class' => 'EzSystems\\PlatformUIBundle\\Controller\\DashboardController',
            'ezsystems.platformui.helper.systeminfo.class' => 'EzSystems\\PlatformUIBundle\\Helper\\SystemInfoHelper',
            'ezsystems.platformui.controller.systeminfo.class' => 'EzSystems\\PlatformUIBundle\\Controller\\SystemInfoController',
            'ezsystems.platformui.controller.language.class' => 'EzSystems\\PlatformUIBundle\\Controller\\LanguageController',
            'ezsystems.platformui.controller.section.class' => 'EzSystems\\PlatformUIBundle\\Controller\\SectionController',
            'ezsystems.platformui.controller.template.class' => 'EzSystems\\PlatformUIBundle\\Controller\\TemplateController',
            'ezsystems.platformui.controller.content_type.class' => 'EzSystems\\PlatformUIBundle\\Controller\\ContentTypeController',
            'ezsystems.platforui.notification_pool.class' => 'EzSystems\\PlatformUIBundle\\Notification\\NotificationPool',
            'ezsystems.platformui.form_processor.content_type.class' => 'EzSystems\\PlatformUIBundle\\Form\\Processor\\ContentTypeFormProcessor',
            'ezsystems.platformui.form_processor.content_type_group.class' => 'EzSystems\\PlatformUIBundle\\Form\\Processor\\ContentTypeGroupFormProcessor',
            'ezsystems.platformui.controller.role.class' => 'EzSystems\\PlatformUIBundle\\Controller\\RoleController',
            'ezsystems.platformui.form_processor.role.class' => 'EzSystems\\PlatformUIBundle\\Form\\Processor\\RoleFormProcessor',
            'ezsystems.platformui.form_processor.policy.class' => 'EzSystems\\PlatformUIBundle\\Form\\Processor\\PolicyFormProcessor',
            'ezsystems.platformui.application_config.provider.session_info.class' => 'EzSystems\\PlatformUIBundle\\ApplicationConfig\\Providers\\SessionInfo',
            'ezsystems.platformui.application_config.provider.value.class' => 'EzSystems\\PlatformUIBundle\\ApplicationConfig\\Providers\\Value',
            'ezsystems.platformui.application_config.provider.anonymous_user_id.class' => 'EzSystems\\PlatformUIBundle\\ApplicationConfig\\Providers\\AnonymousUserId',
            'ezsystems.platformui.application_config.aggregator.class' => 'EzSystems\\PlatformUIBundle\\ApplicationConfig\\Aggregator',
            'ezsystems.platformui.application_config.provider.root_info.class' => 'EzSystems\\PlatformUIBundle\\ApplicationConfig\\Providers\\RootInfo',
            'ezsystems.platformui.application_config.provider.languages.class' => 'EzSystems\\PlatformUIBundle\\ApplicationConfig\\Providers\\Languages',
            'ezsystems.platformui.form_processor.language.class' => 'EzSystems\\PlatformUIBundle\\Form\\Processor\\LanguageFormProcessor',
            'ezsystems.platformui.form_processor.section.class' => 'EzSystems\\PlatformUIBundle\\Form\\Processor\\SectionFormProcessor',
            'ezsystems.platformui.exception_listener.class' => 'EzSystems\\PlatformUIBundle\\EventListener\\ExceptionListener',
            'ezsystems.platformui.exception_controller' => 'ezsystems.platformui.controller.exception:showAction',
            'ezsystems.platformui.controller.exception.class' => 'EzSystems\\PlatformUIBundle\\Controller\\ExceptionController',
            'ezsystems.platformui.loader.combo_loader.class' => 'EzSystems\\PlatformUIBundle\\Loader\\ComboLoader',
            'ez_platformui.default.yui' => array(

            ),
            'ez_platformui.default.yui.filter' => 'min',
            'ez_platformui.default.yui.combine' => true,
            'ez_platformui.default.yui.build_dir' => '/bundles/ezplatformuiassets/vendors/yui3/build/',
            'ez_platformui.default.yui.modules' => array(
                0 => 'capi',
                1 => 'ez-capi',
                2 => 'alloyeditor',
                3 => 'ez-alloyeditor',
                4 => 'ez-alloyeditor-toolbar-config-link',
                5 => 'ez-alloyeditor-toolbar-config-text',
                6 => 'ez-alloyeditor-toolbar-config-table',
                7 => 'ez-alloyeditor-toolbar-config-block-base',
                8 => 'ez-alloyeditor-toolbar-config-heading',
                9 => 'ez-alloyeditor-toolbar-config-paragraph',
                10 => 'ez-alloyeditor-toolbar-config-embed',
                11 => 'ez-alloyeditor-toolbar-config-image',
                12 => 'ez-alloyeditor-plugin-addcontent',
                13 => 'ez-alloyeditor-plugin-removeblock',
                14 => 'ez-alloyeditor-plugin-embed',
                15 => 'ez-alloyeditor-plugin-focusblock',
                16 => 'ez-alloyeditor-button-heading',
                17 => 'ez-alloyeditor-button-paragraph',
                18 => 'ez-alloyeditor-button-image',
                19 => 'ez-alloyeditor-button-embed',
                20 => 'ez-alloyeditor-button-blocktextalignleft',
                21 => 'ez-alloyeditor-button-blocktextaligncenter',
                22 => 'ez-alloyeditor-button-blocktextalignright',
                23 => 'ez-alloyeditor-button-blocktextalignjustify',
                24 => 'ez-alloyeditor-button-blockremove',
                25 => 'ez-alloyeditor-button-embedhref',
                26 => 'ez-alloyeditor-button-imagehref',
                27 => 'ez-alloyeditor-button-mixin-blocktextalign',
                28 => 'ez-alloyeditor-button-mixin-embeddiscovercontent',
                29 => 'ez-alloyeditor-button-mixin-embedimage',
                30 => 'ez-editorcontentprocessorbase',
                31 => 'ez-editorcontentprocessorxhtml5edit',
                32 => 'ez-editorcontentprocessorremoveids',
                33 => 'ez-platformuiapp',
                34 => 'ez-viewservice',
                35 => 'ez-loginformviewservice',
                36 => 'ez-contenteditviewservice',
                37 => 'ez-contentcreateviewservice',
                38 => 'ez-locationviewviewservice',
                39 => 'ez-navigationhubviewservice',
                40 => 'ez-discoverybarviewservice',
                41 => 'ez-universaldiscoveryviewservice',
                42 => 'ez-confirmboxviewservice',
                43 => 'ez-languageselectionboxviewservice',
                44 => 'ez-notificationhubviewservice',
                45 => 'ez-serversideviewservice',
                46 => 'ez-sectionserversideviewservice',
                47 => 'ez-roleserversideviewservice',
                48 => 'ez-view',
                49 => 'ez-templatebasedview',
                50 => 'ez-loginformview',
                51 => 'loginformview-ez-template',
                52 => 'ez-dashboardview',
                53 => 'dashboardview-ez-template',
                54 => 'ez-locationviewview',
                55 => 'locationviewview-ez-template',
                56 => 'ez-subitemlistview',
                57 => 'subitemlistview-ez-template',
                58 => 'ez-locationviewtabview',
                59 => 'ez-locationviewviewtabview',
                60 => 'locationviewviewtabview-ez-template',
                61 => 'ez-locationviewdetailstabview',
                62 => 'locationviewdetailstabview-ez-template',
                63 => 'ez-locationviewrelationstabview',
                64 => 'locationviewrelationstabview-ez-template',
                65 => 'ez-locationviewlocationstabview',
                66 => 'locationviewlocationstabview-ez-template',
                67 => 'ez-studiopresentationview',
                68 => 'studiopresentationview-ez-template',
                69 => 'ez-studiopluspresentationview',
                70 => 'studiopluspresentationview-ez-template',
                71 => 'ez-universaldiscoveryview',
                72 => 'universaldiscoveryview-ez-template',
                73 => 'ez-universaldiscoveryconfirmedlistview',
                74 => 'universaldiscoveryconfirmedlistview-ez-template',
                75 => 'ez-universaldiscoverymethodbaseview',
                76 => 'ez-universaldiscoverybrowseview',
                77 => 'universaldiscoverybrowseview-ez-template',
                78 => 'ez-universaldiscoverysearchview',
                79 => 'universaldiscoverysearchview-ez-template',
                80 => 'ez-universaldiscoveryselectedview',
                81 => 'universaldiscoveryselectedview-ez-template',
                82 => 'ez-confirmboxview',
                83 => 'confirmboxview-ez-template',
                84 => 'ez-languageselectionboxview',
                85 => 'languageselectionboxview-ez-template',
                86 => 'ez-notificationhubview',
                87 => 'ez-notificationview',
                88 => 'notificationview-ez-template',
                89 => 'ez-navigationhubview',
                90 => 'navigationhubview-ez-template',
                91 => 'ez-navigationitemsubtreeview',
                92 => 'ez-navigationitemparameterview',
                93 => 'ez-navigationitemview',
                94 => 'navigationitemview-ez-template',
                95 => 'ez-discoverybarview',
                96 => 'ez-actionbarview',
                97 => 'ez-rawcontentview',
                98 => 'rawcontentview-ez-template',
                99 => 'ez-languageswitcherview',
                100 => 'languageswitcherview-ez-template',
                101 => 'ez-contenteditview',
                102 => 'contenteditview-ez-template',
                103 => 'ez-contenteditformview',
                104 => 'contenteditformview-ez-template',
                105 => 'ez-fieldeditview',
                106 => 'fielddescription-tooltip-ez-partial',
                107 => 'ez-fieldview',
                108 => 'fieldview-ez-template',
                109 => 'ez-date-editview',
                110 => 'dateeditview-ez-template',
                111 => 'ez-dateandtime-editview',
                112 => 'dateandtimeeditview-ez-template',
                113 => 'ez-dateandtime-view',
                114 => 'dateandtimeview-ez-template',
                115 => 'ez-isbn-editview',
                116 => 'isbneditview-ez-template',
                117 => 'ez-time-editview',
                118 => 'timeeditview-ez-template',
                119 => 'ez-date-view',
                120 => 'ez-time-view',
                121 => 'ez-xmltext-view',
                122 => 'xmltextview-ez-template',
                123 => 'ez-checkbox-view',
                124 => 'ez-checkbox-editview',
                125 => 'checkboxeditview-ez-template',
                126 => 'ez-textline-editview',
                127 => 'textlineeditview-ez-template',
                128 => 'ez-textblock-editview',
                129 => 'textblockeditview-ez-template',
                130 => 'ez-xmltext-editview',
                131 => 'xmltexteditview-ez-template',
                132 => 'ez-richtext-editview',
                133 => 'richtexteditview-ez-template',
                134 => 'ez-image-editview',
                135 => 'imageeditview-ez-template',
                136 => 'ez-binaryfile-editview',
                137 => 'binaryfileeditview-ez-template',
                138 => 'ez-media-editview',
                139 => 'mediaeditview-ez-template',
                140 => 'ez-binarybase-editview',
                141 => 'ez-emailaddress-editview',
                142 => 'emailaddresseditview-ez-template',
                143 => 'ez-user-editview',
                144 => 'usereditview-ez-template',
                145 => 'ez-relationlist-view',
                146 => 'relationlistview-ez-template',
                147 => 'ez-relation-view',
                148 => 'relationview-ez-template',
                149 => 'ez-image-view',
                150 => 'imageview-ez-template',
                151 => 'ez-country-view',
                152 => 'countryview-ez-template',
                153 => 'ez-user-view',
                154 => 'userview-ez-template',
                155 => 'ez-binaryfile-view',
                156 => 'binaryfileview-ez-template',
                157 => 'ez-selection-view',
                158 => 'selectionview-ez-template',
                159 => 'ez-url-view',
                160 => 'urlview-ez-template',
                161 => 'ez-media-view',
                162 => 'mediaview-ez-template',
                163 => 'ez-url-editview',
                164 => 'urleditview-ez-template',
                165 => 'ez-country-editview',
                166 => 'countryeditview-ez-template',
                167 => 'ez-keyword-view',
                168 => 'keywordview-ez-template',
                169 => 'ez-keyword-editview',
                170 => 'keywordeditview-ez-template',
                171 => 'ez-author-view',
                172 => 'authorview-ez-template',
                173 => 'ez-author-editview',
                174 => 'authoreditview-ez-template',
                175 => 'authorinputview-ez-template',
                176 => 'ez-float-editview',
                177 => 'ez-float-view',
                178 => 'floateditview-ez-template',
                179 => 'ez-integer-view',
                180 => 'ez-integer-editview',
                181 => 'integereditview-ez-template',
                182 => 'ez-maplocation-view',
                183 => 'maplocationview-ez-template',
                184 => 'ez-maplocation-editview',
                185 => 'maplocationeditview-ez-template',
                186 => 'ez-relation-editview',
                187 => 'relationeditview-ez-template',
                188 => 'ez-relationlist-editview',
                189 => 'relationlisteditview-ez-template',
                190 => 'ez-richtext-view',
                191 => 'richtextview-ez-template',
                192 => 'ez-selection-editview',
                193 => 'selectioneditview-ez-template',
                194 => 'ez-selectionfilterview',
                195 => 'ez-restmodel',
                196 => 'ez-contentmodel',
                197 => 'ez-versionmodel',
                198 => 'ez-locationmodel',
                199 => 'ez-usermodel',
                200 => 'ez-contenttypemodel',
                201 => 'ez-contenttypegroupmodel',
                202 => 'ez-contentinfomodel',
                203 => 'ez-contenttree',
                204 => 'ez-notification',
                205 => 'ez-notificationlist',
                206 => 'ez-editactionbarview',
                207 => 'ez-buttonactionview',
                208 => 'buttonactionview-ez-template',
                209 => 'ez-previewactionview',
                210 => 'previewactionview-ez-template',
                211 => 'ez-treeactionview',
                212 => 'treeactionview-ez-template',
                213 => 'ez-translateactionview',
                214 => 'translateactionview-ez-template',
                215 => 'ez-movecontentactionview',
                216 => 'movecontentactionview-ez-template',
                217 => 'ez-createcontentactionview',
                218 => 'createcontentactionview-ez-template',
                219 => 'ez-contenttypeselectorview',
                220 => 'contenttypeselectorview-ez-template',
                221 => 'ez-editpreviewview',
                222 => 'editpreviewview-ez-template',
                223 => 'ez-barview',
                224 => 'barview-ez-template',
                225 => 'ez-treeview',
                226 => 'treeview-ez-template',
                227 => 'tree-ez-partial',
                228 => 'ez-serversideview',
                229 => 'ez-contenttypeeditserversideview',
                230 => 'ez-sectionserversideview',
                231 => 'ez-roleserversideview',
                232 => 'ez-texthelper',
                233 => 'ez-getflagcodehelper',
                234 => 'ez-googlemapapiloader',
                235 => 'ez-pluginregistry',
                236 => 'ez-positionplugin',
                237 => 'ez-updatetreeplugin',
                238 => 'ez-notificationhubplugin',
                239 => 'ez-confirmboxplugin',
                240 => 'ez-languageselectionboxplugin',
                241 => 'ez-universaldiscoveryplugin',
                242 => 'ez-domstateplugin',
                243 => 'ez-registerurlhelpersplugin',
                244 => 'ez-registerlanguagehelpersplugin',
                245 => 'ez-viewservicebaseplugin',
                246 => 'ez-objectrelationsloadplugin',
                247 => 'ez-userloadplugin',
                248 => 'ez-visibilityswitcherplugin',
                249 => 'ez-locationsloadplugin',
                250 => 'ez-locationcreateplugin',
                251 => 'ez-contentsetmainlocationplugin',
                252 => 'ez-locationremoveplugin',
                253 => 'ez-objectrelationloadplugin',
                254 => 'ez-imagevariationloadplugin',
                255 => 'ez-universaldiscoverycontenttreeplugin',
                256 => 'ez-discoverybarcontenttreeplugin',
                257 => 'ez-contenttreeplugin',
                258 => 'ez-locationsearchplugin',
                259 => 'ez-contentcreateplugin',
                260 => 'ez-copycontentplugin',
                261 => 'ez-discarddraftplugin',
                262 => 'ez-savedraftplugin',
                263 => 'ez-publishdraftplugin',
                264 => 'ez-sideviewservice',
                265 => 'ez-loginavailableplugin',
                266 => 'ez-height-change',
                267 => 'ez-asynchronousview',
                268 => 'ez-expandable',
                269 => 'ez-contentinfo-attributes',
                270 => 'ez-height-fit',
                271 => 'ez-accordion-element',
                272 => 'ez-tabs',
                273 => 'ez-selection-table',
                274 => 'ez-app-extension',
                275 => 'ez-app-extension-admin',
            ),
            'ez_platformui.default.css.files' => array(
                0 => 'bundles/ezplatformuiassets/vendors/pure/base-context-min.css',
                1 => 'bundles/ezplatformuiassets/vendors/pure/grids-min.css',
                2 => 'bundles/ezplatformuiassets/vendors/pure/buttons-min.css',
                3 => 'bundles/ezplatformuiassets/vendors/pure/tables-min.css',
                4 => 'bundles/ezplatformuiassets/vendors/pure/forms-min.css',
                5 => 'bundles/ezplatformuiassets/vendors/flag-icon-css/css/flag-icon.min.css',
                6 => 'bundles/ezplatformui/css/external/alloy-editor-ez.css',
                7 => 'bundles/ezplatformui/css/layout.css',
                8 => 'bundles/ezplatformui/css/views/navigationhub.css',
                9 => 'bundles/ezplatformui/css/views/confirmbox.css',
                10 => 'bundles/ezplatformui/css/views/languageselectionbox.css',
                11 => 'bundles/ezplatformui/css/views/notificationhub.css',
                12 => 'bundles/ezplatformui/css/views/notification.css',
                13 => 'bundles/ezplatformui/css/views/universaldiscovery.css',
                14 => 'bundles/ezplatformui/css/views/universaldiscovery/browse.css',
                15 => 'bundles/ezplatformui/css/views/universaldiscovery/search.css',
                16 => 'bundles/ezplatformui/css/views/universaldiscovery/selected.css',
                17 => 'bundles/ezplatformui/css/views/universaldiscovery/confirmedlist.css',
                18 => 'bundles/ezplatformui/css/views/tree.css',
                19 => 'bundles/ezplatformui/css/views/loginform.css',
                20 => 'bundles/ezplatformui/css/views/contentedit.css',
                21 => 'bundles/ezplatformui/css/views/locationview.css',
                22 => 'bundles/ezplatformui/css/views/subitemlist.css',
                23 => 'bundles/ezplatformui/css/views/rawcontent.css',
                24 => 'bundles/ezplatformui/css/views/languageswitcher.css',
                25 => 'bundles/ezplatformui/css/views/tabs/details.css',
                26 => 'bundles/ezplatformui/css/views/tabs/relations.css',
                27 => 'bundles/ezplatformui/css/views/tabs/locations.css',
                28 => 'bundles/ezplatformui/css/views/field.css',
                29 => 'bundles/ezplatformui/css/views/fields/view/user.css',
                30 => 'bundles/ezplatformui/css/views/fields/view/author.css',
                31 => 'bundles/ezplatformui/css/views/fields/view/maplocation.css',
                32 => 'bundles/ezplatformui/css/views/fields/view/selection.css',
                33 => 'bundles/ezplatformui/css/views/fields/view/keyword.css',
                34 => 'bundles/ezplatformui/css/views/fields/view/country.css',
                35 => 'bundles/ezplatformui/css/views/fields/view/media.css',
                36 => 'bundles/ezplatformui/css/views/fields/view/richtext.css',
                37 => 'bundles/ezplatformui/css/views/contenteditform.css',
                38 => 'bundles/ezplatformui/css/views/bar.css',
                39 => 'bundles/ezplatformui/css/views/discoverybar.css',
                40 => 'bundles/ezplatformui/css/views/contenttypeselector.css',
                41 => 'bundles/ezplatformui/css/views/actions/tree.css',
                42 => 'bundles/ezplatformui/css/views/actions/button.css',
                43 => 'bundles/ezplatformui/css/views/actions/preview.css',
                44 => 'bundles/ezplatformui/css/views/actions/create-content.css',
                45 => 'bundles/ezplatformui/css/views/actions/translate.css',
                46 => 'bundles/ezplatformui/css/views/editpreview.css',
                47 => 'bundles/ezplatformui/css/views/fieldedit.css',
                48 => 'bundles/ezplatformui/css/views/error.css',
                49 => 'bundles/ezplatformui/css/views/asynchronous.css',
                50 => 'bundles/ezplatformui/css/views/dashboard.css',
                51 => 'bundles/ezplatformui/css/views/studiopresentation.css',
                52 => 'bundles/ezplatformui/css/views/studiopluspresentation.css',
                53 => 'bundles/ezplatformui/css/views/fields/edit/checkbox.css',
                54 => 'bundles/ezplatformui/css/views/fields/edit/country.css',
                55 => 'bundles/ezplatformui/css/views/fields/edit/textline.css',
                56 => 'bundles/ezplatformui/css/views/fields/edit/keyword.css',
                57 => 'bundles/ezplatformui/css/views/fields/edit/textblock.css',
                58 => 'bundles/ezplatformui/css/views/fields/edit/xmltext.css',
                59 => 'bundles/ezplatformui/css/views/fields/edit/emailaddress.css',
                60 => 'bundles/ezplatformui/css/views/fields/edit/url.css',
                61 => 'bundles/ezplatformui/css/views/fields/edit/float.css',
                62 => 'bundles/ezplatformui/css/views/fields/edit/integer.css',
                63 => 'bundles/ezplatformui/css/views/fields/edit/maplocation.css',
                64 => 'bundles/ezplatformui/css/views/fields/edit/author.css',
                65 => 'bundles/ezplatformui/css/views/fields/edit/binarybase.css',
                66 => 'bundles/ezplatformui/css/views/fields/edit/image.css',
                67 => 'bundles/ezplatformui/css/views/fields/edit/media.css',
                68 => 'bundles/ezplatformui/css/views/fields/edit/binaryfile.css',
                69 => 'bundles/ezplatformui/css/views/fields/edit/selection.css',
                70 => 'bundles/ezplatformui/css/views/fields/edit/time.css',
                71 => 'bundles/ezplatformui/css/views/fields/edit/date.css',
                72 => 'bundles/ezplatformui/css/views/fields/edit/dateandtime.css',
                73 => 'bundles/ezplatformui/css/views/fields/edit/relation.css',
                74 => 'bundles/ezplatformui/css/views/fields/edit/relationlist.css',
                75 => 'bundles/ezplatformui/css/views/fields/edit/richtext.css',
                76 => 'bundles/ezplatformui/css/views/fields/edit/isbn.css',
                77 => 'bundles/ezplatformui/css/views/fields/edit/user.css',
                78 => 'bundles/ezplatformui/css/modules/tabs.css',
                79 => 'bundles/ezplatformui/css/modules/page-header.css',
                80 => 'bundles/ezplatformui/css/modules/serverside-content.css',
                81 => 'bundles/ezplatformui/css/modules/selection-filter.css',
                82 => 'bundles/ezplatformui/css/modules/button.css',
                83 => 'bundles/ezplatformui/css/modules/table-data.css',
                84 => 'bundles/ezplatformui/css/modules/breadcrumbs.css',
                85 => 'bundles/ezplatformui/css/modules/yui-calendar.css',
                86 => 'bundles/ezplatformui/css/modules/pure-grid.css',
                87 => 'bundles/ezplatformui/css/alloyeditor/general.css',
                88 => 'bundles/ezplatformui/css/alloyeditor/content.css',
                89 => 'bundles/ezplatformui/css/alloyeditor/buttons/labeled-button.css',
                90 => 'bundles/ezplatformui/css/theme/app.css',
                91 => 'bundles/ezplatformui/css/theme/views/error.css',
                92 => 'bundles/ezplatformui/css/theme/views/loginform.css',
                93 => 'bundles/ezplatformui/css/theme/views/bar.css',
                94 => 'bundles/ezplatformui/css/theme/views/confirmbox.css',
                95 => 'bundles/ezplatformui/css/theme/views/languageselectionbox.css',
                96 => 'bundles/ezplatformui/css/theme/views/notificationhub.css',
                97 => 'bundles/ezplatformui/css/theme/views/notification.css',
                98 => 'bundles/ezplatformui/css/theme/views/universaldiscovery.css',
                99 => 'bundles/ezplatformui/css/theme/views/universaldiscovery/browse.css',
                100 => 'bundles/ezplatformui/css/theme/views/universaldiscovery/search.css',
                101 => 'bundles/ezplatformui/css/theme/views/universaldiscovery/selected.css',
                102 => 'bundles/ezplatformui/css/theme/views/universaldiscovery/confirmedlist.css',
                103 => 'bundles/ezplatformui/css/theme/views/tree.css',
                104 => 'bundles/ezplatformui/css/theme/views/discoverybar.css',
                105 => 'bundles/ezplatformui/css/theme/views/contenttypeselector.css',
                106 => 'bundles/ezplatformui/css/theme/views/actions/tree.css',
                107 => 'bundles/ezplatformui/css/theme/views/actions/button.css',
                108 => 'bundles/ezplatformui/css/theme/views/actions/preview.css',
                109 => 'bundles/ezplatformui/css/theme/views/actions/create-content.css',
                110 => 'bundles/ezplatformui/css/theme/views/actions/translate.css',
                111 => 'bundles/ezplatformui/css/theme/views/dashboard.css',
                112 => 'bundles/ezplatformui/css/theme/views/studiopresentation.css',
                113 => 'bundles/ezplatformui/css/theme/views/studiopluspresentation.css',
                114 => 'bundles/ezplatformui/css/theme/views/serverside.css',
                115 => 'bundles/ezplatformui/css/theme/views/navigationhub.css',
                116 => 'bundles/ezplatformui/css/theme/views/locationview.css',
                117 => 'bundles/ezplatformui/css/theme/views/subitemlist.css',
                118 => 'bundles/ezplatformui/css/theme/views/rawcontent.css',
                119 => 'bundles/ezplatformui/css/theme/views/languageswitcher.css',
                120 => 'bundles/ezplatformui/css/theme/views/asynchronous.css',
                121 => 'bundles/ezplatformui/css/theme/views/tabs/details.css',
                122 => 'bundles/ezplatformui/css/theme/views/tabs/relations.css',
                123 => 'bundles/ezplatformui/css/theme/views/tabs/locations.css',
                124 => 'bundles/ezplatformui/css/theme/views/field.css',
                125 => 'bundles/ezplatformui/css/theme/views/fields/view/url.css',
                126 => 'bundles/ezplatformui/css/theme/views/fields/view/binaryfile.css',
                127 => 'bundles/ezplatformui/css/theme/views/fields/view/maplocation.css',
                128 => 'bundles/ezplatformui/css/theme/views/fields/view/xmltext.css',
                129 => 'bundles/ezplatformui/css/theme/views/fields/view/media.css',
                130 => 'bundles/ezplatformui/css/theme/views/fields/view/richtext.css',
                131 => 'bundles/ezplatformui/css/theme/views/contentedit.css',
                132 => 'bundles/ezplatformui/css/theme/views/contenteditform.css',
                133 => 'bundles/ezplatformui/css/theme/views/editpreview.css',
                134 => 'bundles/ezplatformui/css/theme/views/fieldedit.css',
                135 => 'bundles/ezplatformui/css/theme/views/fields/view/keyword.css',
                136 => 'bundles/ezplatformui/css/theme/views/fields/view/country.css',
                137 => 'bundles/ezplatformui/css/theme/views/fields/edit/maplocation.css',
                138 => 'bundles/ezplatformui/css/theme/views/fields/edit/author.css',
                139 => 'bundles/ezplatformui/css/theme/views/fields/edit/selection.css',
                140 => 'bundles/ezplatformui/css/theme/views/fields/edit/binarybase.css',
                141 => 'bundles/ezplatformui/css/theme/views/fields/edit/image.css',
                142 => 'bundles/ezplatformui/css/theme/views/fields/edit/media.css',
                143 => 'bundles/ezplatformui/css/theme/views/fields/edit/binaryfile.css',
                144 => 'bundles/ezplatformui/css/theme/views/fields/edit/date.css',
                145 => 'bundles/ezplatformui/css/theme/views/fields/edit/dateandtime.css',
                146 => 'bundles/ezplatformui/css/theme/views/fields/edit/relation.css',
                147 => 'bundles/ezplatformui/css/theme/views/fields/edit/relationlist.css',
                148 => 'bundles/ezplatformui/css/theme/views/fields/edit/country.css',
                149 => 'bundles/ezplatformui/css/theme/views/fields/edit/richtext.css',
                150 => 'bundles/ezplatformui/css/theme/views/fields/edit/user.css',
                151 => 'bundles/ezplatformui/css/theme/modules/icons.css',
                152 => 'bundles/ezplatformui/css/theme/modules/tabs.css',
                153 => 'bundles/ezplatformui/css/theme/modules/page-header.css',
                154 => 'bundles/ezplatformui/css/theme/modules/serverside-content.css',
                155 => 'bundles/ezplatformui/css/theme/modules/selection-filter.css',
                156 => 'bundles/ezplatformui/css/theme/modules/button.css',
                157 => 'bundles/ezplatformui/css/theme/modules/selection-table.css',
                158 => 'bundles/ezplatformui/css/theme/modules/breadcrumbs.css',
                159 => 'bundles/ezplatformui/css/theme/modules/yui-calendar.css',
                160 => 'bundles/ezplatformui/css/theme/alloyeditor/general.css',
                161 => 'bundles/ezplatformui/css/theme/alloyeditor/content.css',
                162 => 'bundles/ezplatformui/css/theme/alloyeditor/buttons/labeled-button.css',
                163 => 'bundles/ezplatformui/css/theme/alloyeditor/buttons/blockremove.css',
                164 => 'bundles/ezplatformui/css/theme/alloyeditor/buttons/embedhref.css',
            ),
            'ez_platformui.default.yui.modules.capi.path' => 'bundles/ezplatformuiassets/vendors/ez-js-rest-client/dist/CAPI.js',
            'ez_platformui.default.yui.modules.capi.type' => 'js',
            'ez_platformui.default.yui.modules.ez-capi.path' => 'bundles/ezplatformui/js/external/ez-capi.js',
            'ez_platformui.default.yui.modules.ez-capi.type' => 'js',
            'ez_platformui.default.yui.modules.alloyeditor.path' => 'bundles/ezplatformuiassets/vendors/alloy-editor/dist/alloy-editor/alloy-editor-all.js',
            'ez_platformui.default.yui.modules.alloyeditor.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor.path' => 'bundles/ezplatformui/js/external/ez-alloyeditor.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-link.path' => 'bundles/ezplatformui/js/alloyeditor/toolbars/config/link.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-link.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-text.path' => 'bundles/ezplatformui/js/alloyeditor/toolbars/config/text.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-text.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-table.path' => 'bundles/ezplatformui/js/alloyeditor/toolbars/config/table.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-table.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-block-base.path' => 'bundles/ezplatformui/js/alloyeditor/toolbars/config/block-base.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-block-base.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-heading.path' => 'bundles/ezplatformui/js/alloyeditor/toolbars/config/heading.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-heading.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-paragraph.path' => 'bundles/ezplatformui/js/alloyeditor/toolbars/config/paragraph.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-paragraph.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-embed.path' => 'bundles/ezplatformui/js/alloyeditor/toolbars/config/embed.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-embed.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-image.path' => 'bundles/ezplatformui/js/alloyeditor/toolbars/config/image.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-image.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-plugin-addcontent.path' => 'bundles/ezplatformui/js/alloyeditor/plugins/addcontent.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-plugin-addcontent.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-plugin-removeblock.path' => 'bundles/ezplatformui/js/alloyeditor/plugins/removeblock.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-plugin-removeblock.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-plugin-embed.path' => 'bundles/ezplatformui/js/alloyeditor/plugins/embed.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-plugin-embed.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-plugin-focusblock.path' => 'bundles/ezplatformui/js/alloyeditor/plugins/focusblock.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-plugin-focusblock.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-heading.path' => 'bundles/ezplatformui/js/alloyeditor/buttons/heading.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-heading.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-paragraph.path' => 'bundles/ezplatformui/js/alloyeditor/buttons/paragraph.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-paragraph.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-image.path' => 'bundles/ezplatformui/js/alloyeditor/buttons/image.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-image.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-embed.path' => 'bundles/ezplatformui/js/alloyeditor/buttons/embed.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-embed.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-blocktextalignleft.path' => 'bundles/ezplatformui/js/alloyeditor/buttons/blocktextalignleft.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-blocktextalignleft.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-blocktextaligncenter.path' => 'bundles/ezplatformui/js/alloyeditor/buttons/blocktextaligncenter.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-blocktextaligncenter.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-blocktextalignright.path' => 'bundles/ezplatformui/js/alloyeditor/buttons/blocktextalignright.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-blocktextalignright.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-blocktextalignjustify.path' => 'bundles/ezplatformui/js/alloyeditor/buttons/blocktextalignjustify.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-blocktextalignjustify.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-blockremove.path' => 'bundles/ezplatformui/js/alloyeditor/buttons/blockremove.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-blockremove.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-embedhref.path' => 'bundles/ezplatformui/js/alloyeditor/buttons/embedhref.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-embedhref.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-imagehref.path' => 'bundles/ezplatformui/js/alloyeditor/buttons/imagehref.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-imagehref.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-mixin-blocktextalign.path' => 'bundles/ezplatformui/js/alloyeditor/buttons/mixins/blocktextalign.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-mixin-blocktextalign.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-mixin-embeddiscovercontent.path' => 'bundles/ezplatformui/js/alloyeditor/buttons/mixins/embeddiscovercontent.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-mixin-embeddiscovercontent.type' => 'js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-mixin-embedimage.path' => 'bundles/ezplatformui/js/alloyeditor/buttons/mixins/embedimage.js',
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-mixin-embedimage.type' => 'js',
            'ez_platformui.default.yui.modules.ez-editorcontentprocessorbase.path' => 'bundles/ezplatformui/js/alloyeditor/processors/base.js',
            'ez_platformui.default.yui.modules.ez-editorcontentprocessorbase.type' => 'js',
            'ez_platformui.default.yui.modules.ez-editorcontentprocessorxhtml5edit.path' => 'bundles/ezplatformui/js/alloyeditor/processors/xhtml5edit.js',
            'ez_platformui.default.yui.modules.ez-editorcontentprocessorxhtml5edit.type' => 'js',
            'ez_platformui.default.yui.modules.ez-editorcontentprocessorremoveids.path' => 'bundles/ezplatformui/js/alloyeditor/processors/removeids.js',
            'ez_platformui.default.yui.modules.ez-editorcontentprocessorremoveids.type' => 'js',
            'ez_platformui.default.yui.modules.ez-platformuiapp.path' => 'bundles/ezplatformui/js/apps/ez-platformuiapp.js',
            'ez_platformui.default.yui.modules.ez-platformuiapp.type' => 'js',
            'ez_platformui.default.yui.modules.ez-viewservice.path' => 'bundles/ezplatformui/js/views/services/ez-viewservice.js',
            'ez_platformui.default.yui.modules.ez-viewservice.type' => 'js',
            'ez_platformui.default.yui.modules.ez-loginformviewservice.path' => 'bundles/ezplatformui/js/views/services/ez-loginformviewservice.js',
            'ez_platformui.default.yui.modules.ez-loginformviewservice.type' => 'js',
            'ez_platformui.default.yui.modules.ez-contenteditviewservice.path' => 'bundles/ezplatformui/js/views/services/ez-contenteditviewservice.js',
            'ez_platformui.default.yui.modules.ez-contenteditviewservice.type' => 'js',
            'ez_platformui.default.yui.modules.ez-contentcreateviewservice.path' => 'bundles/ezplatformui/js/views/services/ez-contentcreateviewservice.js',
            'ez_platformui.default.yui.modules.ez-contentcreateviewservice.type' => 'js',
            'ez_platformui.default.yui.modules.ez-locationviewviewservice.path' => 'bundles/ezplatformui/js/views/services/ez-locationviewviewservice.js',
            'ez_platformui.default.yui.modules.ez-locationviewviewservice.type' => 'js',
            'ez_platformui.default.yui.modules.ez-navigationhubviewservice.path' => 'bundles/ezplatformui/js/views/services/ez-navigationhubviewservice.js',
            'ez_platformui.default.yui.modules.ez-navigationhubviewservice.type' => 'js',
            'ez_platformui.default.yui.modules.ez-discoverybarviewservice.path' => 'bundles/ezplatformui/js/views/services/ez-discoverybarviewservice.js',
            'ez_platformui.default.yui.modules.ez-discoverybarviewservice.type' => 'js',
            'ez_platformui.default.yui.modules.ez-universaldiscoveryviewservice.path' => 'bundles/ezplatformui/js/views/services/ez-universaldiscoveryviewservice.js',
            'ez_platformui.default.yui.modules.ez-universaldiscoveryviewservice.type' => 'js',
            'ez_platformui.default.yui.modules.ez-confirmboxviewservice.path' => 'bundles/ezplatformui/js/views/services/ez-confirmboxviewservice.js',
            'ez_platformui.default.yui.modules.ez-confirmboxviewservice.type' => 'js',
            'ez_platformui.default.yui.modules.ez-languageselectionboxviewservice.path' => 'bundles/ezplatformui/js/views/services/ez-languageselectionboxviewservice.js',
            'ez_platformui.default.yui.modules.ez-languageselectionboxviewservice.type' => 'js',
            'ez_platformui.default.yui.modules.ez-notificationhubviewservice.path' => 'bundles/ezplatformui/js/views/services/ez-notificationhubviewservice.js',
            'ez_platformui.default.yui.modules.ez-notificationhubviewservice.type' => 'js',
            'ez_platformui.default.yui.modules.ez-serversideviewservice.path' => 'bundles/ezplatformui/js/views/services/ez-serversideviewservice.js',
            'ez_platformui.default.yui.modules.ez-serversideviewservice.type' => 'js',
            'ez_platformui.default.yui.modules.ez-sectionserversideviewservice.path' => 'bundles/ezplatformui/js/views/services/ez-sectionserversideviewservice.js',
            'ez_platformui.default.yui.modules.ez-sectionserversideviewservice.type' => 'js',
            'ez_platformui.default.yui.modules.ez-roleserversideviewservice.path' => 'bundles/ezplatformui/js/views/services/ez-roleserversideviewservice.js',
            'ez_platformui.default.yui.modules.ez-roleserversideviewservice.type' => 'js',
            'ez_platformui.default.yui.modules.ez-view.path' => 'bundles/ezplatformui/js/views/ez-view.js',
            'ez_platformui.default.yui.modules.ez-view.type' => 'js',
            'ez_platformui.default.yui.modules.ez-templatebasedview.path' => 'bundles/ezplatformui/js/views/ez-templatebasedview.js',
            'ez_platformui.default.yui.modules.ez-templatebasedview.type' => 'js',
            'ez_platformui.default.yui.modules.ez-loginformview.path' => 'bundles/ezplatformui/js/views/ez-loginformview.js',
            'ez_platformui.default.yui.modules.ez-loginformview.type' => 'js',
            'ez_platformui.default.yui.modules.loginformview-ez-template.path' => 'bundles/ezplatformui/templates/loginform.hbt',
            'ez_platformui.default.yui.modules.loginformview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-dashboardview.path' => 'bundles/ezplatformui/js/views/ez-dashboardview.js',
            'ez_platformui.default.yui.modules.ez-dashboardview.type' => 'js',
            'ez_platformui.default.yui.modules.dashboardview-ez-template.path' => 'bundles/ezplatformui/templates/dashboard.hbt',
            'ez_platformui.default.yui.modules.dashboardview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-locationviewview.path' => 'bundles/ezplatformui/js/views/ez-locationviewview.js',
            'ez_platformui.default.yui.modules.ez-locationviewview.type' => 'js',
            'ez_platformui.default.yui.modules.locationviewview-ez-template.path' => 'bundles/ezplatformui/templates/locationview.hbt',
            'ez_platformui.default.yui.modules.locationviewview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-subitemlistview.path' => 'bundles/ezplatformui/js/views/ez-subitemlistview.js',
            'ez_platformui.default.yui.modules.ez-subitemlistview.type' => 'js',
            'ez_platformui.default.yui.modules.subitemlistview-ez-template.path' => 'bundles/ezplatformui/templates/subitemlist.hbt',
            'ez_platformui.default.yui.modules.subitemlistview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-locationviewtabview.path' => 'bundles/ezplatformui/js/views/ez-locationviewtabview.js',
            'ez_platformui.default.yui.modules.ez-locationviewtabview.type' => 'js',
            'ez_platformui.default.yui.modules.ez-locationviewviewtabview.path' => 'bundles/ezplatformui/js/views/tabs/ez-locationviewviewtabview.js',
            'ez_platformui.default.yui.modules.ez-locationviewviewtabview.type' => 'js',
            'ez_platformui.default.yui.modules.locationviewviewtabview-ez-template.path' => 'bundles/ezplatformui/templates/tabs/view.hbt',
            'ez_platformui.default.yui.modules.locationviewviewtabview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-locationviewdetailstabview.path' => 'bundles/ezplatformui/js/views/tabs/ez-locationviewdetailstabview.js',
            'ez_platformui.default.yui.modules.ez-locationviewdetailstabview.type' => 'js',
            'ez_platformui.default.yui.modules.locationviewdetailstabview-ez-template.path' => 'bundles/ezplatformui/templates/tabs/details.hbt',
            'ez_platformui.default.yui.modules.locationviewdetailstabview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-locationviewrelationstabview.path' => 'bundles/ezplatformui/js/views/tabs/ez-locationviewrelationstabview.js',
            'ez_platformui.default.yui.modules.ez-locationviewrelationstabview.type' => 'js',
            'ez_platformui.default.yui.modules.locationviewrelationstabview-ez-template.path' => 'bundles/ezplatformui/templates/tabs/relations.hbt',
            'ez_platformui.default.yui.modules.locationviewrelationstabview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-locationviewlocationstabview.path' => 'bundles/ezplatformui/js/views/tabs/ez-locationviewlocationstabview.js',
            'ez_platformui.default.yui.modules.ez-locationviewlocationstabview.type' => 'js',
            'ez_platformui.default.yui.modules.locationviewlocationstabview-ez-template.path' => 'bundles/ezplatformui/templates/tabs/locations.hbt',
            'ez_platformui.default.yui.modules.locationviewlocationstabview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-studiopresentationview.path' => 'bundles/ezplatformui/js/views/ez-studiopresentationview.js',
            'ez_platformui.default.yui.modules.ez-studiopresentationview.type' => 'js',
            'ez_platformui.default.yui.modules.studiopresentationview-ez-template.path' => 'bundles/ezplatformui/templates/studiopresentation.hbt',
            'ez_platformui.default.yui.modules.studiopresentationview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-studiopluspresentationview.path' => 'bundles/ezplatformui/js/views/ez-studiopluspresentationview.js',
            'ez_platformui.default.yui.modules.ez-studiopluspresentationview.type' => 'js',
            'ez_platformui.default.yui.modules.studiopluspresentationview-ez-template.path' => 'bundles/ezplatformui/templates/studiopluspresentation.hbt',
            'ez_platformui.default.yui.modules.studiopluspresentationview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-universaldiscoveryview.path' => 'bundles/ezplatformui/js/views/ez-universaldiscoveryview.js',
            'ez_platformui.default.yui.modules.ez-universaldiscoveryview.type' => 'js',
            'ez_platformui.default.yui.modules.universaldiscoveryview-ez-template.path' => 'bundles/ezplatformui/templates/universaldiscovery.hbt',
            'ez_platformui.default.yui.modules.universaldiscoveryview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-universaldiscoveryconfirmedlistview.path' => 'bundles/ezplatformui/js/views/universaldiscovery//ez-universaldiscoveryconfirmedlistview.js',
            'ez_platformui.default.yui.modules.ez-universaldiscoveryconfirmedlistview.type' => 'js',
            'ez_platformui.default.yui.modules.universaldiscoveryconfirmedlistview-ez-template.path' => 'bundles/ezplatformui/templates/universaldiscovery/confirmedlist.hbt',
            'ez_platformui.default.yui.modules.universaldiscoveryconfirmedlistview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-universaldiscoverymethodbaseview.path' => 'bundles/ezplatformui/js/views/universaldiscovery/ez-universaldiscoverymethodbaseview.js',
            'ez_platformui.default.yui.modules.ez-universaldiscoverymethodbaseview.type' => 'js',
            'ez_platformui.default.yui.modules.ez-universaldiscoverybrowseview.path' => 'bundles/ezplatformui/js/views/universaldiscovery/ez-universaldiscoverybrowseview.js',
            'ez_platformui.default.yui.modules.ez-universaldiscoverybrowseview.type' => 'js',
            'ez_platformui.default.yui.modules.universaldiscoverybrowseview-ez-template.path' => 'bundles/ezplatformui/templates/universaldiscovery/browse.hbt',
            'ez_platformui.default.yui.modules.universaldiscoverybrowseview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-universaldiscoverysearchview.path' => 'bundles/ezplatformui/js/views/universaldiscovery/ez-universaldiscoverysearchview.js',
            'ez_platformui.default.yui.modules.ez-universaldiscoverysearchview.type' => 'js',
            'ez_platformui.default.yui.modules.universaldiscoverysearchview-ez-template.path' => 'bundles/ezplatformui/templates/universaldiscovery/search.hbt',
            'ez_platformui.default.yui.modules.universaldiscoverysearchview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-universaldiscoveryselectedview.path' => 'bundles/ezplatformui/js/views/universaldiscovery//ez-universaldiscoveryselectedview.js',
            'ez_platformui.default.yui.modules.ez-universaldiscoveryselectedview.type' => 'js',
            'ez_platformui.default.yui.modules.universaldiscoveryselectedview-ez-template.path' => 'bundles/ezplatformui/templates/universaldiscovery/selected.hbt',
            'ez_platformui.default.yui.modules.universaldiscoveryselectedview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-confirmboxview.path' => 'bundles/ezplatformui/js/views/ez-confirmboxview.js',
            'ez_platformui.default.yui.modules.ez-confirmboxview.type' => 'js',
            'ez_platformui.default.yui.modules.confirmboxview-ez-template.path' => 'bundles/ezplatformui/templates/confirmbox.hbt',
            'ez_platformui.default.yui.modules.confirmboxview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-languageselectionboxview.path' => 'bundles/ezplatformui/js/views/ez-languageselectionboxview.js',
            'ez_platformui.default.yui.modules.ez-languageselectionboxview.type' => 'js',
            'ez_platformui.default.yui.modules.languageselectionboxview-ez-template.path' => 'bundles/ezplatformui/templates/languageselectionbox.hbt',
            'ez_platformui.default.yui.modules.languageselectionboxview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-notificationhubview.path' => 'bundles/ezplatformui/js/views/ez-notificationhubview.js',
            'ez_platformui.default.yui.modules.ez-notificationhubview.type' => 'js',
            'ez_platformui.default.yui.modules.ez-notificationview.path' => 'bundles/ezplatformui/js/views/ez-notificationview.js',
            'ez_platformui.default.yui.modules.ez-notificationview.type' => 'js',
            'ez_platformui.default.yui.modules.notificationview-ez-template.path' => 'bundles/ezplatformui/templates/notification.hbt',
            'ez_platformui.default.yui.modules.notificationview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-navigationhubview.path' => 'bundles/ezplatformui/js/views/ez-navigationhubview.js',
            'ez_platformui.default.yui.modules.ez-navigationhubview.type' => 'js',
            'ez_platformui.default.yui.modules.navigationhubview-ez-template.path' => 'bundles/ezplatformui/templates/navigationhub.hbt',
            'ez_platformui.default.yui.modules.navigationhubview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-navigationitemsubtreeview.path' => 'bundles/ezplatformui/js/views/navigation/ez-navigationitemsubtreeview.js',
            'ez_platformui.default.yui.modules.ez-navigationitemsubtreeview.type' => 'js',
            'ez_platformui.default.yui.modules.ez-navigationitemparameterview.path' => 'bundles/ezplatformui/js/views/navigation/ez-navigationitemparameterview.js',
            'ez_platformui.default.yui.modules.ez-navigationitemparameterview.type' => 'js',
            'ez_platformui.default.yui.modules.ez-navigationitemview.path' => 'bundles/ezplatformui/js/views/navigation/ez-navigationitemview.js',
            'ez_platformui.default.yui.modules.ez-navigationitemview.type' => 'js',
            'ez_platformui.default.yui.modules.navigationitemview-ez-template.path' => 'bundles/ezplatformui/templates/navigation/item.hbt',
            'ez_platformui.default.yui.modules.navigationitemview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-discoverybarview.path' => 'bundles/ezplatformui/js/views/ez-discoverybarview.js',
            'ez_platformui.default.yui.modules.ez-discoverybarview.type' => 'js',
            'ez_platformui.default.yui.modules.ez-actionbarview.path' => 'bundles/ezplatformui/js/views/ez-actionbarview.js',
            'ez_platformui.default.yui.modules.ez-actionbarview.type' => 'js',
            'ez_platformui.default.yui.modules.ez-rawcontentview.path' => 'bundles/ezplatformui/js/views/ez-rawcontentview.js',
            'ez_platformui.default.yui.modules.ez-rawcontentview.type' => 'js',
            'ez_platformui.default.yui.modules.rawcontentview-ez-template.path' => 'bundles/ezplatformui/templates/rawcontent.hbt',
            'ez_platformui.default.yui.modules.rawcontentview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-languageswitcherview.path' => 'bundles/ezplatformui/js/views/ez-languageswitcherview.js',
            'ez_platformui.default.yui.modules.ez-languageswitcherview.type' => 'js',
            'ez_platformui.default.yui.modules.languageswitcherview-ez-template.path' => 'bundles/ezplatformui/templates/languageswitcher.hbt',
            'ez_platformui.default.yui.modules.languageswitcherview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-contenteditview.path' => 'bundles/ezplatformui/js/views/ez-contenteditview.js',
            'ez_platformui.default.yui.modules.ez-contenteditview.type' => 'js',
            'ez_platformui.default.yui.modules.contenteditview-ez-template.path' => 'bundles/ezplatformui/templates/contentedit.hbt',
            'ez_platformui.default.yui.modules.contenteditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-contenteditformview.path' => 'bundles/ezplatformui/js/views/ez-contenteditformview.js',
            'ez_platformui.default.yui.modules.ez-contenteditformview.type' => 'js',
            'ez_platformui.default.yui.modules.contenteditformview-ez-template.path' => 'bundles/ezplatformui/templates/contenteditform.hbt',
            'ez_platformui.default.yui.modules.contenteditformview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-fieldeditview.path' => 'bundles/ezplatformui/js/views/ez-fieldeditview.js',
            'ez_platformui.default.yui.modules.ez-fieldeditview.type' => 'js',
            'ez_platformui.default.yui.modules.fielddescription-tooltip-ez-partial.path' => 'bundles/ezplatformui/templates/partials/fielddescription_tooltip.hbt',
            'ez_platformui.default.yui.modules.fielddescription-tooltip-ez-partial.type' => 'template',
            'ez_platformui.default.yui.modules.ez-fieldview.path' => 'bundles/ezplatformui/js/views/ez-fieldview.js',
            'ez_platformui.default.yui.modules.ez-fieldview.type' => 'js',
            'ez_platformui.default.yui.modules.fieldview-ez-template.path' => 'bundles/ezplatformui/templates/fields/view/field.hbt',
            'ez_platformui.default.yui.modules.fieldview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-date-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-date-editview.js',
            'ez_platformui.default.yui.modules.ez-date-editview.type' => 'js',
            'ez_platformui.default.yui.modules.dateeditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/date.hbt',
            'ez_platformui.default.yui.modules.dateeditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-dateandtime-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-dateandtime-editview.js',
            'ez_platformui.default.yui.modules.ez-dateandtime-editview.type' => 'js',
            'ez_platformui.default.yui.modules.dateandtimeeditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/dateandtime.hbt',
            'ez_platformui.default.yui.modules.dateandtimeeditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-dateandtime-view.path' => 'bundles/ezplatformui/js/views/fields/ez-dateandtime-view.js',
            'ez_platformui.default.yui.modules.ez-dateandtime-view.type' => 'js',
            'ez_platformui.default.yui.modules.dateandtimeview-ez-template.path' => 'bundles/ezplatformui/templates/fields/view/dateandtime.hbt',
            'ez_platformui.default.yui.modules.dateandtimeview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-isbn-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-isbn-editview.js',
            'ez_platformui.default.yui.modules.ez-isbn-editview.type' => 'js',
            'ez_platformui.default.yui.modules.isbneditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/isbn.hbt',
            'ez_platformui.default.yui.modules.isbneditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-time-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-time-editview.js',
            'ez_platformui.default.yui.modules.ez-time-editview.type' => 'js',
            'ez_platformui.default.yui.modules.timeeditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/time.hbt',
            'ez_platformui.default.yui.modules.timeeditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-date-view.path' => 'bundles/ezplatformui/js/views/fields/ez-date-view.js',
            'ez_platformui.default.yui.modules.ez-date-view.type' => 'js',
            'ez_platformui.default.yui.modules.ez-time-view.path' => 'bundles/ezplatformui/js/views/fields/ez-time-view.js',
            'ez_platformui.default.yui.modules.ez-time-view.type' => 'js',
            'ez_platformui.default.yui.modules.ez-xmltext-view.path' => 'bundles/ezplatformui/js/views/fields/ez-xmltext-view.js',
            'ez_platformui.default.yui.modules.ez-xmltext-view.type' => 'js',
            'ez_platformui.default.yui.modules.xmltextview-ez-template.path' => 'bundles/ezplatformui/templates/fields/view/xmltext.hbt',
            'ez_platformui.default.yui.modules.xmltextview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-checkbox-view.path' => 'bundles/ezplatformui/js/views/fields/ez-checkbox-view.js',
            'ez_platformui.default.yui.modules.ez-checkbox-view.type' => 'js',
            'ez_platformui.default.yui.modules.ez-checkbox-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-checkbox-editview.js',
            'ez_platformui.default.yui.modules.ez-checkbox-editview.type' => 'js',
            'ez_platformui.default.yui.modules.checkboxeditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/checkbox.hbt',
            'ez_platformui.default.yui.modules.checkboxeditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-textline-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-textline-editview.js',
            'ez_platformui.default.yui.modules.ez-textline-editview.type' => 'js',
            'ez_platformui.default.yui.modules.textlineeditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/textline.hbt',
            'ez_platformui.default.yui.modules.textlineeditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-textblock-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-textblock-editview.js',
            'ez_platformui.default.yui.modules.ez-textblock-editview.type' => 'js',
            'ez_platformui.default.yui.modules.textblockeditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/textblock.hbt',
            'ez_platformui.default.yui.modules.textblockeditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-xmltext-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-xmltext-editview.js',
            'ez_platformui.default.yui.modules.ez-xmltext-editview.type' => 'js',
            'ez_platformui.default.yui.modules.xmltexteditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/xmltext.hbt',
            'ez_platformui.default.yui.modules.xmltexteditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-richtext-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-richtext-editview.js',
            'ez_platformui.default.yui.modules.ez-richtext-editview.type' => 'js',
            'ez_platformui.default.yui.modules.richtexteditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/richtext.hbt',
            'ez_platformui.default.yui.modules.richtexteditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-image-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-image-editview.js',
            'ez_platformui.default.yui.modules.ez-image-editview.type' => 'js',
            'ez_platformui.default.yui.modules.imageeditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/image.hbt',
            'ez_platformui.default.yui.modules.imageeditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-binaryfile-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-binaryfile-editview.js',
            'ez_platformui.default.yui.modules.ez-binaryfile-editview.type' => 'js',
            'ez_platformui.default.yui.modules.binaryfileeditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/binaryfile.hbt',
            'ez_platformui.default.yui.modules.binaryfileeditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-media-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-media-editview.js',
            'ez_platformui.default.yui.modules.ez-media-editview.type' => 'js',
            'ez_platformui.default.yui.modules.mediaeditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/media.hbt',
            'ez_platformui.default.yui.modules.mediaeditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-binarybase-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-binarybase-editview.js',
            'ez_platformui.default.yui.modules.ez-binarybase-editview.type' => 'js',
            'ez_platformui.default.yui.modules.ez-emailaddress-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-emailaddress-editview.js',
            'ez_platformui.default.yui.modules.ez-emailaddress-editview.type' => 'js',
            'ez_platformui.default.yui.modules.emailaddresseditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/emailaddress.hbt',
            'ez_platformui.default.yui.modules.emailaddresseditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-user-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-user-editview.js',
            'ez_platformui.default.yui.modules.ez-user-editview.type' => 'js',
            'ez_platformui.default.yui.modules.usereditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/user.hbt',
            'ez_platformui.default.yui.modules.usereditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-relationlist-view.path' => 'bundles/ezplatformui/js/views/fields/ez-relationlist-view.js',
            'ez_platformui.default.yui.modules.ez-relationlist-view.type' => 'js',
            'ez_platformui.default.yui.modules.relationlistview-ez-template.path' => 'bundles/ezplatformui/templates/fields/view/relationlist.hbt',
            'ez_platformui.default.yui.modules.relationlistview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-relation-view.path' => 'bundles/ezplatformui/js/views/fields/ez-relation-view.js',
            'ez_platformui.default.yui.modules.ez-relation-view.type' => 'js',
            'ez_platformui.default.yui.modules.relationview-ez-template.path' => 'bundles/ezplatformui/templates/fields/view/relation.hbt',
            'ez_platformui.default.yui.modules.relationview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-image-view.path' => 'bundles/ezplatformui/js/views/fields/ez-image-view.js',
            'ez_platformui.default.yui.modules.ez-image-view.type' => 'js',
            'ez_platformui.default.yui.modules.imageview-ez-template.path' => 'bundles/ezplatformui/templates/fields/view/image.hbt',
            'ez_platformui.default.yui.modules.imageview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-country-view.path' => 'bundles/ezplatformui/js/views/fields/ez-country-view.js',
            'ez_platformui.default.yui.modules.ez-country-view.type' => 'js',
            'ez_platformui.default.yui.modules.countryview-ez-template.path' => 'bundles/ezplatformui/templates/fields/view/country.hbt',
            'ez_platformui.default.yui.modules.countryview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-user-view.path' => 'bundles/ezplatformui/js/views/fields/ez-user-view.js',
            'ez_platformui.default.yui.modules.ez-user-view.type' => 'js',
            'ez_platformui.default.yui.modules.userview-ez-template.path' => 'bundles/ezplatformui/templates/fields/view/user.hbt',
            'ez_platformui.default.yui.modules.userview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-binaryfile-view.path' => 'bundles/ezplatformui/js/views/fields/ez-binaryfile-view.js',
            'ez_platformui.default.yui.modules.ez-binaryfile-view.type' => 'js',
            'ez_platformui.default.yui.modules.binaryfileview-ez-template.path' => 'bundles/ezplatformui/templates/fields/view/binaryfile.hbt',
            'ez_platformui.default.yui.modules.binaryfileview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-selection-view.path' => 'bundles/ezplatformui/js/views/fields/ez-selection-view.js',
            'ez_platformui.default.yui.modules.ez-selection-view.type' => 'js',
            'ez_platformui.default.yui.modules.selectionview-ez-template.path' => 'bundles/ezplatformui/templates/fields/view/selection.hbt',
            'ez_platformui.default.yui.modules.selectionview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-url-view.path' => 'bundles/ezplatformui/js/views/fields/ez-url-view.js',
            'ez_platformui.default.yui.modules.ez-url-view.type' => 'js',
            'ez_platformui.default.yui.modules.urlview-ez-template.path' => 'bundles/ezplatformui/templates/fields/view/url.hbt',
            'ez_platformui.default.yui.modules.urlview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-media-view.path' => 'bundles/ezplatformui/js/views/fields/ez-media-view.js',
            'ez_platformui.default.yui.modules.ez-media-view.type' => 'js',
            'ez_platformui.default.yui.modules.mediaview-ez-template.path' => 'bundles/ezplatformui/templates/fields/view/media.hbt',
            'ez_platformui.default.yui.modules.mediaview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-url-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-url-editview.js',
            'ez_platformui.default.yui.modules.ez-url-editview.type' => 'js',
            'ez_platformui.default.yui.modules.urleditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/url.hbt',
            'ez_platformui.default.yui.modules.urleditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-country-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-country-editview.js',
            'ez_platformui.default.yui.modules.ez-country-editview.type' => 'js',
            'ez_platformui.default.yui.modules.countryeditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/country.hbt',
            'ez_platformui.default.yui.modules.countryeditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-keyword-view.path' => 'bundles/ezplatformui/js/views/fields/ez-keyword-view.js',
            'ez_platformui.default.yui.modules.ez-keyword-view.type' => 'js',
            'ez_platformui.default.yui.modules.keywordview-ez-template.path' => 'bundles/ezplatformui/templates/fields/view/keyword.hbt',
            'ez_platformui.default.yui.modules.keywordview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-keyword-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-keyword-editview.js',
            'ez_platformui.default.yui.modules.ez-keyword-editview.type' => 'js',
            'ez_platformui.default.yui.modules.keywordeditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/keyword.hbt',
            'ez_platformui.default.yui.modules.keywordeditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-author-view.path' => 'bundles/ezplatformui/js/views/fields/ez-author-view.js',
            'ez_platformui.default.yui.modules.ez-author-view.type' => 'js',
            'ez_platformui.default.yui.modules.authorview-ez-template.path' => 'bundles/ezplatformui/templates/fields/view/author.hbt',
            'ez_platformui.default.yui.modules.authorview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-author-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-author-editview.js',
            'ez_platformui.default.yui.modules.ez-author-editview.type' => 'js',
            'ez_platformui.default.yui.modules.authoreditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/author.hbt',
            'ez_platformui.default.yui.modules.authoreditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.authorinputview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/authorinput.hbt',
            'ez_platformui.default.yui.modules.authorinputview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-float-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-float-editview.js',
            'ez_platformui.default.yui.modules.ez-float-editview.type' => 'js',
            'ez_platformui.default.yui.modules.ez-float-view.path' => 'bundles/ezplatformui/js/views/fields/ez-float-view.js',
            'ez_platformui.default.yui.modules.ez-float-view.type' => 'js',
            'ez_platformui.default.yui.modules.floateditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/float.hbt',
            'ez_platformui.default.yui.modules.floateditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-integer-view.path' => 'bundles/ezplatformui/js/views/fields/ez-integer-view.js',
            'ez_platformui.default.yui.modules.ez-integer-view.type' => 'js',
            'ez_platformui.default.yui.modules.ez-integer-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-integer-editview.js',
            'ez_platformui.default.yui.modules.ez-integer-editview.type' => 'js',
            'ez_platformui.default.yui.modules.integereditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/integer.hbt',
            'ez_platformui.default.yui.modules.integereditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-maplocation-view.path' => 'bundles/ezplatformui/js/views/fields/ez-maplocation-view.js',
            'ez_platformui.default.yui.modules.ez-maplocation-view.type' => 'js',
            'ez_platformui.default.yui.modules.maplocationview-ez-template.path' => 'bundles/ezplatformui/templates/fields/view/maplocation.hbt',
            'ez_platformui.default.yui.modules.maplocationview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-maplocation-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-maplocation-editview.js',
            'ez_platformui.default.yui.modules.ez-maplocation-editview.type' => 'js',
            'ez_platformui.default.yui.modules.maplocationeditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/maplocation.hbt',
            'ez_platformui.default.yui.modules.maplocationeditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-relation-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-relation-editview.js',
            'ez_platformui.default.yui.modules.ez-relation-editview.type' => 'js',
            'ez_platformui.default.yui.modules.relationeditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/relation.hbt',
            'ez_platformui.default.yui.modules.relationeditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-relationlist-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-relationlist-editview.js',
            'ez_platformui.default.yui.modules.ez-relationlist-editview.type' => 'js',
            'ez_platformui.default.yui.modules.relationlisteditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/relationlist.hbt',
            'ez_platformui.default.yui.modules.relationlisteditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-richtext-view.path' => 'bundles/ezplatformui/js/views/fields/ez-richtext-view.js',
            'ez_platformui.default.yui.modules.ez-richtext-view.type' => 'js',
            'ez_platformui.default.yui.modules.richtextview-ez-template.path' => 'bundles/ezplatformui/templates/fields/view/richtext.hbt',
            'ez_platformui.default.yui.modules.richtextview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-selection-editview.path' => 'bundles/ezplatformui/js/views/fields/ez-selection-editview.js',
            'ez_platformui.default.yui.modules.ez-selection-editview.type' => 'js',
            'ez_platformui.default.yui.modules.selectioneditview-ez-template.path' => 'bundles/ezplatformui/templates/fields/edit/selection.hbt',
            'ez_platformui.default.yui.modules.selectioneditview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-selectionfilterview.path' => 'bundles/ezplatformui/js/views/ez-selectionfilterview.js',
            'ez_platformui.default.yui.modules.ez-selectionfilterview.type' => 'js',
            'ez_platformui.default.yui.modules.ez-restmodel.path' => 'bundles/ezplatformui/js/models/ez-restmodel.js',
            'ez_platformui.default.yui.modules.ez-restmodel.type' => 'js',
            'ez_platformui.default.yui.modules.ez-contentmodel.path' => 'bundles/ezplatformui/js/models/ez-contentmodel.js',
            'ez_platformui.default.yui.modules.ez-contentmodel.type' => 'js',
            'ez_platformui.default.yui.modules.ez-versionmodel.path' => 'bundles/ezplatformui/js/models/ez-versionmodel.js',
            'ez_platformui.default.yui.modules.ez-versionmodel.type' => 'js',
            'ez_platformui.default.yui.modules.ez-locationmodel.path' => 'bundles/ezplatformui/js/models/ez-locationmodel.js',
            'ez_platformui.default.yui.modules.ez-locationmodel.type' => 'js',
            'ez_platformui.default.yui.modules.ez-usermodel.path' => 'bundles/ezplatformui/js/models/ez-usermodel.js',
            'ez_platformui.default.yui.modules.ez-usermodel.type' => 'js',
            'ez_platformui.default.yui.modules.ez-contenttypemodel.path' => 'bundles/ezplatformui/js/models/ez-contenttypemodel.js',
            'ez_platformui.default.yui.modules.ez-contenttypemodel.type' => 'js',
            'ez_platformui.default.yui.modules.ez-contenttypegroupmodel.path' => 'bundles/ezplatformui/js/models/ez-contenttypegroupmodel.js',
            'ez_platformui.default.yui.modules.ez-contenttypegroupmodel.type' => 'js',
            'ez_platformui.default.yui.modules.ez-contentinfomodel.path' => 'bundles/ezplatformui/js/models/ez-contentinfomodel.js',
            'ez_platformui.default.yui.modules.ez-contentinfomodel.type' => 'js',
            'ez_platformui.default.yui.modules.ez-contenttree.path' => 'bundles/ezplatformui/js/models/structs/ez-contenttree.js',
            'ez_platformui.default.yui.modules.ez-contenttree.type' => 'js',
            'ez_platformui.default.yui.modules.ez-notification.path' => 'bundles/ezplatformui/js/models/structs/ez-notification.js',
            'ez_platformui.default.yui.modules.ez-notification.type' => 'js',
            'ez_platformui.default.yui.modules.ez-notificationlist.path' => 'bundles/ezplatformui/js/models/structs/ez-notificationlist.js',
            'ez_platformui.default.yui.modules.ez-notificationlist.type' => 'js',
            'ez_platformui.default.yui.modules.ez-editactionbarview.path' => 'bundles/ezplatformui/js/views/ez-editactionbarview.js',
            'ez_platformui.default.yui.modules.ez-editactionbarview.type' => 'js',
            'ez_platformui.default.yui.modules.ez-buttonactionview.path' => 'bundles/ezplatformui/js/views/actions/ez-buttonactionview.js',
            'ez_platformui.default.yui.modules.ez-buttonactionview.type' => 'js',
            'ez_platformui.default.yui.modules.buttonactionview-ez-template.path' => 'bundles/ezplatformui/templates/buttonaction.hbt',
            'ez_platformui.default.yui.modules.buttonactionview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-previewactionview.path' => 'bundles/ezplatformui/js/views/actions/ez-previewactionview.js',
            'ez_platformui.default.yui.modules.ez-previewactionview.type' => 'js',
            'ez_platformui.default.yui.modules.previewactionview-ez-template.path' => 'bundles/ezplatformui/templates/previewaction.hbt',
            'ez_platformui.default.yui.modules.previewactionview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-treeactionview.path' => 'bundles/ezplatformui/js/views/actions/ez-treeactionview.js',
            'ez_platformui.default.yui.modules.ez-treeactionview.type' => 'js',
            'ez_platformui.default.yui.modules.treeactionview-ez-template.path' => 'bundles/ezplatformui/templates/treeaction.hbt',
            'ez_platformui.default.yui.modules.treeactionview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-translateactionview.path' => 'bundles/ezplatformui/js/views/actions/ez-translateactionview.js',
            'ez_platformui.default.yui.modules.ez-translateactionview.type' => 'js',
            'ez_platformui.default.yui.modules.translateactionview-ez-template.path' => 'bundles/ezplatformui/templates/translateaction.hbt',
            'ez_platformui.default.yui.modules.translateactionview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-movecontentactionview.path' => 'bundles/ezplatformui/js/views/actions/ez-movecontentactionview.js',
            'ez_platformui.default.yui.modules.ez-movecontentactionview.type' => 'js',
            'ez_platformui.default.yui.modules.movecontentactionview-ez-template.path' => 'bundles/ezplatformui/templates/buttonaction.hbt',
            'ez_platformui.default.yui.modules.movecontentactionview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-createcontentactionview.path' => 'bundles/ezplatformui/js/views/actions/ez-createcontentactionview.js',
            'ez_platformui.default.yui.modules.ez-createcontentactionview.type' => 'js',
            'ez_platformui.default.yui.modules.createcontentactionview-ez-template.path' => 'bundles/ezplatformui/templates/createcontentaction.hbt',
            'ez_platformui.default.yui.modules.createcontentactionview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-contenttypeselectorview.path' => 'bundles/ezplatformui/js/views/ez-contenttypeselectorview.js',
            'ez_platformui.default.yui.modules.ez-contenttypeselectorview.type' => 'js',
            'ez_platformui.default.yui.modules.contenttypeselectorview-ez-template.path' => 'bundles/ezplatformui/templates/contenttypeselector.hbt',
            'ez_platformui.default.yui.modules.contenttypeselectorview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-editpreviewview.path' => 'bundles/ezplatformui/js/views/ez-editpreviewview.js',
            'ez_platformui.default.yui.modules.ez-editpreviewview.type' => 'js',
            'ez_platformui.default.yui.modules.editpreviewview-ez-template.path' => 'bundles/ezplatformui/templates/editpreview.hbt',
            'ez_platformui.default.yui.modules.editpreviewview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-barview.path' => 'bundles/ezplatformui/js/views/ez-barview.js',
            'ez_platformui.default.yui.modules.ez-barview.type' => 'js',
            'ez_platformui.default.yui.modules.barview-ez-template.path' => 'bundles/ezplatformui/templates/bar.hbt',
            'ez_platformui.default.yui.modules.barview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.ez-treeview.path' => 'bundles/ezplatformui/js/views/ez-treeview.js',
            'ez_platformui.default.yui.modules.ez-treeview.type' => 'js',
            'ez_platformui.default.yui.modules.treeview-ez-template.path' => 'bundles/ezplatformui/templates/tree.hbt',
            'ez_platformui.default.yui.modules.treeview-ez-template.type' => 'template',
            'ez_platformui.default.yui.modules.tree-ez-partial.path' => 'bundles/ezplatformui/templates/partials/tree.hbt',
            'ez_platformui.default.yui.modules.tree-ez-partial.type' => 'template',
            'ez_platformui.default.yui.modules.ez-serversideview.path' => 'bundles/ezplatformui/js/views/ez-serversideview.js',
            'ez_platformui.default.yui.modules.ez-serversideview.type' => 'js',
            'ez_platformui.default.yui.modules.ez-contenttypeeditserversideview.path' => 'bundles/ezplatformui/js/views/serverside/ez-contenttypeeditserversideview.js',
            'ez_platformui.default.yui.modules.ez-contenttypeeditserversideview.type' => 'js',
            'ez_platformui.default.yui.modules.ez-sectionserversideview.path' => 'bundles/ezplatformui/js/views/serverside/ez-sectionserversideview.js',
            'ez_platformui.default.yui.modules.ez-sectionserversideview.type' => 'js',
            'ez_platformui.default.yui.modules.ez-roleserversideview.path' => 'bundles/ezplatformui/js/views/serverside/ez-roleserversideview.js',
            'ez_platformui.default.yui.modules.ez-roleserversideview.type' => 'js',
            'ez_platformui.default.yui.modules.ez-texthelper.path' => 'bundles/ezplatformui/js/helpers/ez-texthelper.js',
            'ez_platformui.default.yui.modules.ez-texthelper.type' => 'js',
            'ez_platformui.default.yui.modules.ez-getflagcodehelper.path' => 'bundles/ezplatformui/js/helpers/ez-getflagcodehelper.js',
            'ez_platformui.default.yui.modules.ez-getflagcodehelper.type' => 'js',
            'ez_platformui.default.yui.modules.ez-googlemapapiloader.path' => 'bundles/ezplatformui/js/services/ez-googlemapapiloader.js',
            'ez_platformui.default.yui.modules.ez-googlemapapiloader.type' => 'js',
            'ez_platformui.default.yui.modules.ez-pluginregistry.path' => 'bundles/ezplatformui/js/services/ez-pluginregistry.js',
            'ez_platformui.default.yui.modules.ez-pluginregistry.type' => 'js',
            'ez_platformui.default.yui.modules.ez-positionplugin.path' => 'bundles/ezplatformui/js/apps/plugins/ez-positionplugin.js',
            'ez_platformui.default.yui.modules.ez-positionplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-updatetreeplugin.path' => 'bundles/ezplatformui/js/apps/plugins/ez-updatetreeplugin.js',
            'ez_platformui.default.yui.modules.ez-updatetreeplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-notificationhubplugin.path' => 'bundles/ezplatformui/js/apps/plugins/ez-notificationhubplugin.js',
            'ez_platformui.default.yui.modules.ez-notificationhubplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-confirmboxplugin.path' => 'bundles/ezplatformui/js/apps/plugins/ez-confirmboxplugin.js',
            'ez_platformui.default.yui.modules.ez-confirmboxplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-languageselectionboxplugin.path' => 'bundles/ezplatformui/js/apps/plugins/ez-languageselectionboxplugin.js',
            'ez_platformui.default.yui.modules.ez-languageselectionboxplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-universaldiscoveryplugin.path' => 'bundles/ezplatformui/js/apps/plugins/ez-universaldiscoveryplugin.js',
            'ez_platformui.default.yui.modules.ez-universaldiscoveryplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-domstateplugin.path' => 'bundles/ezplatformui/js/apps/plugins/ez-domstateplugin.js',
            'ez_platformui.default.yui.modules.ez-domstateplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-registerurlhelpersplugin.path' => 'bundles/ezplatformui/js/apps/plugins/ez-registerurlhelpersplugin.js',
            'ez_platformui.default.yui.modules.ez-registerurlhelpersplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-registerlanguagehelpersplugin.path' => 'bundles/ezplatformui/js/apps/plugins/ez-registerlanguagehelpersplugin.js',
            'ez_platformui.default.yui.modules.ez-registerlanguagehelpersplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-viewservicebaseplugin.path' => 'bundles/ezplatformui/js/views/services/plugins/ez-viewservicebaseplugin.js',
            'ez_platformui.default.yui.modules.ez-viewservicebaseplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-objectrelationsloadplugin.path' => 'bundles/ezplatformui/js/views/services/plugins/ez-objectrelationsloadplugin.js',
            'ez_platformui.default.yui.modules.ez-objectrelationsloadplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-userloadplugin.path' => 'bundles/ezplatformui/js/views/services/plugins/ez-userloadplugin.js',
            'ez_platformui.default.yui.modules.ez-userloadplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-visibilityswitcherplugin.path' => 'bundles/ezplatformui/js/views/services/plugins/ez-visibilityswitcherplugin.js',
            'ez_platformui.default.yui.modules.ez-visibilityswitcherplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-locationsloadplugin.path' => 'bundles/ezplatformui/js/views/services/plugins/ez-locationsloadplugin.js',
            'ez_platformui.default.yui.modules.ez-locationsloadplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-locationcreateplugin.path' => 'bundles/ezplatformui/js/views/services/plugins/ez-locationcreateplugin.js',
            'ez_platformui.default.yui.modules.ez-locationcreateplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-contentsetmainlocationplugin.path' => 'bundles/ezplatformui/js/views/services/plugins/ez-contentsetmainlocationplugin.js',
            'ez_platformui.default.yui.modules.ez-contentsetmainlocationplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-locationremoveplugin.path' => 'bundles/ezplatformui/js/views/services/plugins/ez-locationremoveplugin.js',
            'ez_platformui.default.yui.modules.ez-locationremoveplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-objectrelationloadplugin.path' => 'bundles/ezplatformui/js/views/services/plugins/ez-objectrelationloadplugin.js',
            'ez_platformui.default.yui.modules.ez-objectrelationloadplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-imagevariationloadplugin.path' => 'bundles/ezplatformui/js/views/services/plugins/ez-imagevariationloadplugin.js',
            'ez_platformui.default.yui.modules.ez-imagevariationloadplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-universaldiscoverycontenttreeplugin.path' => 'bundles/ezplatformui/js/views/services/plugins/ez-universaldiscoverycontenttreeplugin.js',
            'ez_platformui.default.yui.modules.ez-universaldiscoverycontenttreeplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-discoverybarcontenttreeplugin.path' => 'bundles/ezplatformui/js/views/services/plugins/ez-discoverybarcontenttreeplugin.js',
            'ez_platformui.default.yui.modules.ez-discoverybarcontenttreeplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-contenttreeplugin.path' => 'bundles/ezplatformui/js/views/services/plugins/ez-contenttreeplugin.js',
            'ez_platformui.default.yui.modules.ez-contenttreeplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-locationsearchplugin.path' => 'bundles/ezplatformui/js/views/services/plugins/ez-locationsearchplugin.js',
            'ez_platformui.default.yui.modules.ez-locationsearchplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-contentcreateplugin.path' => 'bundles/ezplatformui/js/views/services/plugins/ez-contentcreateplugin.js',
            'ez_platformui.default.yui.modules.ez-contentcreateplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-copycontentplugin.path' => 'bundles/ezplatformui/js/views/services/plugins/ez-copycontentplugin.js',
            'ez_platformui.default.yui.modules.ez-copycontentplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-discarddraftplugin.path' => 'bundles/ezplatformui/js/views/services/plugins/ez-discarddraftplugin.js',
            'ez_platformui.default.yui.modules.ez-discarddraftplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-savedraftplugin.path' => 'bundles/ezplatformui/js/views/services/plugins/ez-savedraftplugin.js',
            'ez_platformui.default.yui.modules.ez-savedraftplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-publishdraftplugin.path' => 'bundles/ezplatformui/js/views/services/plugins/ez-publishdraftplugin.js',
            'ez_platformui.default.yui.modules.ez-publishdraftplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-sideviewservice.path' => 'bundles/ezplatformui/js/extensions/ez-sideviewservice.js',
            'ez_platformui.default.yui.modules.ez-sideviewservice.type' => 'js',
            'ez_platformui.default.yui.modules.ez-loginavailableplugin.path' => 'bundles/ezplatformui/js/views/services/plugins/ez-loginavailableplugin.js',
            'ez_platformui.default.yui.modules.ez-loginavailableplugin.type' => 'js',
            'ez_platformui.default.yui.modules.ez-height-change.path' => 'bundles/ezplatformui/js/extensions/ez-height-change.js',
            'ez_platformui.default.yui.modules.ez-height-change.type' => 'js',
            'ez_platformui.default.yui.modules.ez-asynchronousview.path' => 'bundles/ezplatformui/js/extensions/ez-asynchronousview.js',
            'ez_platformui.default.yui.modules.ez-asynchronousview.type' => 'js',
            'ez_platformui.default.yui.modules.ez-expandable.path' => 'bundles/ezplatformui/js/extensions/ez-expandable.js',
            'ez_platformui.default.yui.modules.ez-expandable.type' => 'js',
            'ez_platformui.default.yui.modules.ez-contentinfo-attributes.path' => 'bundles/ezplatformui/js/models/extensions/ez-contentinfo-attributes.js',
            'ez_platformui.default.yui.modules.ez-contentinfo-attributes.type' => 'js',
            'ez_platformui.default.yui.modules.ez-height-fit.path' => 'bundles/ezplatformui/js/extensions/ez-height-fit.js',
            'ez_platformui.default.yui.modules.ez-height-fit.type' => 'js',
            'ez_platformui.default.yui.modules.ez-accordion-element.path' => 'bundles/ezplatformui/js/extensions/ez-accordion-element.js',
            'ez_platformui.default.yui.modules.ez-accordion-element.type' => 'js',
            'ez_platformui.default.yui.modules.ez-tabs.path' => 'bundles/ezplatformui/js/extensions/ez-tabs.js',
            'ez_platformui.default.yui.modules.ez-tabs.type' => 'js',
            'ez_platformui.default.yui.modules.ez-selection-table.path' => 'bundles/ezplatformui/js/extensions/ez-selection-table.js',
            'ez_platformui.default.yui.modules.ez-selection-table.type' => 'js',
            'ez_platformui.default.yui.modules.ez-app-extension.path' => 'bundles/ezplatformui/js/apps/extensions/ez-app-extension.js',
            'ez_platformui.default.yui.modules.ez-app-extension.type' => 'js',
            'ez_platformui.default.yui.modules.ez-app-extension-admin.path' => 'bundles/ezplatformui/js/apps/extensions/ez-app-extension-admin.js',
            'ez_platformui.default.yui.modules.ez-app-extension-admin.type' => 'js',
            'ez_platformui.site.yui.modules' => array(
                0 => 'capi',
                1 => 'ez-capi',
                2 => 'alloyeditor',
                3 => 'ez-alloyeditor',
                4 => 'ez-alloyeditor-toolbar-config-link',
                5 => 'ez-alloyeditor-toolbar-config-text',
                6 => 'ez-alloyeditor-toolbar-config-table',
                7 => 'ez-alloyeditor-toolbar-config-block-base',
                8 => 'ez-alloyeditor-toolbar-config-heading',
                9 => 'ez-alloyeditor-toolbar-config-paragraph',
                10 => 'ez-alloyeditor-toolbar-config-embed',
                11 => 'ez-alloyeditor-toolbar-config-image',
                12 => 'ez-alloyeditor-plugin-addcontent',
                13 => 'ez-alloyeditor-plugin-removeblock',
                14 => 'ez-alloyeditor-plugin-embed',
                15 => 'ez-alloyeditor-plugin-focusblock',
                16 => 'ez-alloyeditor-button-heading',
                17 => 'ez-alloyeditor-button-paragraph',
                18 => 'ez-alloyeditor-button-image',
                19 => 'ez-alloyeditor-button-embed',
                20 => 'ez-alloyeditor-button-blocktextalignleft',
                21 => 'ez-alloyeditor-button-blocktextaligncenter',
                22 => 'ez-alloyeditor-button-blocktextalignright',
                23 => 'ez-alloyeditor-button-blocktextalignjustify',
                24 => 'ez-alloyeditor-button-blockremove',
                25 => 'ez-alloyeditor-button-embedhref',
                26 => 'ez-alloyeditor-button-imagehref',
                27 => 'ez-alloyeditor-button-mixin-blocktextalign',
                28 => 'ez-alloyeditor-button-mixin-embeddiscovercontent',
                29 => 'ez-alloyeditor-button-mixin-embedimage',
                30 => 'ez-editorcontentprocessorbase',
                31 => 'ez-editorcontentprocessorxhtml5edit',
                32 => 'ez-editorcontentprocessorremoveids',
                33 => 'ez-platformuiapp',
                34 => 'ez-viewservice',
                35 => 'ez-loginformviewservice',
                36 => 'ez-contenteditviewservice',
                37 => 'ez-contentcreateviewservice',
                38 => 'ez-locationviewviewservice',
                39 => 'ez-navigationhubviewservice',
                40 => 'ez-discoverybarviewservice',
                41 => 'ez-universaldiscoveryviewservice',
                42 => 'ez-confirmboxviewservice',
                43 => 'ez-languageselectionboxviewservice',
                44 => 'ez-notificationhubviewservice',
                45 => 'ez-serversideviewservice',
                46 => 'ez-sectionserversideviewservice',
                47 => 'ez-roleserversideviewservice',
                48 => 'ez-view',
                49 => 'ez-templatebasedview',
                50 => 'ez-loginformview',
                51 => 'loginformview-ez-template',
                52 => 'ez-dashboardview',
                53 => 'dashboardview-ez-template',
                54 => 'ez-locationviewview',
                55 => 'locationviewview-ez-template',
                56 => 'ez-subitemlistview',
                57 => 'subitemlistview-ez-template',
                58 => 'ez-locationviewtabview',
                59 => 'ez-locationviewviewtabview',
                60 => 'locationviewviewtabview-ez-template',
                61 => 'ez-locationviewdetailstabview',
                62 => 'locationviewdetailstabview-ez-template',
                63 => 'ez-locationviewrelationstabview',
                64 => 'locationviewrelationstabview-ez-template',
                65 => 'ez-locationviewlocationstabview',
                66 => 'locationviewlocationstabview-ez-template',
                67 => 'ez-studiopresentationview',
                68 => 'studiopresentationview-ez-template',
                69 => 'ez-studiopluspresentationview',
                70 => 'studiopluspresentationview-ez-template',
                71 => 'ez-universaldiscoveryview',
                72 => 'universaldiscoveryview-ez-template',
                73 => 'ez-universaldiscoveryconfirmedlistview',
                74 => 'universaldiscoveryconfirmedlistview-ez-template',
                75 => 'ez-universaldiscoverymethodbaseview',
                76 => 'ez-universaldiscoverybrowseview',
                77 => 'universaldiscoverybrowseview-ez-template',
                78 => 'ez-universaldiscoverysearchview',
                79 => 'universaldiscoverysearchview-ez-template',
                80 => 'ez-universaldiscoveryselectedview',
                81 => 'universaldiscoveryselectedview-ez-template',
                82 => 'ez-confirmboxview',
                83 => 'confirmboxview-ez-template',
                84 => 'ez-languageselectionboxview',
                85 => 'languageselectionboxview-ez-template',
                86 => 'ez-notificationhubview',
                87 => 'ez-notificationview',
                88 => 'notificationview-ez-template',
                89 => 'ez-navigationhubview',
                90 => 'navigationhubview-ez-template',
                91 => 'ez-navigationitemsubtreeview',
                92 => 'ez-navigationitemparameterview',
                93 => 'ez-navigationitemview',
                94 => 'navigationitemview-ez-template',
                95 => 'ez-discoverybarview',
                96 => 'ez-actionbarview',
                97 => 'ez-rawcontentview',
                98 => 'rawcontentview-ez-template',
                99 => 'ez-languageswitcherview',
                100 => 'languageswitcherview-ez-template',
                101 => 'ez-contenteditview',
                102 => 'contenteditview-ez-template',
                103 => 'ez-contenteditformview',
                104 => 'contenteditformview-ez-template',
                105 => 'ez-fieldeditview',
                106 => 'fielddescription-tooltip-ez-partial',
                107 => 'ez-fieldview',
                108 => 'fieldview-ez-template',
                109 => 'ez-date-editview',
                110 => 'dateeditview-ez-template',
                111 => 'ez-dateandtime-editview',
                112 => 'dateandtimeeditview-ez-template',
                113 => 'ez-dateandtime-view',
                114 => 'dateandtimeview-ez-template',
                115 => 'ez-isbn-editview',
                116 => 'isbneditview-ez-template',
                117 => 'ez-time-editview',
                118 => 'timeeditview-ez-template',
                119 => 'ez-date-view',
                120 => 'ez-time-view',
                121 => 'ez-xmltext-view',
                122 => 'xmltextview-ez-template',
                123 => 'ez-checkbox-view',
                124 => 'ez-checkbox-editview',
                125 => 'checkboxeditview-ez-template',
                126 => 'ez-textline-editview',
                127 => 'textlineeditview-ez-template',
                128 => 'ez-textblock-editview',
                129 => 'textblockeditview-ez-template',
                130 => 'ez-xmltext-editview',
                131 => 'xmltexteditview-ez-template',
                132 => 'ez-richtext-editview',
                133 => 'richtexteditview-ez-template',
                134 => 'ez-image-editview',
                135 => 'imageeditview-ez-template',
                136 => 'ez-binaryfile-editview',
                137 => 'binaryfileeditview-ez-template',
                138 => 'ez-media-editview',
                139 => 'mediaeditview-ez-template',
                140 => 'ez-binarybase-editview',
                141 => 'ez-emailaddress-editview',
                142 => 'emailaddresseditview-ez-template',
                143 => 'ez-user-editview',
                144 => 'usereditview-ez-template',
                145 => 'ez-relationlist-view',
                146 => 'relationlistview-ez-template',
                147 => 'ez-relation-view',
                148 => 'relationview-ez-template',
                149 => 'ez-image-view',
                150 => 'imageview-ez-template',
                151 => 'ez-country-view',
                152 => 'countryview-ez-template',
                153 => 'ez-user-view',
                154 => 'userview-ez-template',
                155 => 'ez-binaryfile-view',
                156 => 'binaryfileview-ez-template',
                157 => 'ez-selection-view',
                158 => 'selectionview-ez-template',
                159 => 'ez-url-view',
                160 => 'urlview-ez-template',
                161 => 'ez-media-view',
                162 => 'mediaview-ez-template',
                163 => 'ez-url-editview',
                164 => 'urleditview-ez-template',
                165 => 'ez-country-editview',
                166 => 'countryeditview-ez-template',
                167 => 'ez-keyword-view',
                168 => 'keywordview-ez-template',
                169 => 'ez-keyword-editview',
                170 => 'keywordeditview-ez-template',
                171 => 'ez-author-view',
                172 => 'authorview-ez-template',
                173 => 'ez-author-editview',
                174 => 'authoreditview-ez-template',
                175 => 'authorinputview-ez-template',
                176 => 'ez-float-editview',
                177 => 'ez-float-view',
                178 => 'floateditview-ez-template',
                179 => 'ez-integer-view',
                180 => 'ez-integer-editview',
                181 => 'integereditview-ez-template',
                182 => 'ez-maplocation-view',
                183 => 'maplocationview-ez-template',
                184 => 'ez-maplocation-editview',
                185 => 'maplocationeditview-ez-template',
                186 => 'ez-relation-editview',
                187 => 'relationeditview-ez-template',
                188 => 'ez-relationlist-editview',
                189 => 'relationlisteditview-ez-template',
                190 => 'ez-richtext-view',
                191 => 'richtextview-ez-template',
                192 => 'ez-selection-editview',
                193 => 'selectioneditview-ez-template',
                194 => 'ez-selectionfilterview',
                195 => 'ez-restmodel',
                196 => 'ez-contentmodel',
                197 => 'ez-versionmodel',
                198 => 'ez-locationmodel',
                199 => 'ez-usermodel',
                200 => 'ez-contenttypemodel',
                201 => 'ez-contenttypegroupmodel',
                202 => 'ez-contentinfomodel',
                203 => 'ez-contenttree',
                204 => 'ez-notification',
                205 => 'ez-notificationlist',
                206 => 'ez-editactionbarview',
                207 => 'ez-buttonactionview',
                208 => 'buttonactionview-ez-template',
                209 => 'ez-previewactionview',
                210 => 'previewactionview-ez-template',
                211 => 'ez-treeactionview',
                212 => 'treeactionview-ez-template',
                213 => 'ez-translateactionview',
                214 => 'translateactionview-ez-template',
                215 => 'ez-movecontentactionview',
                216 => 'movecontentactionview-ez-template',
                217 => 'ez-createcontentactionview',
                218 => 'createcontentactionview-ez-template',
                219 => 'ez-contenttypeselectorview',
                220 => 'contenttypeselectorview-ez-template',
                221 => 'ez-editpreviewview',
                222 => 'editpreviewview-ez-template',
                223 => 'ez-barview',
                224 => 'barview-ez-template',
                225 => 'ez-treeview',
                226 => 'treeview-ez-template',
                227 => 'tree-ez-partial',
                228 => 'ez-serversideview',
                229 => 'ez-contenttypeeditserversideview',
                230 => 'ez-sectionserversideview',
                231 => 'ez-roleserversideview',
                232 => 'ez-texthelper',
                233 => 'ez-getflagcodehelper',
                234 => 'ez-googlemapapiloader',
                235 => 'ez-pluginregistry',
                236 => 'ez-positionplugin',
                237 => 'ez-updatetreeplugin',
                238 => 'ez-notificationhubplugin',
                239 => 'ez-confirmboxplugin',
                240 => 'ez-languageselectionboxplugin',
                241 => 'ez-universaldiscoveryplugin',
                242 => 'ez-domstateplugin',
                243 => 'ez-registerurlhelpersplugin',
                244 => 'ez-registerlanguagehelpersplugin',
                245 => 'ez-viewservicebaseplugin',
                246 => 'ez-objectrelationsloadplugin',
                247 => 'ez-userloadplugin',
                248 => 'ez-visibilityswitcherplugin',
                249 => 'ez-locationsloadplugin',
                250 => 'ez-locationcreateplugin',
                251 => 'ez-contentsetmainlocationplugin',
                252 => 'ez-locationremoveplugin',
                253 => 'ez-objectrelationloadplugin',
                254 => 'ez-imagevariationloadplugin',
                255 => 'ez-universaldiscoverycontenttreeplugin',
                256 => 'ez-discoverybarcontenttreeplugin',
                257 => 'ez-contenttreeplugin',
                258 => 'ez-locationsearchplugin',
                259 => 'ez-contentcreateplugin',
                260 => 'ez-copycontentplugin',
                261 => 'ez-discarddraftplugin',
                262 => 'ez-savedraftplugin',
                263 => 'ez-publishdraftplugin',
                264 => 'ez-sideviewservice',
                265 => 'ez-loginavailableplugin',
                266 => 'ez-height-change',
                267 => 'ez-asynchronousview',
                268 => 'ez-expandable',
                269 => 'ez-contentinfo-attributes',
                270 => 'ez-height-fit',
                271 => 'ez-accordion-element',
                272 => 'ez-tabs',
                273 => 'ez-selection-table',
                274 => 'ez-app-extension',
                275 => 'ez-app-extension-admin',
            ),
            'ez_platformui.site.yui.modules.capi.requires' => array(

            ),
            'ez_platformui.site.yui.modules.capi.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-capi.requires' => array(
                0 => 'capi',
            ),
            'ez_platformui.site.yui.modules.ez-capi.requires' => array(
                0 => 'capi',
            ),
            'ez_platformui.site.yui.modules.ez-capi.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.alloyeditor.requires' => array(

            ),
            'ez_platformui.site.yui.modules.alloyeditor.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor.requires' => array(
                0 => 'alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor.requires' => array(
                0 => 'alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-link.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-toolbar-config-link.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-toolbar-config-link.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-text.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-toolbar-config-text.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-toolbar-config-text.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-table.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-toolbar-config-table.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-toolbar-config-table.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-block-base.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-toolbar-config-block-base.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-toolbar-config-block-base.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-heading.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-toolbar-config-block-base',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-toolbar-config-heading.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-toolbar-config-block-base',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-toolbar-config-heading.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-paragraph.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-toolbar-config-block-base',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-toolbar-config-paragraph.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-toolbar-config-block-base',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-toolbar-config-paragraph.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-embed.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-toolbar-config-block-base',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-toolbar-config-embed.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-toolbar-config-block-base',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-toolbar-config-embed.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-toolbar-config-image.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-toolbar-config-block-base',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-toolbar-config-image.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-toolbar-config-block-base',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-toolbar-config-image.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-plugin-addcontent.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-plugin-addcontent.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-plugin-addcontent.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-plugin-removeblock.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-plugin-removeblock.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-plugin-removeblock.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-plugin-embed.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-plugin-embed.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-plugin-embed.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-plugin-focusblock.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-plugin-focusblock.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-plugin-focusblock.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-heading.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-heading.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-heading.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-paragraph.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-paragraph.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-paragraph.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-image.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-button-mixin-embeddiscovercontent',
                2 => 'ez-alloyeditor-button-mixin-embedimage',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-image.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-button-mixin-embeddiscovercontent',
                2 => 'ez-alloyeditor-button-mixin-embedimage',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-image.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-embed.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-button-mixin-embeddiscovercontent',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-embed.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-button-mixin-embeddiscovercontent',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-embed.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-blocktextalignleft.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-button-mixin-blocktextalign',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-blocktextalignleft.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-button-mixin-blocktextalign',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-blocktextalignleft.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-blocktextaligncenter.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-button-mixin-blocktextalign',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-blocktextaligncenter.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-button-mixin-blocktextalign',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-blocktextaligncenter.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-blocktextalignright.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-button-mixin-blocktextalign',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-blocktextalignright.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-button-mixin-blocktextalign',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-blocktextalignright.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-blocktextalignjustify.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-button-mixin-blocktextalign',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-blocktextalignjustify.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-button-mixin-blocktextalign',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-blocktextalignjustify.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-blockremove.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-blockremove.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-blockremove.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-embedhref.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-button-mixin-embeddiscovercontent',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-embedhref.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-button-mixin-embeddiscovercontent',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-embedhref.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-imagehref.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-button-mixin-embeddiscovercontent',
                2 => 'ez-alloyeditor-button-mixin-embedimage',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-imagehref.requires' => array(
                0 => 'ez-alloyeditor',
                1 => 'ez-alloyeditor-button-mixin-embeddiscovercontent',
                2 => 'ez-alloyeditor-button-mixin-embedimage',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-imagehref.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-mixin-blocktextalign.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-mixin-blocktextalign.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-mixin-blocktextalign.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-mixin-embeddiscovercontent.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-mixin-embeddiscovercontent.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-mixin-embeddiscovercontent.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-alloyeditor-button-mixin-embedimage.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-mixin-embedimage.requires' => array(
                0 => 'ez-alloyeditor',
            ),
            'ez_platformui.site.yui.modules.ez-alloyeditor-button-mixin-embedimage.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.ez-editorcontentprocessorbase.requires' => array(

            ),
            'ez_platformui.site.yui.modules.ez-editorcontentprocessorbase.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-editorcontentprocessorxhtml5edit.requires' => array(
                0 => 'ez-editorcontentprocessorbase',
            ),
            'ez_platformui.site.yui.modules.ez-editorcontentprocessorxhtml5edit.requires' => array(
                0 => 'ez-editorcontentprocessorbase',
            ),
            'ez_platformui.site.yui.modules.ez-editorcontentprocessorxhtml5edit.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-editorcontentprocessorremoveids.requires' => array(
                0 => 'ez-editorcontentprocessorbase',
            ),
            'ez_platformui.site.yui.modules.ez-editorcontentprocessorremoveids.requires' => array(
                0 => 'ez-editorcontentprocessorbase',
            ),
            'ez_platformui.site.yui.modules.ez-editorcontentprocessorremoveids.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-platformuiapp.requires' => array(
                0 => 'app',
                1 => 'app-transitions',
                2 => 'node-screen',
                3 => 'parallel',
                4 => 'ez-capi',
                5 => 'ez-loginformviewservice',
                6 => 'ez-loginformview',
                7 => 'ez-dashboardview',
                8 => 'ez-studiopresentationview',
                9 => 'ez-studiopluspresentationview',
                10 => 'ez-contenteditviewservice',
                11 => 'ez-contentcreateviewservice',
                12 => 'ez-contenteditview',
                13 => 'ez-locationviewview',
                14 => 'ez-locationviewviewservice',
                15 => 'ez-serversideview',
                16 => 'ez-contenttypeeditserversideview',
                17 => 'ez-serversideviewservice',
                18 => 'ez-sectionserversideview',
                19 => 'ez-sectionserversideviewservice',
                20 => 'ez-roleserversideview',
                21 => 'ez-roleserversideviewservice',
                22 => 'ez-navigationhubviewservice',
                23 => 'ez-navigationhubview',
                24 => 'ez-discoverybarviewservice',
                25 => 'ez-discoverybarview',
                26 => 'ez-universaldiscoveryviewservice',
                27 => 'ez-universaldiscoveryview',
                28 => 'ez-confirmboxviewservice',
                29 => 'ez-confirmboxview',
                30 => 'ez-languageselectionboxviewservice',
                31 => 'ez-languageselectionboxview',
                32 => 'ez-notificationhubviewservice',
                33 => 'ez-notificationhubview',
                34 => 'ez-usermodel',
                35 => 'ez-pluginregistry',
                36 => 'ez-registerurlhelpersplugin',
                37 => 'ez-registerlanguagehelpersplugin',
                38 => 'ez-domstateplugin',
                39 => 'ez-universaldiscoveryplugin',
                40 => 'ez-confirmboxplugin',
                41 => 'ez-languageselectionboxplugin',
                42 => 'ez-notificationhubplugin',
                43 => 'ez-positionplugin',
                44 => 'ez-updatetreeplugin',
            ),
            'ez_platformui.site.yui.modules.ez-platformuiapp.requires' => array(
                0 => 'app',
                1 => 'app-transitions',
                2 => 'node-screen',
                3 => 'parallel',
                4 => 'ez-capi',
                5 => 'ez-loginformviewservice',
                6 => 'ez-loginformview',
                7 => 'ez-dashboardview',
                8 => 'ez-studiopresentationview',
                9 => 'ez-studiopluspresentationview',
                10 => 'ez-contenteditviewservice',
                11 => 'ez-contentcreateviewservice',
                12 => 'ez-contenteditview',
                13 => 'ez-locationviewview',
                14 => 'ez-locationviewviewservice',
                15 => 'ez-serversideview',
                16 => 'ez-contenttypeeditserversideview',
                17 => 'ez-serversideviewservice',
                18 => 'ez-sectionserversideview',
                19 => 'ez-sectionserversideviewservice',
                20 => 'ez-roleserversideview',
                21 => 'ez-roleserversideviewservice',
                22 => 'ez-navigationhubviewservice',
                23 => 'ez-navigationhubview',
                24 => 'ez-discoverybarviewservice',
                25 => 'ez-discoverybarview',
                26 => 'ez-universaldiscoveryviewservice',
                27 => 'ez-universaldiscoveryview',
                28 => 'ez-confirmboxviewservice',
                29 => 'ez-confirmboxview',
                30 => 'ez-languageselectionboxviewservice',
                31 => 'ez-languageselectionboxview',
                32 => 'ez-notificationhubviewservice',
                33 => 'ez-notificationhubview',
                34 => 'ez-usermodel',
                35 => 'ez-pluginregistry',
                36 => 'ez-registerurlhelpersplugin',
                37 => 'ez-registerlanguagehelpersplugin',
                38 => 'ez-domstateplugin',
                39 => 'ez-universaldiscoveryplugin',
                40 => 'ez-confirmboxplugin',
                41 => 'ez-languageselectionboxplugin',
                42 => 'ez-notificationhubplugin',
                43 => 'ez-positionplugin',
                44 => 'ez-updatetreeplugin',
            ),
            'ez_platformui.site.yui.modules.ez-platformuiapp.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-viewservice.requires' => array(
                0 => 'base',
                1 => 'parallel',
            ),
            'ez_platformui.site.yui.modules.ez-viewservice.requires' => array(
                0 => 'base',
                1 => 'parallel',
            ),
            'ez_platformui.site.yui.modules.ez-viewservice.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-loginformviewservice.requires' => array(
                0 => 'ez-viewservice',
            ),
            'ez_platformui.site.yui.modules.ez-loginformviewservice.requires' => array(
                0 => 'ez-viewservice',
            ),
            'ez_platformui.site.yui.modules.ez-loginformviewservice.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-contenteditviewservice.requires' => array(
                0 => 'parallel',
                1 => 'ez-viewservice',
                2 => 'ez-contentmodel',
                3 => 'ez-contentinfomodel',
                4 => 'ez-locationmodel',
                5 => 'ez-contenttypemodel',
                6 => 'ez-usermodel',
                7 => 'ez-versionmodel',
                8 => 'ez-savedraftplugin',
                9 => 'ez-publishdraftplugin',
                10 => 'ez-discarddraftplugin',
                11 => 'ez-loginavailableplugin',
                12 => 'array-extras',
            ),
            'ez_platformui.site.yui.modules.ez-contenteditviewservice.requires' => array(
                0 => 'parallel',
                1 => 'ez-viewservice',
                2 => 'ez-contentmodel',
                3 => 'ez-contentinfomodel',
                4 => 'ez-locationmodel',
                5 => 'ez-contenttypemodel',
                6 => 'ez-usermodel',
                7 => 'ez-versionmodel',
                8 => 'ez-savedraftplugin',
                9 => 'ez-publishdraftplugin',
                10 => 'ez-discarddraftplugin',
                11 => 'ez-loginavailableplugin',
                12 => 'array-extras',
            ),
            'ez_platformui.site.yui.modules.ez-contenteditviewservice.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-contentcreateviewservice.requires' => array(
                0 => 'ez-contenteditviewservice',
            ),
            'ez_platformui.site.yui.modules.ez-contentcreateviewservice.requires' => array(
                0 => 'ez-contenteditviewservice',
            ),
            'ez_platformui.site.yui.modules.ez-contentcreateviewservice.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-locationviewviewservice.requires' => array(
                0 => 'parallel',
                1 => 'ez-viewservice',
                2 => 'ez-locationmodel',
                3 => 'ez-contentmodel',
                4 => 'ez-objectrelationloadplugin',
                5 => 'ez-objectrelationsloadplugin',
                6 => 'ez-userloadplugin',
                7 => 'ez-locationsloadplugin',
                8 => 'ez-locationcreateplugin',
                9 => 'ez-contentsetmainlocationplugin',
                10 => 'ez-visibilityswitcherplugin',
                11 => 'ez-locationremoveplugin',
                12 => 'ez-imagevariationloadplugin',
                13 => 'ez-contentcreateplugin',
                14 => 'ez-copycontentplugin',
            ),
            'ez_platformui.site.yui.modules.ez-locationviewviewservice.requires' => array(
                0 => 'parallel',
                1 => 'ez-viewservice',
                2 => 'ez-locationmodel',
                3 => 'ez-contentmodel',
                4 => 'ez-objectrelationloadplugin',
                5 => 'ez-objectrelationsloadplugin',
                6 => 'ez-userloadplugin',
                7 => 'ez-locationsloadplugin',
                8 => 'ez-locationcreateplugin',
                9 => 'ez-contentsetmainlocationplugin',
                10 => 'ez-visibilityswitcherplugin',
                11 => 'ez-locationremoveplugin',
                12 => 'ez-imagevariationloadplugin',
                13 => 'ez-contentcreateplugin',
                14 => 'ez-copycontentplugin',
            ),
            'ez_platformui.site.yui.modules.ez-locationviewviewservice.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-navigationhubviewservice.requires' => array(
                0 => 'ez-viewservice',
                1 => 'ez-sideviewservice',
                2 => 'ez-navigationitemsubtreeview',
                3 => 'ez-navigationitemparameterview',
                4 => 'array-extras',
                5 => 'ez-height-change',
            ),
            'ez_platformui.site.yui.modules.ez-navigationhubviewservice.requires' => array(
                0 => 'ez-viewservice',
                1 => 'ez-sideviewservice',
                2 => 'ez-navigationitemsubtreeview',
                3 => 'ez-navigationitemparameterview',
                4 => 'array-extras',
                5 => 'ez-height-change',
            ),
            'ez_platformui.site.yui.modules.ez-navigationhubviewservice.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-discoverybarviewservice.requires' => array(
                0 => 'ez-viewservice',
                1 => 'ez-sideviewservice',
                2 => 'ez-discoverybarcontenttreeplugin',
            ),
            'ez_platformui.site.yui.modules.ez-discoverybarviewservice.requires' => array(
                0 => 'ez-viewservice',
                1 => 'ez-sideviewservice',
                2 => 'ez-discoverybarcontenttreeplugin',
            ),
            'ez_platformui.site.yui.modules.ez-discoverybarviewservice.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-universaldiscoveryviewservice.requires' => array(
                0 => 'ez-viewservice',
                1 => 'ez-sideviewservice',
                2 => 'ez-universaldiscoverycontenttreeplugin',
            ),
            'ez_platformui.site.yui.modules.ez-universaldiscoveryviewservice.requires' => array(
                0 => 'ez-viewservice',
                1 => 'ez-sideviewservice',
                2 => 'ez-universaldiscoverycontenttreeplugin',
            ),
            'ez_platformui.site.yui.modules.ez-universaldiscoveryviewservice.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-confirmboxviewservice.requires' => array(
                0 => 'ez-viewservice',
                1 => 'ez-sideviewservice',
            ),
            'ez_platformui.site.yui.modules.ez-confirmboxviewservice.requires' => array(
                0 => 'ez-viewservice',
                1 => 'ez-sideviewservice',
            ),
            'ez_platformui.site.yui.modules.ez-confirmboxviewservice.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-languageselectionboxviewservice.requires' => array(
                0 => 'ez-viewservice',
                1 => 'ez-sideviewservice',
            ),
            'ez_platformui.site.yui.modules.ez-languageselectionboxviewservice.requires' => array(
                0 => 'ez-viewservice',
                1 => 'ez-sideviewservice',
            ),
            'ez_platformui.site.yui.modules.ez-languageselectionboxviewservice.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-notificationhubviewservice.requires' => array(
                0 => 'ez-viewservice',
                1 => 'ez-sideviewservice',
                2 => 'ez-notificationlist',
            ),
            'ez_platformui.site.yui.modules.ez-notificationhubviewservice.requires' => array(
                0 => 'ez-viewservice',
                1 => 'ez-sideviewservice',
                2 => 'ez-notificationlist',
            ),
            'ez_platformui.site.yui.modules.ez-notificationhubviewservice.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-serversideviewservice.requires' => array(
                0 => 'io-base',
                1 => 'io-form',
                2 => 'ez-viewservice',
            ),
            'ez_platformui.site.yui.modules.ez-serversideviewservice.requires' => array(
                0 => 'io-base',
                1 => 'io-form',
                2 => 'ez-viewservice',
            ),
            'ez_platformui.site.yui.modules.ez-serversideviewservice.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-sectionserversideviewservice.requires' => array(
                0 => 'ez-serversideviewservice',
                1 => 'parallel',
            ),
            'ez_platformui.site.yui.modules.ez-sectionserversideviewservice.requires' => array(
                0 => 'ez-serversideviewservice',
                1 => 'parallel',
            ),
            'ez_platformui.site.yui.modules.ez-sectionserversideviewservice.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-roleserversideviewservice.requires' => array(
                0 => 'ez-serversideviewservice',
                1 => 'parallel',
            ),
            'ez_platformui.site.yui.modules.ez-roleserversideviewservice.requires' => array(
                0 => 'ez-serversideviewservice',
                1 => 'parallel',
            ),
            'ez_platformui.site.yui.modules.ez-roleserversideviewservice.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-view.requires' => array(
                0 => 'view',
                1 => 'base-pluginhost',
                2 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-view.requires' => array(
                0 => 'view',
                1 => 'base-pluginhost',
                2 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-view.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-templatebasedview.requires' => array(
                0 => 'ez-texthelper',
                1 => 'ez-view',
                2 => 'handlebars',
                3 => 'template',
            ),
            'ez_platformui.site.yui.modules.ez-templatebasedview.requires' => array(
                0 => 'ez-texthelper',
                1 => 'ez-view',
                2 => 'handlebars',
                3 => 'template',
            ),
            'ez_platformui.site.yui.modules.ez-templatebasedview.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-loginformview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'node-style',
                2 => 'loginformview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-loginformview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'node-style',
                2 => 'loginformview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-loginformview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.loginformview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.loginformview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-dashboardview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'dashboardview-ez-template',
                2 => 'ez-height-fit',
                3 => 'event-resize',
            ),
            'ez_platformui.site.yui.modules.ez-dashboardview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'dashboardview-ez-template',
                2 => 'ez-height-fit',
                3 => 'event-resize',
            ),
            'ez_platformui.site.yui.modules.ez-dashboardview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.dashboardview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.dashboardview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-locationviewview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'ez-actionbarview',
                2 => 'ez-locationviewviewtabview',
                3 => 'ez-locationviewdetailstabview',
                4 => 'ez-locationviewrelationstabview',
                5 => 'ez-locationviewlocationstabview',
                6 => 'ez-tabs',
                7 => 'ez-subitemlistview',
                8 => 'ez-locationsearchplugin',
                9 => 'event-tap',
                10 => 'array-extras',
                11 => 'locationviewview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-locationviewview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'ez-actionbarview',
                2 => 'ez-locationviewviewtabview',
                3 => 'ez-locationviewdetailstabview',
                4 => 'ez-locationviewrelationstabview',
                5 => 'ez-locationviewlocationstabview',
                6 => 'ez-tabs',
                7 => 'ez-subitemlistview',
                8 => 'ez-locationsearchplugin',
                9 => 'event-tap',
                10 => 'array-extras',
                11 => 'locationviewview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-locationviewview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.locationviewview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.locationviewview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-subitemlistview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'ez-asynchronousview',
                2 => 'event-tap',
                3 => 'subitemlistview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-subitemlistview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'ez-asynchronousview',
                2 => 'event-tap',
                3 => 'subitemlistview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-subitemlistview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.subitemlistview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.subitemlistview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-locationviewtabview.requires' => array(
                0 => 'ez-templatebasedview',
            ),
            'ez_platformui.site.yui.modules.ez-locationviewtabview.requires' => array(
                0 => 'ez-templatebasedview',
            ),
            'ez_platformui.site.yui.modules.ez-locationviewtabview.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-locationviewviewtabview.requires' => array(
                0 => 'ez-locationviewtabview',
                1 => 'ez-rawcontentview',
                2 => 'locationviewviewtabview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-locationviewviewtabview.requires' => array(
                0 => 'ez-locationviewtabview',
                1 => 'ez-rawcontentview',
                2 => 'locationviewviewtabview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-locationviewviewtabview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.locationviewviewtabview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.locationviewviewtabview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-locationviewdetailstabview.requires' => array(
                0 => 'ez-locationviewtabview',
                1 => 'locationviewdetailstabview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-locationviewdetailstabview.requires' => array(
                0 => 'ez-locationviewtabview',
                1 => 'locationviewdetailstabview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-locationviewdetailstabview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.locationviewdetailstabview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.locationviewdetailstabview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-locationviewrelationstabview.requires' => array(
                0 => 'ez-locationviewtabview',
                1 => 'locationviewrelationstabview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-locationviewrelationstabview.requires' => array(
                0 => 'ez-locationviewtabview',
                1 => 'locationviewrelationstabview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-locationviewrelationstabview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.locationviewrelationstabview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.locationviewrelationstabview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-locationviewlocationstabview.requires' => array(
                0 => 'ez-locationviewtabview',
                1 => 'locationviewlocationstabview-ez-template',
                2 => 'array-extras',
            ),
            'ez_platformui.site.yui.modules.ez-locationviewlocationstabview.requires' => array(
                0 => 'ez-locationviewtabview',
                1 => 'locationviewlocationstabview-ez-template',
                2 => 'array-extras',
            ),
            'ez_platformui.site.yui.modules.ez-locationviewlocationstabview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.locationviewlocationstabview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.locationviewlocationstabview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-studiopresentationview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'studiopresentationview-ez-template',
                2 => 'ez-height-fit',
                3 => 'event-resize',
            ),
            'ez_platformui.site.yui.modules.ez-studiopresentationview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'studiopresentationview-ez-template',
                2 => 'ez-height-fit',
                3 => 'event-resize',
            ),
            'ez_platformui.site.yui.modules.ez-studiopresentationview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.studiopresentationview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.studiopresentationview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-studiopluspresentationview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'studiopluspresentationview-ez-template',
                2 => 'ez-height-fit',
                3 => 'event-resize',
            ),
            'ez_platformui.site.yui.modules.ez-studiopluspresentationview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'studiopluspresentationview-ez-template',
                2 => 'ez-height-fit',
                3 => 'event-resize',
            ),
            'ez_platformui.site.yui.modules.ez-studiopluspresentationview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.studiopluspresentationview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.studiopluspresentationview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-universaldiscoveryview.requires' => array(
                0 => 'ez-tabs',
                1 => 'ez-templatebasedview',
                2 => 'universaldiscoveryview-ez-template',
                3 => 'ez-universaldiscoverybrowseview',
                4 => 'ez-universaldiscoverysearchview',
                5 => 'ez-universaldiscoveryconfirmedlistview',
                6 => 'array-extras',
                7 => 'event-tap',
                8 => 'node-screen',
            ),
            'ez_platformui.site.yui.modules.ez-universaldiscoveryview.requires' => array(
                0 => 'ez-tabs',
                1 => 'ez-templatebasedview',
                2 => 'universaldiscoveryview-ez-template',
                3 => 'ez-universaldiscoverybrowseview',
                4 => 'ez-universaldiscoverysearchview',
                5 => 'ez-universaldiscoveryconfirmedlistview',
                6 => 'array-extras',
                7 => 'event-tap',
                8 => 'node-screen',
            ),
            'ez_platformui.site.yui.modules.ez-universaldiscoveryview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.universaldiscoveryview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.universaldiscoveryview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-universaldiscoveryconfirmedlistview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'event-tap',
                2 => 'event-outside',
                3 => 'universaldiscoveryconfirmedlistview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-universaldiscoveryconfirmedlistview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'event-tap',
                2 => 'event-outside',
                3 => 'universaldiscoveryconfirmedlistview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-universaldiscoveryconfirmedlistview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.universaldiscoveryconfirmedlistview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.universaldiscoveryconfirmedlistview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-universaldiscoverymethodbaseview.requires' => array(
                0 => 'ez-templatebasedview',
            ),
            'ez_platformui.site.yui.modules.ez-universaldiscoverymethodbaseview.requires' => array(
                0 => 'ez-templatebasedview',
            ),
            'ez_platformui.site.yui.modules.ez-universaldiscoverymethodbaseview.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-universaldiscoverybrowseview.requires' => array(
                0 => 'ez-universaldiscoverymethodbaseview',
                1 => 'universaldiscoverybrowseview-ez-template',
                2 => 'ez-treeview',
                3 => 'ez-universaldiscoveryselectedview',
            ),
            'ez_platformui.site.yui.modules.ez-universaldiscoverybrowseview.requires' => array(
                0 => 'ez-universaldiscoverymethodbaseview',
                1 => 'universaldiscoverybrowseview-ez-template',
                2 => 'ez-treeview',
                3 => 'ez-universaldiscoveryselectedview',
            ),
            'ez_platformui.site.yui.modules.ez-universaldiscoverybrowseview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.universaldiscoverybrowseview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.universaldiscoverybrowseview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-universaldiscoverysearchview.requires' => array(
                0 => 'ez-universaldiscoverymethodbaseview',
                1 => 'ez-asynchronousview',
                2 => 'ez-universaldiscoveryselectedview',
                3 => 'universaldiscoverysearchview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-universaldiscoverysearchview.requires' => array(
                0 => 'ez-universaldiscoverymethodbaseview',
                1 => 'ez-asynchronousview',
                2 => 'ez-universaldiscoveryselectedview',
                3 => 'universaldiscoverysearchview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-universaldiscoverysearchview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.universaldiscoverysearchview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.universaldiscoverysearchview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-universaldiscoveryselectedview.requires' => array(
                0 => 'event-tap',
                1 => 'ez-templatebasedview',
                2 => 'universaldiscoveryselectedview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-universaldiscoveryselectedview.requires' => array(
                0 => 'event-tap',
                1 => 'ez-templatebasedview',
                2 => 'universaldiscoveryselectedview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-universaldiscoveryselectedview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.universaldiscoveryselectedview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.universaldiscoveryselectedview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-confirmboxview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'confirmboxview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-confirmboxview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'confirmboxview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-confirmboxview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.confirmboxview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.confirmboxview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-languageselectionboxview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'languageselectionboxview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-languageselectionboxview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'languageselectionboxview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-languageselectionboxview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.languageselectionboxview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.languageselectionboxview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-notificationhubview.requires' => array(
                0 => 'ez-view',
                1 => 'ez-notificationview',
                2 => 'ez-notificationlist',
                3 => 'ez-height-change',
            ),
            'ez_platformui.site.yui.modules.ez-notificationhubview.requires' => array(
                0 => 'ez-view',
                1 => 'ez-notificationview',
                2 => 'ez-notificationlist',
                3 => 'ez-height-change',
            ),
            'ez_platformui.site.yui.modules.ez-notificationhubview.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-notificationview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'notificationview-ez-template',
                2 => 'transition',
                3 => 'event-tap',
            ),
            'ez_platformui.site.yui.modules.ez-notificationview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'notificationview-ez-template',
                2 => 'transition',
                3 => 'event-tap',
            ),
            'ez_platformui.site.yui.modules.ez-notificationview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.notificationview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.notificationview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-navigationhubview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'event-tap',
                2 => 'node-screen',
                3 => 'node-style',
                4 => 'event-outside',
                5 => 'navigationhubview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-navigationhubview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'event-tap',
                2 => 'node-screen',
                3 => 'node-style',
                4 => 'event-outside',
                5 => 'navigationhubview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-navigationhubview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.navigationhubview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.navigationhubview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-navigationitemsubtreeview.requires' => array(
                0 => 'ez-navigationitemview',
            ),
            'ez_platformui.site.yui.modules.ez-navigationitemsubtreeview.requires' => array(
                0 => 'ez-navigationitemview',
            ),
            'ez_platformui.site.yui.modules.ez-navigationitemsubtreeview.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-navigationitemparameterview.requires' => array(
                0 => 'ez-navigationitemview',
            ),
            'ez_platformui.site.yui.modules.ez-navigationitemparameterview.requires' => array(
                0 => 'ez-navigationitemview',
            ),
            'ez_platformui.site.yui.modules.ez-navigationitemparameterview.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-navigationitemview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'navigationitemview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-navigationitemview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'navigationitemview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-navigationitemview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.navigationitemview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.navigationitemview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-discoverybarview.requires' => array(
                0 => 'ez-barview',
                1 => 'ez-buttonactionview',
                2 => 'ez-treeactionview',
            ),
            'ez_platformui.site.yui.modules.ez-discoverybarview.requires' => array(
                0 => 'ez-barview',
                1 => 'ez-buttonactionview',
                2 => 'ez-treeactionview',
            ),
            'ez_platformui.site.yui.modules.ez-discoverybarview.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-actionbarview.requires' => array(
                0 => 'ez-barview',
                1 => 'ez-buttonactionview',
                2 => 'ez-createcontentactionview',
                3 => 'ez-movecontentactionview',
                4 => 'ez-translateactionview',
            ),
            'ez_platformui.site.yui.modules.ez-actionbarview.requires' => array(
                0 => 'ez-barview',
                1 => 'ez-buttonactionview',
                2 => 'ez-createcontentactionview',
                3 => 'ez-movecontentactionview',
                4 => 'ez-translateactionview',
            ),
            'ez_platformui.site.yui.modules.ez-actionbarview.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-rawcontentview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'ez-accordion-element',
                2 => 'ez-fieldview',
                3 => 'ez-contentmodel',
                4 => 'ez-contenttypemodel',
                5 => 'ez-checkbox-view',
                6 => 'ez-image-view',
                7 => 'ez-country-view',
                8 => 'ez-xmltext-view',
                9 => 'ez-relation-view',
                10 => 'ez-relationlist-view',
                11 => 'ez-url-view',
                12 => 'ez-media-view',
                13 => 'ez-keyword-view',
                14 => 'ez-binaryfile-view',
                15 => 'ez-selection-view',
                16 => 'ez-user-view',
                17 => 'ez-maplocation-view',
                18 => 'ez-author-view',
                19 => 'ez-integer-view',
                20 => 'ez-float-view',
                21 => 'ez-dateandtime-view',
                22 => 'ez-date-view',
                23 => 'ez-time-view',
                24 => 'ez-richtext-view',
                25 => 'ez-languageswitcherview',
                26 => 'event-tap',
                27 => 'rawcontentview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-rawcontentview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'ez-accordion-element',
                2 => 'ez-fieldview',
                3 => 'ez-contentmodel',
                4 => 'ez-contenttypemodel',
                5 => 'ez-checkbox-view',
                6 => 'ez-image-view',
                7 => 'ez-country-view',
                8 => 'ez-xmltext-view',
                9 => 'ez-relation-view',
                10 => 'ez-relationlist-view',
                11 => 'ez-url-view',
                12 => 'ez-media-view',
                13 => 'ez-keyword-view',
                14 => 'ez-binaryfile-view',
                15 => 'ez-selection-view',
                16 => 'ez-user-view',
                17 => 'ez-maplocation-view',
                18 => 'ez-author-view',
                19 => 'ez-integer-view',
                20 => 'ez-float-view',
                21 => 'ez-dateandtime-view',
                22 => 'ez-date-view',
                23 => 'ez-time-view',
                24 => 'ez-richtext-view',
                25 => 'ez-languageswitcherview',
                26 => 'event-tap',
                27 => 'rawcontentview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-rawcontentview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.rawcontentview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.rawcontentview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-languageswitcherview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'ez-expandable',
                2 => 'ez-getflagcodehelper',
                3 => 'event-tap',
                4 => 'languageswitcherview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-languageswitcherview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'ez-expandable',
                2 => 'ez-getflagcodehelper',
                3 => 'event-tap',
                4 => 'languageswitcherview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-languageswitcherview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.languageswitcherview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.languageswitcherview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-contenteditview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'ez-contenteditformview',
                2 => 'ez-editactionbarview',
                3 => 'event-tap',
                4 => 'contenteditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-contenteditview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'ez-contenteditformview',
                2 => 'ez-editactionbarview',
                3 => 'event-tap',
                4 => 'contenteditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-contenteditview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.contenteditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.contenteditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-contenteditformview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'ez-accordion-element',
                2 => 'ez-checkbox-editview',
                3 => 'ez-textline-editview',
                4 => 'ez-textblock-editview',
                5 => 'ez-xmltext-editview',
                6 => 'ez-richtext-editview',
                7 => 'ez-image-editview',
                8 => 'ez-binaryfile-editview',
                9 => 'ez-media-editview',
                10 => 'ez-emailaddress-editview',
                11 => 'ez-maplocation-editview',
                12 => 'ez-url-editview',
                13 => 'ez-country-editview',
                14 => 'ez-keyword-editview',
                15 => 'ez-author-editview',
                16 => 'ez-float-editview',
                17 => 'ez-time-editview',
                18 => 'ez-date-editview',
                19 => 'ez-dateandtime-editview',
                20 => 'ez-integer-editview',
                21 => 'ez-selection-editview',
                22 => 'ez-relation-editview',
                23 => 'ez-isbn-editview',
                24 => 'ez-relationlist-editview',
                25 => 'ez-user-editview',
                26 => 'event-tap',
                27 => 'contenteditformview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-contenteditformview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'ez-accordion-element',
                2 => 'ez-checkbox-editview',
                3 => 'ez-textline-editview',
                4 => 'ez-textblock-editview',
                5 => 'ez-xmltext-editview',
                6 => 'ez-richtext-editview',
                7 => 'ez-image-editview',
                8 => 'ez-binaryfile-editview',
                9 => 'ez-media-editview',
                10 => 'ez-emailaddress-editview',
                11 => 'ez-maplocation-editview',
                12 => 'ez-url-editview',
                13 => 'ez-country-editview',
                14 => 'ez-keyword-editview',
                15 => 'ez-author-editview',
                16 => 'ez-float-editview',
                17 => 'ez-time-editview',
                18 => 'ez-date-editview',
                19 => 'ez-dateandtime-editview',
                20 => 'ez-integer-editview',
                21 => 'ez-selection-editview',
                22 => 'ez-relation-editview',
                23 => 'ez-isbn-editview',
                24 => 'ez-relationlist-editview',
                25 => 'ez-user-editview',
                26 => 'event-tap',
                27 => 'contenteditformview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-contenteditformview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.contenteditformview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.contenteditformview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-fieldeditview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'event-tap',
                2 => 'event-outside',
                3 => 'node-style',
                4 => 'fielddescription-tooltip-ez-partial',
            ),
            'ez_platformui.site.yui.modules.ez-fieldeditview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'event-tap',
                2 => 'event-outside',
                3 => 'node-style',
                4 => 'fielddescription-tooltip-ez-partial',
            ),
            'ez_platformui.site.yui.modules.ez-fieldeditview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.fielddescription-tooltip-ez-partial.requires' => array(

            ),
            'ez_platformui.site.yui.modules.fielddescription-tooltip-ez-partial.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-fieldview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'fieldview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-fieldview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'fieldview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-fieldview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.fieldview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.fieldview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-date-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'dateeditview-ez-template',
                3 => 'datatype-date-format',
                4 => 'event-tap',
                5 => 'calendar',
                6 => 'datatype-date',
                7 => 'datatype-date-parse',
                8 => 'node',
            ),
            'ez_platformui.site.yui.modules.ez-date-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'dateeditview-ez-template',
                3 => 'datatype-date-format',
                4 => 'event-tap',
                5 => 'calendar',
                6 => 'datatype-date',
                7 => 'datatype-date-parse',
                8 => 'node',
            ),
            'ez_platformui.site.yui.modules.ez-date-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.dateeditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.dateeditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-dateandtime-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'dateandtimeeditview-ez-template',
                3 => 'datatype-date-format',
            ),
            'ez_platformui.site.yui.modules.ez-dateandtime-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'dateandtimeeditview-ez-template',
                3 => 'datatype-date-format',
            ),
            'ez_platformui.site.yui.modules.ez-dateandtime-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.dateandtimeeditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.dateandtimeeditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-dateandtime-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'dateandtimeview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-dateandtime-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'dateandtimeview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-dateandtime-view.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.dateandtimeview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.dateandtimeview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-isbn-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'isbneditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-isbn-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'isbneditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-isbn-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.isbneditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.isbneditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-time-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'timeeditview-ez-template',
                3 => 'datatype-date-format',
                4 => 'datatype-date',
            ),
            'ez_platformui.site.yui.modules.ez-time-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'timeeditview-ez-template',
                3 => 'datatype-date-format',
                4 => 'datatype-date',
            ),
            'ez_platformui.site.yui.modules.ez-time-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.timeeditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.timeeditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-date-view.requires' => array(
                0 => 'ez-dateandtime-view',
            ),
            'ez_platformui.site.yui.modules.ez-date-view.requires' => array(
                0 => 'ez-dateandtime-view',
            ),
            'ez_platformui.site.yui.modules.ez-date-view.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-time-view.requires' => array(
                0 => 'ez-dateandtime-view',
            ),
            'ez_platformui.site.yui.modules.ez-time-view.requires' => array(
                0 => 'ez-dateandtime-view',
            ),
            'ez_platformui.site.yui.modules.ez-time-view.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-xmltext-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'xmltextview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-xmltext-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'xmltextview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-xmltext-view.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.xmltextview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.xmltextview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-checkbox-view.requires' => array(
                0 => 'ez-fieldview',
            ),
            'ez_platformui.site.yui.modules.ez-checkbox-view.requires' => array(
                0 => 'ez-fieldview',
            ),
            'ez_platformui.site.yui.modules.ez-checkbox-view.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-checkbox-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'checkboxeditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-checkbox-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'checkboxeditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-checkbox-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.checkboxeditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.checkboxeditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-textline-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'textlineeditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-textline-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'textlineeditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-textline-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.textlineeditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.textlineeditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-textblock-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'textblockeditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-textblock-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'textblockeditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-textblock-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.textblockeditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.textblockeditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-xmltext-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'xmltexteditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-xmltext-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'xmltexteditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-xmltext-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.xmltexteditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.xmltexteditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-richtext-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'ez-alloyeditor',
                2 => 'ez-alloyeditor-plugin-embed',
                3 => 'ez-alloyeditor-plugin-addcontent',
                4 => 'ez-alloyeditor-plugin-removeblock',
                5 => 'ez-alloyeditor-plugin-focusblock',
                6 => 'ez-alloyeditor-toolbar-config-link',
                7 => 'ez-alloyeditor-toolbar-config-text',
                8 => 'ez-alloyeditor-toolbar-config-table',
                9 => 'ez-alloyeditor-toolbar-config-heading',
                10 => 'ez-alloyeditor-toolbar-config-paragraph',
                11 => 'ez-alloyeditor-toolbar-config-embed',
                12 => 'ez-alloyeditor-toolbar-config-image',
                13 => 'ez-alloyeditor-button-heading',
                14 => 'ez-alloyeditor-button-paragraph',
                15 => 'ez-alloyeditor-button-embed',
                16 => 'ez-alloyeditor-button-image',
                17 => 'ez-alloyeditor-button-blocktextalignleft',
                18 => 'ez-alloyeditor-button-blocktextaligncenter',
                19 => 'ez-alloyeditor-button-blocktextalignright',
                20 => 'ez-alloyeditor-button-blocktextalignjustify',
                21 => 'ez-alloyeditor-button-blockremove',
                22 => 'ez-alloyeditor-button-embedhref',
                23 => 'ez-alloyeditor-button-imagehref',
                24 => 'ez-editorcontentprocessorxhtml5edit',
                25 => 'ez-editorcontentprocessorremoveids',
                26 => 'richtexteditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-richtext-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'ez-alloyeditor',
                2 => 'ez-alloyeditor-plugin-embed',
                3 => 'ez-alloyeditor-plugin-addcontent',
                4 => 'ez-alloyeditor-plugin-removeblock',
                5 => 'ez-alloyeditor-plugin-focusblock',
                6 => 'ez-alloyeditor-toolbar-config-link',
                7 => 'ez-alloyeditor-toolbar-config-text',
                8 => 'ez-alloyeditor-toolbar-config-table',
                9 => 'ez-alloyeditor-toolbar-config-heading',
                10 => 'ez-alloyeditor-toolbar-config-paragraph',
                11 => 'ez-alloyeditor-toolbar-config-embed',
                12 => 'ez-alloyeditor-toolbar-config-image',
                13 => 'ez-alloyeditor-button-heading',
                14 => 'ez-alloyeditor-button-paragraph',
                15 => 'ez-alloyeditor-button-embed',
                16 => 'ez-alloyeditor-button-image',
                17 => 'ez-alloyeditor-button-blocktextalignleft',
                18 => 'ez-alloyeditor-button-blocktextaligncenter',
                19 => 'ez-alloyeditor-button-blocktextalignright',
                20 => 'ez-alloyeditor-button-blocktextalignjustify',
                21 => 'ez-alloyeditor-button-blockremove',
                22 => 'ez-alloyeditor-button-embedhref',
                23 => 'ez-alloyeditor-button-imagehref',
                24 => 'ez-editorcontentprocessorxhtml5edit',
                25 => 'ez-editorcontentprocessorremoveids',
                26 => 'richtexteditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-richtext-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.richtexteditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.richtexteditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-image-editview.requires' => array(
                0 => 'ez-binarybase-editview',
                1 => 'imageeditview-ez-template',
                2 => 'ez-asynchronousview',
                3 => 'event-tap',
            ),
            'ez_platformui.site.yui.modules.ez-image-editview.requires' => array(
                0 => 'ez-binarybase-editview',
                1 => 'imageeditview-ez-template',
                2 => 'ez-asynchronousview',
                3 => 'event-tap',
            ),
            'ez_platformui.site.yui.modules.ez-image-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.imageeditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.imageeditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-binaryfile-editview.requires' => array(
                0 => 'ez-binarybase-editview',
                1 => 'binaryfileeditview-ez-template',
                2 => 'event-tap',
            ),
            'ez_platformui.site.yui.modules.ez-binaryfile-editview.requires' => array(
                0 => 'ez-binarybase-editview',
                1 => 'binaryfileeditview-ez-template',
                2 => 'event-tap',
            ),
            'ez_platformui.site.yui.modules.ez-binaryfile-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.binaryfileeditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.binaryfileeditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-media-editview.requires' => array(
                0 => 'ez-binarybase-editview',
                1 => 'mediaeditview-ez-template',
                2 => 'event-tap',
                3 => 'event-valuechange',
                4 => 'node-event-html5',
            ),
            'ez_platformui.site.yui.modules.ez-media-editview.requires' => array(
                0 => 'ez-binarybase-editview',
                1 => 'mediaeditview-ez-template',
                2 => 'event-tap',
                3 => 'event-valuechange',
                4 => 'node-event-html5',
            ),
            'ez_platformui.site.yui.modules.ez-media-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.mediaeditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.mediaeditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-binarybase-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-tap',
            ),
            'ez_platformui.site.yui.modules.ez-binarybase-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-tap',
            ),
            'ez_platformui.site.yui.modules.ez-binarybase-editview.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-emailaddress-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'emailaddresseditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-emailaddress-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'emailaddresseditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-emailaddress-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.emailaddresseditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.emailaddresseditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-user-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'usereditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-user-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'usereditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-user-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.usereditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.usereditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-relationlist-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'relationlistview-ez-template',
                2 => 'ez-asynchronousview',
            ),
            'ez_platformui.site.yui.modules.ez-relationlist-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'relationlistview-ez-template',
                2 => 'ez-asynchronousview',
            ),
            'ez_platformui.site.yui.modules.ez-relationlist-view.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.relationlistview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.relationlistview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-relation-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'relationview-ez-template',
                2 => 'ez-asynchronousview',
            ),
            'ez_platformui.site.yui.modules.ez-relation-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'relationview-ez-template',
                2 => 'ez-asynchronousview',
            ),
            'ez_platformui.site.yui.modules.ez-relation-view.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.relationview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.relationview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-image-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'imageview-ez-template',
                2 => 'ez-asynchronousview',
            ),
            'ez_platformui.site.yui.modules.ez-image-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'imageview-ez-template',
                2 => 'ez-asynchronousview',
            ),
            'ez_platformui.site.yui.modules.ez-image-view.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.imageview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.imageview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-country-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'countryview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-country-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'countryview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-country-view.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.countryview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.countryview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-user-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'userview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-user-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'userview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-user-view.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.userview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.userview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-binaryfile-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'binaryfileview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-binaryfile-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'binaryfileview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-binaryfile-view.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.binaryfileview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.binaryfileview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-selection-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'selectionview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-selection-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'selectionview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-selection-view.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.selectionview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.selectionview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-url-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'urlview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-url-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'urlview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-url-view.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.urlview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.urlview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-media-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'node-event-html5',
                2 => 'mediaview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-media-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'node-event-html5',
                2 => 'mediaview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-media-view.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.mediaview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.mediaview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-url-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'urleditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-url-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'urleditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-url-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.urleditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.urleditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-country-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'ez-selection-editview',
                2 => 'event-valuechange',
                3 => 'countryeditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-country-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'ez-selection-editview',
                2 => 'event-valuechange',
                3 => 'countryeditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-country-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.countryeditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.countryeditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-keyword-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'keywordview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-keyword-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'keywordview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-keyword-view.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.keywordview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.keywordview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-keyword-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'keywordeditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-keyword-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'keywordeditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-keyword-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.keywordeditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.keywordeditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-author-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'authorview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-author-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'authorview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-author-view.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.authorview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.authorview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-author-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'event-tap',
                3 => 'model',
                4 => 'model-list',
                5 => 'authoreditview-ez-template',
                6 => 'authorinputview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-author-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'event-tap',
                3 => 'model',
                4 => 'model-list',
                5 => 'authoreditview-ez-template',
                6 => 'authorinputview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-author-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.authoreditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.authoreditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.authorinputview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.authorinputview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-float-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'floateditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-float-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'floateditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-float-editview.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-float-view.requires' => array(
                0 => 'ez-fieldview',
            ),
            'ez_platformui.site.yui.modules.ez-float-view.requires' => array(
                0 => 'ez-fieldview',
            ),
            'ez_platformui.site.yui.modules.ez-float-view.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.floateditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.floateditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-integer-view.requires' => array(
                0 => 'ez-fieldview',
            ),
            'ez_platformui.site.yui.modules.ez-integer-view.requires' => array(
                0 => 'ez-fieldview',
            ),
            'ez_platformui.site.yui.modules.ez-integer-view.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-integer-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'integereditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-integer-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'event-valuechange',
                2 => 'integereditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-integer-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.integereditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.integereditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-maplocation-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'ez-googlemapapiloader',
                2 => 'maplocationview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-maplocation-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'ez-googlemapapiloader',
                2 => 'maplocationview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-maplocation-view.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.maplocationview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.maplocationview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-maplocation-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'ez-googlemapapiloader',
                2 => 'maplocationeditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-maplocation-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'ez-googlemapapiloader',
                2 => 'maplocationeditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-maplocation-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.maplocationeditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.maplocationeditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-relation-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'relationeditview-ez-template',
                2 => 'ez-asynchronousview',
            ),
            'ez_platformui.site.yui.modules.ez-relation-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'relationeditview-ez-template',
                2 => 'ez-asynchronousview',
            ),
            'ez_platformui.site.yui.modules.ez-relation-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.relationeditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.relationeditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-relationlist-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'relationlisteditview-ez-template',
                2 => 'ez-asynchronousview',
                3 => 'array-extras',
                4 => 'transition',
            ),
            'ez_platformui.site.yui.modules.ez-relationlist-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'relationlisteditview-ez-template',
                2 => 'ez-asynchronousview',
                3 => 'array-extras',
                4 => 'transition',
            ),
            'ez_platformui.site.yui.modules.ez-relationlist-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.relationlisteditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.relationlisteditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-richtext-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'richtextview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-richtext-view.requires' => array(
                0 => 'ez-fieldview',
                1 => 'richtextview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-richtext-view.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.richtextview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.richtextview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-selection-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'ez-selectionfilterview',
                2 => 'event-tap',
                3 => 'event-outside',
                4 => 'node-screen',
                5 => 'selectioneditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-selection-editview.requires' => array(
                0 => 'ez-fieldeditview',
                1 => 'ez-selectionfilterview',
                2 => 'event-tap',
                3 => 'event-outside',
                4 => 'node-screen',
                5 => 'selectioneditview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-selection-editview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.selectioneditview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.selectioneditview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-selectionfilterview.requires' => array(
                0 => 'autocomplete-base',
                1 => 'autocomplete-highlighters',
                2 => 'autocomplete-filters',
                3 => 'event-tap',
                4 => 'view',
            ),
            'ez_platformui.site.yui.modules.ez-selectionfilterview.requires' => array(
                0 => 'autocomplete-base',
                1 => 'autocomplete-highlighters',
                2 => 'autocomplete-filters',
                3 => 'event-tap',
                4 => 'view',
            ),
            'ez_platformui.site.yui.modules.ez-selectionfilterview.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-restmodel.requires' => array(
                0 => 'model',
                1 => 'json',
            ),
            'ez_platformui.site.yui.modules.ez-restmodel.requires' => array(
                0 => 'model',
                1 => 'json',
            ),
            'ez_platformui.site.yui.modules.ez-restmodel.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-contentmodel.requires' => array(
                0 => 'ez-restmodel',
                1 => 'ez-versionmodel',
                2 => 'array-extras',
                3 => 'ez-contentinfo-attributes',
            ),
            'ez_platformui.site.yui.modules.ez-contentmodel.requires' => array(
                0 => 'ez-restmodel',
                1 => 'ez-versionmodel',
                2 => 'array-extras',
                3 => 'ez-contentinfo-attributes',
            ),
            'ez_platformui.site.yui.modules.ez-contentmodel.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-versionmodel.requires' => array(
                0 => 'ez-restmodel',
            ),
            'ez_platformui.site.yui.modules.ez-versionmodel.requires' => array(
                0 => 'ez-restmodel',
            ),
            'ez_platformui.site.yui.modules.ez-versionmodel.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-locationmodel.requires' => array(
                0 => 'ez-restmodel',
                1 => 'ez-contentinfomodel',
                2 => 'array-extras',
            ),
            'ez_platformui.site.yui.modules.ez-locationmodel.requires' => array(
                0 => 'ez-restmodel',
                1 => 'ez-contentinfomodel',
                2 => 'array-extras',
            ),
            'ez_platformui.site.yui.modules.ez-locationmodel.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-usermodel.requires' => array(
                0 => 'ez-restmodel',
            ),
            'ez_platformui.site.yui.modules.ez-usermodel.requires' => array(
                0 => 'ez-restmodel',
            ),
            'ez_platformui.site.yui.modules.ez-usermodel.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-contenttypemodel.requires' => array(
                0 => 'ez-restmodel',
            ),
            'ez_platformui.site.yui.modules.ez-contenttypemodel.requires' => array(
                0 => 'ez-restmodel',
            ),
            'ez_platformui.site.yui.modules.ez-contenttypemodel.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-contenttypegroupmodel.requires' => array(
                0 => 'ez-restmodel',
                1 => 'ez-contenttypemodel',
            ),
            'ez_platformui.site.yui.modules.ez-contenttypegroupmodel.requires' => array(
                0 => 'ez-restmodel',
                1 => 'ez-contenttypemodel',
            ),
            'ez_platformui.site.yui.modules.ez-contenttypegroupmodel.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-contentinfomodel.requires' => array(
                0 => 'ez-restmodel',
                1 => 'ez-contentinfo-attributes',
            ),
            'ez_platformui.site.yui.modules.ez-contentinfomodel.requires' => array(
                0 => 'ez-restmodel',
                1 => 'ez-contentinfo-attributes',
            ),
            'ez_platformui.site.yui.modules.ez-contentinfomodel.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-contenttree.requires' => array(
                0 => 'tree',
                1 => 'tree-openable',
                2 => 'tree-selectable',
                3 => 'tree-lazy',
            ),
            'ez_platformui.site.yui.modules.ez-contenttree.requires' => array(
                0 => 'tree',
                1 => 'tree-openable',
                2 => 'tree-selectable',
                3 => 'tree-lazy',
            ),
            'ez_platformui.site.yui.modules.ez-contenttree.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-notification.requires' => array(
                0 => 'model',
            ),
            'ez_platformui.site.yui.modules.ez-notification.requires' => array(
                0 => 'model',
            ),
            'ez_platformui.site.yui.modules.ez-notification.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-notificationlist.requires' => array(
                0 => 'model-list',
                1 => 'ez-notification',
            ),
            'ez_platformui.site.yui.modules.ez-notificationlist.requires' => array(
                0 => 'model-list',
                1 => 'ez-notification',
            ),
            'ez_platformui.site.yui.modules.ez-notificationlist.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-editactionbarview.requires' => array(
                0 => 'ez-barview',
                1 => 'ez-buttonactionview',
                2 => 'ez-previewactionview',
            ),
            'ez_platformui.site.yui.modules.ez-editactionbarview.requires' => array(
                0 => 'ez-barview',
                1 => 'ez-buttonactionview',
                2 => 'ez-previewactionview',
            ),
            'ez_platformui.site.yui.modules.ez-editactionbarview.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-buttonactionview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'buttonactionview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-buttonactionview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'buttonactionview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-buttonactionview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.buttonactionview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.buttonactionview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-previewactionview.requires' => array(
                0 => 'ez-buttonactionview',
                1 => 'ez-editpreviewview',
                2 => 'previewactionview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-previewactionview.requires' => array(
                0 => 'ez-buttonactionview',
                1 => 'ez-editpreviewview',
                2 => 'previewactionview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-previewactionview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.previewactionview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.previewactionview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-treeactionview.requires' => array(
                0 => 'ez-buttonactionview',
                1 => 'ez-treeview',
                2 => 'ez-expandable',
                3 => 'event-outside',
                4 => 'node-style',
                5 => 'treeactionview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-treeactionview.requires' => array(
                0 => 'ez-buttonactionview',
                1 => 'ez-treeview',
                2 => 'ez-expandable',
                3 => 'event-outside',
                4 => 'node-style',
                5 => 'treeactionview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-treeactionview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.treeactionview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.treeactionview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-translateactionview.requires' => array(
                0 => 'ez-buttonactionview',
                1 => 'ez-expandable',
                2 => 'translateactionview-ez-template',
                3 => 'event-outside',
            ),
            'ez_platformui.site.yui.modules.ez-translateactionview.requires' => array(
                0 => 'ez-buttonactionview',
                1 => 'ez-expandable',
                2 => 'translateactionview-ez-template',
                3 => 'event-outside',
            ),
            'ez_platformui.site.yui.modules.ez-translateactionview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.translateactionview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.translateactionview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-movecontentactionview.requires' => array(
                0 => 'ez-buttonactionview',
                1 => 'movecontentactionview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-movecontentactionview.requires' => array(
                0 => 'ez-buttonactionview',
                1 => 'movecontentactionview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-movecontentactionview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.movecontentactionview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.movecontentactionview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-createcontentactionview.requires' => array(
                0 => 'ez-buttonactionview',
                1 => 'ez-expandable',
                2 => 'ez-contenttypeselectorview',
                3 => 'createcontentactionview-ez-template',
                4 => 'event-outside',
            ),
            'ez_platformui.site.yui.modules.ez-createcontentactionview.requires' => array(
                0 => 'ez-buttonactionview',
                1 => 'ez-expandable',
                2 => 'ez-contenttypeselectorview',
                3 => 'createcontentactionview-ez-template',
                4 => 'event-outside',
            ),
            'ez_platformui.site.yui.modules.ez-createcontentactionview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.createcontentactionview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.createcontentactionview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-contenttypeselectorview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'contenttypeselectorview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-contenttypeselectorview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'contenttypeselectorview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-contenttypeselectorview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.contenttypeselectorview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.contenttypeselectorview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-editpreviewview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'event-tap',
                2 => 'node-screen',
                3 => 'editpreviewview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-editpreviewview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'event-tap',
                2 => 'node-screen',
                3 => 'editpreviewview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-editpreviewview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.editpreviewview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.editpreviewview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-barview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'event-tap',
                2 => 'event-resize',
                3 => 'barview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-barview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'event-tap',
                2 => 'event-resize',
                3 => 'barview-ez-template',
            ),
            'ez_platformui.site.yui.modules.ez-barview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.barview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.barview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-treeview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'event-tap',
                2 => 'treeview-ez-template',
                3 => 'template',
                4 => 'tree-ez-partial',
            ),
            'ez_platformui.site.yui.modules.ez-treeview.requires' => array(
                0 => 'ez-templatebasedview',
                1 => 'event-tap',
                2 => 'treeview-ez-template',
                3 => 'template',
                4 => 'tree-ez-partial',
            ),
            'ez_platformui.site.yui.modules.ez-treeview.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.treeview-ez-template.requires' => array(

            ),
            'ez_platformui.site.yui.modules.treeview-ez-template.dependencyof' => array(

            ),
            'ez_platformui.site.yui.modules.tree-ez-partial.requires' => array(

            ),
            'ez_platformui.site.yui.modules.tree-ez-partial.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-serversideview.requires' => array(
                0 => 'ez-view',
                1 => 'ez-tabs',
                2 => 'ez-selection-table',
                3 => 'event-tap',
            ),
            'ez_platformui.site.yui.modules.ez-serversideview.requires' => array(
                0 => 'ez-view',
                1 => 'ez-tabs',
                2 => 'ez-selection-table',
                3 => 'event-tap',
            ),
            'ez_platformui.site.yui.modules.ez-serversideview.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-contenttypeeditserversideview.requires' => array(
                0 => 'ez-serversideview',
                1 => 'event-tap',
            ),
            'ez_platformui.site.yui.modules.ez-contenttypeeditserversideview.requires' => array(
                0 => 'ez-serversideview',
                1 => 'event-tap',
            ),
            'ez_platformui.site.yui.modules.ez-contenttypeeditserversideview.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-sectionserversideview.requires' => array(
                0 => 'ez-serversideview',
                1 => 'event-tap',
            ),
            'ez_platformui.site.yui.modules.ez-sectionserversideview.requires' => array(
                0 => 'ez-serversideview',
                1 => 'event-tap',
            ),
            'ez_platformui.site.yui.modules.ez-sectionserversideview.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-roleserversideview.requires' => array(
                0 => 'ez-serversideview',
                1 => 'event-tap',
            ),
            'ez_platformui.site.yui.modules.ez-roleserversideview.requires' => array(
                0 => 'ez-serversideview',
                1 => 'event-tap',
            ),
            'ez_platformui.site.yui.modules.ez-roleserversideview.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-texthelper.requires' => array(
                0 => 'handlebars',
            ),
            'ez_platformui.site.yui.modules.ez-texthelper.requires' => array(
                0 => 'handlebars',
            ),
            'ez_platformui.site.yui.modules.ez-texthelper.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-getflagcodehelper.requires' => array(
                0 => 'handlebars',
            ),
            'ez_platformui.site.yui.modules.ez-getflagcodehelper.requires' => array(
                0 => 'handlebars',
            ),
            'ez_platformui.site.yui.modules.ez-getflagcodehelper.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-googlemapapiloader.requires' => array(
                0 => 'jsonp',
                1 => 'jsonp-url',
                2 => 'event-custom',
            ),
            'ez_platformui.site.yui.modules.ez-googlemapapiloader.requires' => array(
                0 => 'jsonp',
                1 => 'jsonp-url',
                2 => 'event-custom',
            ),
            'ez_platformui.site.yui.modules.ez-googlemapapiloader.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-pluginregistry.requires' => array(
                0 => 'array-extras',
            ),
            'ez_platformui.site.yui.modules.ez-pluginregistry.requires' => array(
                0 => 'array-extras',
            ),
            'ez_platformui.site.yui.modules.ez-pluginregistry.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-positionplugin.requires' => array(
                0 => 'plugin',
                1 => 'base',
                2 => 'node-style',
                3 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-positionplugin.requires' => array(
                0 => 'plugin',
                1 => 'base',
                2 => 'node-style',
                3 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-positionplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-updatetreeplugin.requires' => array(
                0 => 'plugin',
                1 => 'base',
                2 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-updatetreeplugin.requires' => array(
                0 => 'plugin',
                1 => 'base',
                2 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-updatetreeplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-notificationhubplugin.requires' => array(
                0 => 'plugin',
                1 => 'base',
                2 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-notificationhubplugin.requires' => array(
                0 => 'plugin',
                1 => 'base',
                2 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-notificationhubplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-confirmboxplugin.requires' => array(
                0 => 'plugin',
                1 => 'base',
                2 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-confirmboxplugin.requires' => array(
                0 => 'plugin',
                1 => 'base',
                2 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-confirmboxplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-languageselectionboxplugin.requires' => array(
                0 => 'plugin',
                1 => 'base',
                2 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-languageselectionboxplugin.requires' => array(
                0 => 'plugin',
                1 => 'base',
                2 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-languageselectionboxplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-universaldiscoveryplugin.requires' => array(
                0 => 'plugin',
                1 => 'base',
                2 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-universaldiscoveryplugin.requires' => array(
                0 => 'plugin',
                1 => 'base',
                2 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-universaldiscoveryplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-domstateplugin.requires' => array(
                0 => 'plugin',
                1 => 'base',
                2 => 'node',
                3 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-domstateplugin.requires' => array(
                0 => 'plugin',
                1 => 'base',
                2 => 'node',
                3 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-domstateplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-registerurlhelpersplugin.requires' => array(
                0 => 'plugin',
                1 => 'handlebars',
                2 => 'base',
                3 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-registerurlhelpersplugin.requires' => array(
                0 => 'plugin',
                1 => 'handlebars',
                2 => 'base',
                3 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-registerurlhelpersplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-registerlanguagehelpersplugin.requires' => array(
                0 => 'plugin',
                1 => 'handlebars',
                2 => 'base',
                3 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-registerlanguagehelpersplugin.requires' => array(
                0 => 'plugin',
                1 => 'handlebars',
                2 => 'base',
                3 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-registerlanguagehelpersplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-viewservicebaseplugin.requires' => array(
                0 => 'plugin',
                1 => 'base',
            ),
            'ez_platformui.site.yui.modules.ez-viewservicebaseplugin.requires' => array(
                0 => 'plugin',
                1 => 'base',
            ),
            'ez_platformui.site.yui.modules.ez-viewservicebaseplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-objectrelationsloadplugin.requires' => array(
                0 => 'parallel',
                1 => 'ez-viewservicebaseplugin',
                2 => 'ez-pluginregistry',
                3 => 'ez-contentmodel',
            ),
            'ez_platformui.site.yui.modules.ez-objectrelationsloadplugin.requires' => array(
                0 => 'parallel',
                1 => 'ez-viewservicebaseplugin',
                2 => 'ez-pluginregistry',
                3 => 'ez-contentmodel',
            ),
            'ez_platformui.site.yui.modules.ez-objectrelationsloadplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-userloadplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
                2 => 'ez-contentmodel',
            ),
            'ez_platformui.site.yui.modules.ez-userloadplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
                2 => 'ez-contentmodel',
            ),
            'ez_platformui.site.yui.modules.ez-userloadplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-visibilityswitcherplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
                2 => 'ez-contentmodel',
            ),
            'ez_platformui.site.yui.modules.ez-visibilityswitcherplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
                2 => 'ez-contentmodel',
            ),
            'ez_platformui.site.yui.modules.ez-visibilityswitcherplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-locationsloadplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
                2 => 'ez-contentmodel',
            ),
            'ez_platformui.site.yui.modules.ez-locationsloadplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
                2 => 'ez-contentmodel',
            ),
            'ez_platformui.site.yui.modules.ez-locationsloadplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-locationcreateplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
                2 => 'ez-contentmodel',
                3 => 'parallel',
            ),
            'ez_platformui.site.yui.modules.ez-locationcreateplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
                2 => 'ez-contentmodel',
                3 => 'parallel',
            ),
            'ez_platformui.site.yui.modules.ez-locationcreateplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-contentsetmainlocationplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
                2 => 'ez-contentmodel',
            ),
            'ez_platformui.site.yui.modules.ez-contentsetmainlocationplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
                2 => 'ez-contentmodel',
            ),
            'ez_platformui.site.yui.modules.ez-contentsetmainlocationplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-locationremoveplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
                2 => 'ez-contentmodel',
                3 => 'parallel',
            ),
            'ez_platformui.site.yui.modules.ez-locationremoveplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
                2 => 'ez-contentmodel',
                3 => 'parallel',
            ),
            'ez_platformui.site.yui.modules.ez-locationremoveplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-objectrelationloadplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
                2 => 'ez-contentmodel',
            ),
            'ez_platformui.site.yui.modules.ez-objectrelationloadplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
                2 => 'ez-contentmodel',
            ),
            'ez_platformui.site.yui.modules.ez-objectrelationloadplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-imagevariationloadplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
                2 => 'ez-contentmodel',
            ),
            'ez_platformui.site.yui.modules.ez-imagevariationloadplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
                2 => 'ez-contentmodel',
            ),
            'ez_platformui.site.yui.modules.ez-imagevariationloadplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-universaldiscoverycontenttreeplugin.requires' => array(
                0 => 'ez-contenttreeplugin',
                1 => 'ez-pluginregistry',
                2 => 'ez-locationmodel',
            ),
            'ez_platformui.site.yui.modules.ez-universaldiscoverycontenttreeplugin.requires' => array(
                0 => 'ez-contenttreeplugin',
                1 => 'ez-pluginregistry',
                2 => 'ez-locationmodel',
            ),
            'ez_platformui.site.yui.modules.ez-universaldiscoverycontenttreeplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-discoverybarcontenttreeplugin.requires' => array(
                0 => 'ez-contenttreeplugin',
                1 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-discoverybarcontenttreeplugin.requires' => array(
                0 => 'ez-contenttreeplugin',
                1 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-discoverybarcontenttreeplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-contenttreeplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-contenttypemodel',
                2 => 'ez-locationmodel',
                3 => 'ez-contenttree',
                4 => 'ez-contentmodel',
                5 => 'parallel',
            ),
            'ez_platformui.site.yui.modules.ez-contenttreeplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-contenttypemodel',
                2 => 'ez-locationmodel',
                3 => 'ez-contenttree',
                4 => 'ez-contentmodel',
                5 => 'parallel',
            ),
            'ez_platformui.site.yui.modules.ez-contenttreeplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-locationsearchplugin.requires' => array(
                0 => 'parallel',
                1 => 'ez-viewservicebaseplugin',
                2 => 'ez-pluginregistry',
                3 => 'ez-locationmodel',
            ),
            'ez_platformui.site.yui.modules.ez-locationsearchplugin.requires' => array(
                0 => 'parallel',
                1 => 'ez-viewservicebaseplugin',
                2 => 'ez-pluginregistry',
                3 => 'ez-locationmodel',
            ),
            'ez_platformui.site.yui.modules.ez-locationsearchplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-contentcreateplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
                2 => 'ez-createcontentactionview',
                3 => 'ez-contenttypegroupmodel',
            ),
            'ez_platformui.site.yui.modules.ez-contentcreateplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
                2 => 'ez-createcontentactionview',
                3 => 'ez-contenttypegroupmodel',
            ),
            'ez_platformui.site.yui.modules.ez-contentcreateplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-copycontentplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-copycontentplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-copycontentplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-discarddraftplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-discarddraftplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-discarddraftplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-savedraftplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-savedraftplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-savedraftplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-publishdraftplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-publishdraftplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-publishdraftplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-sideviewservice.requires' => array(
                0 => 'base',
            ),
            'ez_platformui.site.yui.modules.ez-sideviewservice.requires' => array(
                0 => 'base',
            ),
            'ez_platformui.site.yui.modules.ez-sideviewservice.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-loginavailableplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-loginavailableplugin.requires' => array(
                0 => 'ez-viewservicebaseplugin',
                1 => 'ez-pluginregistry',
            ),
            'ez_platformui.site.yui.modules.ez-loginavailableplugin.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-height-change.requires' => array(
                0 => 'view',
            ),
            'ez_platformui.site.yui.modules.ez-height-change.requires' => array(
                0 => 'view',
            ),
            'ez_platformui.site.yui.modules.ez-height-change.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-asynchronousview.requires' => array(
                0 => 'view',
                1 => 'event-tap',
            ),
            'ez_platformui.site.yui.modules.ez-asynchronousview.requires' => array(
                0 => 'view',
                1 => 'event-tap',
            ),
            'ez_platformui.site.yui.modules.ez-asynchronousview.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-expandable.requires' => array(
                0 => 'view',
            ),
            'ez_platformui.site.yui.modules.ez-expandable.requires' => array(
                0 => 'view',
            ),
            'ez_platformui.site.yui.modules.ez-expandable.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-contentinfo-attributes.requires' => array(
                0 => 'ez-restmodel',
            ),
            'ez_platformui.site.yui.modules.ez-contentinfo-attributes.requires' => array(
                0 => 'ez-restmodel',
            ),
            'ez_platformui.site.yui.modules.ez-contentinfo-attributes.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-height-fit.requires' => array(
                0 => 'view',
                1 => 'node-screen',
                2 => 'node-style',
            ),
            'ez_platformui.site.yui.modules.ez-height-fit.requires' => array(
                0 => 'view',
                1 => 'node-screen',
                2 => 'node-style',
            ),
            'ez_platformui.site.yui.modules.ez-height-fit.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-accordion-element.requires' => array(
                0 => 'transition',
            ),
            'ez_platformui.site.yui.modules.ez-accordion-element.requires' => array(
                0 => 'transition',
            ),
            'ez_platformui.site.yui.modules.ez-accordion-element.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-tabs.requires' => array(
                0 => 'node',
                1 => 'event-tap',
            ),
            'ez_platformui.site.yui.modules.ez-tabs.requires' => array(
                0 => 'node',
                1 => 'event-tap',
            ),
            'ez_platformui.site.yui.modules.ez-tabs.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-selection-table.requires' => array(
                0 => 'node',
            ),
            'ez_platformui.site.yui.modules.ez-selection-table.requires' => array(
                0 => 'node',
            ),
            'ez_platformui.site.yui.modules.ez-selection-table.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-app-extension.requires' => array(
                0 => 'base',
            ),
            'ez_platformui.site.yui.modules.ez-app-extension.requires' => array(
                0 => 'base',
            ),
            'ez_platformui.site.yui.modules.ez-app-extension.dependencyof' => array(

            ),
            'ez_platformui.default.yui.modules.ez-app-extension-admin.requires' => array(
                0 => 'ez-serversideview',
                1 => 'ez-serversideviewservice',
                2 => 'ez-app-extension',
            ),
            'ez_platformui.site.yui.modules.ez-app-extension-admin.requires' => array(
                0 => 'ez-serversideview',
                1 => 'ez-serversideviewservice',
                2 => 'ez-app-extension',
            ),
            'ez_platformui.site.yui.modules.ez-app-extension-admin.dependencyof' => array(

            ),
            'ez_platformui.site.css.files' => array(
                0 => 'bundles/ezplatformuiassets/vendors/pure/base-context-min.css',
                1 => 'bundles/ezplatformuiassets/vendors/pure/grids-min.css',
                2 => 'bundles/ezplatformuiassets/vendors/pure/buttons-min.css',
                3 => 'bundles/ezplatformuiassets/vendors/pure/tables-min.css',
                4 => 'bundles/ezplatformuiassets/vendors/pure/forms-min.css',
                5 => 'bundles/ezplatformuiassets/vendors/flag-icon-css/css/flag-icon.min.css',
                6 => 'bundles/ezplatformui/css/external/alloy-editor-ez.css',
                7 => 'bundles/ezplatformui/css/layout.css',
                8 => 'bundles/ezplatformui/css/views/navigationhub.css',
                9 => 'bundles/ezplatformui/css/views/confirmbox.css',
                10 => 'bundles/ezplatformui/css/views/languageselectionbox.css',
                11 => 'bundles/ezplatformui/css/views/notificationhub.css',
                12 => 'bundles/ezplatformui/css/views/notification.css',
                13 => 'bundles/ezplatformui/css/views/universaldiscovery.css',
                14 => 'bundles/ezplatformui/css/views/universaldiscovery/browse.css',
                15 => 'bundles/ezplatformui/css/views/universaldiscovery/search.css',
                16 => 'bundles/ezplatformui/css/views/universaldiscovery/selected.css',
                17 => 'bundles/ezplatformui/css/views/universaldiscovery/confirmedlist.css',
                18 => 'bundles/ezplatformui/css/views/tree.css',
                19 => 'bundles/ezplatformui/css/views/loginform.css',
                20 => 'bundles/ezplatformui/css/views/contentedit.css',
                21 => 'bundles/ezplatformui/css/views/locationview.css',
                22 => 'bundles/ezplatformui/css/views/subitemlist.css',
                23 => 'bundles/ezplatformui/css/views/rawcontent.css',
                24 => 'bundles/ezplatformui/css/views/languageswitcher.css',
                25 => 'bundles/ezplatformui/css/views/tabs/details.css',
                26 => 'bundles/ezplatformui/css/views/tabs/relations.css',
                27 => 'bundles/ezplatformui/css/views/tabs/locations.css',
                28 => 'bundles/ezplatformui/css/views/field.css',
                29 => 'bundles/ezplatformui/css/views/fields/view/user.css',
                30 => 'bundles/ezplatformui/css/views/fields/view/author.css',
                31 => 'bundles/ezplatformui/css/views/fields/view/maplocation.css',
                32 => 'bundles/ezplatformui/css/views/fields/view/selection.css',
                33 => 'bundles/ezplatformui/css/views/fields/view/keyword.css',
                34 => 'bundles/ezplatformui/css/views/fields/view/country.css',
                35 => 'bundles/ezplatformui/css/views/fields/view/media.css',
                36 => 'bundles/ezplatformui/css/views/fields/view/richtext.css',
                37 => 'bundles/ezplatformui/css/views/contenteditform.css',
                38 => 'bundles/ezplatformui/css/views/bar.css',
                39 => 'bundles/ezplatformui/css/views/discoverybar.css',
                40 => 'bundles/ezplatformui/css/views/contenttypeselector.css',
                41 => 'bundles/ezplatformui/css/views/actions/tree.css',
                42 => 'bundles/ezplatformui/css/views/actions/button.css',
                43 => 'bundles/ezplatformui/css/views/actions/preview.css',
                44 => 'bundles/ezplatformui/css/views/actions/create-content.css',
                45 => 'bundles/ezplatformui/css/views/actions/translate.css',
                46 => 'bundles/ezplatformui/css/views/editpreview.css',
                47 => 'bundles/ezplatformui/css/views/fieldedit.css',
                48 => 'bundles/ezplatformui/css/views/error.css',
                49 => 'bundles/ezplatformui/css/views/asynchronous.css',
                50 => 'bundles/ezplatformui/css/views/dashboard.css',
                51 => 'bundles/ezplatformui/css/views/studiopresentation.css',
                52 => 'bundles/ezplatformui/css/views/studiopluspresentation.css',
                53 => 'bundles/ezplatformui/css/views/fields/edit/checkbox.css',
                54 => 'bundles/ezplatformui/css/views/fields/edit/country.css',
                55 => 'bundles/ezplatformui/css/views/fields/edit/textline.css',
                56 => 'bundles/ezplatformui/css/views/fields/edit/keyword.css',
                57 => 'bundles/ezplatformui/css/views/fields/edit/textblock.css',
                58 => 'bundles/ezplatformui/css/views/fields/edit/xmltext.css',
                59 => 'bundles/ezplatformui/css/views/fields/edit/emailaddress.css',
                60 => 'bundles/ezplatformui/css/views/fields/edit/url.css',
                61 => 'bundles/ezplatformui/css/views/fields/edit/float.css',
                62 => 'bundles/ezplatformui/css/views/fields/edit/integer.css',
                63 => 'bundles/ezplatformui/css/views/fields/edit/maplocation.css',
                64 => 'bundles/ezplatformui/css/views/fields/edit/author.css',
                65 => 'bundles/ezplatformui/css/views/fields/edit/binarybase.css',
                66 => 'bundles/ezplatformui/css/views/fields/edit/image.css',
                67 => 'bundles/ezplatformui/css/views/fields/edit/media.css',
                68 => 'bundles/ezplatformui/css/views/fields/edit/binaryfile.css',
                69 => 'bundles/ezplatformui/css/views/fields/edit/selection.css',
                70 => 'bundles/ezplatformui/css/views/fields/edit/time.css',
                71 => 'bundles/ezplatformui/css/views/fields/edit/date.css',
                72 => 'bundles/ezplatformui/css/views/fields/edit/dateandtime.css',
                73 => 'bundles/ezplatformui/css/views/fields/edit/relation.css',
                74 => 'bundles/ezplatformui/css/views/fields/edit/relationlist.css',
                75 => 'bundles/ezplatformui/css/views/fields/edit/richtext.css',
                76 => 'bundles/ezplatformui/css/views/fields/edit/isbn.css',
                77 => 'bundles/ezplatformui/css/views/fields/edit/user.css',
                78 => 'bundles/ezplatformui/css/modules/tabs.css',
                79 => 'bundles/ezplatformui/css/modules/page-header.css',
                80 => 'bundles/ezplatformui/css/modules/serverside-content.css',
                81 => 'bundles/ezplatformui/css/modules/selection-filter.css',
                82 => 'bundles/ezplatformui/css/modules/button.css',
                83 => 'bundles/ezplatformui/css/modules/table-data.css',
                84 => 'bundles/ezplatformui/css/modules/breadcrumbs.css',
                85 => 'bundles/ezplatformui/css/modules/yui-calendar.css',
                86 => 'bundles/ezplatformui/css/modules/pure-grid.css',
                87 => 'bundles/ezplatformui/css/alloyeditor/general.css',
                88 => 'bundles/ezplatformui/css/alloyeditor/content.css',
                89 => 'bundles/ezplatformui/css/alloyeditor/buttons/labeled-button.css',
                90 => 'bundles/ezplatformui/css/theme/app.css',
                91 => 'bundles/ezplatformui/css/theme/views/error.css',
                92 => 'bundles/ezplatformui/css/theme/views/loginform.css',
                93 => 'bundles/ezplatformui/css/theme/views/bar.css',
                94 => 'bundles/ezplatformui/css/theme/views/confirmbox.css',
                95 => 'bundles/ezplatformui/css/theme/views/languageselectionbox.css',
                96 => 'bundles/ezplatformui/css/theme/views/notificationhub.css',
                97 => 'bundles/ezplatformui/css/theme/views/notification.css',
                98 => 'bundles/ezplatformui/css/theme/views/universaldiscovery.css',
                99 => 'bundles/ezplatformui/css/theme/views/universaldiscovery/browse.css',
                100 => 'bundles/ezplatformui/css/theme/views/universaldiscovery/search.css',
                101 => 'bundles/ezplatformui/css/theme/views/universaldiscovery/selected.css',
                102 => 'bundles/ezplatformui/css/theme/views/universaldiscovery/confirmedlist.css',
                103 => 'bundles/ezplatformui/css/theme/views/tree.css',
                104 => 'bundles/ezplatformui/css/theme/views/discoverybar.css',
                105 => 'bundles/ezplatformui/css/theme/views/contenttypeselector.css',
                106 => 'bundles/ezplatformui/css/theme/views/actions/tree.css',
                107 => 'bundles/ezplatformui/css/theme/views/actions/button.css',
                108 => 'bundles/ezplatformui/css/theme/views/actions/preview.css',
                109 => 'bundles/ezplatformui/css/theme/views/actions/create-content.css',
                110 => 'bundles/ezplatformui/css/theme/views/actions/translate.css',
                111 => 'bundles/ezplatformui/css/theme/views/dashboard.css',
                112 => 'bundles/ezplatformui/css/theme/views/studiopresentation.css',
                113 => 'bundles/ezplatformui/css/theme/views/studiopluspresentation.css',
                114 => 'bundles/ezplatformui/css/theme/views/serverside.css',
                115 => 'bundles/ezplatformui/css/theme/views/navigationhub.css',
                116 => 'bundles/ezplatformui/css/theme/views/locationview.css',
                117 => 'bundles/ezplatformui/css/theme/views/subitemlist.css',
                118 => 'bundles/ezplatformui/css/theme/views/rawcontent.css',
                119 => 'bundles/ezplatformui/css/theme/views/languageswitcher.css',
                120 => 'bundles/ezplatformui/css/theme/views/asynchronous.css',
                121 => 'bundles/ezplatformui/css/theme/views/tabs/details.css',
                122 => 'bundles/ezplatformui/css/theme/views/tabs/relations.css',
                123 => 'bundles/ezplatformui/css/theme/views/tabs/locations.css',
                124 => 'bundles/ezplatformui/css/theme/views/field.css',
                125 => 'bundles/ezplatformui/css/theme/views/fields/view/url.css',
                126 => 'bundles/ezplatformui/css/theme/views/fields/view/binaryfile.css',
                127 => 'bundles/ezplatformui/css/theme/views/fields/view/maplocation.css',
                128 => 'bundles/ezplatformui/css/theme/views/fields/view/xmltext.css',
                129 => 'bundles/ezplatformui/css/theme/views/fields/view/media.css',
                130 => 'bundles/ezplatformui/css/theme/views/fields/view/richtext.css',
                131 => 'bundles/ezplatformui/css/theme/views/contentedit.css',
                132 => 'bundles/ezplatformui/css/theme/views/contenteditform.css',
                133 => 'bundles/ezplatformui/css/theme/views/editpreview.css',
                134 => 'bundles/ezplatformui/css/theme/views/fieldedit.css',
                135 => 'bundles/ezplatformui/css/theme/views/fields/view/keyword.css',
                136 => 'bundles/ezplatformui/css/theme/views/fields/view/country.css',
                137 => 'bundles/ezplatformui/css/theme/views/fields/edit/maplocation.css',
                138 => 'bundles/ezplatformui/css/theme/views/fields/edit/author.css',
                139 => 'bundles/ezplatformui/css/theme/views/fields/edit/selection.css',
                140 => 'bundles/ezplatformui/css/theme/views/fields/edit/binarybase.css',
                141 => 'bundles/ezplatformui/css/theme/views/fields/edit/image.css',
                142 => 'bundles/ezplatformui/css/theme/views/fields/edit/media.css',
                143 => 'bundles/ezplatformui/css/theme/views/fields/edit/binaryfile.css',
                144 => 'bundles/ezplatformui/css/theme/views/fields/edit/date.css',
                145 => 'bundles/ezplatformui/css/theme/views/fields/edit/dateandtime.css',
                146 => 'bundles/ezplatformui/css/theme/views/fields/edit/relation.css',
                147 => 'bundles/ezplatformui/css/theme/views/fields/edit/relationlist.css',
                148 => 'bundles/ezplatformui/css/theme/views/fields/edit/country.css',
                149 => 'bundles/ezplatformui/css/theme/views/fields/edit/richtext.css',
                150 => 'bundles/ezplatformui/css/theme/views/fields/edit/user.css',
                151 => 'bundles/ezplatformui/css/theme/modules/icons.css',
                152 => 'bundles/ezplatformui/css/theme/modules/tabs.css',
                153 => 'bundles/ezplatformui/css/theme/modules/page-header.css',
                154 => 'bundles/ezplatformui/css/theme/modules/serverside-content.css',
                155 => 'bundles/ezplatformui/css/theme/modules/selection-filter.css',
                156 => 'bundles/ezplatformui/css/theme/modules/button.css',
                157 => 'bundles/ezplatformui/css/theme/modules/selection-table.css',
                158 => 'bundles/ezplatformui/css/theme/modules/breadcrumbs.css',
                159 => 'bundles/ezplatformui/css/theme/modules/yui-calendar.css',
                160 => 'bundles/ezplatformui/css/theme/alloyeditor/general.css',
                161 => 'bundles/ezplatformui/css/theme/alloyeditor/content.css',
                162 => 'bundles/ezplatformui/css/theme/alloyeditor/buttons/labeled-button.css',
                163 => 'bundles/ezplatformui/css/theme/alloyeditor/buttons/blockremove.css',
                164 => 'bundles/ezplatformui/css/theme/alloyeditor/buttons/embedhref.css',
            ),
            'nelmio_cors.defaults' => array(
                'allow_origin' => array(

                ),
                'allow_credentials' => false,
                'allow_headers' => array(

                ),
                'expose_headers' => array(

                ),
                'allow_methods' => array(

                ),
                'max_age' => 0,
                'hosts' => array(

                ),
                'origin_regex' => false,
            ),
            'nelmio_cors.map' => array(
                '^/api/ezp/v2/' => array(
                    'max_age' => 60,
                    'allow_credentials' => true,
                    'allow_headers' => array(
                        0 => 'authorization',
                        1 => 'accept',
                        2 => 'content-type',
                        3 => 'x-csrf-token',
                        4 => 'destination',
                        5 => 'x-siteaccess',
                    ),
                ),
            ),
            'nelmio_cors.cors_listener.class' => 'Nelmio\\CorsBundle\\EventListener\\CorsListener',
            'nelmio_cors.options_resolver.class' => 'Nelmio\\CorsBundle\\Options\\Resolver',
            'nelmio_cors.options_provider.config.class' => 'Nelmio\\CorsBundle\\Options\\ConfigProvider',
            'white_october_pagerfanta.default_view' => 'default',
            'white_october_pagerfanta.view_factory.class' => 'Pagerfanta\\View\\ViewFactory',
            'ezplatform.installer.db_based_installer.class' => 'EzSystems\\PlatformInstallerBundle\\Installer\\DbBasedInstaller',
            'ezplatform.installer.clean_installer.class' => 'EzSystems\\PlatformInstallerBundle\\Installer\\CleanInstaller',
            'ezplatform.installer.install_command.class' => 'EzSystems\\PlatformInstallerBundle\\Command\\InstallPlatformCommand',
            'ezrepoforms.validator.unique_language_code.class' => 'EzSystems\\RepositoryForms\\Validator\\Constraints\\UniqueLanguageCodeValidator',
            'ezrepoforms.action_dispatcher.language.class' => 'EzSystems\\RepositoryForms\\Form\\ActionDispatcher\\LanguageDispatcher',
            'ezrepoforms.form_processor.language.class' => 'EzSystems\\RepositoryForms\\Form\\Processor\\LanguageFormProcessor',
            'ezrepoforms.validator.unique_section_identifier.class' => 'EzSystems\\RepositoryForms\\Validator\\Constraints\\UniqueSectionIdentifierValidator',
            'ezrepoforms.action_dispatcher.section.class' => 'EzSystems\\RepositoryForms\\Form\\ActionDispatcher\\SectionDispatcher',
            'ezrepoforms.form_processor.section.class' => 'EzSystems\\RepositoryForms\\Form\\Processor\\SectionFormProcessor',
            'ezrepoforms.policy.edit.form.class' => 'EzSystems\\RepositoryForms\\Form\\Type\\Role\\PolicyType',
            'ezrepoforms.policy.limitation.form.class' => 'EzSystems\\RepositoryForms\\Form\\Type\\Role\\LimitationType',
            'ezrepoforms.validator.unique_role_identifier.class' => 'EzSystems\\RepositoryForms\\Validator\\Constraints\\UniqueRoleIdentifierValidator',
            'ezrepoforms.action_dispatcher.role.class' => 'EzSystems\\RepositoryForms\\Form\\ActionDispatcher\\RoleDispatcher',
            'ezrepoforms.action_dispatcher.policy.class' => 'EzSystems\\RepositoryForms\\Form\\ActionDispatcher\\PolicyDispatcher',
            'ezrepoforms.form_processor.role.class' => 'EzSystems\\RepositoryForms\\Form\\Processor\\RoleFormProcessor',
            'ezrepoforms.form_processor.policy.class' => 'EzSystems\\RepositoryForms\\Form\\Processor\\PolicyFormProcessor',
            'ezrepoforms.limitation_form_mapper.registry.class' => 'EzSystems\\RepositoryForms\\Limitation\\LimitationFormMapperRegistry',
            'ezrepoforms.limitation.null.template' => 'EzSystemsRepositoryFormsBundle:Limitation:null_limitation_values.html.twig',
            'ezrepoforms.limitation.form_mapper.null.class' => 'EzSystems\\RepositoryForms\\Limitation\\Mapper\\NullLimitationMapper',
            'ezrepoforms.limitation.multiple_selection.template' => 'EzSystemsRepositoryFormsBundle:Limitation:base_limitation_values.html.twig',
            'ezrepoforms.limitation.form_mapper.siteaccess.class' => 'EzSystems\\RepositoryForms\\Limitation\\Mapper\\SiteAccessLimitationMapper',
            'ezrepoforms.limitation.form_mapper.contenttype.class' => 'EzSystems\\RepositoryForms\\Limitation\\Mapper\\ContentTypeLimitationMapper',
            'ezrepoforms.limitation.form_mapper.section.class' => 'EzSystems\\RepositoryForms\\Limitation\\Mapper\\SectionLimitationMapper',
            'ezrepoforms.limitation.form_mapper.objectstate.class' => 'EzSystems\\RepositoryForms\\Limitation\\Mapper\\ObjectStateLimitationMapper',
            'ezrepoforms.limitation.form_mapper.language.class' => 'EzSystems\\RepositoryForms\\Limitation\\Mapper\\LanguageLimitationMapper',
            'ezrepoforms.limitation.form_mapper.owner.class' => 'EzSystems\\RepositoryForms\\Limitation\\Mapper\\OwnerLimitationMapper',
            'ezrepoforms.limitation.form_mapper.group.class' => 'EzSystems\\RepositoryForms\\Limitation\\Mapper\\GroupLimitationMapper',
            'ezrepoforms.limitation.form_mapper.parentdepth.class' => 'EzSystems\\RepositoryForms\\Limitation\\Mapper\\ParentDepthLimitationMapper',
            'ezrepoforms.limitation.form_mapper.parentdepth.maxdepth' => 20,
            'ezrepoforms.field_type_form_mapper.registry.class' => 'EzSystems\\RepositoryForms\\FieldType\\FieldTypeFormMapperRegistry',
            'ezrepoforms.content_type.update.form_type.class' => 'EzSystems\\RepositoryForms\\Form\\Type\\ContentType\\ContentTypeUpdateType',
            'ezrepoforms.field_definition.form_type.class' => 'EzSystems\\RepositoryForms\\Form\\Type\\FieldDefinition\\FieldDefinitionType',
            'ezrepoforms.field_type.form_mapper.ezbinaryfile.class' => 'EzSystems\\RepositoryForms\\FieldType\\Mapper\\BinaryFileFormMapper',
            'ezrepoforms.field_type.form_mapper.ezcountry.class' => 'EzSystems\\RepositoryForms\\FieldType\\Mapper\\CountryFormMapper',
            'ezrepoforms.field_type.form_mapper.ezdate.class' => 'EzSystems\\RepositoryForms\\FieldType\\Mapper\\DateFormMapper',
            'ezrepoforms.field_type.form_mapper.ezdatetime.class' => 'EzSystems\\RepositoryForms\\FieldType\\Mapper\\DateTimeFormMapper',
            'ezrepoforms.field_type.form_mapper.ezfloat.class' => 'EzSystems\\RepositoryForms\\FieldType\\Mapper\\FloatFormMapper',
            'ezrepoforms.field_type.form_mapper.ezimage.class' => 'EzSystems\\RepositoryForms\\FieldType\\Mapper\\ImageFormMapper',
            'ezrepoforms.field_type.form_mapper.ezinteger.class' => 'EzSystems\\RepositoryForms\\FieldType\\Mapper\\IntegerFormMapper',
            'ezrepoforms.field_type.form_mapper.ezisbn.class' => 'EzSystems\\RepositoryForms\\FieldType\\Mapper\\ISBNFormMapper',
            'ezrepoforms.field_type.form_mapper.ezmedia.class' => 'EzSystems\\RepositoryForms\\FieldType\\Mapper\\MediaFormMapper',
            'ezrepoforms.field_type.form_mapper.ezobjectrelation.class' => 'EzSystems\\RepositoryForms\\FieldType\\Mapper\\RelationFormMapper',
            'ezrepoforms.field_type.form_mapper.ezobjectrelationlist.class' => 'EzSystems\\RepositoryForms\\FieldType\\Mapper\\RelationListFormMapper',
            'ezrepoforms.field_type.form_mapper.ezpage.class' => 'EzSystems\\RepositoryForms\\FieldType\\Mapper\\PageFormMapper',
            'ezrepoforms.field_type.form_mapper.ezrichtext.class' => 'EzSystems\\RepositoryForms\\FieldType\\Mapper\\RichTextFormMapper',
            'ezrepoforms.field_type.form_mapper.ezselection.class' => 'EzSystems\\RepositoryForms\\FieldType\\Mapper\\SelectionFormMapper',
            'ezrepoforms.field_type.form_mapper.ezstring.class' => 'EzSystems\\RepositoryForms\\FieldType\\Mapper\\TextLineFormMapper',
            'ezrepoforms.field_type.form_mapper.eztext.class' => 'EzSystems\\RepositoryForms\\FieldType\\Mapper\\TextBlockFormMapper',
            'ezrepoforms.field_type.form_mapper.eztime.class' => 'EzSystems\\RepositoryForms\\FieldType\\Mapper\\TimeFormMapper',
            'ezrepoforms.validator.unique_content_type_identifier.class' => 'EzSystems\\RepositoryForms\\Validator\\Constraints\\UniqueContentTypeIdentifierValidator',
            'ezrepoforms.validator.validator_configuration.class' => 'EzSystems\\RepositoryForms\\Validator\\Constraints\\ValidatorConfigurationValidator',
            'ezrepoforms.validator.field_settings.class' => 'EzSystems\\RepositoryForms\\Validator\\Constraints\\FieldSettingsValidator',
            'ezrepoforms.validator.default_field_value.class' => 'EzSystems\\RepositoryForms\\Validator\\Constraints\\FieldDefinitionDefaultValueValidator',
            'ezrepoforms.twig.field_edit_rendering_extension.class' => 'EzSystems\\RepositoryForms\\Twig\\FieldEditRenderingExtension',
            'ezrepoforms.action_dispatcher.content_type.class' => 'EzSystems\\RepositoryForms\\Form\\ActionDispatcher\\ContentTypeDispatcher',
            'ezrepoforms.action_dispatcher.content_type.group.class' => 'EzSystems\\RepositoryForms\\Form\\ActionDispatcher\\ContentTypeGroupDispatcher',
            'ezrepoforms.form_processor.content_type.class' => 'EzSystems\\RepositoryForms\\Form\\Processor\\ContentTypeFormProcessor',
            'ezrepoforms.form_processor.content_type.options.redirect_route_after_publish' => NULL,
            'ezrepoforms.form_processor.content_type.options' => array(
                'redirectRouteAfterPublish' => NULL,
            ),
            'ezrepoforms.form_processor.content_type_group.class' => 'EzSystems\\RepositoryForms\\Form\\Processor\\ContentTypeGroupFormProcessor',
            'ezpublish.search.solr.query.common.criterion_visitor.match_all.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Common\\CriterionVisitor\\MatchAll',
            'ezpublish.search.solr.query.common.criterion_visitor.match_none.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Common\\CriterionVisitor\\MatchNone',
            'ezpublish.search.solr.query.common.criterion_visitor.logical_and.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Common\\CriterionVisitor\\LogicalAnd',
            'ezpublish.search.solr.query.common.criterion_visitor.logical_or.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Common\\CriterionVisitor\\LogicalOr',
            'ezpublish.search.solr.query.common.criterion_visitor.logical_not.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Common\\CriterionVisitor\\LogicalNot',
            'ezpublish.search.solr.query.content.criterion_visitor.ancestor.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\Ancestor',
            'ezpublish.search.solr.query.content.criterion_visitor.content_id_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\ContentIdIn',
            'ezpublish.search.solr.query.content.criterion_visitor.subtree_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\SubtreeIn',
            'ezpublish.search.solr.query.content.criterion_visitor.content_type_id_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\ContentTypeIdIn',
            'ezpublish.search.solr.query.content.criterion_visitor.content_type_identifier_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\ContentTypeIdentifierIn',
            'ezpublish.search.solr.query.content.criterion_visitor.content_type_group_id_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\ContentTypeGroupIdIn',
            'ezpublish.search.solr.query.content.criterion_visitor.location_id_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\LocationIdIn',
            'ezpublish.search.solr.query.content.criterion_visitor.parent_location_id_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\ParentLocationIdIn',
            'ezpublish.search.solr.query.content.criterion_visitor.section_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\SectionIn',
            'ezpublish.search.solr.query.content.criterion_visitor.remote_id_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\RemoteIdIn',
            'ezpublish.search.solr.query.content.criterion_visitor.language_code_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\LanguageCodeIn',
            'ezpublish.search.solr.query.content.criterion_visitor.object_state_id_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\ObjectStateIdIn',
            'ezpublish.search.solr.query.content.criterion_visitor.location_remote_id_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\LocationRemoteIdIn',
            'ezpublish.search.solr.query.content.criterion_visitor.modified_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\DateMetadata\\ModifiedIn',
            'ezpublish.search.solr.query.content.criterion_visitor.published_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\DateMetadata\\PublishedIn',
            'ezpublish.search.solr.query.content.criterion_visitor.modified_between.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\DateMetadata\\ModifiedBetween',
            'ezpublish.search.solr.query.content.criterion_visitor.published_between.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\DateMetadata\\PublishedBetween',
            'ezpublish.search.solr.query.content.criterion_visitor.full_text.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\FullText',
            'ezpublish.search.solr.query.content.criterion_visitor.user_metadata_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\UserMetadataIn',
            'ezpublish.search.solr.query.content.criterion_visitor.map_location_distance_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\MapLocation\\MapLocationDistanceIn',
            'ezpublish.search.solr.query.content.criterion_visitor.map_location_distance_range.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\MapLocation\\MapLocationDistanceRange',
            'ezpublish.search.solr.query.content.criterion_visitor.field_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\Field\\FieldIn',
            'ezpublish.search.solr.query.content.criterion_visitor.field_range.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\Field\\FieldRange',
            'ezpublish.search.solr.query.content.criterion_visitor.visibility.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\Visibility',
            'ezpublish.search.solr.query.content.criterion_visitor.custom_field_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\CustomField\\CustomFieldIn',
            'ezpublish.search.solr.query.content.criterion_visitor.custom_field_range.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\CriterionVisitor\\CustomField\\CustomFieldRange',
            'ezpublish.search.solr.query.location.criterion_visitor.ancestor.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\Ancestor',
            'ezpublish.search.solr.query.location.criterion_visitor.match_all.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\MatchAll',
            'ezpublish.search.solr.query.location.criterion_visitor.match_none.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\MatchNone',
            'ezpublish.search.solr.query.location.criterion_visitor.content_id_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\ContentIdIn',
            'ezpublish.search.solr.query.location.criterion_visitor.subtree_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\SubtreeIn',
            'ezpublish.search.solr.query.location.criterion_visitor.content_type_id_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\ContentTypeIdIn',
            'ezpublish.search.solr.query.location.criterion_visitor.content_type_identifier_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\ContentTypeIdentifierIn',
            'ezpublish.search.solr.query.location.criterion_visitor.content_type_group_id_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\ContentTypeGroupIdIn',
            'ezpublish.search.solr.query.location.criterion_visitor.location_id_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\LocationIdIn',
            'ezpublish.search.solr.query.location.criterion_visitor.parent_location_id_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\ParentLocationIdIn',
            'ezpublish.search.solr.query.location.criterion_visitor.section_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\SectionIn',
            'ezpublish.search.solr.query.location.criterion_visitor.remote_id_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\RemoteIdIn',
            'ezpublish.search.solr.query.location.criterion_visitor.language_code_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\LanguageCodeIn',
            'ezpublish.search.solr.query.location.criterion_visitor.object_state_id_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\ObjectStateIdIn',
            'ezpublish.search.solr.query.location.criterion_visitor.location_remote_id_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\LocationRemoteIdIn',
            'ezpublish.search.solr.query.location.criterion_visitor.modified_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\DateMetadata\\ModifiedIn',
            'ezpublish.search.solr.query.location.criterion_visitor.published_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\DateMetadata\\PublishedIn',
            'ezpublish.search.solr.query.location.criterion_visitor.modified_between.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\DateMetadata\\ModifiedBetween',
            'ezpublish.search.solr.query.location.criterion_visitor.published_between.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\DateMetadata\\PublishedBetween',
            'ezpublish.search.solr.query.location.criterion_visitor.user_metadata_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\UserMetadataIn',
            'ezpublish.search.solr.query.location.criterion_visitor.visibility.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\Visibility',
            'ezpublish.search.solr.query.location.criterion_visitor.depth_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\Location\\DepthIn',
            'ezpublish.search.solr.query.location.criterion_visitor.depth_between.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\Location\\DepthBetween',
            'ezpublish.search.solr.query.location.criterion_visitor.is_main_location.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\Location\\IsMainLocation',
            'ezpublish.search.solr.query.location.criterion_visitor.priority_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\Location\\PriorityIn',
            'ezpublish.search.solr.query.location.criterion_visitor.priority_between.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\Location\\PriorityBetween',
            'ezpublish.search.solr.query.location.criterion_visitor.field_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\Field\\FieldIn',
            'ezpublish.search.solr.query.location.criterion_visitor.field_range.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\Field\\FieldRange',
            'ezpublish.search.solr.query.location.criterion_visitor.custom_field_in.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\CustomField\\CustomFieldIn',
            'ezpublish.search.solr.query.location.criterion_visitor.custom_field_range.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\CustomField\\CustomFieldRange',
            'ezpublish.search.solr.query.location.criterion_visitor.full_text.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\FullText',
            'ezpublish.search.solr.query.location.criterion_visitor.map_location_distance_range.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\CriterionVisitor\\Field\\MapLocationDistanceRange',
            'ezpublish.search.solr.query.content.facet_builder_visitor.content_type.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\FacetBuilderVisitor\\ContentType',
            'ezpublish.search.solr.query.content.facet_builder_visitor.section.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\FacetBuilderVisitor\\Section',
            'ezpublish.search.solr.query.content.facet_builder_visitor.user.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\FacetBuilderVisitor\\User',
            'ezpublish.search.solr.field_value_mapper.identifier.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\FieldValueMapper\\IdentifierMapper',
            'ezpublish.search.solr.field_value_mapper.multiple_identifier.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\FieldValueMapper\\MultipleIdentifierMapper',
            'ezpublish.search.solr.field_value_mapper.string.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\FieldValueMapper\\StringMapper',
            'ezpublish.search.solr.field_value_mapper.multiple_string.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\FieldValueMapper\\MultipleStringMapper',
            'ezpublish.search.solr.field_value_mapper.integer.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\FieldValueMapper\\IntegerMapper',
            'ezpublish.search.solr.field_value_mapper.multiple_integer.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\FieldValueMapper\\MultipleIntegerMapper',
            'ezpublish.search.solr.field_value_mapper.float.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\FieldValueMapper\\FloatMapper',
            'ezpublish.search.solr.field_value_mapper.date.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\FieldValueMapper\\DateMapper',
            'ezpublish.search.solr.field_value_mapper.price.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\FieldValueMapper\\PriceMapper',
            'ezpublish.search.solr.field_value_mapper.boolean.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\FieldValueMapper\\BooleanMapper',
            'ezpublish.search.solr.field_value_mapper.multiple_boolean.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\FieldValueMapper\\MultipleBooleanMapper',
            'ezpublish.search.solr.field_value_mapper.geo_location.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\FieldValueMapper\\GeoLocationMapper',
            'ezpublish.search.solr.gateway.client.http.stream.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Gateway\\HttpClient\\Stream',
            'ezpublish.search.solr.query.common.criterion_visitor.aggregate.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Common\\CriterionVisitor\\Aggregate',
            'ezpublish.search.solr.query.common.sort_clause_visitor.aggregate.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Common\\SortClauseVisitor\\Aggregate',
            'ezpublish.search.solr.query.common.facet_builder_visitor.aggregate.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Common\\FacetBuilderVisitor\\Aggregate',
            'ezpublish.search.solr.field_value_mapper.aggregate.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\FieldValueMapper\\Aggregate',
            'ezpublish.search.solr.query.content.sort_clause_visitor.content_id.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\SortClauseVisitor\\ContentId',
            'ezpublish.search.solr.query.content.sort_clause_visitor.content_name.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\SortClauseVisitor\\ContentName',
            'ezpublish.search.solr.query.content.sort_clause_visitor.field.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\SortClauseVisitor\\Field',
            'ezpublish.search.solr.query.content.sort_clause_visitor.section_identifier.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\SortClauseVisitor\\SectionIdentifier',
            'ezpublish.search.solr.query.content.sort_clause_visitor.section_name.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\SortClauseVisitor\\SectionName',
            'ezpublish.search.solr.query.content.sort_clause_visitor.date_published.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\SortClauseVisitor\\DatePublished',
            'ezpublish.search.solr.query.content.sort_clause_visitor.date_modified.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\SortClauseVisitor\\DateModified',
            'ezpublish.search.solr.query.content.sort_clause_visitor.map_location_distance.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Content\\SortClauseVisitor\\MapLocationDistance',
            'ezpublish.search.solr.query.location.sort_clause_visitor.content_id.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\SortClauseVisitor\\ContentId',
            'ezpublish.search.solr.query.location.sort_clause_visitor.content_name.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\SortClauseVisitor\\ContentName',
            'ezpublish.search.solr.query.location.sort_clause_visitor.date_published.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\SortClauseVisitor\\DatePublished',
            'ezpublish.search.solr.query.location.sort_clause_visitor.date_modified.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\SortClauseVisitor\\DateModified',
            'ezpublish.search.solr.query.location.sort_clause_visitor.field.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\SortClauseVisitor\\Field',
            'ezpublish.search.solr.query.location.sort_clause_visitor.section_identifier.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\SortClauseVisitor\\SectionIdentifier',
            'ezpublish.search.solr.query.location.sort_clause_visitor.section_name.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\SortClauseVisitor\\SectionName',
            'ezpublish.search.solr.query.location.sort_clause_visitor.depth.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\SortClauseVisitor\\Location\\Depth',
            'ezpublish.search.solr.query.location.sort_clause_visitor.id.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\SortClauseVisitor\\Location\\Id',
            'ezpublish.search.solr.query.location.sort_clause_visitor.is_main_location.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\SortClauseVisitor\\Location\\IsMainLocation',
            'ezpublish.search.solr.query.location.sort_clause_visitor.path.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\SortClauseVisitor\\Location\\Path',
            'ezpublish.search.solr.query.location.sort_clause_visitor.priority.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\SortClauseVisitor\\Location\\Priority',
            'ezpublish.search.solr.query.location.sort_clause_visitor.visibility.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\SortClauseVisitor\\Location\\Visibility',
            'ezpublish.search.solr.query.location.sort_clause_visitor.map_location_distance.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Location\\SortClauseVisitor\\MapLocationDistance',
            'ezpublish.search.solr.connection.server' => 'http://localhost:8983/solr/core0',
            'ezpublish.spi.search.solr.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Handler',
            'ezpublish.search.solr.gateway.native.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Gateway\\Native',
            'ezpublish.search.solr.gateway.endpoint_registry.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Gateway\\EndpointRegistry',
            'ezpublish.search.solr.gateway.endpoint_resolver.native.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Gateway\\EndpointResolver\\NativeEndpointResolver',
            'ezpublish.search.solr.core_filter.native.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\CoreFilter\\NativeCoreFilter',
            'ezpublish.search.solr.document_mapper.native.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\DocumentMapper\\NativeDocumentMapper',
            'ezpublish.search.solr.result_extractor.native.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\ResultExtractor\\NativeResultExtractor',
            'ezpublish.search.solr.query_converter.class' => 'EzSystems\\EzPlatformSolrSearchEngine\\Query\\Common\\QueryConverter\\NativeQueryConverter',
            'ezpublish.search.solr.entry_endpoints' => array(

            ),
            'ezpublish.search.solr.cluster_endpoints' => array(

            ),
            'ezpublish.search.solr.default_endpoint' => NULL,
            'ezpublish.search.solr.main_translations_endpoint' => NULL,
            'ezpublish.solr.engine_factory.class' => 'EzSystems\\EzPlatformSolrSearchEngineBundle\\ApiLoader\\SolrEngineFactory',
            'ez_search_engine_solr.default_connection' => 'default',
            'ez_search_engine_solr.connection.default' => array(
                'entry_endpoints' => array(
                    0 => 'endpoint0',
                ),
                'mapping' => array(
                    'default' => 'endpoint0',
                    'translations' => array(

                    ),
                    'main_translations' => NULL,
                ),
            ),
            'ezpublish.debug.data_collector.class' => 'eZ\\Bundle\\EzPublishDebugBundle\\Collector\\EzPublishCoreCollector',
            'ezpublish_debug.persistence_collector.class' => 'eZ\\Bundle\\EzPublishDebugBundle\\Collector\\PersistenceCacheCollector',
            'ezpublish_debug.templates_collector.class' => 'eZ\\Bundle\\EzPublishDebugBundle\\Collector\\TemplatesDataCollector',
            'web_profiler.controller.profiler.class' => 'Symfony\\Bundle\\WebProfilerBundle\\Controller\\ProfilerController',
            'web_profiler.controller.router.class' => 'Symfony\\Bundle\\WebProfilerBundle\\Controller\\RouterController',
            'web_profiler.controller.exception.class' => 'Symfony\\Bundle\\WebProfilerBundle\\Controller\\ExceptionController',
            'twig.extension.webprofiler.class' => 'Symfony\\Bundle\\WebProfilerBundle\\Twig\\WebProfilerExtension',
            'web_profiler.debug_toolbar.position' => 'bottom',
            'web_profiler.debug_toolbar.class' => 'Symfony\\Bundle\\WebProfilerBundle\\EventListener\\WebDebugToolbarListener',
            'web_profiler.debug_toolbar.intercept_redirects' => false,
            'web_profiler.debug_toolbar.mode' => 2,
            'sensio_distribution.webconfigurator.class' => 'Sensio\\Bundle\\DistributionBundle\\Configurator\\Configurator',
            'sensio_distribution.webconfigurator.doctrine_step.class' => 'Sensio\\Bundle\\DistributionBundle\\Configurator\\Step\\DoctrineStep',
            'sensio_distribution.webconfigurator.secret_step.class' => 'Sensio\\Bundle\\DistributionBundle\\Configurator\\Step\\SecretStep',
            'sensio_distribution.security_checker.class' => 'SensioLabs\\Security\\SecurityChecker',
            'sensio_distribution.security_checker.command.class' => 'SensioLabs\\Security\\Command\\SecurityCheckerCommand',
            'data_collector.templates' => array(
                'data_collector.config' => array(
                    0 => 'config',
                    1 => '@WebProfiler/Collector/config.html.twig',
                ),
                'data_collector.request' => array(
                    0 => 'request',
                    1 => '@WebProfiler/Collector/request.html.twig',
                ),
                'data_collector.ajax' => array(
                    0 => 'ajax',
                    1 => '@WebProfiler/Collector/ajax.html.twig',
                ),
                'data_collector.exception' => array(
                    0 => 'exception',
                    1 => '@WebProfiler/Collector/exception.html.twig',
                ),
                'data_collector.events' => array(
                    0 => 'events',
                    1 => '@WebProfiler/Collector/events.html.twig',
                ),
                'data_collector.logger' => array(
                    0 => 'logger',
                    1 => '@WebProfiler/Collector/logger.html.twig',
                ),
                'data_collector.time' => array(
                    0 => 'time',
                    1 => '@WebProfiler/Collector/time.html.twig',
                ),
                'data_collector.memory' => array(
                    0 => 'memory',
                    1 => '@WebProfiler/Collector/memory.html.twig',
                ),
                'data_collector.router' => array(
                    0 => 'router',
                    1 => '@WebProfiler/Collector/router.html.twig',
                ),
                'data_collector.form' => array(
                    0 => 'form',
                    1 => '@WebProfiler/Collector/form.html.twig',
                ),
                'data_collector.translation' => array(
                    0 => 'translation',
                    1 => '@WebProfiler/Collector/translation.html.twig',
                ),
                'data_collector.twig' => array(
                    0 => 'twig',
                    1 => '@WebProfiler/Collector/twig.html.twig',
                ),
                'data_collector.doctrine' => array(
                    0 => 'db',
                    1 => '@Doctrine/Collector/db.html.twig',
                ),
                'swiftmailer.data_collector' => array(
                    0 => 'swiftmailer',
                    1 => '@Swiftmailer/Collector/swiftmailer.html.twig',
                ),
                'data_collector.security' => array(
                    0 => 'security',
                    1 => '@Security/Collector/security.html.twig',
                ),
                'data_collector.stash' => array(
                    0 => 'stash',
                    1 => 'TedivmStashBundle:Profiler:layout',
                ),
                'ezpublish_debug.data_collector' => array(
                    0 => 'ezpublish.debug.toolbar',
                    1 => 'EzPublishDebugBundle:Profiler:layout',
                ),
                'data_collector.dump' => array(
                    0 => 'dump',
                    1 => '@Debug/Profiler/dump.html.twig',
                ),
            ),
            'console.command.ids' => array(
                0 => 'fos_http_cache.command.invalidate_path',
                1 => 'fos_http_cache.command.invalidate_regex',
                2 => 'fos_http_cache.command.refresh_path',
                3 => 'fos_http_cache.command.invalidate_tag',
                4 => 'ezplatform.installer.install_command',
                5 => 'sensio_distribution.security_checker.command',
            ),
        );
    }
}

class eZBundleEzPublishCoreBundleDependencyInjectionConfigurationConfigResolver_0000000010d7745e00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Bundle\EzPublishCoreBundle\DependencyInjection\Configuration\ConfigResolver implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e2a425d239526617 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e2a5586141757939 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e29eef0800742332 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function setSiteAccess(\eZ\Publish\Core\MVC\Symfony\SiteAccess $siteAccess = null)
    {
        $this->initializer56b479e2a5586141757939 && $this->initializer56b479e2a5586141757939->__invoke($this->valueHolder56b479e2a425d239526617, $this, 'setSiteAccess', array('siteAccess' => $siteAccess), $this->initializer56b479e2a5586141757939);

        return $this->valueHolder56b479e2a425d239526617->setSiteAccess($siteAccess);
    }

    /**
     * {@inheritDoc}
     */
    public function setUndefinedStrategy($undefinedStrategy)
    {
        $this->initializer56b479e2a5586141757939 && $this->initializer56b479e2a5586141757939->__invoke($this->valueHolder56b479e2a425d239526617, $this, 'setUndefinedStrategy', array('undefinedStrategy' => $undefinedStrategy), $this->initializer56b479e2a5586141757939);

        return $this->valueHolder56b479e2a425d239526617->setUndefinedStrategy($undefinedStrategy);
    }

    /**
     * {@inheritDoc}
     */
    public function getUndefinedStrategy()
    {
        $this->initializer56b479e2a5586141757939 && $this->initializer56b479e2a5586141757939->__invoke($this->valueHolder56b479e2a425d239526617, $this, 'getUndefinedStrategy', array(), $this->initializer56b479e2a5586141757939);

        return $this->valueHolder56b479e2a425d239526617->getUndefinedStrategy();
    }

    /**
     * {@inheritDoc}
     */
    public function hasParameter($paramName, $namespace = null, $scope = null)
    {
        $this->initializer56b479e2a5586141757939 && $this->initializer56b479e2a5586141757939->__invoke($this->valueHolder56b479e2a425d239526617, $this, 'hasParameter', array('paramName' => $paramName, 'namespace' => $namespace, 'scope' => $scope), $this->initializer56b479e2a5586141757939);

        return $this->valueHolder56b479e2a425d239526617->hasParameter($paramName, $namespace, $scope);
    }

    /**
     * {@inheritDoc}
     */
    public function getParameter($paramName, $namespace = null, $scope = null)
    {
        $this->initializer56b479e2a5586141757939 && $this->initializer56b479e2a5586141757939->__invoke($this->valueHolder56b479e2a425d239526617, $this, 'getParameter', array('paramName' => $paramName, 'namespace' => $namespace, 'scope' => $scope), $this->initializer56b479e2a5586141757939);

        return $this->valueHolder56b479e2a425d239526617->getParameter($paramName, $namespace, $scope);
    }

    /**
     * {@inheritDoc}
     */
    public function setDefaultNamespace($defaultNamespace)
    {
        $this->initializer56b479e2a5586141757939 && $this->initializer56b479e2a5586141757939->__invoke($this->valueHolder56b479e2a425d239526617, $this, 'setDefaultNamespace', array('defaultNamespace' => $defaultNamespace), $this->initializer56b479e2a5586141757939);

        return $this->valueHolder56b479e2a425d239526617->setDefaultNamespace($defaultNamespace);
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultNamespace()
    {
        $this->initializer56b479e2a5586141757939 && $this->initializer56b479e2a5586141757939->__invoke($this->valueHolder56b479e2a425d239526617, $this, 'getDefaultNamespace', array(), $this->initializer56b479e2a5586141757939);

        return $this->valueHolder56b479e2a425d239526617->getDefaultNamespace();
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultScope()
    {
        $this->initializer56b479e2a5586141757939 && $this->initializer56b479e2a5586141757939->__invoke($this->valueHolder56b479e2a425d239526617, $this, 'getDefaultScope', array(), $this->initializer56b479e2a5586141757939);

        return $this->valueHolder56b479e2a425d239526617->getDefaultScope();
    }

    /**
     * {@inheritDoc}
     */
    public function setDefaultScope($scope)
    {
        $this->initializer56b479e2a5586141757939 && $this->initializer56b479e2a5586141757939->__invoke($this->valueHolder56b479e2a425d239526617, $this, 'setDefaultScope', array('scope' => $scope), $this->initializer56b479e2a5586141757939);

        return $this->valueHolder56b479e2a425d239526617->setDefaultScope($scope);
    }

    /**
     * {@inheritDoc}
     */
    public function setContainer(\Symfony\Component\DependencyInjection\ContainerInterface $container = null)
    {
        $this->initializer56b479e2a5586141757939 && $this->initializer56b479e2a5586141757939->__invoke($this->valueHolder56b479e2a425d239526617, $this, 'setContainer', array('container' => $container), $this->initializer56b479e2a5586141757939);

        return $this->valueHolder56b479e2a425d239526617->setContainer($container);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e2a5586141757939 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e2a5586141757939 && $this->initializer56b479e2a5586141757939->__invoke($this->valueHolder56b479e2a425d239526617, $this, '__get', array('name' => $name), $this->initializer56b479e2a5586141757939);

        if (isset(self::$publicProperties56b479e29eef0800742332[$name])) {
            return $this->valueHolder56b479e2a425d239526617->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e2a425d239526617;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e2a425d239526617;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e2a5586141757939 && $this->initializer56b479e2a5586141757939->__invoke($this->valueHolder56b479e2a425d239526617, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e2a5586141757939);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e2a425d239526617;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e2a425d239526617;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e2a5586141757939 && $this->initializer56b479e2a5586141757939->__invoke($this->valueHolder56b479e2a425d239526617, $this, '__isset', array('name' => $name), $this->initializer56b479e2a5586141757939);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e2a425d239526617;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e2a425d239526617;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e2a5586141757939 && $this->initializer56b479e2a5586141757939->__invoke($this->valueHolder56b479e2a425d239526617, $this, '__unset', array('name' => $name), $this->initializer56b479e2a5586141757939);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e2a425d239526617;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e2a425d239526617;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e2a5586141757939 && $this->initializer56b479e2a5586141757939->__invoke($this->valueHolder56b479e2a425d239526617, $this, '__clone', array(), $this->initializer56b479e2a5586141757939);

        $this->valueHolder56b479e2a425d239526617 = clone $this->valueHolder56b479e2a425d239526617;
    }

    public function __sleep()
    {
        $this->initializer56b479e2a5586141757939 && $this->initializer56b479e2a5586141757939->__invoke($this->valueHolder56b479e2a425d239526617, $this, '__sleep', array(), $this->initializer56b479e2a5586141757939);

        return array('valueHolder56b479e2a425d239526617');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e2a5586141757939 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e2a5586141757939;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e2a5586141757939 && $this->initializer56b479e2a5586141757939->__invoke($this->valueHolder56b479e2a425d239526617, $this, 'initializeProxy', array(), $this->initializer56b479e2a5586141757939);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e2a425d239526617;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e2a425d239526617;
    }


}

class eZPublishCoreRepositoryRepository_0000000010d7753d00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Repository\Repository implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e3013fe017264776 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e30140e266392130 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e3013cb028940952 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function getCurrentUser()
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'getCurrentUser', array(), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->getCurrentUser();
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrentUserReference()
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'getCurrentUserReference', array(), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->getCurrentUserReference();
    }

    /**
     * {@inheritDoc}
     */
    public function setCurrentUser(\eZ\Publish\API\Repository\Values\User\UserReference $user)
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'setCurrentUser', array('user' => $user), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->setCurrentUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function sudo(\Closure $callback, \eZ\Publish\API\Repository\Repository $outerRepository = null)
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'sudo', array('callback' => $callback, 'outerRepository' => $outerRepository), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->sudo($callback, $outerRepository);
    }

    /**
     * {@inheritDoc}
     */
    public function hasAccess($module, $function, \eZ\Publish\API\Repository\Values\User\UserReference $user = null)
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'hasAccess', array('module' => $module, 'function' => $function, 'user' => $user), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->hasAccess($module, $function, $user);
    }

    /**
     * {@inheritDoc}
     */
    public function canUser($module, $function, \eZ\Publish\API\Repository\Values\ValueObject $object, $targets = null)
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'canUser', array('module' => $module, 'function' => $function, 'object' => $object, 'targets' => $targets), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->canUser($module, $function, $object, $targets);
    }

    /**
     * {@inheritDoc}
     */
    public function getContentService()
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'getContentService', array(), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->getContentService();
    }

    /**
     * {@inheritDoc}
     */
    public function getContentLanguageService()
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'getContentLanguageService', array(), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->getContentLanguageService();
    }

    /**
     * {@inheritDoc}
     */
    public function getContentTypeService()
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'getContentTypeService', array(), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->getContentTypeService();
    }

    /**
     * {@inheritDoc}
     */
    public function getLocationService()
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'getLocationService', array(), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->getLocationService();
    }

    /**
     * {@inheritDoc}
     */
    public function getTrashService()
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'getTrashService', array(), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->getTrashService();
    }

    /**
     * {@inheritDoc}
     */
    public function getSectionService()
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'getSectionService', array(), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->getSectionService();
    }

    /**
     * {@inheritDoc}
     */
    public function getUserService()
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'getUserService', array(), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->getUserService();
    }

    /**
     * {@inheritDoc}
     */
    public function getURLAliasService()
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'getURLAliasService', array(), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->getURLAliasService();
    }

    /**
     * {@inheritDoc}
     */
    public function getURLWildcardService()
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'getURLWildcardService', array(), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->getURLWildcardService();
    }

    /**
     * {@inheritDoc}
     */
    public function getObjectStateService()
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'getObjectStateService', array(), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->getObjectStateService();
    }

    /**
     * {@inheritDoc}
     */
    public function getRoleService()
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'getRoleService', array(), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->getRoleService();
    }

    /**
     * {@inheritDoc}
     */
    public function getSearchService()
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'getSearchService', array(), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->getSearchService();
    }

    /**
     * {@inheritDoc}
     */
    public function getFieldTypeService()
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'getFieldTypeService', array(), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->getFieldTypeService();
    }

    /**
     * {@inheritDoc}
     */
    public function getNameSchemaService()
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'getNameSchemaService', array(), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->getNameSchemaService();
    }

    /**
     * {@inheritDoc}
     */
    public function beginTransaction()
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'beginTransaction', array(), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->beginTransaction();
    }

    /**
     * {@inheritDoc}
     */
    public function commit()
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'commit', array(), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->commit();
    }

    /**
     * {@inheritDoc}
     */
    public function rollback()
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'rollback', array(), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->rollback();
    }

    /**
     * {@inheritDoc}
     */
    public function commitEvent($event)
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'commitEvent', array('event' => $event), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->commitEvent($event);
    }

    /**
     * {@inheritDoc}
     */
    public function createDateTime($timestamp = null)
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'createDateTime', array('timestamp' => $timestamp), $this->initializer56b479e30140e266392130);

        return $this->valueHolder56b479e3013fe017264776->createDateTime($timestamp);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e30140e266392130 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, '__get', array('name' => $name), $this->initializer56b479e30140e266392130);

        if (isset(self::$publicProperties56b479e3013cb028940952[$name])) {
            return $this->valueHolder56b479e3013fe017264776->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e3013fe017264776;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e3013fe017264776;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e30140e266392130);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e3013fe017264776;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e3013fe017264776;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, '__isset', array('name' => $name), $this->initializer56b479e30140e266392130);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e3013fe017264776;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e3013fe017264776;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, '__unset', array('name' => $name), $this->initializer56b479e30140e266392130);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e3013fe017264776;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e3013fe017264776;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, '__clone', array(), $this->initializer56b479e30140e266392130);

        $this->valueHolder56b479e3013fe017264776 = clone $this->valueHolder56b479e3013fe017264776;
    }

    public function __sleep()
    {
        $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, '__sleep', array(), $this->initializer56b479e30140e266392130);

        return array('valueHolder56b479e3013fe017264776');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e30140e266392130 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e30140e266392130;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e30140e266392130 && $this->initializer56b479e30140e266392130->__invoke($this->valueHolder56b479e3013fe017264776, $this, 'initializeProxy', array(), $this->initializer56b479e30140e266392130);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e3013fe017264776;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e3013fe017264776;
    }


}

class eZPublishCoreRepositoryContentService_0000000010d7753100007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Repository\ContentService implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e322c6b262821124 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e322c7a501661501 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e322c3e560710138 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function loadContentInfo($contentId)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'loadContentInfo', array('contentId' => $contentId), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->loadContentInfo($contentId);
    }

    /**
     * {@inheritDoc}
     */
    public function internalLoadContentInfo($id, $isRemoteId = false)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'internalLoadContentInfo', array('id' => $id, 'isRemoteId' => $isRemoteId), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->internalLoadContentInfo($id, $isRemoteId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadContentInfoByRemoteId($remoteId)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'loadContentInfoByRemoteId', array('remoteId' => $remoteId), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->loadContentInfoByRemoteId($remoteId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadVersionInfo(\eZ\Publish\API\Repository\Values\Content\ContentInfo $contentInfo, $versionNo = null)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'loadVersionInfo', array('contentInfo' => $contentInfo, 'versionNo' => $versionNo), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->loadVersionInfo($contentInfo, $versionNo);
    }

    /**
     * {@inheritDoc}
     */
    public function loadVersionInfoById($contentId, $versionNo = null)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'loadVersionInfoById', array('contentId' => $contentId, 'versionNo' => $versionNo), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->loadVersionInfoById($contentId, $versionNo);
    }

    /**
     * {@inheritDoc}
     */
    public function loadContentByContentInfo(\eZ\Publish\API\Repository\Values\Content\ContentInfo $contentInfo, array $languages = null, $versionNo = null, $useAlwaysAvailable = true)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'loadContentByContentInfo', array('contentInfo' => $contentInfo, 'languages' => $languages, 'versionNo' => $versionNo, 'useAlwaysAvailable' => $useAlwaysAvailable), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->loadContentByContentInfo($contentInfo, $languages, $versionNo, $useAlwaysAvailable);
    }

    /**
     * {@inheritDoc}
     */
    public function loadContentByVersionInfo(\eZ\Publish\API\Repository\Values\Content\VersionInfo $versionInfo, array $languages = null, $useAlwaysAvailable = true)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'loadContentByVersionInfo', array('versionInfo' => $versionInfo, 'languages' => $languages, 'useAlwaysAvailable' => $useAlwaysAvailable), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->loadContentByVersionInfo($versionInfo, $languages, $useAlwaysAvailable);
    }

    /**
     * {@inheritDoc}
     */
    public function loadContent($contentId, array $languages = null, $versionNo = null, $useAlwaysAvailable = true)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'loadContent', array('contentId' => $contentId, 'languages' => $languages, 'versionNo' => $versionNo, 'useAlwaysAvailable' => $useAlwaysAvailable), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->loadContent($contentId, $languages, $versionNo, $useAlwaysAvailable);
    }

    /**
     * {@inheritDoc}
     */
    public function internalLoadContent($id, array $languages = null, $versionNo = null, $isRemoteId = false, $useAlwaysAvailable = true)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'internalLoadContent', array('id' => $id, 'languages' => $languages, 'versionNo' => $versionNo, 'isRemoteId' => $isRemoteId, 'useAlwaysAvailable' => $useAlwaysAvailable), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->internalLoadContent($id, $languages, $versionNo, $isRemoteId, $useAlwaysAvailable);
    }

    /**
     * {@inheritDoc}
     */
    public function loadContentByRemoteId($remoteId, array $languages = null, $versionNo = null, $useAlwaysAvailable = true)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'loadContentByRemoteId', array('remoteId' => $remoteId, 'languages' => $languages, 'versionNo' => $versionNo, 'useAlwaysAvailable' => $useAlwaysAvailable), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->loadContentByRemoteId($remoteId, $languages, $versionNo, $useAlwaysAvailable);
    }

    /**
     * {@inheritDoc}
     */
    public function createContent(\eZ\Publish\API\Repository\Values\Content\ContentCreateStruct $contentCreateStruct, array $locationCreateStructs = array())
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'createContent', array('contentCreateStruct' => $contentCreateStruct, 'locationCreateStructs' => $locationCreateStructs), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->createContent($contentCreateStruct, $locationCreateStructs);
    }

    /**
     * {@inheritDoc}
     */
    public function updateContentMetadata(\eZ\Publish\API\Repository\Values\Content\ContentInfo $contentInfo, \eZ\Publish\API\Repository\Values\Content\ContentMetadataUpdateStruct $contentMetadataUpdateStruct)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'updateContentMetadata', array('contentInfo' => $contentInfo, 'contentMetadataUpdateStruct' => $contentMetadataUpdateStruct), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->updateContentMetadata($contentInfo, $contentMetadataUpdateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteContent(\eZ\Publish\API\Repository\Values\Content\ContentInfo $contentInfo)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'deleteContent', array('contentInfo' => $contentInfo), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->deleteContent($contentInfo);
    }

    /**
     * {@inheritDoc}
     */
    public function createContentDraft(\eZ\Publish\API\Repository\Values\Content\ContentInfo $contentInfo, \eZ\Publish\API\Repository\Values\Content\VersionInfo $versionInfo = null, \eZ\Publish\API\Repository\Values\User\User $creator = null)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'createContentDraft', array('contentInfo' => $contentInfo, 'versionInfo' => $versionInfo, 'creator' => $creator), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->createContentDraft($contentInfo, $versionInfo, $creator);
    }

    /**
     * {@inheritDoc}
     */
    public function loadContentDrafts(\eZ\Publish\API\Repository\Values\User\User $user = null)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'loadContentDrafts', array('user' => $user), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->loadContentDrafts($user);
    }

    /**
     * {@inheritDoc}
     */
    public function translateVersion(\eZ\Publish\API\Repository\Values\Content\TranslationInfo $translationInfo, \eZ\Publish\API\Repository\Values\Content\TranslationValues $translationValues, \eZ\Publish\API\Repository\Values\User\User $modifier = null)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'translateVersion', array('translationInfo' => $translationInfo, 'translationValues' => $translationValues, 'modifier' => $modifier), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->translateVersion($translationInfo, $translationValues, $modifier);
    }

    /**
     * {@inheritDoc}
     */
    public function updateContent(\eZ\Publish\API\Repository\Values\Content\VersionInfo $versionInfo, \eZ\Publish\API\Repository\Values\Content\ContentUpdateStruct $contentUpdateStruct)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'updateContent', array('versionInfo' => $versionInfo, 'contentUpdateStruct' => $contentUpdateStruct), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->updateContent($versionInfo, $contentUpdateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function publishVersion(\eZ\Publish\API\Repository\Values\Content\VersionInfo $versionInfo)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'publishVersion', array('versionInfo' => $versionInfo), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->publishVersion($versionInfo);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteVersion(\eZ\Publish\API\Repository\Values\Content\VersionInfo $versionInfo)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'deleteVersion', array('versionInfo' => $versionInfo), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->deleteVersion($versionInfo);
    }

    /**
     * {@inheritDoc}
     */
    public function loadVersions(\eZ\Publish\API\Repository\Values\Content\ContentInfo $contentInfo)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'loadVersions', array('contentInfo' => $contentInfo), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->loadVersions($contentInfo);
    }

    /**
     * {@inheritDoc}
     */
    public function copyContent(\eZ\Publish\API\Repository\Values\Content\ContentInfo $contentInfo, \eZ\Publish\API\Repository\Values\Content\LocationCreateStruct $destinationLocationCreateStruct, \eZ\Publish\API\Repository\Values\Content\VersionInfo $versionInfo = null)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'copyContent', array('contentInfo' => $contentInfo, 'destinationLocationCreateStruct' => $destinationLocationCreateStruct, 'versionInfo' => $versionInfo), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->copyContent($contentInfo, $destinationLocationCreateStruct, $versionInfo);
    }

    /**
     * {@inheritDoc}
     */
    public function loadRelations(\eZ\Publish\API\Repository\Values\Content\VersionInfo $versionInfo)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'loadRelations', array('versionInfo' => $versionInfo), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->loadRelations($versionInfo);
    }

    /**
     * {@inheritDoc}
     */
    public function loadReverseRelations(\eZ\Publish\API\Repository\Values\Content\ContentInfo $contentInfo)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'loadReverseRelations', array('contentInfo' => $contentInfo), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->loadReverseRelations($contentInfo);
    }

    /**
     * {@inheritDoc}
     */
    public function addRelation(\eZ\Publish\API\Repository\Values\Content\VersionInfo $sourceVersion, \eZ\Publish\API\Repository\Values\Content\ContentInfo $destinationContent)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'addRelation', array('sourceVersion' => $sourceVersion, 'destinationContent' => $destinationContent), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->addRelation($sourceVersion, $destinationContent);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteRelation(\eZ\Publish\API\Repository\Values\Content\VersionInfo $sourceVersion, \eZ\Publish\API\Repository\Values\Content\ContentInfo $destinationContent)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'deleteRelation', array('sourceVersion' => $sourceVersion, 'destinationContent' => $destinationContent), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->deleteRelation($sourceVersion, $destinationContent);
    }

    /**
     * {@inheritDoc}
     */
    public function addTranslationInfo(\eZ\Publish\API\Repository\Values\Content\TranslationInfo $translationInfo)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'addTranslationInfo', array('translationInfo' => $translationInfo), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->addTranslationInfo($translationInfo);
    }

    /**
     * {@inheritDoc}
     */
    public function loadTranslationInfos(\eZ\Publish\API\Repository\Values\Content\ContentInfo $contentInfo, array $filter = array())
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'loadTranslationInfos', array('contentInfo' => $contentInfo, 'filter' => $filter), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->loadTranslationInfos($contentInfo, $filter);
    }

    /**
     * {@inheritDoc}
     */
    public function newContentCreateStruct(\eZ\Publish\API\Repository\Values\ContentType\ContentType $contentType, $mainLanguageCode)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'newContentCreateStruct', array('contentType' => $contentType, 'mainLanguageCode' => $mainLanguageCode), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->newContentCreateStruct($contentType, $mainLanguageCode);
    }

    /**
     * {@inheritDoc}
     */
    public function newContentMetadataUpdateStruct()
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'newContentMetadataUpdateStruct', array(), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->newContentMetadataUpdateStruct();
    }

    /**
     * {@inheritDoc}
     */
    public function newContentUpdateStruct()
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'newContentUpdateStruct', array(), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->newContentUpdateStruct();
    }

    /**
     * {@inheritDoc}
     */
    public function newTranslationInfo()
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'newTranslationInfo', array(), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->newTranslationInfo();
    }

    /**
     * {@inheritDoc}
     */
    public function newTranslationValues()
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'newTranslationValues', array(), $this->initializer56b479e322c7a501661501);

        return $this->valueHolder56b479e322c6b262821124->newTranslationValues();
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e322c7a501661501 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, '__get', array('name' => $name), $this->initializer56b479e322c7a501661501);

        if (isset(self::$publicProperties56b479e322c3e560710138[$name])) {
            return $this->valueHolder56b479e322c6b262821124->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e322c6b262821124;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e322c6b262821124;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e322c7a501661501);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e322c6b262821124;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e322c6b262821124;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, '__isset', array('name' => $name), $this->initializer56b479e322c7a501661501);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e322c6b262821124;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e322c6b262821124;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, '__unset', array('name' => $name), $this->initializer56b479e322c7a501661501);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e322c6b262821124;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e322c6b262821124;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, '__clone', array(), $this->initializer56b479e322c7a501661501);

        $this->valueHolder56b479e322c6b262821124 = clone $this->valueHolder56b479e322c6b262821124;
    }

    public function __sleep()
    {
        $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, '__sleep', array(), $this->initializer56b479e322c7a501661501);

        return array('valueHolder56b479e322c6b262821124');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e322c7a501661501 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e322c7a501661501;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e322c7a501661501 && $this->initializer56b479e322c7a501661501->__invoke($this->valueHolder56b479e322c6b262821124, $this, 'initializeProxy', array(), $this->initializer56b479e322c7a501661501);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e322c6b262821124;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e322c6b262821124;
    }


}

class eZPublishCoreRepositoryContentTypeService_0000000010d7753400007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Repository\ContentTypeService implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e366d8a926279346 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e366d99386736342 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e366d5b343795582 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function createContentTypeGroup(\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroupCreateStruct $contentTypeGroupCreateStruct)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'createContentTypeGroup', array('contentTypeGroupCreateStruct' => $contentTypeGroupCreateStruct), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->createContentTypeGroup($contentTypeGroupCreateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function loadContentTypeGroup($contentTypeGroupId)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'loadContentTypeGroup', array('contentTypeGroupId' => $contentTypeGroupId), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->loadContentTypeGroup($contentTypeGroupId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadContentTypeGroupByIdentifier($contentTypeGroupIdentifier)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'loadContentTypeGroupByIdentifier', array('contentTypeGroupIdentifier' => $contentTypeGroupIdentifier), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->loadContentTypeGroupByIdentifier($contentTypeGroupIdentifier);
    }

    /**
     * {@inheritDoc}
     */
    public function loadContentTypeGroups()
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'loadContentTypeGroups', array(), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->loadContentTypeGroups();
    }

    /**
     * {@inheritDoc}
     */
    public function updateContentTypeGroup(\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup $contentTypeGroup, \eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroupUpdateStruct $contentTypeGroupUpdateStruct)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'updateContentTypeGroup', array('contentTypeGroup' => $contentTypeGroup, 'contentTypeGroupUpdateStruct' => $contentTypeGroupUpdateStruct), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->updateContentTypeGroup($contentTypeGroup, $contentTypeGroupUpdateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteContentTypeGroup(\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup $contentTypeGroup)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'deleteContentTypeGroup', array('contentTypeGroup' => $contentTypeGroup), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->deleteContentTypeGroup($contentTypeGroup);
    }

    /**
     * {@inheritDoc}
     */
    public function createContentType(\eZ\Publish\API\Repository\Values\ContentType\ContentTypeCreateStruct $contentTypeCreateStruct, array $contentTypeGroups)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'createContentType', array('contentTypeCreateStruct' => $contentTypeCreateStruct, 'contentTypeGroups' => $contentTypeGroups), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->createContentType($contentTypeCreateStruct, $contentTypeGroups);
    }

    /**
     * {@inheritDoc}
     */
    public function loadContentType($contentTypeId)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'loadContentType', array('contentTypeId' => $contentTypeId), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->loadContentType($contentTypeId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadContentTypeByIdentifier($identifier)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'loadContentTypeByIdentifier', array('identifier' => $identifier), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->loadContentTypeByIdentifier($identifier);
    }

    /**
     * {@inheritDoc}
     */
    public function loadContentTypeByRemoteId($remoteId)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'loadContentTypeByRemoteId', array('remoteId' => $remoteId), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->loadContentTypeByRemoteId($remoteId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadContentTypeDraft($contentTypeId)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'loadContentTypeDraft', array('contentTypeId' => $contentTypeId), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->loadContentTypeDraft($contentTypeId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadContentTypes(\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup $contentTypeGroup)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'loadContentTypes', array('contentTypeGroup' => $contentTypeGroup), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->loadContentTypes($contentTypeGroup);
    }

    /**
     * {@inheritDoc}
     */
    public function createContentTypeDraft(\eZ\Publish\API\Repository\Values\ContentType\ContentType $contentType)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'createContentTypeDraft', array('contentType' => $contentType), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->createContentTypeDraft($contentType);
    }

    /**
     * {@inheritDoc}
     */
    public function updateContentTypeDraft(\eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft $contentTypeDraft, \eZ\Publish\API\Repository\Values\ContentType\ContentTypeUpdateStruct $contentTypeUpdateStruct)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'updateContentTypeDraft', array('contentTypeDraft' => $contentTypeDraft, 'contentTypeUpdateStruct' => $contentTypeUpdateStruct), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->updateContentTypeDraft($contentTypeDraft, $contentTypeUpdateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteContentType(\eZ\Publish\API\Repository\Values\ContentType\ContentType $contentType)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'deleteContentType', array('contentType' => $contentType), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->deleteContentType($contentType);
    }

    /**
     * {@inheritDoc}
     */
    public function copyContentType(\eZ\Publish\API\Repository\Values\ContentType\ContentType $contentType, \eZ\Publish\API\Repository\Values\User\User $creator = null)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'copyContentType', array('contentType' => $contentType, 'creator' => $creator), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->copyContentType($contentType, $creator);
    }

    /**
     * {@inheritDoc}
     */
    public function assignContentTypeGroup(\eZ\Publish\API\Repository\Values\ContentType\ContentType $contentType, \eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup $contentTypeGroup)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'assignContentTypeGroup', array('contentType' => $contentType, 'contentTypeGroup' => $contentTypeGroup), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->assignContentTypeGroup($contentType, $contentTypeGroup);
    }

    /**
     * {@inheritDoc}
     */
    public function unassignContentTypeGroup(\eZ\Publish\API\Repository\Values\ContentType\ContentType $contentType, \eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup $contentTypeGroup)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'unassignContentTypeGroup', array('contentType' => $contentType, 'contentTypeGroup' => $contentTypeGroup), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->unassignContentTypeGroup($contentType, $contentTypeGroup);
    }

    /**
     * {@inheritDoc}
     */
    public function addFieldDefinition(\eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft $contentTypeDraft, \eZ\Publish\API\Repository\Values\ContentType\FieldDefinitionCreateStruct $fieldDefinitionCreateStruct)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'addFieldDefinition', array('contentTypeDraft' => $contentTypeDraft, 'fieldDefinitionCreateStruct' => $fieldDefinitionCreateStruct), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->addFieldDefinition($contentTypeDraft, $fieldDefinitionCreateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function removeFieldDefinition(\eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft $contentTypeDraft, \eZ\Publish\API\Repository\Values\ContentType\FieldDefinition $fieldDefinition)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'removeFieldDefinition', array('contentTypeDraft' => $contentTypeDraft, 'fieldDefinition' => $fieldDefinition), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->removeFieldDefinition($contentTypeDraft, $fieldDefinition);
    }

    /**
     * {@inheritDoc}
     */
    public function updateFieldDefinition(\eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft $contentTypeDraft, \eZ\Publish\API\Repository\Values\ContentType\FieldDefinition $fieldDefinition, \eZ\Publish\API\Repository\Values\ContentType\FieldDefinitionUpdateStruct $fieldDefinitionUpdateStruct)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'updateFieldDefinition', array('contentTypeDraft' => $contentTypeDraft, 'fieldDefinition' => $fieldDefinition, 'fieldDefinitionUpdateStruct' => $fieldDefinitionUpdateStruct), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->updateFieldDefinition($contentTypeDraft, $fieldDefinition, $fieldDefinitionUpdateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function publishContentTypeDraft(\eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft $contentTypeDraft)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'publishContentTypeDraft', array('contentTypeDraft' => $contentTypeDraft), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->publishContentTypeDraft($contentTypeDraft);
    }

    /**
     * {@inheritDoc}
     */
    public function newContentTypeGroupCreateStruct($identifier)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'newContentTypeGroupCreateStruct', array('identifier' => $identifier), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->newContentTypeGroupCreateStruct($identifier);
    }

    /**
     * {@inheritDoc}
     */
    public function newContentTypeCreateStruct($identifier)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'newContentTypeCreateStruct', array('identifier' => $identifier), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->newContentTypeCreateStruct($identifier);
    }

    /**
     * {@inheritDoc}
     */
    public function newContentTypeUpdateStruct()
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'newContentTypeUpdateStruct', array(), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->newContentTypeUpdateStruct();
    }

    /**
     * {@inheritDoc}
     */
    public function newContentTypeGroupUpdateStruct()
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'newContentTypeGroupUpdateStruct', array(), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->newContentTypeGroupUpdateStruct();
    }

    /**
     * {@inheritDoc}
     */
    public function newFieldDefinitionCreateStruct($identifier, $fieldTypeIdentifier)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'newFieldDefinitionCreateStruct', array('identifier' => $identifier, 'fieldTypeIdentifier' => $fieldTypeIdentifier), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->newFieldDefinitionCreateStruct($identifier, $fieldTypeIdentifier);
    }

    /**
     * {@inheritDoc}
     */
    public function newFieldDefinitionUpdateStruct()
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'newFieldDefinitionUpdateStruct', array(), $this->initializer56b479e366d99386736342);

        return $this->valueHolder56b479e366d8a926279346->newFieldDefinitionUpdateStruct();
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e366d99386736342 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, '__get', array('name' => $name), $this->initializer56b479e366d99386736342);

        if (isset(self::$publicProperties56b479e366d5b343795582[$name])) {
            return $this->valueHolder56b479e366d8a926279346->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e366d8a926279346;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e366d8a926279346;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e366d99386736342);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e366d8a926279346;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e366d8a926279346;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, '__isset', array('name' => $name), $this->initializer56b479e366d99386736342);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e366d8a926279346;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e366d8a926279346;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, '__unset', array('name' => $name), $this->initializer56b479e366d99386736342);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e366d8a926279346;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e366d8a926279346;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, '__clone', array(), $this->initializer56b479e366d99386736342);

        $this->valueHolder56b479e366d8a926279346 = clone $this->valueHolder56b479e366d8a926279346;
    }

    public function __sleep()
    {
        $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, '__sleep', array(), $this->initializer56b479e366d99386736342);

        return array('valueHolder56b479e366d8a926279346');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e366d99386736342 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e366d99386736342;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e366d99386736342 && $this->initializer56b479e366d99386736342->__invoke($this->valueHolder56b479e366d8a926279346, $this, 'initializeProxy', array(), $this->initializer56b479e366d99386736342);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e366d8a926279346;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e366d8a926279346;
    }


}

class eZPublishCoreRepositoryFieldTypeService_0000000010d7753700007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Repository\FieldTypeService implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e3a44d5453943912 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e3a44f4374269769 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e3a4496553541085 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function getFieldTypes()
    {
        $this->initializer56b479e3a44f4374269769 && $this->initializer56b479e3a44f4374269769->__invoke($this->valueHolder56b479e3a44d5453943912, $this, 'getFieldTypes', array(), $this->initializer56b479e3a44f4374269769);

        return $this->valueHolder56b479e3a44d5453943912->getFieldTypes();
    }

    /**
     * {@inheritDoc}
     */
    public function getFieldType($identifier)
    {
        $this->initializer56b479e3a44f4374269769 && $this->initializer56b479e3a44f4374269769->__invoke($this->valueHolder56b479e3a44d5453943912, $this, 'getFieldType', array('identifier' => $identifier), $this->initializer56b479e3a44f4374269769);

        return $this->valueHolder56b479e3a44d5453943912->getFieldType($identifier);
    }

    /**
     * {@inheritDoc}
     */
    public function hasFieldType($identifier)
    {
        $this->initializer56b479e3a44f4374269769 && $this->initializer56b479e3a44f4374269769->__invoke($this->valueHolder56b479e3a44d5453943912, $this, 'hasFieldType', array('identifier' => $identifier), $this->initializer56b479e3a44f4374269769);

        return $this->valueHolder56b479e3a44d5453943912->hasFieldType($identifier);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e3a44f4374269769 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e3a44f4374269769 && $this->initializer56b479e3a44f4374269769->__invoke($this->valueHolder56b479e3a44d5453943912, $this, '__get', array('name' => $name), $this->initializer56b479e3a44f4374269769);

        if (isset(self::$publicProperties56b479e3a4496553541085[$name])) {
            return $this->valueHolder56b479e3a44d5453943912->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e3a44d5453943912;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e3a44d5453943912;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e3a44f4374269769 && $this->initializer56b479e3a44f4374269769->__invoke($this->valueHolder56b479e3a44d5453943912, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e3a44f4374269769);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e3a44d5453943912;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e3a44d5453943912;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e3a44f4374269769 && $this->initializer56b479e3a44f4374269769->__invoke($this->valueHolder56b479e3a44d5453943912, $this, '__isset', array('name' => $name), $this->initializer56b479e3a44f4374269769);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e3a44d5453943912;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e3a44d5453943912;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e3a44f4374269769 && $this->initializer56b479e3a44f4374269769->__invoke($this->valueHolder56b479e3a44d5453943912, $this, '__unset', array('name' => $name), $this->initializer56b479e3a44f4374269769);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e3a44d5453943912;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e3a44d5453943912;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e3a44f4374269769 && $this->initializer56b479e3a44f4374269769->__invoke($this->valueHolder56b479e3a44d5453943912, $this, '__clone', array(), $this->initializer56b479e3a44f4374269769);

        $this->valueHolder56b479e3a44d5453943912 = clone $this->valueHolder56b479e3a44d5453943912;
    }

    public function __sleep()
    {
        $this->initializer56b479e3a44f4374269769 && $this->initializer56b479e3a44f4374269769->__invoke($this->valueHolder56b479e3a44d5453943912, $this, '__sleep', array(), $this->initializer56b479e3a44f4374269769);

        return array('valueHolder56b479e3a44d5453943912');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e3a44f4374269769 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e3a44f4374269769;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e3a44f4374269769 && $this->initializer56b479e3a44f4374269769->__invoke($this->valueHolder56b479e3a44d5453943912, $this, 'initializeProxy', array(), $this->initializer56b479e3a44f4374269769);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e3a44d5453943912;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e3a44d5453943912;
    }


}

class eZPublishCoreRepositoryRoleService_0000000010d7752a00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Repository\RoleService implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e3a83de834775478 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e3a83f4609773743 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e3a838d070996373 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function createRole(\eZ\Publish\API\Repository\Values\User\RoleCreateStruct $roleCreateStruct)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'createRole', array('roleCreateStruct' => $roleCreateStruct), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->createRole($roleCreateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function createRoleDraft(\eZ\Publish\API\Repository\Values\User\Role $role)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'createRoleDraft', array('role' => $role), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->createRoleDraft($role);
    }

    /**
     * {@inheritDoc}
     */
    public function loadRoleDraft($id)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'loadRoleDraft', array('id' => $id), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->loadRoleDraft($id);
    }

    /**
     * {@inheritDoc}
     */
    public function loadRoleDraftByRoleId($roleId)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'loadRoleDraftByRoleId', array('roleId' => $roleId), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->loadRoleDraftByRoleId($roleId);
    }

    /**
     * {@inheritDoc}
     */
    public function updateRoleDraft(\eZ\Publish\API\Repository\Values\User\RoleDraft $roleDraft, \eZ\Publish\API\Repository\Values\User\RoleUpdateStruct $roleUpdateStruct)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'updateRoleDraft', array('roleDraft' => $roleDraft, 'roleUpdateStruct' => $roleUpdateStruct), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->updateRoleDraft($roleDraft, $roleUpdateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function addPolicyByRoleDraft(\eZ\Publish\API\Repository\Values\User\RoleDraft $roleDraft, \eZ\Publish\API\Repository\Values\User\PolicyCreateStruct $policyCreateStruct)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'addPolicyByRoleDraft', array('roleDraft' => $roleDraft, 'policyCreateStruct' => $policyCreateStruct), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->addPolicyByRoleDraft($roleDraft, $policyCreateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function removePolicyByRoleDraft(\eZ\Publish\API\Repository\Values\User\RoleDraft $roleDraft, \eZ\Publish\API\Repository\Values\User\PolicyDraft $policyDraft)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'removePolicyByRoleDraft', array('roleDraft' => $roleDraft, 'policyDraft' => $policyDraft), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->removePolicyByRoleDraft($roleDraft, $policyDraft);
    }

    /**
     * {@inheritDoc}
     */
    public function updatePolicyByRoleDraft(\eZ\Publish\API\Repository\Values\User\RoleDraft $roleDraft, \eZ\Publish\API\Repository\Values\User\PolicyDraft $policy, \eZ\Publish\API\Repository\Values\User\PolicyUpdateStruct $policyUpdateStruct)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'updatePolicyByRoleDraft', array('roleDraft' => $roleDraft, 'policy' => $policy, 'policyUpdateStruct' => $policyUpdateStruct), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->updatePolicyByRoleDraft($roleDraft, $policy, $policyUpdateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteRoleDraft(\eZ\Publish\API\Repository\Values\User\RoleDraft $roleDraft)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'deleteRoleDraft', array('roleDraft' => $roleDraft), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->deleteRoleDraft($roleDraft);
    }

    /**
     * {@inheritDoc}
     */
    public function publishRoleDraft(\eZ\Publish\API\Repository\Values\User\RoleDraft $roleDraft)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'publishRoleDraft', array('roleDraft' => $roleDraft), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->publishRoleDraft($roleDraft);
    }

    /**
     * {@inheritDoc}
     */
    public function updateRole(\eZ\Publish\API\Repository\Values\User\Role $role, \eZ\Publish\API\Repository\Values\User\RoleUpdateStruct $roleUpdateStruct)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'updateRole', array('role' => $role, 'roleUpdateStruct' => $roleUpdateStruct), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->updateRole($role, $roleUpdateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function addPolicy(\eZ\Publish\API\Repository\Values\User\Role $role, \eZ\Publish\API\Repository\Values\User\PolicyCreateStruct $policyCreateStruct)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'addPolicy', array('role' => $role, 'policyCreateStruct' => $policyCreateStruct), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->addPolicy($role, $policyCreateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function removePolicy(\eZ\Publish\API\Repository\Values\User\Role $role, \eZ\Publish\API\Repository\Values\User\Policy $policy)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'removePolicy', array('role' => $role, 'policy' => $policy), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->removePolicy($role, $policy);
    }

    /**
     * {@inheritDoc}
     */
    public function deletePolicy(\eZ\Publish\API\Repository\Values\User\Policy $policy)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'deletePolicy', array('policy' => $policy), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->deletePolicy($policy);
    }

    /**
     * {@inheritDoc}
     */
    public function updatePolicy(\eZ\Publish\API\Repository\Values\User\Policy $policy, \eZ\Publish\API\Repository\Values\User\PolicyUpdateStruct $policyUpdateStruct)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'updatePolicy', array('policy' => $policy, 'policyUpdateStruct' => $policyUpdateStruct), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->updatePolicy($policy, $policyUpdateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function loadRole($id)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'loadRole', array('id' => $id), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->loadRole($id);
    }

    /**
     * {@inheritDoc}
     */
    public function loadRoleByIdentifier($identifier)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'loadRoleByIdentifier', array('identifier' => $identifier), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->loadRoleByIdentifier($identifier);
    }

    /**
     * {@inheritDoc}
     */
    public function loadRoles()
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'loadRoles', array(), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->loadRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function deleteRole(\eZ\Publish\API\Repository\Values\User\Role $role)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'deleteRole', array('role' => $role), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->deleteRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function loadPoliciesByUserId($userId)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'loadPoliciesByUserId', array('userId' => $userId), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->loadPoliciesByUserId($userId);
    }

    /**
     * {@inheritDoc}
     */
    public function assignRoleToUserGroup(\eZ\Publish\API\Repository\Values\User\Role $role, \eZ\Publish\API\Repository\Values\User\UserGroup $userGroup, \eZ\Publish\API\Repository\Values\User\Limitation\RoleLimitation $roleLimitation = null)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'assignRoleToUserGroup', array('role' => $role, 'userGroup' => $userGroup, 'roleLimitation' => $roleLimitation), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->assignRoleToUserGroup($role, $userGroup, $roleLimitation);
    }

    /**
     * {@inheritDoc}
     */
    public function unassignRoleFromUserGroup(\eZ\Publish\API\Repository\Values\User\Role $role, \eZ\Publish\API\Repository\Values\User\UserGroup $userGroup)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'unassignRoleFromUserGroup', array('role' => $role, 'userGroup' => $userGroup), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->unassignRoleFromUserGroup($role, $userGroup);
    }

    /**
     * {@inheritDoc}
     */
    public function assignRoleToUser(\eZ\Publish\API\Repository\Values\User\Role $role, \eZ\Publish\API\Repository\Values\User\User $user, \eZ\Publish\API\Repository\Values\User\Limitation\RoleLimitation $roleLimitation = null)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'assignRoleToUser', array('role' => $role, 'user' => $user, 'roleLimitation' => $roleLimitation), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->assignRoleToUser($role, $user, $roleLimitation);
    }

    /**
     * {@inheritDoc}
     */
    public function unassignRoleFromUser(\eZ\Publish\API\Repository\Values\User\Role $role, \eZ\Publish\API\Repository\Values\User\User $user)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'unassignRoleFromUser', array('role' => $role, 'user' => $user), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->unassignRoleFromUser($role, $user);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRoleAssignment(\eZ\Publish\API\Repository\Values\User\RoleAssignment $roleAssignment)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'removeRoleAssignment', array('roleAssignment' => $roleAssignment), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->removeRoleAssignment($roleAssignment);
    }

    /**
     * {@inheritDoc}
     */
    public function loadRoleAssignment($roleAssignmentId)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'loadRoleAssignment', array('roleAssignmentId' => $roleAssignmentId), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->loadRoleAssignment($roleAssignmentId);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoleAssignments(\eZ\Publish\API\Repository\Values\User\Role $role)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'getRoleAssignments', array('role' => $role), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->getRoleAssignments($role);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoleAssignmentsForUser(\eZ\Publish\API\Repository\Values\User\User $user, $inherited = false)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'getRoleAssignmentsForUser', array('user' => $user, 'inherited' => $inherited), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->getRoleAssignmentsForUser($user, $inherited);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoleAssignmentsForUserGroup(\eZ\Publish\API\Repository\Values\User\UserGroup $userGroup)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'getRoleAssignmentsForUserGroup', array('userGroup' => $userGroup), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->getRoleAssignmentsForUserGroup($userGroup);
    }

    /**
     * {@inheritDoc}
     */
    public function newRoleCreateStruct($name)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'newRoleCreateStruct', array('name' => $name), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->newRoleCreateStruct($name);
    }

    /**
     * {@inheritDoc}
     */
    public function newPolicyCreateStruct($module, $function)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'newPolicyCreateStruct', array('module' => $module, 'function' => $function), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->newPolicyCreateStruct($module, $function);
    }

    /**
     * {@inheritDoc}
     */
    public function newPolicyUpdateStruct()
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'newPolicyUpdateStruct', array(), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->newPolicyUpdateStruct();
    }

    /**
     * {@inheritDoc}
     */
    public function newRoleUpdateStruct()
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'newRoleUpdateStruct', array(), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->newRoleUpdateStruct();
    }

    /**
     * {@inheritDoc}
     */
    public function getLimitationType($identifier)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'getLimitationType', array('identifier' => $identifier), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->getLimitationType($identifier);
    }

    /**
     * {@inheritDoc}
     */
    public function getLimitationTypesByModuleFunction($module, $function)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'getLimitationTypesByModuleFunction', array('module' => $module, 'function' => $function), $this->initializer56b479e3a83f4609773743);

        return $this->valueHolder56b479e3a83de834775478->getLimitationTypesByModuleFunction($module, $function);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e3a83f4609773743 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, '__get', array('name' => $name), $this->initializer56b479e3a83f4609773743);

        if (isset(self::$publicProperties56b479e3a838d070996373[$name])) {
            return $this->valueHolder56b479e3a83de834775478->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e3a83de834775478;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e3a83de834775478;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e3a83f4609773743);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e3a83de834775478;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e3a83de834775478;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, '__isset', array('name' => $name), $this->initializer56b479e3a83f4609773743);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e3a83de834775478;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e3a83de834775478;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, '__unset', array('name' => $name), $this->initializer56b479e3a83f4609773743);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e3a83de834775478;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e3a83de834775478;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, '__clone', array(), $this->initializer56b479e3a83f4609773743);

        $this->valueHolder56b479e3a83de834775478 = clone $this->valueHolder56b479e3a83de834775478;
    }

    public function __sleep()
    {
        $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, '__sleep', array(), $this->initializer56b479e3a83f4609773743);

        return array('valueHolder56b479e3a83de834775478');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e3a83f4609773743 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e3a83f4609773743;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e3a83f4609773743 && $this->initializer56b479e3a83f4609773743->__invoke($this->valueHolder56b479e3a83de834775478, $this, 'initializeProxy', array(), $this->initializer56b479e3a83f4609773743);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e3a83de834775478;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e3a83de834775478;
    }


}

class eZPublishCoreRepositoryObjectStateService_0000000010d7752d00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Repository\ObjectStateService implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e3f31b9859718794 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e3f31c8335741843 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e3f3191276378045 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function createObjectStateGroup(\eZ\Publish\API\Repository\Values\ObjectState\ObjectStateGroupCreateStruct $objectStateGroupCreateStruct)
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, 'createObjectStateGroup', array('objectStateGroupCreateStruct' => $objectStateGroupCreateStruct), $this->initializer56b479e3f31c8335741843);

        return $this->valueHolder56b479e3f31b9859718794->createObjectStateGroup($objectStateGroupCreateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function loadObjectStateGroup($objectStateGroupId)
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, 'loadObjectStateGroup', array('objectStateGroupId' => $objectStateGroupId), $this->initializer56b479e3f31c8335741843);

        return $this->valueHolder56b479e3f31b9859718794->loadObjectStateGroup($objectStateGroupId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadObjectStateGroups($offset = 0, $limit = -1)
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, 'loadObjectStateGroups', array('offset' => $offset, 'limit' => $limit), $this->initializer56b479e3f31c8335741843);

        return $this->valueHolder56b479e3f31b9859718794->loadObjectStateGroups($offset, $limit);
    }

    /**
     * {@inheritDoc}
     */
    public function loadObjectStates(\eZ\Publish\API\Repository\Values\ObjectState\ObjectStateGroup $objectStateGroup)
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, 'loadObjectStates', array('objectStateGroup' => $objectStateGroup), $this->initializer56b479e3f31c8335741843);

        return $this->valueHolder56b479e3f31b9859718794->loadObjectStates($objectStateGroup);
    }

    /**
     * {@inheritDoc}
     */
    public function updateObjectStateGroup(\eZ\Publish\API\Repository\Values\ObjectState\ObjectStateGroup $objectStateGroup, \eZ\Publish\API\Repository\Values\ObjectState\ObjectStateGroupUpdateStruct $objectStateGroupUpdateStruct)
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, 'updateObjectStateGroup', array('objectStateGroup' => $objectStateGroup, 'objectStateGroupUpdateStruct' => $objectStateGroupUpdateStruct), $this->initializer56b479e3f31c8335741843);

        return $this->valueHolder56b479e3f31b9859718794->updateObjectStateGroup($objectStateGroup, $objectStateGroupUpdateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteObjectStateGroup(\eZ\Publish\API\Repository\Values\ObjectState\ObjectStateGroup $objectStateGroup)
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, 'deleteObjectStateGroup', array('objectStateGroup' => $objectStateGroup), $this->initializer56b479e3f31c8335741843);

        return $this->valueHolder56b479e3f31b9859718794->deleteObjectStateGroup($objectStateGroup);
    }

    /**
     * {@inheritDoc}
     */
    public function createObjectState(\eZ\Publish\API\Repository\Values\ObjectState\ObjectStateGroup $objectStateGroup, \eZ\Publish\API\Repository\Values\ObjectState\ObjectStateCreateStruct $objectStateCreateStruct)
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, 'createObjectState', array('objectStateGroup' => $objectStateGroup, 'objectStateCreateStruct' => $objectStateCreateStruct), $this->initializer56b479e3f31c8335741843);

        return $this->valueHolder56b479e3f31b9859718794->createObjectState($objectStateGroup, $objectStateCreateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function loadObjectState($stateId)
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, 'loadObjectState', array('stateId' => $stateId), $this->initializer56b479e3f31c8335741843);

        return $this->valueHolder56b479e3f31b9859718794->loadObjectState($stateId);
    }

    /**
     * {@inheritDoc}
     */
    public function updateObjectState(\eZ\Publish\API\Repository\Values\ObjectState\ObjectState $objectState, \eZ\Publish\API\Repository\Values\ObjectState\ObjectStateUpdateStruct $objectStateUpdateStruct)
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, 'updateObjectState', array('objectState' => $objectState, 'objectStateUpdateStruct' => $objectStateUpdateStruct), $this->initializer56b479e3f31c8335741843);

        return $this->valueHolder56b479e3f31b9859718794->updateObjectState($objectState, $objectStateUpdateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function setPriorityOfObjectState(\eZ\Publish\API\Repository\Values\ObjectState\ObjectState $objectState, $priority)
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, 'setPriorityOfObjectState', array('objectState' => $objectState, 'priority' => $priority), $this->initializer56b479e3f31c8335741843);

        return $this->valueHolder56b479e3f31b9859718794->setPriorityOfObjectState($objectState, $priority);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteObjectState(\eZ\Publish\API\Repository\Values\ObjectState\ObjectState $objectState)
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, 'deleteObjectState', array('objectState' => $objectState), $this->initializer56b479e3f31c8335741843);

        return $this->valueHolder56b479e3f31b9859718794->deleteObjectState($objectState);
    }

    /**
     * {@inheritDoc}
     */
    public function setContentState(\eZ\Publish\API\Repository\Values\Content\ContentInfo $contentInfo, \eZ\Publish\API\Repository\Values\ObjectState\ObjectStateGroup $objectStateGroup, \eZ\Publish\API\Repository\Values\ObjectState\ObjectState $objectState)
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, 'setContentState', array('contentInfo' => $contentInfo, 'objectStateGroup' => $objectStateGroup, 'objectState' => $objectState), $this->initializer56b479e3f31c8335741843);

        return $this->valueHolder56b479e3f31b9859718794->setContentState($contentInfo, $objectStateGroup, $objectState);
    }

    /**
     * {@inheritDoc}
     */
    public function getContentState(\eZ\Publish\API\Repository\Values\Content\ContentInfo $contentInfo, \eZ\Publish\API\Repository\Values\ObjectState\ObjectStateGroup $objectStateGroup)
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, 'getContentState', array('contentInfo' => $contentInfo, 'objectStateGroup' => $objectStateGroup), $this->initializer56b479e3f31c8335741843);

        return $this->valueHolder56b479e3f31b9859718794->getContentState($contentInfo, $objectStateGroup);
    }

    /**
     * {@inheritDoc}
     */
    public function getContentCount(\eZ\Publish\API\Repository\Values\ObjectState\ObjectState $objectState)
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, 'getContentCount', array('objectState' => $objectState), $this->initializer56b479e3f31c8335741843);

        return $this->valueHolder56b479e3f31b9859718794->getContentCount($objectState);
    }

    /**
     * {@inheritDoc}
     */
    public function newObjectStateGroupCreateStruct($identifier)
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, 'newObjectStateGroupCreateStruct', array('identifier' => $identifier), $this->initializer56b479e3f31c8335741843);

        return $this->valueHolder56b479e3f31b9859718794->newObjectStateGroupCreateStruct($identifier);
    }

    /**
     * {@inheritDoc}
     */
    public function newObjectStateGroupUpdateStruct()
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, 'newObjectStateGroupUpdateStruct', array(), $this->initializer56b479e3f31c8335741843);

        return $this->valueHolder56b479e3f31b9859718794->newObjectStateGroupUpdateStruct();
    }

    /**
     * {@inheritDoc}
     */
    public function newObjectStateCreateStruct($identifier)
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, 'newObjectStateCreateStruct', array('identifier' => $identifier), $this->initializer56b479e3f31c8335741843);

        return $this->valueHolder56b479e3f31b9859718794->newObjectStateCreateStruct($identifier);
    }

    /**
     * {@inheritDoc}
     */
    public function newObjectStateUpdateStruct()
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, 'newObjectStateUpdateStruct', array(), $this->initializer56b479e3f31c8335741843);

        return $this->valueHolder56b479e3f31b9859718794->newObjectStateUpdateStruct();
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e3f31c8335741843 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, '__get', array('name' => $name), $this->initializer56b479e3f31c8335741843);

        if (isset(self::$publicProperties56b479e3f3191276378045[$name])) {
            return $this->valueHolder56b479e3f31b9859718794->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e3f31b9859718794;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e3f31b9859718794;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e3f31c8335741843);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e3f31b9859718794;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e3f31b9859718794;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, '__isset', array('name' => $name), $this->initializer56b479e3f31c8335741843);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e3f31b9859718794;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e3f31b9859718794;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, '__unset', array('name' => $name), $this->initializer56b479e3f31c8335741843);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e3f31b9859718794;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e3f31b9859718794;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, '__clone', array(), $this->initializer56b479e3f31c8335741843);

        $this->valueHolder56b479e3f31b9859718794 = clone $this->valueHolder56b479e3f31b9859718794;
    }

    public function __sleep()
    {
        $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, '__sleep', array(), $this->initializer56b479e3f31c8335741843);

        return array('valueHolder56b479e3f31b9859718794');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e3f31c8335741843 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e3f31c8335741843;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e3f31c8335741843 && $this->initializer56b479e3f31c8335741843->__invoke($this->valueHolder56b479e3f31b9859718794, $this, 'initializeProxy', array(), $this->initializer56b479e3f31c8335741843);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e3f31b9859718794;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e3f31b9859718794;
    }


}

class eZPublishCoreRepositoryURLWildcardService_0000000010d7752000007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Repository\URLWildcardService implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e41cc4a392756619 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e41cc5b975620066 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e41cc12800127129 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function create($sourceUrl, $destinationUrl, $forward = false)
    {
        $this->initializer56b479e41cc5b975620066 && $this->initializer56b479e41cc5b975620066->__invoke($this->valueHolder56b479e41cc4a392756619, $this, 'create', array('sourceUrl' => $sourceUrl, 'destinationUrl' => $destinationUrl, 'forward' => $forward), $this->initializer56b479e41cc5b975620066);

        return $this->valueHolder56b479e41cc4a392756619->create($sourceUrl, $destinationUrl, $forward);
    }

    /**
     * {@inheritDoc}
     */
    public function remove(\eZ\Publish\API\Repository\Values\Content\URLWildcard $urlWildcard)
    {
        $this->initializer56b479e41cc5b975620066 && $this->initializer56b479e41cc5b975620066->__invoke($this->valueHolder56b479e41cc4a392756619, $this, 'remove', array('urlWildcard' => $urlWildcard), $this->initializer56b479e41cc5b975620066);

        return $this->valueHolder56b479e41cc4a392756619->remove($urlWildcard);
    }

    /**
     * {@inheritDoc}
     */
    public function load($id)
    {
        $this->initializer56b479e41cc5b975620066 && $this->initializer56b479e41cc5b975620066->__invoke($this->valueHolder56b479e41cc4a392756619, $this, 'load', array('id' => $id), $this->initializer56b479e41cc5b975620066);

        return $this->valueHolder56b479e41cc4a392756619->load($id);
    }

    /**
     * {@inheritDoc}
     */
    public function loadAll($offset = 0, $limit = -1)
    {
        $this->initializer56b479e41cc5b975620066 && $this->initializer56b479e41cc5b975620066->__invoke($this->valueHolder56b479e41cc4a392756619, $this, 'loadAll', array('offset' => $offset, 'limit' => $limit), $this->initializer56b479e41cc5b975620066);

        return $this->valueHolder56b479e41cc4a392756619->loadAll($offset, $limit);
    }

    /**
     * {@inheritDoc}
     */
    public function translate($url)
    {
        $this->initializer56b479e41cc5b975620066 && $this->initializer56b479e41cc5b975620066->__invoke($this->valueHolder56b479e41cc4a392756619, $this, 'translate', array('url' => $url), $this->initializer56b479e41cc5b975620066);

        return $this->valueHolder56b479e41cc4a392756619->translate($url);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e41cc5b975620066 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e41cc5b975620066 && $this->initializer56b479e41cc5b975620066->__invoke($this->valueHolder56b479e41cc4a392756619, $this, '__get', array('name' => $name), $this->initializer56b479e41cc5b975620066);

        if (isset(self::$publicProperties56b479e41cc12800127129[$name])) {
            return $this->valueHolder56b479e41cc4a392756619->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e41cc4a392756619;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e41cc4a392756619;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e41cc5b975620066 && $this->initializer56b479e41cc5b975620066->__invoke($this->valueHolder56b479e41cc4a392756619, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e41cc5b975620066);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e41cc4a392756619;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e41cc4a392756619;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e41cc5b975620066 && $this->initializer56b479e41cc5b975620066->__invoke($this->valueHolder56b479e41cc4a392756619, $this, '__isset', array('name' => $name), $this->initializer56b479e41cc5b975620066);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e41cc4a392756619;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e41cc4a392756619;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e41cc5b975620066 && $this->initializer56b479e41cc5b975620066->__invoke($this->valueHolder56b479e41cc4a392756619, $this, '__unset', array('name' => $name), $this->initializer56b479e41cc5b975620066);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e41cc4a392756619;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e41cc4a392756619;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e41cc5b975620066 && $this->initializer56b479e41cc5b975620066->__invoke($this->valueHolder56b479e41cc4a392756619, $this, '__clone', array(), $this->initializer56b479e41cc5b975620066);

        $this->valueHolder56b479e41cc4a392756619 = clone $this->valueHolder56b479e41cc4a392756619;
    }

    public function __sleep()
    {
        $this->initializer56b479e41cc5b975620066 && $this->initializer56b479e41cc5b975620066->__invoke($this->valueHolder56b479e41cc4a392756619, $this, '__sleep', array(), $this->initializer56b479e41cc5b975620066);

        return array('valueHolder56b479e41cc4a392756619');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e41cc5b975620066 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e41cc5b975620066;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e41cc5b975620066 && $this->initializer56b479e41cc5b975620066->__invoke($this->valueHolder56b479e41cc4a392756619, $this, 'initializeProxy', array(), $this->initializer56b479e41cc5b975620066);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e41cc4a392756619;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e41cc4a392756619;
    }


}

class eZPublishCoreRepositoryURLAliasService_0000000010d773b700007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Repository\URLAliasService implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e424367259588041 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e424374229950910 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e42433f606878754 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function createUrlAlias(\eZ\Publish\API\Repository\Values\Content\Location $location, $path, $languageCode, $forwarding = false, $alwaysAvailable = false)
    {
        $this->initializer56b479e424374229950910 && $this->initializer56b479e424374229950910->__invoke($this->valueHolder56b479e424367259588041, $this, 'createUrlAlias', array('location' => $location, 'path' => $path, 'languageCode' => $languageCode, 'forwarding' => $forwarding, 'alwaysAvailable' => $alwaysAvailable), $this->initializer56b479e424374229950910);

        return $this->valueHolder56b479e424367259588041->createUrlAlias($location, $path, $languageCode, $forwarding, $alwaysAvailable);
    }

    /**
     * {@inheritDoc}
     */
    public function createGlobalUrlAlias($resource, $path, $languageCode, $forwarding = false, $alwaysAvailable = false)
    {
        $this->initializer56b479e424374229950910 && $this->initializer56b479e424374229950910->__invoke($this->valueHolder56b479e424367259588041, $this, 'createGlobalUrlAlias', array('resource' => $resource, 'path' => $path, 'languageCode' => $languageCode, 'forwarding' => $forwarding, 'alwaysAvailable' => $alwaysAvailable), $this->initializer56b479e424374229950910);

        return $this->valueHolder56b479e424367259588041->createGlobalUrlAlias($resource, $path, $languageCode, $forwarding, $alwaysAvailable);
    }

    /**
     * {@inheritDoc}
     */
    public function listLocationAliases(\eZ\Publish\API\Repository\Values\Content\Location $location, $custom = true, $languageCode = null, $showAllTranslations = null, array $prioritizedLanguageList = null)
    {
        $this->initializer56b479e424374229950910 && $this->initializer56b479e424374229950910->__invoke($this->valueHolder56b479e424367259588041, $this, 'listLocationAliases', array('location' => $location, 'custom' => $custom, 'languageCode' => $languageCode, 'showAllTranslations' => $showAllTranslations, 'prioritizedLanguageList' => $prioritizedLanguageList), $this->initializer56b479e424374229950910);

        return $this->valueHolder56b479e424367259588041->listLocationAliases($location, $custom, $languageCode, $showAllTranslations, $prioritizedLanguageList);
    }

    /**
     * {@inheritDoc}
     */
    public function listGlobalAliases($languageCode = null, $offset = 0, $limit = -1)
    {
        $this->initializer56b479e424374229950910 && $this->initializer56b479e424374229950910->__invoke($this->valueHolder56b479e424367259588041, $this, 'listGlobalAliases', array('languageCode' => $languageCode, 'offset' => $offset, 'limit' => $limit), $this->initializer56b479e424374229950910);

        return $this->valueHolder56b479e424367259588041->listGlobalAliases($languageCode, $offset, $limit);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAliases(array $aliasList)
    {
        $this->initializer56b479e424374229950910 && $this->initializer56b479e424374229950910->__invoke($this->valueHolder56b479e424367259588041, $this, 'removeAliases', array('aliasList' => $aliasList), $this->initializer56b479e424374229950910);

        return $this->valueHolder56b479e424367259588041->removeAliases($aliasList);
    }

    /**
     * {@inheritDoc}
     */
    public function lookup($url, $languageCode = null)
    {
        $this->initializer56b479e424374229950910 && $this->initializer56b479e424374229950910->__invoke($this->valueHolder56b479e424367259588041, $this, 'lookup', array('url' => $url, 'languageCode' => $languageCode), $this->initializer56b479e424374229950910);

        return $this->valueHolder56b479e424367259588041->lookup($url, $languageCode);
    }

    /**
     * {@inheritDoc}
     */
    public function reverseLookup(\eZ\Publish\API\Repository\Values\Content\Location $location, $languageCode = null, $showAllTranslations = null, array $prioritizedLanguageList = null)
    {
        $this->initializer56b479e424374229950910 && $this->initializer56b479e424374229950910->__invoke($this->valueHolder56b479e424367259588041, $this, 'reverseLookup', array('location' => $location, 'languageCode' => $languageCode, 'showAllTranslations' => $showAllTranslations, 'prioritizedLanguageList' => $prioritizedLanguageList), $this->initializer56b479e424374229950910);

        return $this->valueHolder56b479e424367259588041->reverseLookup($location, $languageCode, $showAllTranslations, $prioritizedLanguageList);
    }

    /**
     * {@inheritDoc}
     */
    public function load($id)
    {
        $this->initializer56b479e424374229950910 && $this->initializer56b479e424374229950910->__invoke($this->valueHolder56b479e424367259588041, $this, 'load', array('id' => $id), $this->initializer56b479e424374229950910);

        return $this->valueHolder56b479e424367259588041->load($id);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e424374229950910 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e424374229950910 && $this->initializer56b479e424374229950910->__invoke($this->valueHolder56b479e424367259588041, $this, '__get', array('name' => $name), $this->initializer56b479e424374229950910);

        if (isset(self::$publicProperties56b479e42433f606878754[$name])) {
            return $this->valueHolder56b479e424367259588041->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e424367259588041;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e424367259588041;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e424374229950910 && $this->initializer56b479e424374229950910->__invoke($this->valueHolder56b479e424367259588041, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e424374229950910);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e424367259588041;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e424367259588041;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e424374229950910 && $this->initializer56b479e424374229950910->__invoke($this->valueHolder56b479e424367259588041, $this, '__isset', array('name' => $name), $this->initializer56b479e424374229950910);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e424367259588041;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e424367259588041;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e424374229950910 && $this->initializer56b479e424374229950910->__invoke($this->valueHolder56b479e424367259588041, $this, '__unset', array('name' => $name), $this->initializer56b479e424374229950910);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e424367259588041;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e424367259588041;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e424374229950910 && $this->initializer56b479e424374229950910->__invoke($this->valueHolder56b479e424367259588041, $this, '__clone', array(), $this->initializer56b479e424374229950910);

        $this->valueHolder56b479e424367259588041 = clone $this->valueHolder56b479e424367259588041;
    }

    public function __sleep()
    {
        $this->initializer56b479e424374229950910 && $this->initializer56b479e424374229950910->__invoke($this->valueHolder56b479e424367259588041, $this, '__sleep', array(), $this->initializer56b479e424374229950910);

        return array('valueHolder56b479e424367259588041');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e424374229950910 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e424374229950910;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e424374229950910 && $this->initializer56b479e424374229950910->__invoke($this->valueHolder56b479e424367259588041, $this, 'initializeProxy', array(), $this->initializer56b479e424374229950910);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e424367259588041;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e424367259588041;
    }


}

class eZPublishCoreRepositoryUserService_0000000010d773a800007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Repository\UserService implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e43069e317049263 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e4306ac903047146 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e430677083173111 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function createUserGroup(\eZ\Publish\API\Repository\Values\User\UserGroupCreateStruct $userGroupCreateStruct, \eZ\Publish\API\Repository\Values\User\UserGroup $parentGroup)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'createUserGroup', array('userGroupCreateStruct' => $userGroupCreateStruct, 'parentGroup' => $parentGroup), $this->initializer56b479e4306ac903047146);

        return $this->valueHolder56b479e43069e317049263->createUserGroup($userGroupCreateStruct, $parentGroup);
    }

    /**
     * {@inheritDoc}
     */
    public function loadUserGroup($id)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'loadUserGroup', array('id' => $id), $this->initializer56b479e4306ac903047146);

        return $this->valueHolder56b479e43069e317049263->loadUserGroup($id);
    }

    /**
     * {@inheritDoc}
     */
    public function loadSubUserGroups(\eZ\Publish\API\Repository\Values\User\UserGroup $userGroup, $offset = 0, $limit = 25)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'loadSubUserGroups', array('userGroup' => $userGroup, 'offset' => $offset, 'limit' => $limit), $this->initializer56b479e4306ac903047146);

        return $this->valueHolder56b479e43069e317049263->loadSubUserGroups($userGroup, $offset, $limit);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteUserGroup(\eZ\Publish\API\Repository\Values\User\UserGroup $userGroup)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'deleteUserGroup', array('userGroup' => $userGroup), $this->initializer56b479e4306ac903047146);

        return $this->valueHolder56b479e43069e317049263->deleteUserGroup($userGroup);
    }

    /**
     * {@inheritDoc}
     */
    public function moveUserGroup(\eZ\Publish\API\Repository\Values\User\UserGroup $userGroup, \eZ\Publish\API\Repository\Values\User\UserGroup $newParent)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'moveUserGroup', array('userGroup' => $userGroup, 'newParent' => $newParent), $this->initializer56b479e4306ac903047146);

        return $this->valueHolder56b479e43069e317049263->moveUserGroup($userGroup, $newParent);
    }

    /**
     * {@inheritDoc}
     */
    public function updateUserGroup(\eZ\Publish\API\Repository\Values\User\UserGroup $userGroup, \eZ\Publish\API\Repository\Values\User\UserGroupUpdateStruct $userGroupUpdateStruct)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'updateUserGroup', array('userGroup' => $userGroup, 'userGroupUpdateStruct' => $userGroupUpdateStruct), $this->initializer56b479e4306ac903047146);

        return $this->valueHolder56b479e43069e317049263->updateUserGroup($userGroup, $userGroupUpdateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function createUser(\eZ\Publish\API\Repository\Values\User\UserCreateStruct $userCreateStruct, array $parentGroups)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'createUser', array('userCreateStruct' => $userCreateStruct, 'parentGroups' => $parentGroups), $this->initializer56b479e4306ac903047146);

        return $this->valueHolder56b479e43069e317049263->createUser($userCreateStruct, $parentGroups);
    }

    /**
     * {@inheritDoc}
     */
    public function loadUser($userId)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'loadUser', array('userId' => $userId), $this->initializer56b479e4306ac903047146);

        return $this->valueHolder56b479e43069e317049263->loadUser($userId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadAnonymousUser()
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'loadAnonymousUser', array(), $this->initializer56b479e4306ac903047146);

        return $this->valueHolder56b479e43069e317049263->loadAnonymousUser();
    }

    /**
     * {@inheritDoc}
     */
    public function loadUserByCredentials($login, $password)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'loadUserByCredentials', array('login' => $login, 'password' => $password), $this->initializer56b479e4306ac903047146);

        return $this->valueHolder56b479e43069e317049263->loadUserByCredentials($login, $password);
    }

    /**
     * {@inheritDoc}
     */
    public function loadUserByLogin($login)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'loadUserByLogin', array('login' => $login), $this->initializer56b479e4306ac903047146);

        return $this->valueHolder56b479e43069e317049263->loadUserByLogin($login);
    }

    /**
     * {@inheritDoc}
     */
    public function loadUsersByEmail($email)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'loadUsersByEmail', array('email' => $email), $this->initializer56b479e4306ac903047146);

        return $this->valueHolder56b479e43069e317049263->loadUsersByEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteUser(\eZ\Publish\API\Repository\Values\User\User $user)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'deleteUser', array('user' => $user), $this->initializer56b479e4306ac903047146);

        return $this->valueHolder56b479e43069e317049263->deleteUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function updateUser(\eZ\Publish\API\Repository\Values\User\User $user, \eZ\Publish\API\Repository\Values\User\UserUpdateStruct $userUpdateStruct)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'updateUser', array('user' => $user, 'userUpdateStruct' => $userUpdateStruct), $this->initializer56b479e4306ac903047146);

        return $this->valueHolder56b479e43069e317049263->updateUser($user, $userUpdateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function assignUserToUserGroup(\eZ\Publish\API\Repository\Values\User\User $user, \eZ\Publish\API\Repository\Values\User\UserGroup $userGroup)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'assignUserToUserGroup', array('user' => $user, 'userGroup' => $userGroup), $this->initializer56b479e4306ac903047146);

        return $this->valueHolder56b479e43069e317049263->assignUserToUserGroup($user, $userGroup);
    }

    /**
     * {@inheritDoc}
     */
    public function unAssignUserFromUserGroup(\eZ\Publish\API\Repository\Values\User\User $user, \eZ\Publish\API\Repository\Values\User\UserGroup $userGroup)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'unAssignUserFromUserGroup', array('user' => $user, 'userGroup' => $userGroup), $this->initializer56b479e4306ac903047146);

        return $this->valueHolder56b479e43069e317049263->unAssignUserFromUserGroup($user, $userGroup);
    }

    /**
     * {@inheritDoc}
     */
    public function loadUserGroupsOfUser(\eZ\Publish\API\Repository\Values\User\User $user, $offset = 0, $limit = 25)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'loadUserGroupsOfUser', array('user' => $user, 'offset' => $offset, 'limit' => $limit), $this->initializer56b479e4306ac903047146);

        return $this->valueHolder56b479e43069e317049263->loadUserGroupsOfUser($user, $offset, $limit);
    }

    /**
     * {@inheritDoc}
     */
    public function loadUsersOfUserGroup(\eZ\Publish\API\Repository\Values\User\UserGroup $userGroup, $offset = 0, $limit = 25)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'loadUsersOfUserGroup', array('userGroup' => $userGroup, 'offset' => $offset, 'limit' => $limit), $this->initializer56b479e4306ac903047146);

        return $this->valueHolder56b479e43069e317049263->loadUsersOfUserGroup($userGroup, $offset, $limit);
    }

    /**
     * {@inheritDoc}
     */
    public function newUserCreateStruct($login, $email, $password, $mainLanguageCode, $contentType = null)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'newUserCreateStruct', array('login' => $login, 'email' => $email, 'password' => $password, 'mainLanguageCode' => $mainLanguageCode, 'contentType' => $contentType), $this->initializer56b479e4306ac903047146);

        return $this->valueHolder56b479e43069e317049263->newUserCreateStruct($login, $email, $password, $mainLanguageCode, $contentType);
    }

    /**
     * {@inheritDoc}
     */
    public function newUserGroupCreateStruct($mainLanguageCode, $contentType = null)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'newUserGroupCreateStruct', array('mainLanguageCode' => $mainLanguageCode, 'contentType' => $contentType), $this->initializer56b479e4306ac903047146);

        return $this->valueHolder56b479e43069e317049263->newUserGroupCreateStruct($mainLanguageCode, $contentType);
    }

    /**
     * {@inheritDoc}
     */
    public function newUserUpdateStruct()
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'newUserUpdateStruct', array(), $this->initializer56b479e4306ac903047146);

        return $this->valueHolder56b479e43069e317049263->newUserUpdateStruct();
    }

    /**
     * {@inheritDoc}
     */
    public function newUserGroupUpdateStruct()
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'newUserGroupUpdateStruct', array(), $this->initializer56b479e4306ac903047146);

        return $this->valueHolder56b479e43069e317049263->newUserGroupUpdateStruct();
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e4306ac903047146 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, '__get', array('name' => $name), $this->initializer56b479e4306ac903047146);

        if (isset(self::$publicProperties56b479e430677083173111[$name])) {
            return $this->valueHolder56b479e43069e317049263->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e43069e317049263;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e43069e317049263;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e4306ac903047146);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e43069e317049263;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e43069e317049263;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, '__isset', array('name' => $name), $this->initializer56b479e4306ac903047146);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e43069e317049263;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e43069e317049263;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, '__unset', array('name' => $name), $this->initializer56b479e4306ac903047146);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e43069e317049263;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e43069e317049263;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, '__clone', array(), $this->initializer56b479e4306ac903047146);

        $this->valueHolder56b479e43069e317049263 = clone $this->valueHolder56b479e43069e317049263;
    }

    public function __sleep()
    {
        $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, '__sleep', array(), $this->initializer56b479e4306ac903047146);

        return array('valueHolder56b479e43069e317049263');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e4306ac903047146 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e4306ac903047146;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e4306ac903047146 && $this->initializer56b479e4306ac903047146->__invoke($this->valueHolder56b479e43069e317049263, $this, 'initializeProxy', array(), $this->initializer56b479e4306ac903047146);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e43069e317049263;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e43069e317049263;
    }


}

class eZPublishCoreRepositorySearchService_0000000010d7727e00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Repository\SearchService implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e456f09257047325 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e456f18556350312 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e456edf403603787 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function findContent(\eZ\Publish\API\Repository\Values\Content\Query $query, array $languageFilter = array(), $filterOnUserPermissions = true)
    {
        $this->initializer56b479e456f18556350312 && $this->initializer56b479e456f18556350312->__invoke($this->valueHolder56b479e456f09257047325, $this, 'findContent', array('query' => $query, 'languageFilter' => $languageFilter, 'filterOnUserPermissions' => $filterOnUserPermissions), $this->initializer56b479e456f18556350312);

        return $this->valueHolder56b479e456f09257047325->findContent($query, $languageFilter, $filterOnUserPermissions);
    }

    /**
     * {@inheritDoc}
     */
    public function findContentInfo(\eZ\Publish\API\Repository\Values\Content\Query $query, array $languageFilter = array(), $filterOnUserPermissions = true)
    {
        $this->initializer56b479e456f18556350312 && $this->initializer56b479e456f18556350312->__invoke($this->valueHolder56b479e456f09257047325, $this, 'findContentInfo', array('query' => $query, 'languageFilter' => $languageFilter, 'filterOnUserPermissions' => $filterOnUserPermissions), $this->initializer56b479e456f18556350312);

        return $this->valueHolder56b479e456f09257047325->findContentInfo($query, $languageFilter, $filterOnUserPermissions);
    }

    /**
     * {@inheritDoc}
     */
    public function findSingle(\eZ\Publish\API\Repository\Values\Content\Query\Criterion $filter, array $languageFilter = array(), $filterOnUserPermissions = true)
    {
        $this->initializer56b479e456f18556350312 && $this->initializer56b479e456f18556350312->__invoke($this->valueHolder56b479e456f09257047325, $this, 'findSingle', array('filter' => $filter, 'languageFilter' => $languageFilter, 'filterOnUserPermissions' => $filterOnUserPermissions), $this->initializer56b479e456f18556350312);

        return $this->valueHolder56b479e456f09257047325->findSingle($filter, $languageFilter, $filterOnUserPermissions);
    }

    /**
     * {@inheritDoc}
     */
    public function suggest($prefix, $fieldPaths = array(), $limit = 10, \eZ\Publish\API\Repository\Values\Content\Query\Criterion $filter = null)
    {
        $this->initializer56b479e456f18556350312 && $this->initializer56b479e456f18556350312->__invoke($this->valueHolder56b479e456f09257047325, $this, 'suggest', array('prefix' => $prefix, 'fieldPaths' => $fieldPaths, 'limit' => $limit, 'filter' => $filter), $this->initializer56b479e456f18556350312);

        return $this->valueHolder56b479e456f09257047325->suggest($prefix, $fieldPaths, $limit, $filter);
    }

    /**
     * {@inheritDoc}
     */
    public function findLocations(\eZ\Publish\API\Repository\Values\Content\LocationQuery $query, array $languageFilter = array(), $filterOnUserPermissions = true)
    {
        $this->initializer56b479e456f18556350312 && $this->initializer56b479e456f18556350312->__invoke($this->valueHolder56b479e456f09257047325, $this, 'findLocations', array('query' => $query, 'languageFilter' => $languageFilter, 'filterOnUserPermissions' => $filterOnUserPermissions), $this->initializer56b479e456f18556350312);

        return $this->valueHolder56b479e456f09257047325->findLocations($query, $languageFilter, $filterOnUserPermissions);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e456f18556350312 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e456f18556350312 && $this->initializer56b479e456f18556350312->__invoke($this->valueHolder56b479e456f09257047325, $this, '__get', array('name' => $name), $this->initializer56b479e456f18556350312);

        if (isset(self::$publicProperties56b479e456edf403603787[$name])) {
            return $this->valueHolder56b479e456f09257047325->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e456f09257047325;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e456f09257047325;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e456f18556350312 && $this->initializer56b479e456f18556350312->__invoke($this->valueHolder56b479e456f09257047325, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e456f18556350312);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e456f09257047325;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e456f09257047325;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e456f18556350312 && $this->initializer56b479e456f18556350312->__invoke($this->valueHolder56b479e456f09257047325, $this, '__isset', array('name' => $name), $this->initializer56b479e456f18556350312);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e456f09257047325;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e456f09257047325;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e456f18556350312 && $this->initializer56b479e456f18556350312->__invoke($this->valueHolder56b479e456f09257047325, $this, '__unset', array('name' => $name), $this->initializer56b479e456f18556350312);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e456f09257047325;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e456f09257047325;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e456f18556350312 && $this->initializer56b479e456f18556350312->__invoke($this->valueHolder56b479e456f09257047325, $this, '__clone', array(), $this->initializer56b479e456f18556350312);

        $this->valueHolder56b479e456f09257047325 = clone $this->valueHolder56b479e456f09257047325;
    }

    public function __sleep()
    {
        $this->initializer56b479e456f18556350312 && $this->initializer56b479e456f18556350312->__invoke($this->valueHolder56b479e456f09257047325, $this, '__sleep', array(), $this->initializer56b479e456f18556350312);

        return array('valueHolder56b479e456f09257047325');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e456f18556350312 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e456f18556350312;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e456f18556350312 && $this->initializer56b479e456f18556350312->__invoke($this->valueHolder56b479e456f09257047325, $this, 'initializeProxy', array(), $this->initializer56b479e456f18556350312);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e456f09257047325;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e456f09257047325;
    }


}

class eZPublishCoreRepositorySectionService_0000000010d7726800007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Repository\SectionService implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e461095498832274 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e4610a3618891628 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e46106d911422190 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function createSection(\eZ\Publish\API\Repository\Values\Content\SectionCreateStruct $sectionCreateStruct)
    {
        $this->initializer56b479e4610a3618891628 && $this->initializer56b479e4610a3618891628->__invoke($this->valueHolder56b479e461095498832274, $this, 'createSection', array('sectionCreateStruct' => $sectionCreateStruct), $this->initializer56b479e4610a3618891628);

        return $this->valueHolder56b479e461095498832274->createSection($sectionCreateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function updateSection(\eZ\Publish\API\Repository\Values\Content\Section $section, \eZ\Publish\API\Repository\Values\Content\SectionUpdateStruct $sectionUpdateStruct)
    {
        $this->initializer56b479e4610a3618891628 && $this->initializer56b479e4610a3618891628->__invoke($this->valueHolder56b479e461095498832274, $this, 'updateSection', array('section' => $section, 'sectionUpdateStruct' => $sectionUpdateStruct), $this->initializer56b479e4610a3618891628);

        return $this->valueHolder56b479e461095498832274->updateSection($section, $sectionUpdateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function loadSection($sectionId)
    {
        $this->initializer56b479e4610a3618891628 && $this->initializer56b479e4610a3618891628->__invoke($this->valueHolder56b479e461095498832274, $this, 'loadSection', array('sectionId' => $sectionId), $this->initializer56b479e4610a3618891628);

        return $this->valueHolder56b479e461095498832274->loadSection($sectionId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadSections()
    {
        $this->initializer56b479e4610a3618891628 && $this->initializer56b479e4610a3618891628->__invoke($this->valueHolder56b479e461095498832274, $this, 'loadSections', array(), $this->initializer56b479e4610a3618891628);

        return $this->valueHolder56b479e461095498832274->loadSections();
    }

    /**
     * {@inheritDoc}
     */
    public function loadSectionByIdentifier($sectionIdentifier)
    {
        $this->initializer56b479e4610a3618891628 && $this->initializer56b479e4610a3618891628->__invoke($this->valueHolder56b479e461095498832274, $this, 'loadSectionByIdentifier', array('sectionIdentifier' => $sectionIdentifier), $this->initializer56b479e4610a3618891628);

        return $this->valueHolder56b479e461095498832274->loadSectionByIdentifier($sectionIdentifier);
    }

    /**
     * {@inheritDoc}
     */
    public function countAssignedContents(\eZ\Publish\API\Repository\Values\Content\Section $section)
    {
        $this->initializer56b479e4610a3618891628 && $this->initializer56b479e4610a3618891628->__invoke($this->valueHolder56b479e461095498832274, $this, 'countAssignedContents', array('section' => $section), $this->initializer56b479e4610a3618891628);

        return $this->valueHolder56b479e461095498832274->countAssignedContents($section);
    }

    /**
     * {@inheritDoc}
     */
    public function isSectionUsed(\eZ\Publish\API\Repository\Values\Content\Section $section)
    {
        $this->initializer56b479e4610a3618891628 && $this->initializer56b479e4610a3618891628->__invoke($this->valueHolder56b479e461095498832274, $this, 'isSectionUsed', array('section' => $section), $this->initializer56b479e4610a3618891628);

        return $this->valueHolder56b479e461095498832274->isSectionUsed($section);
    }

    /**
     * {@inheritDoc}
     */
    public function assignSection(\eZ\Publish\API\Repository\Values\Content\ContentInfo $contentInfo, \eZ\Publish\API\Repository\Values\Content\Section $section)
    {
        $this->initializer56b479e4610a3618891628 && $this->initializer56b479e4610a3618891628->__invoke($this->valueHolder56b479e461095498832274, $this, 'assignSection', array('contentInfo' => $contentInfo, 'section' => $section), $this->initializer56b479e4610a3618891628);

        return $this->valueHolder56b479e461095498832274->assignSection($contentInfo, $section);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteSection(\eZ\Publish\API\Repository\Values\Content\Section $section)
    {
        $this->initializer56b479e4610a3618891628 && $this->initializer56b479e4610a3618891628->__invoke($this->valueHolder56b479e461095498832274, $this, 'deleteSection', array('section' => $section), $this->initializer56b479e4610a3618891628);

        return $this->valueHolder56b479e461095498832274->deleteSection($section);
    }

    /**
     * {@inheritDoc}
     */
    public function newSectionCreateStruct()
    {
        $this->initializer56b479e4610a3618891628 && $this->initializer56b479e4610a3618891628->__invoke($this->valueHolder56b479e461095498832274, $this, 'newSectionCreateStruct', array(), $this->initializer56b479e4610a3618891628);

        return $this->valueHolder56b479e461095498832274->newSectionCreateStruct();
    }

    /**
     * {@inheritDoc}
     */
    public function newSectionUpdateStruct()
    {
        $this->initializer56b479e4610a3618891628 && $this->initializer56b479e4610a3618891628->__invoke($this->valueHolder56b479e461095498832274, $this, 'newSectionUpdateStruct', array(), $this->initializer56b479e4610a3618891628);

        return $this->valueHolder56b479e461095498832274->newSectionUpdateStruct();
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e4610a3618891628 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e4610a3618891628 && $this->initializer56b479e4610a3618891628->__invoke($this->valueHolder56b479e461095498832274, $this, '__get', array('name' => $name), $this->initializer56b479e4610a3618891628);

        if (isset(self::$publicProperties56b479e46106d911422190[$name])) {
            return $this->valueHolder56b479e461095498832274->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e461095498832274;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e461095498832274;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e4610a3618891628 && $this->initializer56b479e4610a3618891628->__invoke($this->valueHolder56b479e461095498832274, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e4610a3618891628);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e461095498832274;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e461095498832274;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e4610a3618891628 && $this->initializer56b479e4610a3618891628->__invoke($this->valueHolder56b479e461095498832274, $this, '__isset', array('name' => $name), $this->initializer56b479e4610a3618891628);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e461095498832274;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e461095498832274;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e4610a3618891628 && $this->initializer56b479e4610a3618891628->__invoke($this->valueHolder56b479e461095498832274, $this, '__unset', array('name' => $name), $this->initializer56b479e4610a3618891628);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e461095498832274;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e461095498832274;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e4610a3618891628 && $this->initializer56b479e4610a3618891628->__invoke($this->valueHolder56b479e461095498832274, $this, '__clone', array(), $this->initializer56b479e4610a3618891628);

        $this->valueHolder56b479e461095498832274 = clone $this->valueHolder56b479e461095498832274;
    }

    public function __sleep()
    {
        $this->initializer56b479e4610a3618891628 && $this->initializer56b479e4610a3618891628->__invoke($this->valueHolder56b479e461095498832274, $this, '__sleep', array(), $this->initializer56b479e4610a3618891628);

        return array('valueHolder56b479e461095498832274');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e4610a3618891628 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e4610a3618891628;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e4610a3618891628 && $this->initializer56b479e4610a3618891628->__invoke($this->valueHolder56b479e461095498832274, $this, 'initializeProxy', array(), $this->initializer56b479e4610a3618891628);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e461095498832274;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e461095498832274;
    }


}

class eZPublishCoreRepositoryTrashService_0000000010d773ad00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Repository\TrashService implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e471d1e500390895 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e471d2c884085103 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e471cf2151522498 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function loadTrashItem($trashItemId)
    {
        $this->initializer56b479e471d2c884085103 && $this->initializer56b479e471d2c884085103->__invoke($this->valueHolder56b479e471d1e500390895, $this, 'loadTrashItem', array('trashItemId' => $trashItemId), $this->initializer56b479e471d2c884085103);

        return $this->valueHolder56b479e471d1e500390895->loadTrashItem($trashItemId);
    }

    /**
     * {@inheritDoc}
     */
    public function trash(\eZ\Publish\API\Repository\Values\Content\Location $location)
    {
        $this->initializer56b479e471d2c884085103 && $this->initializer56b479e471d2c884085103->__invoke($this->valueHolder56b479e471d1e500390895, $this, 'trash', array('location' => $location), $this->initializer56b479e471d2c884085103);

        return $this->valueHolder56b479e471d1e500390895->trash($location);
    }

    /**
     * {@inheritDoc}
     */
    public function recover(\eZ\Publish\API\Repository\Values\Content\TrashItem $trashItem, \eZ\Publish\API\Repository\Values\Content\Location $newParentLocation = null)
    {
        $this->initializer56b479e471d2c884085103 && $this->initializer56b479e471d2c884085103->__invoke($this->valueHolder56b479e471d1e500390895, $this, 'recover', array('trashItem' => $trashItem, 'newParentLocation' => $newParentLocation), $this->initializer56b479e471d2c884085103);

        return $this->valueHolder56b479e471d1e500390895->recover($trashItem, $newParentLocation);
    }

    /**
     * {@inheritDoc}
     */
    public function emptyTrash()
    {
        $this->initializer56b479e471d2c884085103 && $this->initializer56b479e471d2c884085103->__invoke($this->valueHolder56b479e471d1e500390895, $this, 'emptyTrash', array(), $this->initializer56b479e471d2c884085103);

        return $this->valueHolder56b479e471d1e500390895->emptyTrash();
    }

    /**
     * {@inheritDoc}
     */
    public function deleteTrashItem(\eZ\Publish\API\Repository\Values\Content\TrashItem $trashItem)
    {
        $this->initializer56b479e471d2c884085103 && $this->initializer56b479e471d2c884085103->__invoke($this->valueHolder56b479e471d1e500390895, $this, 'deleteTrashItem', array('trashItem' => $trashItem), $this->initializer56b479e471d2c884085103);

        return $this->valueHolder56b479e471d1e500390895->deleteTrashItem($trashItem);
    }

    /**
     * {@inheritDoc}
     */
    public function findTrashItems(\eZ\Publish\API\Repository\Values\Content\Query $query)
    {
        $this->initializer56b479e471d2c884085103 && $this->initializer56b479e471d2c884085103->__invoke($this->valueHolder56b479e471d1e500390895, $this, 'findTrashItems', array('query' => $query), $this->initializer56b479e471d2c884085103);

        return $this->valueHolder56b479e471d1e500390895->findTrashItems($query);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e471d2c884085103 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e471d2c884085103 && $this->initializer56b479e471d2c884085103->__invoke($this->valueHolder56b479e471d1e500390895, $this, '__get', array('name' => $name), $this->initializer56b479e471d2c884085103);

        if (isset(self::$publicProperties56b479e471cf2151522498[$name])) {
            return $this->valueHolder56b479e471d1e500390895->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e471d1e500390895;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e471d1e500390895;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e471d2c884085103 && $this->initializer56b479e471d2c884085103->__invoke($this->valueHolder56b479e471d1e500390895, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e471d2c884085103);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e471d1e500390895;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e471d1e500390895;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e471d2c884085103 && $this->initializer56b479e471d2c884085103->__invoke($this->valueHolder56b479e471d1e500390895, $this, '__isset', array('name' => $name), $this->initializer56b479e471d2c884085103);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e471d1e500390895;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e471d1e500390895;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e471d2c884085103 && $this->initializer56b479e471d2c884085103->__invoke($this->valueHolder56b479e471d1e500390895, $this, '__unset', array('name' => $name), $this->initializer56b479e471d2c884085103);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e471d1e500390895;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e471d1e500390895;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e471d2c884085103 && $this->initializer56b479e471d2c884085103->__invoke($this->valueHolder56b479e471d1e500390895, $this, '__clone', array(), $this->initializer56b479e471d2c884085103);

        $this->valueHolder56b479e471d1e500390895 = clone $this->valueHolder56b479e471d1e500390895;
    }

    public function __sleep()
    {
        $this->initializer56b479e471d2c884085103 && $this->initializer56b479e471d2c884085103->__invoke($this->valueHolder56b479e471d1e500390895, $this, '__sleep', array(), $this->initializer56b479e471d2c884085103);

        return array('valueHolder56b479e471d1e500390895');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e471d2c884085103 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e471d2c884085103;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e471d2c884085103 && $this->initializer56b479e471d2c884085103->__invoke($this->valueHolder56b479e471d1e500390895, $this, 'initializeProxy', array(), $this->initializer56b479e471d2c884085103);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e471d1e500390895;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e471d1e500390895;
    }


}

class eZPublishCoreRepositoryLocationService_0000000010d7726900007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Repository\LocationService implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e479614799609851 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e479621822698180 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e4795ec739561030 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function copySubtree(\eZ\Publish\API\Repository\Values\Content\Location $subtree, \eZ\Publish\API\Repository\Values\Content\Location $targetParentLocation)
    {
        $this->initializer56b479e479621822698180 && $this->initializer56b479e479621822698180->__invoke($this->valueHolder56b479e479614799609851, $this, 'copySubtree', array('subtree' => $subtree, 'targetParentLocation' => $targetParentLocation), $this->initializer56b479e479621822698180);

        return $this->valueHolder56b479e479614799609851->copySubtree($subtree, $targetParentLocation);
    }

    /**
     * {@inheritDoc}
     */
    public function loadLocation($locationId)
    {
        $this->initializer56b479e479621822698180 && $this->initializer56b479e479621822698180->__invoke($this->valueHolder56b479e479614799609851, $this, 'loadLocation', array('locationId' => $locationId), $this->initializer56b479e479621822698180);

        return $this->valueHolder56b479e479614799609851->loadLocation($locationId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadLocationByRemoteId($remoteId)
    {
        $this->initializer56b479e479621822698180 && $this->initializer56b479e479621822698180->__invoke($this->valueHolder56b479e479614799609851, $this, 'loadLocationByRemoteId', array('remoteId' => $remoteId), $this->initializer56b479e479621822698180);

        return $this->valueHolder56b479e479614799609851->loadLocationByRemoteId($remoteId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadLocations(\eZ\Publish\API\Repository\Values\Content\ContentInfo $contentInfo, \eZ\Publish\API\Repository\Values\Content\Location $rootLocation = null)
    {
        $this->initializer56b479e479621822698180 && $this->initializer56b479e479621822698180->__invoke($this->valueHolder56b479e479614799609851, $this, 'loadLocations', array('contentInfo' => $contentInfo, 'rootLocation' => $rootLocation), $this->initializer56b479e479621822698180);

        return $this->valueHolder56b479e479614799609851->loadLocations($contentInfo, $rootLocation);
    }

    /**
     * {@inheritDoc}
     */
    public function loadLocationChildren(\eZ\Publish\API\Repository\Values\Content\Location $location, $offset = 0, $limit = 25)
    {
        $this->initializer56b479e479621822698180 && $this->initializer56b479e479621822698180->__invoke($this->valueHolder56b479e479614799609851, $this, 'loadLocationChildren', array('location' => $location, 'offset' => $offset, 'limit' => $limit), $this->initializer56b479e479621822698180);

        return $this->valueHolder56b479e479614799609851->loadLocationChildren($location, $offset, $limit);
    }

    /**
     * {@inheritDoc}
     */
    public function getLocationChildCount(\eZ\Publish\API\Repository\Values\Content\Location $location)
    {
        $this->initializer56b479e479621822698180 && $this->initializer56b479e479621822698180->__invoke($this->valueHolder56b479e479614799609851, $this, 'getLocationChildCount', array('location' => $location), $this->initializer56b479e479621822698180);

        return $this->valueHolder56b479e479614799609851->getLocationChildCount($location);
    }

    /**
     * {@inheritDoc}
     */
    public function createLocation(\eZ\Publish\API\Repository\Values\Content\ContentInfo $contentInfo, \eZ\Publish\API\Repository\Values\Content\LocationCreateStruct $locationCreateStruct)
    {
        $this->initializer56b479e479621822698180 && $this->initializer56b479e479621822698180->__invoke($this->valueHolder56b479e479614799609851, $this, 'createLocation', array('contentInfo' => $contentInfo, 'locationCreateStruct' => $locationCreateStruct), $this->initializer56b479e479621822698180);

        return $this->valueHolder56b479e479614799609851->createLocation($contentInfo, $locationCreateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function updateLocation(\eZ\Publish\API\Repository\Values\Content\Location $location, \eZ\Publish\API\Repository\Values\Content\LocationUpdateStruct $locationUpdateStruct)
    {
        $this->initializer56b479e479621822698180 && $this->initializer56b479e479621822698180->__invoke($this->valueHolder56b479e479614799609851, $this, 'updateLocation', array('location' => $location, 'locationUpdateStruct' => $locationUpdateStruct), $this->initializer56b479e479621822698180);

        return $this->valueHolder56b479e479614799609851->updateLocation($location, $locationUpdateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function swapLocation(\eZ\Publish\API\Repository\Values\Content\Location $location1, \eZ\Publish\API\Repository\Values\Content\Location $location2)
    {
        $this->initializer56b479e479621822698180 && $this->initializer56b479e479621822698180->__invoke($this->valueHolder56b479e479614799609851, $this, 'swapLocation', array('location1' => $location1, 'location2' => $location2), $this->initializer56b479e479621822698180);

        return $this->valueHolder56b479e479614799609851->swapLocation($location1, $location2);
    }

    /**
     * {@inheritDoc}
     */
    public function hideLocation(\eZ\Publish\API\Repository\Values\Content\Location $location)
    {
        $this->initializer56b479e479621822698180 && $this->initializer56b479e479621822698180->__invoke($this->valueHolder56b479e479614799609851, $this, 'hideLocation', array('location' => $location), $this->initializer56b479e479621822698180);

        return $this->valueHolder56b479e479614799609851->hideLocation($location);
    }

    /**
     * {@inheritDoc}
     */
    public function unhideLocation(\eZ\Publish\API\Repository\Values\Content\Location $location)
    {
        $this->initializer56b479e479621822698180 && $this->initializer56b479e479621822698180->__invoke($this->valueHolder56b479e479614799609851, $this, 'unhideLocation', array('location' => $location), $this->initializer56b479e479621822698180);

        return $this->valueHolder56b479e479614799609851->unhideLocation($location);
    }

    /**
     * {@inheritDoc}
     */
    public function moveSubtree(\eZ\Publish\API\Repository\Values\Content\Location $location, \eZ\Publish\API\Repository\Values\Content\Location $newParentLocation)
    {
        $this->initializer56b479e479621822698180 && $this->initializer56b479e479621822698180->__invoke($this->valueHolder56b479e479614799609851, $this, 'moveSubtree', array('location' => $location, 'newParentLocation' => $newParentLocation), $this->initializer56b479e479621822698180);

        return $this->valueHolder56b479e479614799609851->moveSubtree($location, $newParentLocation);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteLocation(\eZ\Publish\API\Repository\Values\Content\Location $location)
    {
        $this->initializer56b479e479621822698180 && $this->initializer56b479e479621822698180->__invoke($this->valueHolder56b479e479614799609851, $this, 'deleteLocation', array('location' => $location), $this->initializer56b479e479621822698180);

        return $this->valueHolder56b479e479614799609851->deleteLocation($location);
    }

    /**
     * {@inheritDoc}
     */
    public function newLocationCreateStruct($parentLocationId)
    {
        $this->initializer56b479e479621822698180 && $this->initializer56b479e479621822698180->__invoke($this->valueHolder56b479e479614799609851, $this, 'newLocationCreateStruct', array('parentLocationId' => $parentLocationId), $this->initializer56b479e479621822698180);

        return $this->valueHolder56b479e479614799609851->newLocationCreateStruct($parentLocationId);
    }

    /**
     * {@inheritDoc}
     */
    public function newLocationUpdateStruct()
    {
        $this->initializer56b479e479621822698180 && $this->initializer56b479e479621822698180->__invoke($this->valueHolder56b479e479614799609851, $this, 'newLocationUpdateStruct', array(), $this->initializer56b479e479621822698180);

        return $this->valueHolder56b479e479614799609851->newLocationUpdateStruct();
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e479621822698180 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e479621822698180 && $this->initializer56b479e479621822698180->__invoke($this->valueHolder56b479e479614799609851, $this, '__get', array('name' => $name), $this->initializer56b479e479621822698180);

        if (isset(self::$publicProperties56b479e4795ec739561030[$name])) {
            return $this->valueHolder56b479e479614799609851->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e479614799609851;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e479614799609851;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e479621822698180 && $this->initializer56b479e479621822698180->__invoke($this->valueHolder56b479e479614799609851, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e479621822698180);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e479614799609851;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e479614799609851;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e479621822698180 && $this->initializer56b479e479621822698180->__invoke($this->valueHolder56b479e479614799609851, $this, '__isset', array('name' => $name), $this->initializer56b479e479621822698180);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e479614799609851;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e479614799609851;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e479621822698180 && $this->initializer56b479e479621822698180->__invoke($this->valueHolder56b479e479614799609851, $this, '__unset', array('name' => $name), $this->initializer56b479e479621822698180);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e479614799609851;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e479614799609851;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e479621822698180 && $this->initializer56b479e479621822698180->__invoke($this->valueHolder56b479e479614799609851, $this, '__clone', array(), $this->initializer56b479e479621822698180);

        $this->valueHolder56b479e479614799609851 = clone $this->valueHolder56b479e479614799609851;
    }

    public function __sleep()
    {
        $this->initializer56b479e479621822698180 && $this->initializer56b479e479621822698180->__invoke($this->valueHolder56b479e479614799609851, $this, '__sleep', array(), $this->initializer56b479e479621822698180);

        return array('valueHolder56b479e479614799609851');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e479621822698180 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e479621822698180;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e479621822698180 && $this->initializer56b479e479621822698180->__invoke($this->valueHolder56b479e479614799609851, $this, 'initializeProxy', array(), $this->initializer56b479e479621822698180);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e479614799609851;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e479614799609851;
    }


}

class eZPublishCoreRepositoryLanguageService_0000000010d7726b00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Repository\LanguageService implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e48ee1d933062347 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e48ee2a113779651 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e48edf2255314655 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function createLanguage(\eZ\Publish\API\Repository\Values\Content\LanguageCreateStruct $languageCreateStruct)
    {
        $this->initializer56b479e48ee2a113779651 && $this->initializer56b479e48ee2a113779651->__invoke($this->valueHolder56b479e48ee1d933062347, $this, 'createLanguage', array('languageCreateStruct' => $languageCreateStruct), $this->initializer56b479e48ee2a113779651);

        return $this->valueHolder56b479e48ee1d933062347->createLanguage($languageCreateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function updateLanguageName(\eZ\Publish\API\Repository\Values\Content\Language $language, $newName)
    {
        $this->initializer56b479e48ee2a113779651 && $this->initializer56b479e48ee2a113779651->__invoke($this->valueHolder56b479e48ee1d933062347, $this, 'updateLanguageName', array('language' => $language, 'newName' => $newName), $this->initializer56b479e48ee2a113779651);

        return $this->valueHolder56b479e48ee1d933062347->updateLanguageName($language, $newName);
    }

    /**
     * {@inheritDoc}
     */
    public function enableLanguage(\eZ\Publish\API\Repository\Values\Content\Language $language)
    {
        $this->initializer56b479e48ee2a113779651 && $this->initializer56b479e48ee2a113779651->__invoke($this->valueHolder56b479e48ee1d933062347, $this, 'enableLanguage', array('language' => $language), $this->initializer56b479e48ee2a113779651);

        return $this->valueHolder56b479e48ee1d933062347->enableLanguage($language);
    }

    /**
     * {@inheritDoc}
     */
    public function disableLanguage(\eZ\Publish\API\Repository\Values\Content\Language $language)
    {
        $this->initializer56b479e48ee2a113779651 && $this->initializer56b479e48ee2a113779651->__invoke($this->valueHolder56b479e48ee1d933062347, $this, 'disableLanguage', array('language' => $language), $this->initializer56b479e48ee2a113779651);

        return $this->valueHolder56b479e48ee1d933062347->disableLanguage($language);
    }

    /**
     * {@inheritDoc}
     */
    public function loadLanguage($languageCode)
    {
        $this->initializer56b479e48ee2a113779651 && $this->initializer56b479e48ee2a113779651->__invoke($this->valueHolder56b479e48ee1d933062347, $this, 'loadLanguage', array('languageCode' => $languageCode), $this->initializer56b479e48ee2a113779651);

        return $this->valueHolder56b479e48ee1d933062347->loadLanguage($languageCode);
    }

    /**
     * {@inheritDoc}
     */
    public function loadLanguages()
    {
        $this->initializer56b479e48ee2a113779651 && $this->initializer56b479e48ee2a113779651->__invoke($this->valueHolder56b479e48ee1d933062347, $this, 'loadLanguages', array(), $this->initializer56b479e48ee2a113779651);

        return $this->valueHolder56b479e48ee1d933062347->loadLanguages();
    }

    /**
     * {@inheritDoc}
     */
    public function loadLanguageById($languageId)
    {
        $this->initializer56b479e48ee2a113779651 && $this->initializer56b479e48ee2a113779651->__invoke($this->valueHolder56b479e48ee1d933062347, $this, 'loadLanguageById', array('languageId' => $languageId), $this->initializer56b479e48ee2a113779651);

        return $this->valueHolder56b479e48ee1d933062347->loadLanguageById($languageId);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteLanguage(\eZ\Publish\API\Repository\Values\Content\Language $language)
    {
        $this->initializer56b479e48ee2a113779651 && $this->initializer56b479e48ee2a113779651->__invoke($this->valueHolder56b479e48ee1d933062347, $this, 'deleteLanguage', array('language' => $language), $this->initializer56b479e48ee2a113779651);

        return $this->valueHolder56b479e48ee1d933062347->deleteLanguage($language);
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultLanguageCode()
    {
        $this->initializer56b479e48ee2a113779651 && $this->initializer56b479e48ee2a113779651->__invoke($this->valueHolder56b479e48ee1d933062347, $this, 'getDefaultLanguageCode', array(), $this->initializer56b479e48ee2a113779651);

        return $this->valueHolder56b479e48ee1d933062347->getDefaultLanguageCode();
    }

    /**
     * {@inheritDoc}
     */
    public function getPrioritizedLanguageCodeList()
    {
        $this->initializer56b479e48ee2a113779651 && $this->initializer56b479e48ee2a113779651->__invoke($this->valueHolder56b479e48ee1d933062347, $this, 'getPrioritizedLanguageCodeList', array(), $this->initializer56b479e48ee2a113779651);

        return $this->valueHolder56b479e48ee1d933062347->getPrioritizedLanguageCodeList();
    }

    /**
     * {@inheritDoc}
     */
    public function newLanguageCreateStruct()
    {
        $this->initializer56b479e48ee2a113779651 && $this->initializer56b479e48ee2a113779651->__invoke($this->valueHolder56b479e48ee1d933062347, $this, 'newLanguageCreateStruct', array(), $this->initializer56b479e48ee2a113779651);

        return $this->valueHolder56b479e48ee1d933062347->newLanguageCreateStruct();
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e48ee2a113779651 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e48ee2a113779651 && $this->initializer56b479e48ee2a113779651->__invoke($this->valueHolder56b479e48ee1d933062347, $this, '__get', array('name' => $name), $this->initializer56b479e48ee2a113779651);

        if (isset(self::$publicProperties56b479e48edf2255314655[$name])) {
            return $this->valueHolder56b479e48ee1d933062347->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e48ee1d933062347;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e48ee1d933062347;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e48ee2a113779651 && $this->initializer56b479e48ee2a113779651->__invoke($this->valueHolder56b479e48ee1d933062347, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e48ee2a113779651);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e48ee1d933062347;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e48ee1d933062347;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e48ee2a113779651 && $this->initializer56b479e48ee2a113779651->__invoke($this->valueHolder56b479e48ee1d933062347, $this, '__isset', array('name' => $name), $this->initializer56b479e48ee2a113779651);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e48ee1d933062347;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e48ee1d933062347;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e48ee2a113779651 && $this->initializer56b479e48ee2a113779651->__invoke($this->valueHolder56b479e48ee1d933062347, $this, '__unset', array('name' => $name), $this->initializer56b479e48ee2a113779651);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e48ee1d933062347;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e48ee1d933062347;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e48ee2a113779651 && $this->initializer56b479e48ee2a113779651->__invoke($this->valueHolder56b479e48ee1d933062347, $this, '__clone', array(), $this->initializer56b479e48ee2a113779651);

        $this->valueHolder56b479e48ee1d933062347 = clone $this->valueHolder56b479e48ee1d933062347;
    }

    public function __sleep()
    {
        $this->initializer56b479e48ee2a113779651 && $this->initializer56b479e48ee2a113779651->__invoke($this->valueHolder56b479e48ee1d933062347, $this, '__sleep', array(), $this->initializer56b479e48ee2a113779651);

        return array('valueHolder56b479e48ee1d933062347');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e48ee2a113779651 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e48ee2a113779651;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e48ee2a113779651 && $this->initializer56b479e48ee2a113779651->__invoke($this->valueHolder56b479e48ee1d933062347, $this, 'initializeProxy', array(), $this->initializer56b479e48ee2a113779651);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e48ee1d933062347;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e48ee1d933062347;
    }


}

class eZPublishCoreSignalSlotRepository_0000000010d7726f00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\SignalSlot\Repository implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e49d501685479271 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e49d511537350982 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e49d4cd652388442 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function getCurrentUser()
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'getCurrentUser', array(), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->getCurrentUser();
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrentUserReference()
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'getCurrentUserReference', array(), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->getCurrentUserReference();
    }

    /**
     * {@inheritDoc}
     */
    public function setCurrentUser(\eZ\Publish\API\Repository\Values\User\UserReference $user)
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'setCurrentUser', array('user' => $user), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->setCurrentUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function sudo(\Closure $callback)
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'sudo', array('callback' => $callback), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->sudo($callback);
    }

    /**
     * {@inheritDoc}
     */
    public function hasAccess($module, $function, \eZ\Publish\API\Repository\Values\User\UserReference $user = null)
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'hasAccess', array('module' => $module, 'function' => $function, 'user' => $user), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->hasAccess($module, $function, $user);
    }

    /**
     * {@inheritDoc}
     */
    public function canUser($module, $function, \eZ\Publish\API\Repository\Values\ValueObject $object, $targets = null)
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'canUser', array('module' => $module, 'function' => $function, 'object' => $object, 'targets' => $targets), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->canUser($module, $function, $object, $targets);
    }

    /**
     * {@inheritDoc}
     */
    public function getContentService()
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'getContentService', array(), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->getContentService();
    }

    /**
     * {@inheritDoc}
     */
    public function getContentLanguageService()
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'getContentLanguageService', array(), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->getContentLanguageService();
    }

    /**
     * {@inheritDoc}
     */
    public function getContentTypeService()
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'getContentTypeService', array(), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->getContentTypeService();
    }

    /**
     * {@inheritDoc}
     */
    public function getLocationService()
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'getLocationService', array(), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->getLocationService();
    }

    /**
     * {@inheritDoc}
     */
    public function getTrashService()
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'getTrashService', array(), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->getTrashService();
    }

    /**
     * {@inheritDoc}
     */
    public function getSectionService()
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'getSectionService', array(), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->getSectionService();
    }

    /**
     * {@inheritDoc}
     */
    public function getUserService()
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'getUserService', array(), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->getUserService();
    }

    /**
     * {@inheritDoc}
     */
    public function getURLAliasService()
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'getURLAliasService', array(), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->getURLAliasService();
    }

    /**
     * {@inheritDoc}
     */
    public function getURLWildcardService()
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'getURLWildcardService', array(), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->getURLWildcardService();
    }

    /**
     * {@inheritDoc}
     */
    public function getObjectStateService()
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'getObjectStateService', array(), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->getObjectStateService();
    }

    /**
     * {@inheritDoc}
     */
    public function getRoleService()
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'getRoleService', array(), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->getRoleService();
    }

    /**
     * {@inheritDoc}
     */
    public function getSearchService()
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'getSearchService', array(), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->getSearchService();
    }

    /**
     * {@inheritDoc}
     */
    public function getFieldTypeService()
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'getFieldTypeService', array(), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->getFieldTypeService();
    }

    /**
     * {@inheritDoc}
     */
    public function beginTransaction()
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'beginTransaction', array(), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->beginTransaction();
    }

    /**
     * {@inheritDoc}
     */
    public function commit()
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'commit', array(), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->commit();
    }

    /**
     * {@inheritDoc}
     */
    public function rollback()
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'rollback', array(), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->rollback();
    }

    /**
     * {@inheritDoc}
     */
    public function commitEvent($event)
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'commitEvent', array('event' => $event), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->commitEvent($event);
    }

    /**
     * {@inheritDoc}
     */
    public function createDateTime($timestamp = null)
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'createDateTime', array('timestamp' => $timestamp), $this->initializer56b479e49d511537350982);

        return $this->valueHolder56b479e49d501685479271->createDateTime($timestamp);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e49d511537350982 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, '__get', array('name' => $name), $this->initializer56b479e49d511537350982);

        if (isset(self::$publicProperties56b479e49d4cd652388442[$name])) {
            return $this->valueHolder56b479e49d501685479271->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e49d501685479271;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e49d501685479271;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e49d511537350982);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e49d501685479271;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e49d501685479271;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, '__isset', array('name' => $name), $this->initializer56b479e49d511537350982);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e49d501685479271;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e49d501685479271;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, '__unset', array('name' => $name), $this->initializer56b479e49d511537350982);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e49d501685479271;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e49d501685479271;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, '__clone', array(), $this->initializer56b479e49d511537350982);

        $this->valueHolder56b479e49d501685479271 = clone $this->valueHolder56b479e49d501685479271;
    }

    public function __sleep()
    {
        $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, '__sleep', array(), $this->initializer56b479e49d511537350982);

        return array('valueHolder56b479e49d501685479271');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e49d511537350982 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e49d511537350982;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e49d511537350982 && $this->initializer56b479e49d511537350982->__invoke($this->valueHolder56b479e49d501685479271, $this, 'initializeProxy', array(), $this->initializer56b479e49d511537350982);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e49d501685479271;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e49d501685479271;
    }


}

class eZPublishCorePersistenceLegacyContentFieldHandler_0000000010d7740100007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Persistence\Legacy\Content\FieldHandler implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e4b8821930372823 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e4b882f399641220 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e4b87f9719546618 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function createNewFields(\eZ\Publish\SPI\Persistence\Content $content, \eZ\Publish\SPI\Persistence\Content\Type $contentType)
    {
        $this->initializer56b479e4b882f399641220 && $this->initializer56b479e4b882f399641220->__invoke($this->valueHolder56b479e4b8821930372823, $this, 'createNewFields', array('content' => $content, 'contentType' => $contentType), $this->initializer56b479e4b882f399641220);

        return $this->valueHolder56b479e4b8821930372823->createNewFields($content, $contentType);
    }

    /**
     * {@inheritDoc}
     */
    public function createExistingFieldsInNewVersion(\eZ\Publish\SPI\Persistence\Content $content)
    {
        $this->initializer56b479e4b882f399641220 && $this->initializer56b479e4b882f399641220->__invoke($this->valueHolder56b479e4b8821930372823, $this, 'createExistingFieldsInNewVersion', array('content' => $content), $this->initializer56b479e4b882f399641220);

        return $this->valueHolder56b479e4b8821930372823->createExistingFieldsInNewVersion($content);
    }

    /**
     * {@inheritDoc}
     */
    public function loadExternalFieldData(\eZ\Publish\SPI\Persistence\Content $content)
    {
        $this->initializer56b479e4b882f399641220 && $this->initializer56b479e4b882f399641220->__invoke($this->valueHolder56b479e4b8821930372823, $this, 'loadExternalFieldData', array('content' => $content), $this->initializer56b479e4b882f399641220);

        return $this->valueHolder56b479e4b8821930372823->loadExternalFieldData($content);
    }

    /**
     * {@inheritDoc}
     */
    public function updateFields(\eZ\Publish\SPI\Persistence\Content $content, \eZ\Publish\SPI\Persistence\Content\UpdateStruct $updateStruct, \eZ\Publish\SPI\Persistence\Content\Type $contentType)
    {
        $this->initializer56b479e4b882f399641220 && $this->initializer56b479e4b882f399641220->__invoke($this->valueHolder56b479e4b8821930372823, $this, 'updateFields', array('content' => $content, 'updateStruct' => $updateStruct, 'contentType' => $contentType), $this->initializer56b479e4b882f399641220);

        return $this->valueHolder56b479e4b8821930372823->updateFields($content, $updateStruct, $contentType);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteFields($contentId, \eZ\Publish\SPI\Persistence\Content\VersionInfo $versionInfo)
    {
        $this->initializer56b479e4b882f399641220 && $this->initializer56b479e4b882f399641220->__invoke($this->valueHolder56b479e4b8821930372823, $this, 'deleteFields', array('contentId' => $contentId, 'versionInfo' => $versionInfo), $this->initializer56b479e4b882f399641220);

        return $this->valueHolder56b479e4b8821930372823->deleteFields($contentId, $versionInfo);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e4b882f399641220 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e4b882f399641220 && $this->initializer56b479e4b882f399641220->__invoke($this->valueHolder56b479e4b8821930372823, $this, '__get', array('name' => $name), $this->initializer56b479e4b882f399641220);

        if (isset(self::$publicProperties56b479e4b87f9719546618[$name])) {
            return $this->valueHolder56b479e4b8821930372823->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e4b8821930372823;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e4b8821930372823;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e4b882f399641220 && $this->initializer56b479e4b882f399641220->__invoke($this->valueHolder56b479e4b8821930372823, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e4b882f399641220);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e4b8821930372823;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e4b8821930372823;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e4b882f399641220 && $this->initializer56b479e4b882f399641220->__invoke($this->valueHolder56b479e4b8821930372823, $this, '__isset', array('name' => $name), $this->initializer56b479e4b882f399641220);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e4b8821930372823;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e4b8821930372823;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e4b882f399641220 && $this->initializer56b479e4b882f399641220->__invoke($this->valueHolder56b479e4b8821930372823, $this, '__unset', array('name' => $name), $this->initializer56b479e4b882f399641220);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e4b8821930372823;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e4b8821930372823;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e4b882f399641220 && $this->initializer56b479e4b882f399641220->__invoke($this->valueHolder56b479e4b8821930372823, $this, '__clone', array(), $this->initializer56b479e4b882f399641220);

        $this->valueHolder56b479e4b8821930372823 = clone $this->valueHolder56b479e4b8821930372823;
    }

    public function __sleep()
    {
        $this->initializer56b479e4b882f399641220 && $this->initializer56b479e4b882f399641220->__invoke($this->valueHolder56b479e4b8821930372823, $this, '__sleep', array(), $this->initializer56b479e4b882f399641220);

        return array('valueHolder56b479e4b8821930372823');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e4b882f399641220 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e4b882f399641220;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e4b882f399641220 && $this->initializer56b479e4b882f399641220->__invoke($this->valueHolder56b479e4b8821930372823, $this, 'initializeProxy', array(), $this->initializer56b479e4b882f399641220);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e4b8821930372823;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e4b8821930372823;
    }


}

class eZPublishCorePersistenceLegacyContentHandler_0000000010d7747d00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Persistence\Legacy\Content\Handler implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e4c31e9066201814 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e4c31fa664350406 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e4c31b9316340151 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function create(\eZ\Publish\SPI\Persistence\Content\CreateStruct $struct)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, 'create', array('struct' => $struct), $this->initializer56b479e4c31fa664350406);

        return $this->valueHolder56b479e4c31e9066201814->create($struct);
    }

    /**
     * {@inheritDoc}
     */
    public function publish($contentId, $versionNo, \eZ\Publish\SPI\Persistence\Content\MetadataUpdateStruct $metaDataUpdateStruct)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, 'publish', array('contentId' => $contentId, 'versionNo' => $versionNo, 'metaDataUpdateStruct' => $metaDataUpdateStruct), $this->initializer56b479e4c31fa664350406);

        return $this->valueHolder56b479e4c31e9066201814->publish($contentId, $versionNo, $metaDataUpdateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function createDraftFromVersion($contentId, $srcVersion, $userId)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, 'createDraftFromVersion', array('contentId' => $contentId, 'srcVersion' => $srcVersion, 'userId' => $userId), $this->initializer56b479e4c31fa664350406);

        return $this->valueHolder56b479e4c31e9066201814->createDraftFromVersion($contentId, $srcVersion, $userId);
    }

    /**
     * {@inheritDoc}
     */
    public function load($id, $version, array $translations = null)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, 'load', array('id' => $id, 'version' => $version, 'translations' => $translations), $this->initializer56b479e4c31fa664350406);

        return $this->valueHolder56b479e4c31e9066201814->load($id, $version, $translations);
    }

    /**
     * {@inheritDoc}
     */
    public function loadContentInfo($contentId)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, 'loadContentInfo', array('contentId' => $contentId), $this->initializer56b479e4c31fa664350406);

        return $this->valueHolder56b479e4c31e9066201814->loadContentInfo($contentId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadContentInfoByRemoteId($remoteId)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, 'loadContentInfoByRemoteId', array('remoteId' => $remoteId), $this->initializer56b479e4c31fa664350406);

        return $this->valueHolder56b479e4c31e9066201814->loadContentInfoByRemoteId($remoteId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadVersionInfo($contentId, $versionNo)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, 'loadVersionInfo', array('contentId' => $contentId, 'versionNo' => $versionNo), $this->initializer56b479e4c31fa664350406);

        return $this->valueHolder56b479e4c31e9066201814->loadVersionInfo($contentId, $versionNo);
    }

    /**
     * {@inheritDoc}
     */
    public function loadDraftsForUser($userId)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, 'loadDraftsForUser', array('userId' => $userId), $this->initializer56b479e4c31fa664350406);

        return $this->valueHolder56b479e4c31e9066201814->loadDraftsForUser($userId);
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($contentId, $status, $version)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, 'setStatus', array('contentId' => $contentId, 'status' => $status, 'version' => $version), $this->initializer56b479e4c31fa664350406);

        return $this->valueHolder56b479e4c31e9066201814->setStatus($contentId, $status, $version);
    }

    /**
     * {@inheritDoc}
     */
    public function updateMetadata($contentId, \eZ\Publish\SPI\Persistence\Content\MetadataUpdateStruct $content)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, 'updateMetadata', array('contentId' => $contentId, 'content' => $content), $this->initializer56b479e4c31fa664350406);

        return $this->valueHolder56b479e4c31e9066201814->updateMetadata($contentId, $content);
    }

    /**
     * {@inheritDoc}
     */
    public function updateContent($contentId, $versionNo, \eZ\Publish\SPI\Persistence\Content\UpdateStruct $updateStruct)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, 'updateContent', array('contentId' => $contentId, 'versionNo' => $versionNo, 'updateStruct' => $updateStruct), $this->initializer56b479e4c31fa664350406);

        return $this->valueHolder56b479e4c31e9066201814->updateContent($contentId, $versionNo, $updateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteContent($contentId)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, 'deleteContent', array('contentId' => $contentId), $this->initializer56b479e4c31fa664350406);

        return $this->valueHolder56b479e4c31e9066201814->deleteContent($contentId);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRawContent($contentId)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, 'removeRawContent', array('contentId' => $contentId), $this->initializer56b479e4c31fa664350406);

        return $this->valueHolder56b479e4c31e9066201814->removeRawContent($contentId);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteVersion($contentId, $versionNo)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, 'deleteVersion', array('contentId' => $contentId, 'versionNo' => $versionNo), $this->initializer56b479e4c31fa664350406);

        return $this->valueHolder56b479e4c31e9066201814->deleteVersion($contentId, $versionNo);
    }

    /**
     * {@inheritDoc}
     */
    public function listVersions($contentId)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, 'listVersions', array('contentId' => $contentId), $this->initializer56b479e4c31fa664350406);

        return $this->valueHolder56b479e4c31e9066201814->listVersions($contentId);
    }

    /**
     * {@inheritDoc}
     */
    public function copy($contentId, $versionNo = null)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, 'copy', array('contentId' => $contentId, 'versionNo' => $versionNo), $this->initializer56b479e4c31fa664350406);

        return $this->valueHolder56b479e4c31e9066201814->copy($contentId, $versionNo);
    }

    /**
     * {@inheritDoc}
     */
    public function addRelation(\eZ\Publish\SPI\Persistence\Content\Relation\CreateStruct $createStruct)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, 'addRelation', array('createStruct' => $createStruct), $this->initializer56b479e4c31fa664350406);

        return $this->valueHolder56b479e4c31e9066201814->addRelation($createStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRelation($relationId, $type)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, 'removeRelation', array('relationId' => $relationId, 'type' => $type), $this->initializer56b479e4c31fa664350406);

        return $this->valueHolder56b479e4c31e9066201814->removeRelation($relationId, $type);
    }

    /**
     * {@inheritDoc}
     */
    public function loadRelations($sourceContentId, $sourceContentVersionNo = null, $type = null)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, 'loadRelations', array('sourceContentId' => $sourceContentId, 'sourceContentVersionNo' => $sourceContentVersionNo, 'type' => $type), $this->initializer56b479e4c31fa664350406);

        return $this->valueHolder56b479e4c31e9066201814->loadRelations($sourceContentId, $sourceContentVersionNo, $type);
    }

    /**
     * {@inheritDoc}
     */
    public function loadReverseRelations($destinationContentId, $type = null)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, 'loadReverseRelations', array('destinationContentId' => $destinationContentId, 'type' => $type), $this->initializer56b479e4c31fa664350406);

        return $this->valueHolder56b479e4c31e9066201814->loadReverseRelations($destinationContentId, $type);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e4c31fa664350406 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, '__get', array('name' => $name), $this->initializer56b479e4c31fa664350406);

        if (isset(self::$publicProperties56b479e4c31b9316340151[$name])) {
            return $this->valueHolder56b479e4c31e9066201814->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e4c31e9066201814;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e4c31e9066201814;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e4c31fa664350406);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e4c31e9066201814;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e4c31e9066201814;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, '__isset', array('name' => $name), $this->initializer56b479e4c31fa664350406);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e4c31e9066201814;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e4c31e9066201814;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, '__unset', array('name' => $name), $this->initializer56b479e4c31fa664350406);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e4c31e9066201814;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e4c31e9066201814;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, '__clone', array(), $this->initializer56b479e4c31fa664350406);

        $this->valueHolder56b479e4c31e9066201814 = clone $this->valueHolder56b479e4c31e9066201814;
    }

    public function __sleep()
    {
        $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, '__sleep', array(), $this->initializer56b479e4c31fa664350406);

        return array('valueHolder56b479e4c31e9066201814');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e4c31fa664350406 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e4c31fa664350406;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e4c31fa664350406 && $this->initializer56b479e4c31fa664350406->__invoke($this->valueHolder56b479e4c31e9066201814, $this, 'initializeProxy', array(), $this->initializer56b479e4c31fa664350406);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e4c31e9066201814;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e4c31e9066201814;
    }


}

class eZPublishCorePersistenceLegacyContentLocationHandler_0000000010d7731f00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Persistence\Legacy\Content\Location\Handler implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e4e0f1e265616330 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e4e0f2d399167653 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e4e0ef0318197578 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function load($locationId)
    {
        $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, 'load', array('locationId' => $locationId), $this->initializer56b479e4e0f2d399167653);

        return $this->valueHolder56b479e4e0f1e265616330->load($locationId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadSubtreeIds($locationId)
    {
        $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, 'loadSubtreeIds', array('locationId' => $locationId), $this->initializer56b479e4e0f2d399167653);

        return $this->valueHolder56b479e4e0f1e265616330->loadSubtreeIds($locationId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadByRemoteId($remoteId)
    {
        $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, 'loadByRemoteId', array('remoteId' => $remoteId), $this->initializer56b479e4e0f2d399167653);

        return $this->valueHolder56b479e4e0f1e265616330->loadByRemoteId($remoteId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadLocationsByContent($contentId, $rootLocationId = null)
    {
        $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, 'loadLocationsByContent', array('contentId' => $contentId, 'rootLocationId' => $rootLocationId), $this->initializer56b479e4e0f2d399167653);

        return $this->valueHolder56b479e4e0f1e265616330->loadLocationsByContent($contentId, $rootLocationId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadParentLocationsForDraftContent($contentId)
    {
        $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, 'loadParentLocationsForDraftContent', array('contentId' => $contentId), $this->initializer56b479e4e0f2d399167653);

        return $this->valueHolder56b479e4e0f1e265616330->loadParentLocationsForDraftContent($contentId);
    }

    /**
     * {@inheritDoc}
     */
    public function copySubtree($sourceId, $destinationParentId)
    {
        $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, 'copySubtree', array('sourceId' => $sourceId, 'destinationParentId' => $destinationParentId), $this->initializer56b479e4e0f2d399167653);

        return $this->valueHolder56b479e4e0f1e265616330->copySubtree($sourceId, $destinationParentId);
    }

    /**
     * {@inheritDoc}
     */
    public function move($sourceId, $destinationParentId)
    {
        $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, 'move', array('sourceId' => $sourceId, 'destinationParentId' => $destinationParentId), $this->initializer56b479e4e0f2d399167653);

        return $this->valueHolder56b479e4e0f1e265616330->move($sourceId, $destinationParentId);
    }

    /**
     * {@inheritDoc}
     */
    public function markSubtreeModified($locationId, $timestamp = null)
    {
        $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, 'markSubtreeModified', array('locationId' => $locationId, 'timestamp' => $timestamp), $this->initializer56b479e4e0f2d399167653);

        return $this->valueHolder56b479e4e0f1e265616330->markSubtreeModified($locationId, $timestamp);
    }

    /**
     * {@inheritDoc}
     */
    public function hide($id)
    {
        $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, 'hide', array('id' => $id), $this->initializer56b479e4e0f2d399167653);

        return $this->valueHolder56b479e4e0f1e265616330->hide($id);
    }

    /**
     * {@inheritDoc}
     */
    public function unHide($id)
    {
        $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, 'unHide', array('id' => $id), $this->initializer56b479e4e0f2d399167653);

        return $this->valueHolder56b479e4e0f1e265616330->unHide($id);
    }

    /**
     * {@inheritDoc}
     */
    public function swap($locationId1, $locationId2)
    {
        $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, 'swap', array('locationId1' => $locationId1, 'locationId2' => $locationId2), $this->initializer56b479e4e0f2d399167653);

        return $this->valueHolder56b479e4e0f1e265616330->swap($locationId1, $locationId2);
    }

    /**
     * {@inheritDoc}
     */
    public function update(\eZ\Publish\SPI\Persistence\Content\Location\UpdateStruct $location, $locationId)
    {
        $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, 'update', array('location' => $location, 'locationId' => $locationId), $this->initializer56b479e4e0f2d399167653);

        return $this->valueHolder56b479e4e0f1e265616330->update($location, $locationId);
    }

    /**
     * {@inheritDoc}
     */
    public function create(\eZ\Publish\SPI\Persistence\Content\Location\CreateStruct $createStruct)
    {
        $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, 'create', array('createStruct' => $createStruct), $this->initializer56b479e4e0f2d399167653);

        return $this->valueHolder56b479e4e0f1e265616330->create($createStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSubtree($locationId)
    {
        $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, 'removeSubtree', array('locationId' => $locationId), $this->initializer56b479e4e0f2d399167653);

        return $this->valueHolder56b479e4e0f1e265616330->removeSubtree($locationId);
    }

    /**
     * {@inheritDoc}
     */
    public function setSectionForSubtree($locationId, $sectionId)
    {
        $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, 'setSectionForSubtree', array('locationId' => $locationId, 'sectionId' => $sectionId), $this->initializer56b479e4e0f2d399167653);

        return $this->valueHolder56b479e4e0f1e265616330->setSectionForSubtree($locationId, $sectionId);
    }

    /**
     * {@inheritDoc}
     */
    public function changeMainLocation($contentId, $locationId)
    {
        $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, 'changeMainLocation', array('contentId' => $contentId, 'locationId' => $locationId), $this->initializer56b479e4e0f2d399167653);

        return $this->valueHolder56b479e4e0f1e265616330->changeMainLocation($contentId, $locationId);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e4e0f2d399167653 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, '__get', array('name' => $name), $this->initializer56b479e4e0f2d399167653);

        if (isset(self::$publicProperties56b479e4e0ef0318197578[$name])) {
            return $this->valueHolder56b479e4e0f1e265616330->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e4e0f1e265616330;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e4e0f1e265616330;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e4e0f2d399167653);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e4e0f1e265616330;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e4e0f1e265616330;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, '__isset', array('name' => $name), $this->initializer56b479e4e0f2d399167653);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e4e0f1e265616330;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e4e0f1e265616330;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, '__unset', array('name' => $name), $this->initializer56b479e4e0f2d399167653);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e4e0f1e265616330;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e4e0f1e265616330;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, '__clone', array(), $this->initializer56b479e4e0f2d399167653);

        $this->valueHolder56b479e4e0f1e265616330 = clone $this->valueHolder56b479e4e0f1e265616330;
    }

    public function __sleep()
    {
        $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, '__sleep', array(), $this->initializer56b479e4e0f2d399167653);

        return array('valueHolder56b479e4e0f1e265616330');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e4e0f2d399167653 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e4e0f2d399167653;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e4e0f2d399167653 && $this->initializer56b479e4e0f2d399167653->__invoke($this->valueHolder56b479e4e0f1e265616330, $this, 'initializeProxy', array(), $this->initializer56b479e4e0f2d399167653);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e4e0f1e265616330;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e4e0f1e265616330;
    }


}

class eZPublishCorePersistenceLegacyContentObjectStateHandler_0000000010d7730d00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Persistence\Legacy\Content\ObjectState\Handler implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e5028be488307423 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e5028cc005047465 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e502893385350372 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function createGroup(\eZ\Publish\SPI\Persistence\Content\ObjectState\InputStruct $input)
    {
        $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, 'createGroup', array('input' => $input), $this->initializer56b479e5028cc005047465);

        return $this->valueHolder56b479e5028be488307423->createGroup($input);
    }

    /**
     * {@inheritDoc}
     */
    public function loadGroup($groupId)
    {
        $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, 'loadGroup', array('groupId' => $groupId), $this->initializer56b479e5028cc005047465);

        return $this->valueHolder56b479e5028be488307423->loadGroup($groupId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadGroupByIdentifier($identifier)
    {
        $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, 'loadGroupByIdentifier', array('identifier' => $identifier), $this->initializer56b479e5028cc005047465);

        return $this->valueHolder56b479e5028be488307423->loadGroupByIdentifier($identifier);
    }

    /**
     * {@inheritDoc}
     */
    public function loadAllGroups($offset = 0, $limit = -1)
    {
        $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, 'loadAllGroups', array('offset' => $offset, 'limit' => $limit), $this->initializer56b479e5028cc005047465);

        return $this->valueHolder56b479e5028be488307423->loadAllGroups($offset, $limit);
    }

    /**
     * {@inheritDoc}
     */
    public function loadObjectStates($groupId)
    {
        $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, 'loadObjectStates', array('groupId' => $groupId), $this->initializer56b479e5028cc005047465);

        return $this->valueHolder56b479e5028be488307423->loadObjectStates($groupId);
    }

    /**
     * {@inheritDoc}
     */
    public function updateGroup($groupId, \eZ\Publish\SPI\Persistence\Content\ObjectState\InputStruct $input)
    {
        $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, 'updateGroup', array('groupId' => $groupId, 'input' => $input), $this->initializer56b479e5028cc005047465);

        return $this->valueHolder56b479e5028be488307423->updateGroup($groupId, $input);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteGroup($groupId)
    {
        $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, 'deleteGroup', array('groupId' => $groupId), $this->initializer56b479e5028cc005047465);

        return $this->valueHolder56b479e5028be488307423->deleteGroup($groupId);
    }

    /**
     * {@inheritDoc}
     */
    public function create($groupId, \eZ\Publish\SPI\Persistence\Content\ObjectState\InputStruct $input)
    {
        $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, 'create', array('groupId' => $groupId, 'input' => $input), $this->initializer56b479e5028cc005047465);

        return $this->valueHolder56b479e5028be488307423->create($groupId, $input);
    }

    /**
     * {@inheritDoc}
     */
    public function load($stateId)
    {
        $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, 'load', array('stateId' => $stateId), $this->initializer56b479e5028cc005047465);

        return $this->valueHolder56b479e5028be488307423->load($stateId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadByIdentifier($identifier, $groupId)
    {
        $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, 'loadByIdentifier', array('identifier' => $identifier, 'groupId' => $groupId), $this->initializer56b479e5028cc005047465);

        return $this->valueHolder56b479e5028be488307423->loadByIdentifier($identifier, $groupId);
    }

    /**
     * {@inheritDoc}
     */
    public function update($stateId, \eZ\Publish\SPI\Persistence\Content\ObjectState\InputStruct $input)
    {
        $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, 'update', array('stateId' => $stateId, 'input' => $input), $this->initializer56b479e5028cc005047465);

        return $this->valueHolder56b479e5028be488307423->update($stateId, $input);
    }

    /**
     * {@inheritDoc}
     */
    public function setPriority($stateId, $priority)
    {
        $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, 'setPriority', array('stateId' => $stateId, 'priority' => $priority), $this->initializer56b479e5028cc005047465);

        return $this->valueHolder56b479e5028be488307423->setPriority($stateId, $priority);
    }

    /**
     * {@inheritDoc}
     */
    public function delete($stateId)
    {
        $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, 'delete', array('stateId' => $stateId), $this->initializer56b479e5028cc005047465);

        return $this->valueHolder56b479e5028be488307423->delete($stateId);
    }

    /**
     * {@inheritDoc}
     */
    public function setContentState($contentId, $groupId, $stateId)
    {
        $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, 'setContentState', array('contentId' => $contentId, 'groupId' => $groupId, 'stateId' => $stateId), $this->initializer56b479e5028cc005047465);

        return $this->valueHolder56b479e5028be488307423->setContentState($contentId, $groupId, $stateId);
    }

    /**
     * {@inheritDoc}
     */
    public function getContentState($contentId, $stateGroupId)
    {
        $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, 'getContentState', array('contentId' => $contentId, 'stateGroupId' => $stateGroupId), $this->initializer56b479e5028cc005047465);

        return $this->valueHolder56b479e5028be488307423->getContentState($contentId, $stateGroupId);
    }

    /**
     * {@inheritDoc}
     */
    public function getContentCount($stateId)
    {
        $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, 'getContentCount', array('stateId' => $stateId), $this->initializer56b479e5028cc005047465);

        return $this->valueHolder56b479e5028be488307423->getContentCount($stateId);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e5028cc005047465 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, '__get', array('name' => $name), $this->initializer56b479e5028cc005047465);

        if (isset(self::$publicProperties56b479e502893385350372[$name])) {
            return $this->valueHolder56b479e5028be488307423->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5028be488307423;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e5028be488307423;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e5028cc005047465);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5028be488307423;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e5028be488307423;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, '__isset', array('name' => $name), $this->initializer56b479e5028cc005047465);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5028be488307423;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e5028be488307423;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, '__unset', array('name' => $name), $this->initializer56b479e5028cc005047465);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5028be488307423;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e5028be488307423;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, '__clone', array(), $this->initializer56b479e5028cc005047465);

        $this->valueHolder56b479e5028be488307423 = clone $this->valueHolder56b479e5028be488307423;
    }

    public function __sleep()
    {
        $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, '__sleep', array(), $this->initializer56b479e5028cc005047465);

        return array('valueHolder56b479e5028be488307423');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e5028cc005047465 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e5028cc005047465;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e5028cc005047465 && $this->initializer56b479e5028cc005047465->__invoke($this->valueHolder56b479e5028be488307423, $this, 'initializeProxy', array(), $this->initializer56b479e5028cc005047465);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e5028be488307423;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e5028be488307423;
    }


}

class eZPublishCorePersistenceLegacyContentSectionHandler_0000000010d7730700007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Persistence\Legacy\Content\Section\Handler implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e516165003651006 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e516174353031700 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e516136759366557 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function create($name, $identifier)
    {
        $this->initializer56b479e516174353031700 && $this->initializer56b479e516174353031700->__invoke($this->valueHolder56b479e516165003651006, $this, 'create', array('name' => $name, 'identifier' => $identifier), $this->initializer56b479e516174353031700);

        return $this->valueHolder56b479e516165003651006->create($name, $identifier);
    }

    /**
     * {@inheritDoc}
     */
    public function update($id, $name, $identifier)
    {
        $this->initializer56b479e516174353031700 && $this->initializer56b479e516174353031700->__invoke($this->valueHolder56b479e516165003651006, $this, 'update', array('id' => $id, 'name' => $name, 'identifier' => $identifier), $this->initializer56b479e516174353031700);

        return $this->valueHolder56b479e516165003651006->update($id, $name, $identifier);
    }

    /**
     * {@inheritDoc}
     */
    public function load($id)
    {
        $this->initializer56b479e516174353031700 && $this->initializer56b479e516174353031700->__invoke($this->valueHolder56b479e516165003651006, $this, 'load', array('id' => $id), $this->initializer56b479e516174353031700);

        return $this->valueHolder56b479e516165003651006->load($id);
    }

    /**
     * {@inheritDoc}
     */
    public function loadAll()
    {
        $this->initializer56b479e516174353031700 && $this->initializer56b479e516174353031700->__invoke($this->valueHolder56b479e516165003651006, $this, 'loadAll', array(), $this->initializer56b479e516174353031700);

        return $this->valueHolder56b479e516165003651006->loadAll();
    }

    /**
     * {@inheritDoc}
     */
    public function loadByIdentifier($identifier)
    {
        $this->initializer56b479e516174353031700 && $this->initializer56b479e516174353031700->__invoke($this->valueHolder56b479e516165003651006, $this, 'loadByIdentifier', array('identifier' => $identifier), $this->initializer56b479e516174353031700);

        return $this->valueHolder56b479e516165003651006->loadByIdentifier($identifier);
    }

    /**
     * {@inheritDoc}
     */
    public function delete($id)
    {
        $this->initializer56b479e516174353031700 && $this->initializer56b479e516174353031700->__invoke($this->valueHolder56b479e516165003651006, $this, 'delete', array('id' => $id), $this->initializer56b479e516174353031700);

        return $this->valueHolder56b479e516165003651006->delete($id);
    }

    /**
     * {@inheritDoc}
     */
    public function assign($sectionId, $contentId)
    {
        $this->initializer56b479e516174353031700 && $this->initializer56b479e516174353031700->__invoke($this->valueHolder56b479e516165003651006, $this, 'assign', array('sectionId' => $sectionId, 'contentId' => $contentId), $this->initializer56b479e516174353031700);

        return $this->valueHolder56b479e516165003651006->assign($sectionId, $contentId);
    }

    /**
     * {@inheritDoc}
     */
    public function assignmentsCount($sectionId)
    {
        $this->initializer56b479e516174353031700 && $this->initializer56b479e516174353031700->__invoke($this->valueHolder56b479e516165003651006, $this, 'assignmentsCount', array('sectionId' => $sectionId), $this->initializer56b479e516174353031700);

        return $this->valueHolder56b479e516165003651006->assignmentsCount($sectionId);
    }

    /**
     * {@inheritDoc}
     */
    public function policiesCount($sectionId)
    {
        $this->initializer56b479e516174353031700 && $this->initializer56b479e516174353031700->__invoke($this->valueHolder56b479e516165003651006, $this, 'policiesCount', array('sectionId' => $sectionId), $this->initializer56b479e516174353031700);

        return $this->valueHolder56b479e516165003651006->policiesCount($sectionId);
    }

    /**
     * {@inheritDoc}
     */
    public function countRoleAssignmentsUsingSection($sectionId)
    {
        $this->initializer56b479e516174353031700 && $this->initializer56b479e516174353031700->__invoke($this->valueHolder56b479e516165003651006, $this, 'countRoleAssignmentsUsingSection', array('sectionId' => $sectionId), $this->initializer56b479e516174353031700);

        return $this->valueHolder56b479e516165003651006->countRoleAssignmentsUsingSection($sectionId);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e516174353031700 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e516174353031700 && $this->initializer56b479e516174353031700->__invoke($this->valueHolder56b479e516165003651006, $this, '__get', array('name' => $name), $this->initializer56b479e516174353031700);

        if (isset(self::$publicProperties56b479e516136759366557[$name])) {
            return $this->valueHolder56b479e516165003651006->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e516165003651006;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e516165003651006;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e516174353031700 && $this->initializer56b479e516174353031700->__invoke($this->valueHolder56b479e516165003651006, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e516174353031700);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e516165003651006;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e516165003651006;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e516174353031700 && $this->initializer56b479e516174353031700->__invoke($this->valueHolder56b479e516165003651006, $this, '__isset', array('name' => $name), $this->initializer56b479e516174353031700);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e516165003651006;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e516165003651006;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e516174353031700 && $this->initializer56b479e516174353031700->__invoke($this->valueHolder56b479e516165003651006, $this, '__unset', array('name' => $name), $this->initializer56b479e516174353031700);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e516165003651006;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e516165003651006;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e516174353031700 && $this->initializer56b479e516174353031700->__invoke($this->valueHolder56b479e516165003651006, $this, '__clone', array(), $this->initializer56b479e516174353031700);

        $this->valueHolder56b479e516165003651006 = clone $this->valueHolder56b479e516165003651006;
    }

    public function __sleep()
    {
        $this->initializer56b479e516174353031700 && $this->initializer56b479e516174353031700->__invoke($this->valueHolder56b479e516165003651006, $this, '__sleep', array(), $this->initializer56b479e516174353031700);

        return array('valueHolder56b479e516165003651006');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e516174353031700 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e516174353031700;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e516174353031700 && $this->initializer56b479e516174353031700->__invoke($this->valueHolder56b479e516165003651006, $this, 'initializeProxy', array(), $this->initializer56b479e516174353031700);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e516165003651006;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e516165003651006;
    }


}

class eZPublishCorePersistenceLegacyContentLocationTrashHandler_0000000010d7730600007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Persistence\Legacy\Content\Location\Trash\Handler implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e5216a1749353261 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e5216af342144336 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e521677951946278 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function loadTrashItem($id)
    {
        $this->initializer56b479e5216af342144336 && $this->initializer56b479e5216af342144336->__invoke($this->valueHolder56b479e5216a1749353261, $this, 'loadTrashItem', array('id' => $id), $this->initializer56b479e5216af342144336);

        return $this->valueHolder56b479e5216a1749353261->loadTrashItem($id);
    }

    /**
     * {@inheritDoc}
     */
    public function trashSubtree($locationId)
    {
        $this->initializer56b479e5216af342144336 && $this->initializer56b479e5216af342144336->__invoke($this->valueHolder56b479e5216a1749353261, $this, 'trashSubtree', array('locationId' => $locationId), $this->initializer56b479e5216af342144336);

        return $this->valueHolder56b479e5216a1749353261->trashSubtree($locationId);
    }

    /**
     * {@inheritDoc}
     */
    public function recover($trashedId, $newParentId)
    {
        $this->initializer56b479e5216af342144336 && $this->initializer56b479e5216af342144336->__invoke($this->valueHolder56b479e5216a1749353261, $this, 'recover', array('trashedId' => $trashedId, 'newParentId' => $newParentId), $this->initializer56b479e5216af342144336);

        return $this->valueHolder56b479e5216a1749353261->recover($trashedId, $newParentId);
    }

    /**
     * {@inheritDoc}
     */
    public function findTrashItems(\eZ\Publish\API\Repository\Values\Content\Query\Criterion $criterion = null, $offset = 0, $limit = null, array $sort = null)
    {
        $this->initializer56b479e5216af342144336 && $this->initializer56b479e5216af342144336->__invoke($this->valueHolder56b479e5216a1749353261, $this, 'findTrashItems', array('criterion' => $criterion, 'offset' => $offset, 'limit' => $limit, 'sort' => $sort), $this->initializer56b479e5216af342144336);

        return $this->valueHolder56b479e5216a1749353261->findTrashItems($criterion, $offset, $limit, $sort);
    }

    /**
     * {@inheritDoc}
     */
    public function emptyTrash()
    {
        $this->initializer56b479e5216af342144336 && $this->initializer56b479e5216af342144336->__invoke($this->valueHolder56b479e5216a1749353261, $this, 'emptyTrash', array(), $this->initializer56b479e5216af342144336);

        return $this->valueHolder56b479e5216a1749353261->emptyTrash();
    }

    /**
     * {@inheritDoc}
     */
    public function deleteTrashItem($trashedId)
    {
        $this->initializer56b479e5216af342144336 && $this->initializer56b479e5216af342144336->__invoke($this->valueHolder56b479e5216a1749353261, $this, 'deleteTrashItem', array('trashedId' => $trashedId), $this->initializer56b479e5216af342144336);

        return $this->valueHolder56b479e5216a1749353261->deleteTrashItem($trashedId);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e5216af342144336 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e5216af342144336 && $this->initializer56b479e5216af342144336->__invoke($this->valueHolder56b479e5216a1749353261, $this, '__get', array('name' => $name), $this->initializer56b479e5216af342144336);

        if (isset(self::$publicProperties56b479e521677951946278[$name])) {
            return $this->valueHolder56b479e5216a1749353261->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5216a1749353261;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e5216a1749353261;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e5216af342144336 && $this->initializer56b479e5216af342144336->__invoke($this->valueHolder56b479e5216a1749353261, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e5216af342144336);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5216a1749353261;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e5216a1749353261;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e5216af342144336 && $this->initializer56b479e5216af342144336->__invoke($this->valueHolder56b479e5216a1749353261, $this, '__isset', array('name' => $name), $this->initializer56b479e5216af342144336);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5216a1749353261;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e5216a1749353261;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e5216af342144336 && $this->initializer56b479e5216af342144336->__invoke($this->valueHolder56b479e5216a1749353261, $this, '__unset', array('name' => $name), $this->initializer56b479e5216af342144336);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5216a1749353261;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e5216a1749353261;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e5216af342144336 && $this->initializer56b479e5216af342144336->__invoke($this->valueHolder56b479e5216a1749353261, $this, '__clone', array(), $this->initializer56b479e5216af342144336);

        $this->valueHolder56b479e5216a1749353261 = clone $this->valueHolder56b479e5216a1749353261;
    }

    public function __sleep()
    {
        $this->initializer56b479e5216af342144336 && $this->initializer56b479e5216af342144336->__invoke($this->valueHolder56b479e5216a1749353261, $this, '__sleep', array(), $this->initializer56b479e5216af342144336);

        return array('valueHolder56b479e5216a1749353261');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e5216af342144336 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e5216af342144336;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e5216af342144336 && $this->initializer56b479e5216af342144336->__invoke($this->valueHolder56b479e5216a1749353261, $this, 'initializeProxy', array(), $this->initializer56b479e5216af342144336);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e5216a1749353261;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e5216a1749353261;
    }


}

class eZPublishCorePersistenceLegacyContentUrlAliasHandler_0000000010d7729300007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Persistence\Legacy\Content\UrlAlias\Handler implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e528d2f409756507 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e528d3c360437942 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e528d07797006502 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function publishUrlAliasForLocation($locationId, $parentLocationId, $name, $languageCode, $alwaysAvailable = false, $updatePathIdentificationString = false)
    {
        $this->initializer56b479e528d3c360437942 && $this->initializer56b479e528d3c360437942->__invoke($this->valueHolder56b479e528d2f409756507, $this, 'publishUrlAliasForLocation', array('locationId' => $locationId, 'parentLocationId' => $parentLocationId, 'name' => $name, 'languageCode' => $languageCode, 'alwaysAvailable' => $alwaysAvailable, 'updatePathIdentificationString' => $updatePathIdentificationString), $this->initializer56b479e528d3c360437942);

        return $this->valueHolder56b479e528d2f409756507->publishUrlAliasForLocation($locationId, $parentLocationId, $name, $languageCode, $alwaysAvailable, $updatePathIdentificationString);
    }

    /**
     * {@inheritDoc}
     */
    public function createCustomUrlAlias($locationId, $path, $forwarding = false, $languageCode = null, $alwaysAvailable = false)
    {
        $this->initializer56b479e528d3c360437942 && $this->initializer56b479e528d3c360437942->__invoke($this->valueHolder56b479e528d2f409756507, $this, 'createCustomUrlAlias', array('locationId' => $locationId, 'path' => $path, 'forwarding' => $forwarding, 'languageCode' => $languageCode, 'alwaysAvailable' => $alwaysAvailable), $this->initializer56b479e528d3c360437942);

        return $this->valueHolder56b479e528d2f409756507->createCustomUrlAlias($locationId, $path, $forwarding, $languageCode, $alwaysAvailable);
    }

    /**
     * {@inheritDoc}
     */
    public function createGlobalUrlAlias($resource, $path, $forwarding = false, $languageCode = null, $alwaysAvailable = false)
    {
        $this->initializer56b479e528d3c360437942 && $this->initializer56b479e528d3c360437942->__invoke($this->valueHolder56b479e528d2f409756507, $this, 'createGlobalUrlAlias', array('resource' => $resource, 'path' => $path, 'forwarding' => $forwarding, 'languageCode' => $languageCode, 'alwaysAvailable' => $alwaysAvailable), $this->initializer56b479e528d3c360437942);

        return $this->valueHolder56b479e528d2f409756507->createGlobalUrlAlias($resource, $path, $forwarding, $languageCode, $alwaysAvailable);
    }

    /**
     * {@inheritDoc}
     */
    public function listURLAliasesForLocation($locationId, $custom = false)
    {
        $this->initializer56b479e528d3c360437942 && $this->initializer56b479e528d3c360437942->__invoke($this->valueHolder56b479e528d2f409756507, $this, 'listURLAliasesForLocation', array('locationId' => $locationId, 'custom' => $custom), $this->initializer56b479e528d3c360437942);

        return $this->valueHolder56b479e528d2f409756507->listURLAliasesForLocation($locationId, $custom);
    }

    /**
     * {@inheritDoc}
     */
    public function listGlobalURLAliases($languageCode = null, $offset = 0, $limit = -1)
    {
        $this->initializer56b479e528d3c360437942 && $this->initializer56b479e528d3c360437942->__invoke($this->valueHolder56b479e528d2f409756507, $this, 'listGlobalURLAliases', array('languageCode' => $languageCode, 'offset' => $offset, 'limit' => $limit), $this->initializer56b479e528d3c360437942);

        return $this->valueHolder56b479e528d2f409756507->listGlobalURLAliases($languageCode, $offset, $limit);
    }

    /**
     * {@inheritDoc}
     */
    public function removeURLAliases(array $urlAliases)
    {
        $this->initializer56b479e528d3c360437942 && $this->initializer56b479e528d3c360437942->__invoke($this->valueHolder56b479e528d2f409756507, $this, 'removeURLAliases', array('urlAliases' => $urlAliases), $this->initializer56b479e528d3c360437942);

        return $this->valueHolder56b479e528d2f409756507->removeURLAliases($urlAliases);
    }

    /**
     * {@inheritDoc}
     */
    public function lookup($url)
    {
        $this->initializer56b479e528d3c360437942 && $this->initializer56b479e528d3c360437942->__invoke($this->valueHolder56b479e528d2f409756507, $this, 'lookup', array('url' => $url), $this->initializer56b479e528d3c360437942);

        return $this->valueHolder56b479e528d2f409756507->lookup($url);
    }

    /**
     * {@inheritDoc}
     */
    public function loadUrlAlias($id)
    {
        $this->initializer56b479e528d3c360437942 && $this->initializer56b479e528d3c360437942->__invoke($this->valueHolder56b479e528d2f409756507, $this, 'loadUrlAlias', array('id' => $id), $this->initializer56b479e528d3c360437942);

        return $this->valueHolder56b479e528d2f409756507->loadUrlAlias($id);
    }

    /**
     * {@inheritDoc}
     */
    public function locationMoved($locationId, $oldParentId, $newParentId)
    {
        $this->initializer56b479e528d3c360437942 && $this->initializer56b479e528d3c360437942->__invoke($this->valueHolder56b479e528d2f409756507, $this, 'locationMoved', array('locationId' => $locationId, 'oldParentId' => $oldParentId, 'newParentId' => $newParentId), $this->initializer56b479e528d3c360437942);

        return $this->valueHolder56b479e528d2f409756507->locationMoved($locationId, $oldParentId, $newParentId);
    }

    /**
     * {@inheritDoc}
     */
    public function locationCopied($locationId, $newLocationId, $newParentId)
    {
        $this->initializer56b479e528d3c360437942 && $this->initializer56b479e528d3c360437942->__invoke($this->valueHolder56b479e528d2f409756507, $this, 'locationCopied', array('locationId' => $locationId, 'newLocationId' => $newLocationId, 'newParentId' => $newParentId), $this->initializer56b479e528d3c360437942);

        return $this->valueHolder56b479e528d2f409756507->locationCopied($locationId, $newLocationId, $newParentId);
    }

    /**
     * {@inheritDoc}
     */
    public function locationDeleted($locationId)
    {
        $this->initializer56b479e528d3c360437942 && $this->initializer56b479e528d3c360437942->__invoke($this->valueHolder56b479e528d2f409756507, $this, 'locationDeleted', array('locationId' => $locationId), $this->initializer56b479e528d3c360437942);

        return $this->valueHolder56b479e528d2f409756507->locationDeleted($locationId);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e528d3c360437942 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e528d3c360437942 && $this->initializer56b479e528d3c360437942->__invoke($this->valueHolder56b479e528d2f409756507, $this, '__get', array('name' => $name), $this->initializer56b479e528d3c360437942);

        if (isset(self::$publicProperties56b479e528d07797006502[$name])) {
            return $this->valueHolder56b479e528d2f409756507->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e528d2f409756507;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e528d2f409756507;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e528d3c360437942 && $this->initializer56b479e528d3c360437942->__invoke($this->valueHolder56b479e528d2f409756507, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e528d3c360437942);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e528d2f409756507;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e528d2f409756507;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e528d3c360437942 && $this->initializer56b479e528d3c360437942->__invoke($this->valueHolder56b479e528d2f409756507, $this, '__isset', array('name' => $name), $this->initializer56b479e528d3c360437942);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e528d2f409756507;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e528d2f409756507;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e528d3c360437942 && $this->initializer56b479e528d3c360437942->__invoke($this->valueHolder56b479e528d2f409756507, $this, '__unset', array('name' => $name), $this->initializer56b479e528d3c360437942);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e528d2f409756507;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e528d2f409756507;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e528d3c360437942 && $this->initializer56b479e528d3c360437942->__invoke($this->valueHolder56b479e528d2f409756507, $this, '__clone', array(), $this->initializer56b479e528d3c360437942);

        $this->valueHolder56b479e528d2f409756507 = clone $this->valueHolder56b479e528d2f409756507;
    }

    public function __sleep()
    {
        $this->initializer56b479e528d3c360437942 && $this->initializer56b479e528d3c360437942->__invoke($this->valueHolder56b479e528d2f409756507, $this, '__sleep', array(), $this->initializer56b479e528d3c360437942);

        return array('valueHolder56b479e528d2f409756507');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e528d3c360437942 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e528d3c360437942;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e528d3c360437942 && $this->initializer56b479e528d3c360437942->__invoke($this->valueHolder56b479e528d2f409756507, $this, 'initializeProxy', array(), $this->initializer56b479e528d3c360437942);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e528d2f409756507;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e528d2f409756507;
    }


}

class eZPublishCorePersistenceLegacyContentUrlWildcardHandler_0000000010d772f800007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Persistence\Legacy\Content\UrlWildcard\Handler implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e539750659393388 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e53975f055204486 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e539724366740802 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function create($sourceUrl, $destinationUrl, $forward = false)
    {
        $this->initializer56b479e53975f055204486 && $this->initializer56b479e53975f055204486->__invoke($this->valueHolder56b479e539750659393388, $this, 'create', array('sourceUrl' => $sourceUrl, 'destinationUrl' => $destinationUrl, 'forward' => $forward), $this->initializer56b479e53975f055204486);

        return $this->valueHolder56b479e539750659393388->create($sourceUrl, $destinationUrl, $forward);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($id)
    {
        $this->initializer56b479e53975f055204486 && $this->initializer56b479e53975f055204486->__invoke($this->valueHolder56b479e539750659393388, $this, 'remove', array('id' => $id), $this->initializer56b479e53975f055204486);

        return $this->valueHolder56b479e539750659393388->remove($id);
    }

    /**
     * {@inheritDoc}
     */
    public function load($id)
    {
        $this->initializer56b479e53975f055204486 && $this->initializer56b479e53975f055204486->__invoke($this->valueHolder56b479e539750659393388, $this, 'load', array('id' => $id), $this->initializer56b479e53975f055204486);

        return $this->valueHolder56b479e539750659393388->load($id);
    }

    /**
     * {@inheritDoc}
     */
    public function loadAll($offset = 0, $limit = -1)
    {
        $this->initializer56b479e53975f055204486 && $this->initializer56b479e53975f055204486->__invoke($this->valueHolder56b479e539750659393388, $this, 'loadAll', array('offset' => $offset, 'limit' => $limit), $this->initializer56b479e53975f055204486);

        return $this->valueHolder56b479e539750659393388->loadAll($offset, $limit);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e53975f055204486 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e53975f055204486 && $this->initializer56b479e53975f055204486->__invoke($this->valueHolder56b479e539750659393388, $this, '__get', array('name' => $name), $this->initializer56b479e53975f055204486);

        if (isset(self::$publicProperties56b479e539724366740802[$name])) {
            return $this->valueHolder56b479e539750659393388->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e539750659393388;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e539750659393388;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e53975f055204486 && $this->initializer56b479e53975f055204486->__invoke($this->valueHolder56b479e539750659393388, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e53975f055204486);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e539750659393388;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e539750659393388;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e53975f055204486 && $this->initializer56b479e53975f055204486->__invoke($this->valueHolder56b479e539750659393388, $this, '__isset', array('name' => $name), $this->initializer56b479e53975f055204486);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e539750659393388;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e539750659393388;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e53975f055204486 && $this->initializer56b479e53975f055204486->__invoke($this->valueHolder56b479e539750659393388, $this, '__unset', array('name' => $name), $this->initializer56b479e53975f055204486);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e539750659393388;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e539750659393388;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e53975f055204486 && $this->initializer56b479e53975f055204486->__invoke($this->valueHolder56b479e539750659393388, $this, '__clone', array(), $this->initializer56b479e53975f055204486);

        $this->valueHolder56b479e539750659393388 = clone $this->valueHolder56b479e539750659393388;
    }

    public function __sleep()
    {
        $this->initializer56b479e53975f055204486 && $this->initializer56b479e53975f055204486->__invoke($this->valueHolder56b479e539750659393388, $this, '__sleep', array(), $this->initializer56b479e53975f055204486);

        return array('valueHolder56b479e539750659393388');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e53975f055204486 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e53975f055204486;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e53975f055204486 && $this->initializer56b479e53975f055204486->__invoke($this->valueHolder56b479e539750659393388, $this, 'initializeProxy', array(), $this->initializer56b479e53975f055204486);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e539750659393388;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e539750659393388;
    }


}

class eZPublishCorePersistenceLegacyUserHandler_0000000010d772d800007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Persistence\Legacy\User\Handler implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e53e8d7954325087 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e53e8e4503609044 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e53e8af945821427 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function create(\eZ\Publish\SPI\Persistence\User $user)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'create', array('user' => $user), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->create($user);
    }

    /**
     * {@inheritDoc}
     */
    public function load($userId)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'load', array('userId' => $userId), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->load($userId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadByLogin($login)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'loadByLogin', array('login' => $login), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->loadByLogin($login);
    }

    /**
     * {@inheritDoc}
     */
    public function loadByEmail($email)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'loadByEmail', array('email' => $email), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->loadByEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function update(\eZ\Publish\SPI\Persistence\User $user)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'update', array('user' => $user), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->update($user);
    }

    /**
     * {@inheritDoc}
     */
    public function delete($userId)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'delete', array('userId' => $userId), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->delete($userId);
    }

    /**
     * {@inheritDoc}
     */
    public function createRole(\eZ\Publish\SPI\Persistence\User\RoleCreateStruct $createStruct)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'createRole', array('createStruct' => $createStruct), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->createRole($createStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function createRoleDraft($roleId)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'createRoleDraft', array('roleId' => $roleId), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->createRoleDraft($roleId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadRole($roleId, $status = 0)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'loadRole', array('roleId' => $roleId, 'status' => $status), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->loadRole($roleId, $status);
    }

    /**
     * {@inheritDoc}
     */
    public function loadRoleByIdentifier($identifier, $status = 0)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'loadRoleByIdentifier', array('identifier' => $identifier, 'status' => $status), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->loadRoleByIdentifier($identifier, $status);
    }

    /**
     * {@inheritDoc}
     */
    public function loadRoleDraftByRoleId($roleId)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'loadRoleDraftByRoleId', array('roleId' => $roleId), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->loadRoleDraftByRoleId($roleId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadRoles()
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'loadRoles', array(), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->loadRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function updateRole(\eZ\Publish\SPI\Persistence\User\RoleUpdateStruct $role)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'updateRole', array('role' => $role), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->updateRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteRole($roleId, $status = 0)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'deleteRole', array('roleId' => $roleId, 'status' => $status), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->deleteRole($roleId, $status);
    }

    /**
     * {@inheritDoc}
     */
    public function publishRoleDraft($roleDraftId)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'publishRoleDraft', array('roleDraftId' => $roleDraftId), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->publishRoleDraft($roleDraftId);
    }

    /**
     * {@inheritDoc}
     */
    public function addPolicyByRoleDraft($roleId, \eZ\Publish\SPI\Persistence\User\Policy $policy)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'addPolicyByRoleDraft', array('roleId' => $roleId, 'policy' => $policy), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->addPolicyByRoleDraft($roleId, $policy);
    }

    /**
     * {@inheritDoc}
     */
    public function addPolicy($roleId, \eZ\Publish\SPI\Persistence\User\Policy $policy)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'addPolicy', array('roleId' => $roleId, 'policy' => $policy), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->addPolicy($roleId, $policy);
    }

    /**
     * {@inheritDoc}
     */
    public function updatePolicy(\eZ\Publish\SPI\Persistence\User\Policy $policy)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'updatePolicy', array('policy' => $policy), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->updatePolicy($policy);
    }

    /**
     * {@inheritDoc}
     */
    public function deletePolicy($policyId)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'deletePolicy', array('policyId' => $policyId), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->deletePolicy($policyId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadPoliciesByUserId($userId)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'loadPoliciesByUserId', array('userId' => $userId), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->loadPoliciesByUserId($userId);
    }

    /**
     * {@inheritDoc}
     */
    public function assignRole($contentId, $roleId, array $limitation = null)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'assignRole', array('contentId' => $contentId, 'roleId' => $roleId, 'limitation' => $limitation), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->assignRole($contentId, $roleId, $limitation);
    }

    /**
     * {@inheritDoc}
     */
    public function unassignRole($contentId, $roleId)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'unassignRole', array('contentId' => $contentId, 'roleId' => $roleId), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->unassignRole($contentId, $roleId);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRoleAssignment($roleAssignmentId)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'removeRoleAssignment', array('roleAssignmentId' => $roleAssignmentId), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->removeRoleAssignment($roleAssignmentId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadRoleAssignment($roleAssignmentId)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'loadRoleAssignment', array('roleAssignmentId' => $roleAssignmentId), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->loadRoleAssignment($roleAssignmentId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadRoleAssignmentsByRoleId($roleId)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'loadRoleAssignmentsByRoleId', array('roleId' => $roleId), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->loadRoleAssignmentsByRoleId($roleId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadRoleAssignmentsByGroupId($groupId, $inherit = false)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'loadRoleAssignmentsByGroupId', array('groupId' => $groupId, 'inherit' => $inherit), $this->initializer56b479e53e8e4503609044);

        return $this->valueHolder56b479e53e8d7954325087->loadRoleAssignmentsByGroupId($groupId, $inherit);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e53e8e4503609044 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, '__get', array('name' => $name), $this->initializer56b479e53e8e4503609044);

        if (isset(self::$publicProperties56b479e53e8af945821427[$name])) {
            return $this->valueHolder56b479e53e8d7954325087->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e53e8d7954325087;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e53e8d7954325087;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e53e8e4503609044);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e53e8d7954325087;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e53e8d7954325087;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, '__isset', array('name' => $name), $this->initializer56b479e53e8e4503609044);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e53e8d7954325087;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e53e8d7954325087;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, '__unset', array('name' => $name), $this->initializer56b479e53e8e4503609044);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e53e8d7954325087;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e53e8d7954325087;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, '__clone', array(), $this->initializer56b479e53e8e4503609044);

        $this->valueHolder56b479e53e8d7954325087 = clone $this->valueHolder56b479e53e8d7954325087;
    }

    public function __sleep()
    {
        $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, '__sleep', array(), $this->initializer56b479e53e8e4503609044);

        return array('valueHolder56b479e53e8d7954325087');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e53e8e4503609044 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e53e8e4503609044;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e53e8e4503609044 && $this->initializer56b479e53e8e4503609044->__invoke($this->valueHolder56b479e53e8d7954325087, $this, 'initializeProxy', array(), $this->initializer56b479e53e8e4503609044);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e53e8d7954325087;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e53e8d7954325087;
    }


}

class eZPublishCorePersistenceLegacyHandler_0000000010d772dd00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Persistence\Legacy\Handler implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e55ff32921615886 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e55ff42276069332 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e55feff219125637 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function contentHandler()
    {
        $this->initializer56b479e55ff42276069332 && $this->initializer56b479e55ff42276069332->__invoke($this->valueHolder56b479e55ff32921615886, $this, 'contentHandler', array(), $this->initializer56b479e55ff42276069332);

        return $this->valueHolder56b479e55ff32921615886->contentHandler();
    }

    /**
     * {@inheritDoc}
     */
    public function contentTypeHandler()
    {
        $this->initializer56b479e55ff42276069332 && $this->initializer56b479e55ff42276069332->__invoke($this->valueHolder56b479e55ff32921615886, $this, 'contentTypeHandler', array(), $this->initializer56b479e55ff42276069332);

        return $this->valueHolder56b479e55ff32921615886->contentTypeHandler();
    }

    /**
     * {@inheritDoc}
     */
    public function contentLanguageHandler()
    {
        $this->initializer56b479e55ff42276069332 && $this->initializer56b479e55ff42276069332->__invoke($this->valueHolder56b479e55ff32921615886, $this, 'contentLanguageHandler', array(), $this->initializer56b479e55ff42276069332);

        return $this->valueHolder56b479e55ff32921615886->contentLanguageHandler();
    }

    /**
     * {@inheritDoc}
     */
    public function locationHandler()
    {
        $this->initializer56b479e55ff42276069332 && $this->initializer56b479e55ff42276069332->__invoke($this->valueHolder56b479e55ff32921615886, $this, 'locationHandler', array(), $this->initializer56b479e55ff42276069332);

        return $this->valueHolder56b479e55ff32921615886->locationHandler();
    }

    /**
     * {@inheritDoc}
     */
    public function objectStateHandler()
    {
        $this->initializer56b479e55ff42276069332 && $this->initializer56b479e55ff42276069332->__invoke($this->valueHolder56b479e55ff32921615886, $this, 'objectStateHandler', array(), $this->initializer56b479e55ff42276069332);

        return $this->valueHolder56b479e55ff32921615886->objectStateHandler();
    }

    /**
     * {@inheritDoc}
     */
    public function sectionHandler()
    {
        $this->initializer56b479e55ff42276069332 && $this->initializer56b479e55ff42276069332->__invoke($this->valueHolder56b479e55ff32921615886, $this, 'sectionHandler', array(), $this->initializer56b479e55ff42276069332);

        return $this->valueHolder56b479e55ff32921615886->sectionHandler();
    }

    /**
     * {@inheritDoc}
     */
    public function trashHandler()
    {
        $this->initializer56b479e55ff42276069332 && $this->initializer56b479e55ff42276069332->__invoke($this->valueHolder56b479e55ff32921615886, $this, 'trashHandler', array(), $this->initializer56b479e55ff42276069332);

        return $this->valueHolder56b479e55ff32921615886->trashHandler();
    }

    /**
     * {@inheritDoc}
     */
    public function urlAliasHandler()
    {
        $this->initializer56b479e55ff42276069332 && $this->initializer56b479e55ff42276069332->__invoke($this->valueHolder56b479e55ff32921615886, $this, 'urlAliasHandler', array(), $this->initializer56b479e55ff42276069332);

        return $this->valueHolder56b479e55ff32921615886->urlAliasHandler();
    }

    /**
     * {@inheritDoc}
     */
    public function urlWildcardHandler()
    {
        $this->initializer56b479e55ff42276069332 && $this->initializer56b479e55ff42276069332->__invoke($this->valueHolder56b479e55ff32921615886, $this, 'urlWildcardHandler', array(), $this->initializer56b479e55ff42276069332);

        return $this->valueHolder56b479e55ff32921615886->urlWildcardHandler();
    }

    /**
     * {@inheritDoc}
     */
    public function userHandler()
    {
        $this->initializer56b479e55ff42276069332 && $this->initializer56b479e55ff42276069332->__invoke($this->valueHolder56b479e55ff32921615886, $this, 'userHandler', array(), $this->initializer56b479e55ff42276069332);

        return $this->valueHolder56b479e55ff32921615886->userHandler();
    }

    /**
     * {@inheritDoc}
     */
    public function transactionHandler()
    {
        $this->initializer56b479e55ff42276069332 && $this->initializer56b479e55ff42276069332->__invoke($this->valueHolder56b479e55ff32921615886, $this, 'transactionHandler', array(), $this->initializer56b479e55ff42276069332);

        return $this->valueHolder56b479e55ff32921615886->transactionHandler();
    }

    /**
     * {@inheritDoc}
     */
    public function beginTransaction()
    {
        $this->initializer56b479e55ff42276069332 && $this->initializer56b479e55ff42276069332->__invoke($this->valueHolder56b479e55ff32921615886, $this, 'beginTransaction', array(), $this->initializer56b479e55ff42276069332);

        return $this->valueHolder56b479e55ff32921615886->beginTransaction();
    }

    /**
     * {@inheritDoc}
     */
    public function commit()
    {
        $this->initializer56b479e55ff42276069332 && $this->initializer56b479e55ff42276069332->__invoke($this->valueHolder56b479e55ff32921615886, $this, 'commit', array(), $this->initializer56b479e55ff42276069332);

        return $this->valueHolder56b479e55ff32921615886->commit();
    }

    /**
     * {@inheritDoc}
     */
    public function rollback()
    {
        $this->initializer56b479e55ff42276069332 && $this->initializer56b479e55ff42276069332->__invoke($this->valueHolder56b479e55ff32921615886, $this, 'rollback', array(), $this->initializer56b479e55ff42276069332);

        return $this->valueHolder56b479e55ff32921615886->rollback();
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e55ff42276069332 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e55ff42276069332 && $this->initializer56b479e55ff42276069332->__invoke($this->valueHolder56b479e55ff32921615886, $this, '__get', array('name' => $name), $this->initializer56b479e55ff42276069332);

        if (isset(self::$publicProperties56b479e55feff219125637[$name])) {
            return $this->valueHolder56b479e55ff32921615886->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e55ff32921615886;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e55ff32921615886;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e55ff42276069332 && $this->initializer56b479e55ff42276069332->__invoke($this->valueHolder56b479e55ff32921615886, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e55ff42276069332);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e55ff32921615886;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e55ff32921615886;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e55ff42276069332 && $this->initializer56b479e55ff42276069332->__invoke($this->valueHolder56b479e55ff32921615886, $this, '__isset', array('name' => $name), $this->initializer56b479e55ff42276069332);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e55ff32921615886;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e55ff32921615886;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e55ff42276069332 && $this->initializer56b479e55ff42276069332->__invoke($this->valueHolder56b479e55ff32921615886, $this, '__unset', array('name' => $name), $this->initializer56b479e55ff42276069332);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e55ff32921615886;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e55ff32921615886;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e55ff42276069332 && $this->initializer56b479e55ff42276069332->__invoke($this->valueHolder56b479e55ff32921615886, $this, '__clone', array(), $this->initializer56b479e55ff42276069332);

        $this->valueHolder56b479e55ff32921615886 = clone $this->valueHolder56b479e55ff32921615886;
    }

    public function __sleep()
    {
        $this->initializer56b479e55ff42276069332 && $this->initializer56b479e55ff42276069332->__invoke($this->valueHolder56b479e55ff32921615886, $this, '__sleep', array(), $this->initializer56b479e55ff42276069332);

        return array('valueHolder56b479e55ff32921615886');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e55ff42276069332 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e55ff42276069332;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e55ff42276069332 && $this->initializer56b479e55ff42276069332->__invoke($this->valueHolder56b479e55ff32921615886, $this, 'initializeProxy', array(), $this->initializer56b479e55ff42276069332);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e55ff32921615886;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e55ff32921615886;
    }


}

class eZPublishCorePersistenceDoctrineConnectionHandler_0000000010d772cb00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Persistence\Doctrine\ConnectionHandler implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e56b4f2749050181 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e56b500979139270 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e56b4c6993386046 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function getConnection()
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, 'getConnection', array(), $this->initializer56b479e56b500979139270);

        return $this->valueHolder56b479e56b4f2749050181->getConnection();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, 'getName', array(), $this->initializer56b479e56b500979139270);

        return $this->valueHolder56b479e56b4f2749050181->getName();
    }

    /**
     * {@inheritDoc}
     */
    public function beginTransaction()
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, 'beginTransaction', array(), $this->initializer56b479e56b500979139270);

        return $this->valueHolder56b479e56b4f2749050181->beginTransaction();
    }

    /**
     * {@inheritDoc}
     */
    public function commit()
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, 'commit', array(), $this->initializer56b479e56b500979139270);

        return $this->valueHolder56b479e56b4f2749050181->commit();
    }

    /**
     * {@inheritDoc}
     */
    public function rollBack()
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, 'rollBack', array(), $this->initializer56b479e56b500979139270);

        return $this->valueHolder56b479e56b4f2749050181->rollBack();
    }

    /**
     * {@inheritDoc}
     */
    public function prepare($query)
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, 'prepare', array('query' => $query), $this->initializer56b479e56b500979139270);

        return $this->valueHolder56b479e56b4f2749050181->prepare($query);
    }

    /**
     * {@inheritDoc}
     */
    public function lastInsertId($sequenceName = null)
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, 'lastInsertId', array('sequenceName' => $sequenceName), $this->initializer56b479e56b500979139270);

        return $this->valueHolder56b479e56b4f2749050181->lastInsertId($sequenceName);
    }

    /**
     * {@inheritDoc}
     */
    public function useSequences()
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, 'useSequences', array(), $this->initializer56b479e56b500979139270);

        return $this->valueHolder56b479e56b4f2749050181->useSequences();
    }

    /**
     * {@inheritDoc}
     */
    public function exec($query)
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, 'exec', array('query' => $query), $this->initializer56b479e56b500979139270);

        return $this->valueHolder56b479e56b4f2749050181->exec($query);
    }

    /**
     * {@inheritDoc}
     */
    public function createSelectQuery()
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, 'createSelectQuery', array(), $this->initializer56b479e56b500979139270);

        return $this->valueHolder56b479e56b4f2749050181->createSelectQuery();
    }

    /**
     * {@inheritDoc}
     */
    public function createInsertQuery()
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, 'createInsertQuery', array(), $this->initializer56b479e56b500979139270);

        return $this->valueHolder56b479e56b4f2749050181->createInsertQuery();
    }

    /**
     * {@inheritDoc}
     */
    public function createUpdateQuery()
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, 'createUpdateQuery', array(), $this->initializer56b479e56b500979139270);

        return $this->valueHolder56b479e56b4f2749050181->createUpdateQuery();
    }

    /**
     * {@inheritDoc}
     */
    public function createDeleteQuery()
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, 'createDeleteQuery', array(), $this->initializer56b479e56b500979139270);

        return $this->valueHolder56b479e56b4f2749050181->createDeleteQuery();
    }

    /**
     * {@inheritDoc}
     */
    public function aliasedColumn($query, $columnName, $tableName = null)
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, 'aliasedColumn', array('query' => $query, 'columnName' => $columnName, 'tableName' => $tableName), $this->initializer56b479e56b500979139270);

        return $this->valueHolder56b479e56b4f2749050181->aliasedColumn($query, $columnName, $tableName);
    }

    /**
     * {@inheritDoc}
     */
    public function quoteColumn($columnName, $tableName = null)
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, 'quoteColumn', array('columnName' => $columnName, 'tableName' => $tableName), $this->initializer56b479e56b500979139270);

        return $this->valueHolder56b479e56b4f2749050181->quoteColumn($columnName, $tableName);
    }

    /**
     * {@inheritDoc}
     */
    public function quoteTable($tableName)
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, 'quoteTable', array('tableName' => $tableName), $this->initializer56b479e56b500979139270);

        return $this->valueHolder56b479e56b4f2749050181->quoteTable($tableName);
    }

    /**
     * {@inheritDoc}
     */
    public function alias($name, $alias)
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, 'alias', array('name' => $name, 'alias' => $alias), $this->initializer56b479e56b500979139270);

        return $this->valueHolder56b479e56b4f2749050181->alias($name, $alias);
    }

    /**
     * {@inheritDoc}
     */
    public function quoteIdentifier($identifier)
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, 'quoteIdentifier', array('identifier' => $identifier), $this->initializer56b479e56b500979139270);

        return $this->valueHolder56b479e56b4f2749050181->quoteIdentifier($identifier);
    }

    /**
     * {@inheritDoc}
     */
    public function getAutoIncrementValue($table, $column)
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, 'getAutoIncrementValue', array('table' => $table, 'column' => $column), $this->initializer56b479e56b500979139270);

        return $this->valueHolder56b479e56b4f2749050181->getAutoIncrementValue($table, $column);
    }

    /**
     * {@inheritDoc}
     */
    public function getSequenceName($table, $column)
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, 'getSequenceName', array('table' => $table, 'column' => $column), $this->initializer56b479e56b500979139270);

        return $this->valueHolder56b479e56b4f2749050181->getSequenceName($table, $column);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e56b500979139270 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, '__get', array('name' => $name), $this->initializer56b479e56b500979139270);

        if (isset(self::$publicProperties56b479e56b4c6993386046[$name])) {
            return $this->valueHolder56b479e56b4f2749050181->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e56b4f2749050181;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e56b4f2749050181;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e56b500979139270);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e56b4f2749050181;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e56b4f2749050181;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, '__isset', array('name' => $name), $this->initializer56b479e56b500979139270);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e56b4f2749050181;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e56b4f2749050181;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, '__unset', array('name' => $name), $this->initializer56b479e56b500979139270);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e56b4f2749050181;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e56b4f2749050181;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, '__clone', array(), $this->initializer56b479e56b500979139270);

        $this->valueHolder56b479e56b4f2749050181 = clone $this->valueHolder56b479e56b4f2749050181;
    }

    public function __sleep()
    {
        $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, '__sleep', array(), $this->initializer56b479e56b500979139270);

        return array('valueHolder56b479e56b4f2749050181');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e56b500979139270 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e56b500979139270;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e56b500979139270 && $this->initializer56b479e56b500979139270->__invoke($this->valueHolder56b479e56b4f2749050181, $this, 'initializeProxy', array(), $this->initializer56b479e56b500979139270);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e56b4f2749050181;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e56b4f2749050181;
    }


}

class eZPublishCoreIOTolerantIOService_0000000010d7735500007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\IO\TolerantIOService implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e57f56b021700484 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e57f578891123661 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e57f543920361888 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function setLogger(\Psr\Log\LoggerInterface $logger = null)
    {
        $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, 'setLogger', array('logger' => $logger), $this->initializer56b479e57f578891123661);

        return $this->valueHolder56b479e57f56b021700484->setLogger($logger);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteBinaryFile(\eZ\Publish\Core\IO\Values\BinaryFile $binaryFile)
    {
        $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, 'deleteBinaryFile', array('binaryFile' => $binaryFile), $this->initializer56b479e57f578891123661);

        return $this->valueHolder56b479e57f56b021700484->deleteBinaryFile($binaryFile);
    }

    /**
     * {@inheritDoc}
     */
    public function loadBinaryFile($binaryFileId)
    {
        $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, 'loadBinaryFile', array('binaryFileId' => $binaryFileId), $this->initializer56b479e57f578891123661);

        return $this->valueHolder56b479e57f56b021700484->loadBinaryFile($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadBinaryFileByUri($binaryFileUri)
    {
        $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, 'loadBinaryFileByUri', array('binaryFileUri' => $binaryFileUri), $this->initializer56b479e57f578891123661);

        return $this->valueHolder56b479e57f56b021700484->loadBinaryFileByUri($binaryFileUri);
    }

    /**
     * {@inheritDoc}
     */
    public function setPrefix($prefix)
    {
        $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, 'setPrefix', array('prefix' => $prefix), $this->initializer56b479e57f578891123661);

        return $this->valueHolder56b479e57f56b021700484->setPrefix($prefix);
    }

    /**
     * {@inheritDoc}
     */
    public function newBinaryCreateStructFromUploadedFile(array $uploadedFile)
    {
        $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, 'newBinaryCreateStructFromUploadedFile', array('uploadedFile' => $uploadedFile), $this->initializer56b479e57f578891123661);

        return $this->valueHolder56b479e57f56b021700484->newBinaryCreateStructFromUploadedFile($uploadedFile);
    }

    /**
     * {@inheritDoc}
     */
    public function newBinaryCreateStructFromLocalFile($localFile)
    {
        $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, 'newBinaryCreateStructFromLocalFile', array('localFile' => $localFile), $this->initializer56b479e57f578891123661);

        return $this->valueHolder56b479e57f56b021700484->newBinaryCreateStructFromLocalFile($localFile);
    }

    /**
     * {@inheritDoc}
     */
    public function createBinaryFile(\eZ\Publish\Core\IO\Values\BinaryFileCreateStruct $binaryFileCreateStruct)
    {
        $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, 'createBinaryFile', array('binaryFileCreateStruct' => $binaryFileCreateStruct), $this->initializer56b479e57f578891123661);

        return $this->valueHolder56b479e57f56b021700484->createBinaryFile($binaryFileCreateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileInputStream(\eZ\Publish\Core\IO\Values\BinaryFile $binaryFile)
    {
        $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, 'getFileInputStream', array('binaryFile' => $binaryFile), $this->initializer56b479e57f578891123661);

        return $this->valueHolder56b479e57f56b021700484->getFileInputStream($binaryFile);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileContents(\eZ\Publish\Core\IO\Values\BinaryFile $binaryFile)
    {
        $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, 'getFileContents', array('binaryFile' => $binaryFile), $this->initializer56b479e57f578891123661);

        return $this->valueHolder56b479e57f56b021700484->getFileContents($binaryFile);
    }

    /**
     * {@inheritDoc}
     */
    public function getInternalPath($binaryFileId)
    {
        $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, 'getInternalPath', array('binaryFileId' => $binaryFileId), $this->initializer56b479e57f578891123661);

        return $this->valueHolder56b479e57f56b021700484->getInternalPath($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function getExternalPath($internalId)
    {
        $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, 'getExternalPath', array('internalId' => $internalId), $this->initializer56b479e57f578891123661);

        return $this->valueHolder56b479e57f56b021700484->getExternalPath($internalId);
    }

    /**
     * {@inheritDoc}
     */
    public function getUri($binaryFileId)
    {
        $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, 'getUri', array('binaryFileId' => $binaryFileId), $this->initializer56b479e57f578891123661);

        return $this->valueHolder56b479e57f56b021700484->getUri($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function getMimeType($binaryFileId)
    {
        $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, 'getMimeType', array('binaryFileId' => $binaryFileId), $this->initializer56b479e57f578891123661);

        return $this->valueHolder56b479e57f56b021700484->getMimeType($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function exists($binaryFileId)
    {
        $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, 'exists', array('binaryFileId' => $binaryFileId), $this->initializer56b479e57f578891123661);

        return $this->valueHolder56b479e57f56b021700484->exists($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteDirectory($path)
    {
        $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, 'deleteDirectory', array('path' => $path), $this->initializer56b479e57f578891123661);

        return $this->valueHolder56b479e57f56b021700484->deleteDirectory($path);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e57f578891123661 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, '__get', array('name' => $name), $this->initializer56b479e57f578891123661);

        if (isset(self::$publicProperties56b479e57f543920361888[$name])) {
            return $this->valueHolder56b479e57f56b021700484->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e57f56b021700484;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e57f56b021700484;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e57f578891123661);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e57f56b021700484;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e57f56b021700484;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, '__isset', array('name' => $name), $this->initializer56b479e57f578891123661);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e57f56b021700484;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e57f56b021700484;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, '__unset', array('name' => $name), $this->initializer56b479e57f578891123661);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e57f56b021700484;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e57f56b021700484;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, '__clone', array(), $this->initializer56b479e57f578891123661);

        $this->valueHolder56b479e57f56b021700484 = clone $this->valueHolder56b479e57f56b021700484;
    }

    public function __sleep()
    {
        $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, '__sleep', array(), $this->initializer56b479e57f578891123661);

        return array('valueHolder56b479e57f56b021700484');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e57f578891123661 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e57f578891123661;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e57f578891123661 && $this->initializer56b479e57f578891123661->__invoke($this->valueHolder56b479e57f56b021700484, $this, 'initializeProxy', array(), $this->initializer56b479e57f578891123661);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e57f56b021700484;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e57f56b021700484;
    }


}

class eZBundleEzPublishCoreBundleFieldTypePagePageService_0000000010d76fda00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Bundle\EzPublishCoreBundle\FieldType\Page\PageService implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e58f6c8919673398 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e58f6d5388833836 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e58f69d654753936 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function getValidBlockItemsAsContentInfo(\eZ\Publish\Core\FieldType\Page\Parts\Block $block)
    {
        $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, 'getValidBlockItemsAsContentInfo', array('block' => $block), $this->initializer56b479e58f6d5388833836);

        return $this->valueHolder56b479e58f6c8919673398->getValidBlockItemsAsContentInfo($block);
    }

    /**
     * {@inheritDoc}
     */
    public function getZoneDefinition()
    {
        $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, 'getZoneDefinition', array(), $this->initializer56b479e58f6d5388833836);

        return $this->valueHolder56b479e58f6c8919673398->getZoneDefinition();
    }

    /**
     * {@inheritDoc}
     */
    public function getZoneDefinitionByLayout($layoutIdentifier)
    {
        $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, 'getZoneDefinitionByLayout', array('layoutIdentifier' => $layoutIdentifier), $this->initializer56b479e58f6d5388833836);

        return $this->valueHolder56b479e58f6c8919673398->getZoneDefinitionByLayout($layoutIdentifier);
    }

    /**
     * {@inheritDoc}
     */
    public function getLayoutTemplate($layoutIdentifier)
    {
        $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, 'getLayoutTemplate', array('layoutIdentifier' => $layoutIdentifier), $this->initializer56b479e58f6d5388833836);

        return $this->valueHolder56b479e58f6c8919673398->getLayoutTemplate($layoutIdentifier);
    }

    /**
     * {@inheritDoc}
     */
    public function hasZoneLayout($layoutIdentifier)
    {
        $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, 'hasZoneLayout', array('layoutIdentifier' => $layoutIdentifier), $this->initializer56b479e58f6d5388833836);

        return $this->valueHolder56b479e58f6c8919673398->hasZoneLayout($layoutIdentifier);
    }

    /**
     * {@inheritDoc}
     */
    public function getAvailableZoneLayouts()
    {
        $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, 'getAvailableZoneLayouts', array(), $this->initializer56b479e58f6d5388833836);

        return $this->valueHolder56b479e58f6c8919673398->getAvailableZoneLayouts();
    }

    /**
     * {@inheritDoc}
     */
    public function getBlockDefinition()
    {
        $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, 'getBlockDefinition', array(), $this->initializer56b479e58f6d5388833836);

        return $this->valueHolder56b479e58f6c8919673398->getBlockDefinition();
    }

    /**
     * {@inheritDoc}
     */
    public function getBlockDefinitionByIdentifier($blockIdentifier)
    {
        $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, 'getBlockDefinitionByIdentifier', array('blockIdentifier' => $blockIdentifier), $this->initializer56b479e58f6d5388833836);

        return $this->valueHolder56b479e58f6c8919673398->getBlockDefinitionByIdentifier($blockIdentifier);
    }

    /**
     * {@inheritDoc}
     */
    public function hasBlockDefinition($blockIdentifier)
    {
        $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, 'hasBlockDefinition', array('blockIdentifier' => $blockIdentifier), $this->initializer56b479e58f6d5388833836);

        return $this->valueHolder56b479e58f6c8919673398->hasBlockDefinition($blockIdentifier);
    }

    /**
     * {@inheritDoc}
     */
    public function setStorageGateway(\eZ\Publish\Core\FieldType\Page\PageStorage\Gateway $storageGateway)
    {
        $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, 'setStorageGateway', array('storageGateway' => $storageGateway), $this->initializer56b479e58f6d5388833836);

        return $this->valueHolder56b479e58f6c8919673398->setStorageGateway($storageGateway);
    }

    /**
     * {@inheritDoc}
     */
    public function hasStorageGateway()
    {
        $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, 'hasStorageGateway', array(), $this->initializer56b479e58f6d5388833836);

        return $this->valueHolder56b479e58f6c8919673398->hasStorageGateway();
    }

    /**
     * {@inheritDoc}
     */
    public function getValidBlockItems(\eZ\Publish\Core\FieldType\Page\Parts\Block $block)
    {
        $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, 'getValidBlockItems', array('block' => $block), $this->initializer56b479e58f6d5388833836);

        return $this->valueHolder56b479e58f6c8919673398->getValidBlockItems($block);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastValidBlockItem(\eZ\Publish\Core\FieldType\Page\Parts\Block $block)
    {
        $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, 'getLastValidBlockItem', array('block' => $block), $this->initializer56b479e58f6d5388833836);

        return $this->valueHolder56b479e58f6c8919673398->getLastValidBlockItem($block);
    }

    /**
     * {@inheritDoc}
     */
    public function getWaitingBlockItems(\eZ\Publish\Core\FieldType\Page\Parts\Block $block)
    {
        $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, 'getWaitingBlockItems', array('block' => $block), $this->initializer56b479e58f6d5388833836);

        return $this->valueHolder56b479e58f6c8919673398->getWaitingBlockItems($block);
    }

    /**
     * {@inheritDoc}
     */
    public function getArchivedBlockItems(\eZ\Publish\Core\FieldType\Page\Parts\Block $block)
    {
        $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, 'getArchivedBlockItems', array('block' => $block), $this->initializer56b479e58f6d5388833836);

        return $this->valueHolder56b479e58f6c8919673398->getArchivedBlockItems($block);
    }

    /**
     * {@inheritDoc}
     */
    public function loadBlock($id)
    {
        $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, 'loadBlock', array('id' => $id), $this->initializer56b479e58f6d5388833836);

        return $this->valueHolder56b479e58f6c8919673398->loadBlock($id);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e58f6d5388833836 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, '__get', array('name' => $name), $this->initializer56b479e58f6d5388833836);

        if (isset(self::$publicProperties56b479e58f69d654753936[$name])) {
            return $this->valueHolder56b479e58f6c8919673398->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e58f6c8919673398;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e58f6c8919673398;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e58f6d5388833836);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e58f6c8919673398;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e58f6c8919673398;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, '__isset', array('name' => $name), $this->initializer56b479e58f6d5388833836);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e58f6c8919673398;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e58f6c8919673398;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, '__unset', array('name' => $name), $this->initializer56b479e58f6d5388833836);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e58f6c8919673398;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e58f6c8919673398;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, '__clone', array(), $this->initializer56b479e58f6d5388833836);

        $this->valueHolder56b479e58f6c8919673398 = clone $this->valueHolder56b479e58f6c8919673398;
    }

    public function __sleep()
    {
        $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, '__sleep', array(), $this->initializer56b479e58f6d5388833836);

        return array('valueHolder56b479e58f6c8919673398');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e58f6d5388833836 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e58f6d5388833836;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e58f6d5388833836 && $this->initializer56b479e58f6d5388833836->__invoke($this->valueHolder56b479e58f6c8919673398, $this, 'initializeProxy', array(), $this->initializer56b479e58f6d5388833836);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e58f6c8919673398;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e58f6c8919673398;
    }


}

class eZPublishCoreFieldTypeRichTextConverterAggregate_0000000010d7707900007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\FieldType\RichText\Converter\Aggregate implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e5a279e639704304 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e5a27ab564671917 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e5a2776608827655 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function convert(\DOMDocument $document)
    {
        $this->initializer56b479e5a27ab564671917 && $this->initializer56b479e5a27ab564671917->__invoke($this->valueHolder56b479e5a279e639704304, $this, 'convert', array('document' => $document), $this->initializer56b479e5a27ab564671917);

        return $this->valueHolder56b479e5a279e639704304->convert($document);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e5a27ab564671917 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e5a27ab564671917 && $this->initializer56b479e5a27ab564671917->__invoke($this->valueHolder56b479e5a279e639704304, $this, '__get', array('name' => $name), $this->initializer56b479e5a27ab564671917);

        if (isset(self::$publicProperties56b479e5a2776608827655[$name])) {
            return $this->valueHolder56b479e5a279e639704304->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5a279e639704304;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e5a279e639704304;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e5a27ab564671917 && $this->initializer56b479e5a27ab564671917->__invoke($this->valueHolder56b479e5a279e639704304, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e5a27ab564671917);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5a279e639704304;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e5a279e639704304;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e5a27ab564671917 && $this->initializer56b479e5a27ab564671917->__invoke($this->valueHolder56b479e5a279e639704304, $this, '__isset', array('name' => $name), $this->initializer56b479e5a27ab564671917);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5a279e639704304;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e5a279e639704304;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e5a27ab564671917 && $this->initializer56b479e5a27ab564671917->__invoke($this->valueHolder56b479e5a279e639704304, $this, '__unset', array('name' => $name), $this->initializer56b479e5a27ab564671917);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5a279e639704304;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e5a279e639704304;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e5a27ab564671917 && $this->initializer56b479e5a27ab564671917->__invoke($this->valueHolder56b479e5a279e639704304, $this, '__clone', array(), $this->initializer56b479e5a27ab564671917);

        $this->valueHolder56b479e5a279e639704304 = clone $this->valueHolder56b479e5a279e639704304;
    }

    public function __sleep()
    {
        $this->initializer56b479e5a27ab564671917 && $this->initializer56b479e5a27ab564671917->__invoke($this->valueHolder56b479e5a279e639704304, $this, '__sleep', array(), $this->initializer56b479e5a27ab564671917);

        return array('valueHolder56b479e5a279e639704304');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e5a27ab564671917 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e5a27ab564671917;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e5a27ab564671917 && $this->initializer56b479e5a27ab564671917->__invoke($this->valueHolder56b479e5a279e639704304, $this, 'initializeProxy', array(), $this->initializer56b479e5a27ab564671917);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e5a279e639704304;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e5a279e639704304;
    }


}

class eZPublishCoreFieldTypeImageIOLegacy_0000000010d7706800007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\FieldType\Image\IO\Legacy implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e5a3e73333077360 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e5a3e80527805007 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e5a3e4f706525904 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function setPrefix($prefix)
    {
        $this->initializer56b479e5a3e80527805007 && $this->initializer56b479e5a3e80527805007->__invoke($this->valueHolder56b479e5a3e73333077360, $this, 'setPrefix', array('prefix' => $prefix), $this->initializer56b479e5a3e80527805007);

        return $this->valueHolder56b479e5a3e73333077360->setPrefix($prefix);
    }

    /**
     * {@inheritDoc}
     */
    public function getExternalPath($internalId)
    {
        $this->initializer56b479e5a3e80527805007 && $this->initializer56b479e5a3e80527805007->__invoke($this->valueHolder56b479e5a3e73333077360, $this, 'getExternalPath', array('internalId' => $internalId), $this->initializer56b479e5a3e80527805007);

        return $this->valueHolder56b479e5a3e73333077360->getExternalPath($internalId);
    }

    /**
     * {@inheritDoc}
     */
    public function newBinaryCreateStructFromLocalFile($localFile)
    {
        $this->initializer56b479e5a3e80527805007 && $this->initializer56b479e5a3e80527805007->__invoke($this->valueHolder56b479e5a3e73333077360, $this, 'newBinaryCreateStructFromLocalFile', array('localFile' => $localFile), $this->initializer56b479e5a3e80527805007);

        return $this->valueHolder56b479e5a3e73333077360->newBinaryCreateStructFromLocalFile($localFile);
    }

    /**
     * {@inheritDoc}
     */
    public function exists($binaryFileId)
    {
        $this->initializer56b479e5a3e80527805007 && $this->initializer56b479e5a3e80527805007->__invoke($this->valueHolder56b479e5a3e73333077360, $this, 'exists', array('binaryFileId' => $binaryFileId), $this->initializer56b479e5a3e80527805007);

        return $this->valueHolder56b479e5a3e73333077360->exists($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function getInternalPath($externalId)
    {
        $this->initializer56b479e5a3e80527805007 && $this->initializer56b479e5a3e80527805007->__invoke($this->valueHolder56b479e5a3e73333077360, $this, 'getInternalPath', array('externalId' => $externalId), $this->initializer56b479e5a3e80527805007);

        return $this->valueHolder56b479e5a3e73333077360->getInternalPath($externalId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadBinaryFile($binaryFileId)
    {
        $this->initializer56b479e5a3e80527805007 && $this->initializer56b479e5a3e80527805007->__invoke($this->valueHolder56b479e5a3e73333077360, $this, 'loadBinaryFile', array('binaryFileId' => $binaryFileId), $this->initializer56b479e5a3e80527805007);

        return $this->valueHolder56b479e5a3e73333077360->loadBinaryFile($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadBinaryFileByUri($binaryFileUri)
    {
        $this->initializer56b479e5a3e80527805007 && $this->initializer56b479e5a3e80527805007->__invoke($this->valueHolder56b479e5a3e73333077360, $this, 'loadBinaryFileByUri', array('binaryFileUri' => $binaryFileUri), $this->initializer56b479e5a3e80527805007);

        return $this->valueHolder56b479e5a3e73333077360->loadBinaryFileByUri($binaryFileUri);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileContents(\eZ\Publish\Core\IO\Values\BinaryFile $binaryFile)
    {
        $this->initializer56b479e5a3e80527805007 && $this->initializer56b479e5a3e80527805007->__invoke($this->valueHolder56b479e5a3e73333077360, $this, 'getFileContents', array('binaryFile' => $binaryFile), $this->initializer56b479e5a3e80527805007);

        return $this->valueHolder56b479e5a3e73333077360->getFileContents($binaryFile);
    }

    /**
     * {@inheritDoc}
     */
    public function createBinaryFile(\eZ\Publish\Core\IO\Values\BinaryFileCreateStruct $binaryFileCreateStruct)
    {
        $this->initializer56b479e5a3e80527805007 && $this->initializer56b479e5a3e80527805007->__invoke($this->valueHolder56b479e5a3e73333077360, $this, 'createBinaryFile', array('binaryFileCreateStruct' => $binaryFileCreateStruct), $this->initializer56b479e5a3e80527805007);

        return $this->valueHolder56b479e5a3e73333077360->createBinaryFile($binaryFileCreateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function getUri($binaryFileId)
    {
        $this->initializer56b479e5a3e80527805007 && $this->initializer56b479e5a3e80527805007->__invoke($this->valueHolder56b479e5a3e73333077360, $this, 'getUri', array('binaryFileId' => $binaryFileId), $this->initializer56b479e5a3e80527805007);

        return $this->valueHolder56b479e5a3e73333077360->getUri($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function getMimeType($binaryFileId)
    {
        $this->initializer56b479e5a3e80527805007 && $this->initializer56b479e5a3e80527805007->__invoke($this->valueHolder56b479e5a3e73333077360, $this, 'getMimeType', array('binaryFileId' => $binaryFileId), $this->initializer56b479e5a3e80527805007);

        return $this->valueHolder56b479e5a3e73333077360->getMimeType($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileInputStream(\eZ\Publish\Core\IO\Values\BinaryFile $binaryFile)
    {
        $this->initializer56b479e5a3e80527805007 && $this->initializer56b479e5a3e80527805007->__invoke($this->valueHolder56b479e5a3e73333077360, $this, 'getFileInputStream', array('binaryFile' => $binaryFile), $this->initializer56b479e5a3e80527805007);

        return $this->valueHolder56b479e5a3e73333077360->getFileInputStream($binaryFile);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteBinaryFile(\eZ\Publish\Core\IO\Values\BinaryFile $binaryFile)
    {
        $this->initializer56b479e5a3e80527805007 && $this->initializer56b479e5a3e80527805007->__invoke($this->valueHolder56b479e5a3e73333077360, $this, 'deleteBinaryFile', array('binaryFile' => $binaryFile), $this->initializer56b479e5a3e80527805007);

        return $this->valueHolder56b479e5a3e73333077360->deleteBinaryFile($binaryFile);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteDirectory($path)
    {
        $this->initializer56b479e5a3e80527805007 && $this->initializer56b479e5a3e80527805007->__invoke($this->valueHolder56b479e5a3e73333077360, $this, 'deleteDirectory', array('path' => $path), $this->initializer56b479e5a3e80527805007);

        return $this->valueHolder56b479e5a3e73333077360->deleteDirectory($path);
    }

    /**
     * {@inheritDoc}
     */
    public function newBinaryCreateStructFromUploadedFile(array $uploadedFile)
    {
        $this->initializer56b479e5a3e80527805007 && $this->initializer56b479e5a3e80527805007->__invoke($this->valueHolder56b479e5a3e73333077360, $this, 'newBinaryCreateStructFromUploadedFile', array('uploadedFile' => $uploadedFile), $this->initializer56b479e5a3e80527805007);

        return $this->valueHolder56b479e5a3e73333077360->newBinaryCreateStructFromUploadedFile($uploadedFile);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e5a3e80527805007 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e5a3e80527805007 && $this->initializer56b479e5a3e80527805007->__invoke($this->valueHolder56b479e5a3e73333077360, $this, '__get', array('name' => $name), $this->initializer56b479e5a3e80527805007);

        if (isset(self::$publicProperties56b479e5a3e4f706525904[$name])) {
            return $this->valueHolder56b479e5a3e73333077360->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5a3e73333077360;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e5a3e73333077360;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e5a3e80527805007 && $this->initializer56b479e5a3e80527805007->__invoke($this->valueHolder56b479e5a3e73333077360, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e5a3e80527805007);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5a3e73333077360;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e5a3e73333077360;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e5a3e80527805007 && $this->initializer56b479e5a3e80527805007->__invoke($this->valueHolder56b479e5a3e73333077360, $this, '__isset', array('name' => $name), $this->initializer56b479e5a3e80527805007);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5a3e73333077360;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e5a3e73333077360;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e5a3e80527805007 && $this->initializer56b479e5a3e80527805007->__invoke($this->valueHolder56b479e5a3e73333077360, $this, '__unset', array('name' => $name), $this->initializer56b479e5a3e80527805007);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5a3e73333077360;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e5a3e73333077360;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e5a3e80527805007 && $this->initializer56b479e5a3e80527805007->__invoke($this->valueHolder56b479e5a3e73333077360, $this, '__clone', array(), $this->initializer56b479e5a3e80527805007);

        $this->valueHolder56b479e5a3e73333077360 = clone $this->valueHolder56b479e5a3e73333077360;
    }

    public function __sleep()
    {
        $this->initializer56b479e5a3e80527805007 && $this->initializer56b479e5a3e80527805007->__invoke($this->valueHolder56b479e5a3e73333077360, $this, '__sleep', array(), $this->initializer56b479e5a3e80527805007);

        return array('valueHolder56b479e5a3e73333077360');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e5a3e80527805007 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e5a3e80527805007;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e5a3e80527805007 && $this->initializer56b479e5a3e80527805007->__invoke($this->valueHolder56b479e5a3e73333077360, $this, 'initializeProxy', array(), $this->initializer56b479e5a3e80527805007);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e5a3e73333077360;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e5a3e73333077360;
    }


}

class eZPublishCoreIOTolerantIOService_0000000010d767bd00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\IO\TolerantIOService implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e5b1927371301615 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e5b1935833582967 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e5b18fd185459818 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function setLogger(\Psr\Log\LoggerInterface $logger = null)
    {
        $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, 'setLogger', array('logger' => $logger), $this->initializer56b479e5b1935833582967);

        return $this->valueHolder56b479e5b1927371301615->setLogger($logger);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteBinaryFile(\eZ\Publish\Core\IO\Values\BinaryFile $binaryFile)
    {
        $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, 'deleteBinaryFile', array('binaryFile' => $binaryFile), $this->initializer56b479e5b1935833582967);

        return $this->valueHolder56b479e5b1927371301615->deleteBinaryFile($binaryFile);
    }

    /**
     * {@inheritDoc}
     */
    public function loadBinaryFile($binaryFileId)
    {
        $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, 'loadBinaryFile', array('binaryFileId' => $binaryFileId), $this->initializer56b479e5b1935833582967);

        return $this->valueHolder56b479e5b1927371301615->loadBinaryFile($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadBinaryFileByUri($binaryFileUri)
    {
        $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, 'loadBinaryFileByUri', array('binaryFileUri' => $binaryFileUri), $this->initializer56b479e5b1935833582967);

        return $this->valueHolder56b479e5b1927371301615->loadBinaryFileByUri($binaryFileUri);
    }

    /**
     * {@inheritDoc}
     */
    public function setPrefix($prefix)
    {
        $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, 'setPrefix', array('prefix' => $prefix), $this->initializer56b479e5b1935833582967);

        return $this->valueHolder56b479e5b1927371301615->setPrefix($prefix);
    }

    /**
     * {@inheritDoc}
     */
    public function newBinaryCreateStructFromUploadedFile(array $uploadedFile)
    {
        $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, 'newBinaryCreateStructFromUploadedFile', array('uploadedFile' => $uploadedFile), $this->initializer56b479e5b1935833582967);

        return $this->valueHolder56b479e5b1927371301615->newBinaryCreateStructFromUploadedFile($uploadedFile);
    }

    /**
     * {@inheritDoc}
     */
    public function newBinaryCreateStructFromLocalFile($localFile)
    {
        $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, 'newBinaryCreateStructFromLocalFile', array('localFile' => $localFile), $this->initializer56b479e5b1935833582967);

        return $this->valueHolder56b479e5b1927371301615->newBinaryCreateStructFromLocalFile($localFile);
    }

    /**
     * {@inheritDoc}
     */
    public function createBinaryFile(\eZ\Publish\Core\IO\Values\BinaryFileCreateStruct $binaryFileCreateStruct)
    {
        $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, 'createBinaryFile', array('binaryFileCreateStruct' => $binaryFileCreateStruct), $this->initializer56b479e5b1935833582967);

        return $this->valueHolder56b479e5b1927371301615->createBinaryFile($binaryFileCreateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileInputStream(\eZ\Publish\Core\IO\Values\BinaryFile $binaryFile)
    {
        $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, 'getFileInputStream', array('binaryFile' => $binaryFile), $this->initializer56b479e5b1935833582967);

        return $this->valueHolder56b479e5b1927371301615->getFileInputStream($binaryFile);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileContents(\eZ\Publish\Core\IO\Values\BinaryFile $binaryFile)
    {
        $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, 'getFileContents', array('binaryFile' => $binaryFile), $this->initializer56b479e5b1935833582967);

        return $this->valueHolder56b479e5b1927371301615->getFileContents($binaryFile);
    }

    /**
     * {@inheritDoc}
     */
    public function getInternalPath($binaryFileId)
    {
        $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, 'getInternalPath', array('binaryFileId' => $binaryFileId), $this->initializer56b479e5b1935833582967);

        return $this->valueHolder56b479e5b1927371301615->getInternalPath($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function getExternalPath($internalId)
    {
        $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, 'getExternalPath', array('internalId' => $internalId), $this->initializer56b479e5b1935833582967);

        return $this->valueHolder56b479e5b1927371301615->getExternalPath($internalId);
    }

    /**
     * {@inheritDoc}
     */
    public function getUri($binaryFileId)
    {
        $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, 'getUri', array('binaryFileId' => $binaryFileId), $this->initializer56b479e5b1935833582967);

        return $this->valueHolder56b479e5b1927371301615->getUri($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function getMimeType($binaryFileId)
    {
        $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, 'getMimeType', array('binaryFileId' => $binaryFileId), $this->initializer56b479e5b1935833582967);

        return $this->valueHolder56b479e5b1927371301615->getMimeType($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function exists($binaryFileId)
    {
        $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, 'exists', array('binaryFileId' => $binaryFileId), $this->initializer56b479e5b1935833582967);

        return $this->valueHolder56b479e5b1927371301615->exists($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteDirectory($path)
    {
        $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, 'deleteDirectory', array('path' => $path), $this->initializer56b479e5b1935833582967);

        return $this->valueHolder56b479e5b1927371301615->deleteDirectory($path);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e5b1935833582967 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, '__get', array('name' => $name), $this->initializer56b479e5b1935833582967);

        if (isset(self::$publicProperties56b479e5b18fd185459818[$name])) {
            return $this->valueHolder56b479e5b1927371301615->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5b1927371301615;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e5b1927371301615;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e5b1935833582967);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5b1927371301615;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e5b1927371301615;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, '__isset', array('name' => $name), $this->initializer56b479e5b1935833582967);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5b1927371301615;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e5b1927371301615;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, '__unset', array('name' => $name), $this->initializer56b479e5b1935833582967);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5b1927371301615;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e5b1927371301615;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, '__clone', array(), $this->initializer56b479e5b1935833582967);

        $this->valueHolder56b479e5b1927371301615 = clone $this->valueHolder56b479e5b1927371301615;
    }

    public function __sleep()
    {
        $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, '__sleep', array(), $this->initializer56b479e5b1935833582967);

        return array('valueHolder56b479e5b1927371301615');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e5b1935833582967 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e5b1935833582967;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e5b1935833582967 && $this->initializer56b479e5b1935833582967->__invoke($this->valueHolder56b479e5b1927371301615, $this, 'initializeProxy', array(), $this->initializer56b479e5b1935833582967);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e5b1927371301615;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e5b1927371301615;
    }


}

class eZPublishCoreIOTolerantIOService_0000000010d767bf00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\IO\TolerantIOService implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e5bf14f141162664 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e5bf180166957647 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e5bf124262317231 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function setLogger(\Psr\Log\LoggerInterface $logger = null)
    {
        $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, 'setLogger', array('logger' => $logger), $this->initializer56b479e5bf180166957647);

        return $this->valueHolder56b479e5bf14f141162664->setLogger($logger);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteBinaryFile(\eZ\Publish\Core\IO\Values\BinaryFile $binaryFile)
    {
        $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, 'deleteBinaryFile', array('binaryFile' => $binaryFile), $this->initializer56b479e5bf180166957647);

        return $this->valueHolder56b479e5bf14f141162664->deleteBinaryFile($binaryFile);
    }

    /**
     * {@inheritDoc}
     */
    public function loadBinaryFile($binaryFileId)
    {
        $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, 'loadBinaryFile', array('binaryFileId' => $binaryFileId), $this->initializer56b479e5bf180166957647);

        return $this->valueHolder56b479e5bf14f141162664->loadBinaryFile($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadBinaryFileByUri($binaryFileUri)
    {
        $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, 'loadBinaryFileByUri', array('binaryFileUri' => $binaryFileUri), $this->initializer56b479e5bf180166957647);

        return $this->valueHolder56b479e5bf14f141162664->loadBinaryFileByUri($binaryFileUri);
    }

    /**
     * {@inheritDoc}
     */
    public function setPrefix($prefix)
    {
        $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, 'setPrefix', array('prefix' => $prefix), $this->initializer56b479e5bf180166957647);

        return $this->valueHolder56b479e5bf14f141162664->setPrefix($prefix);
    }

    /**
     * {@inheritDoc}
     */
    public function newBinaryCreateStructFromUploadedFile(array $uploadedFile)
    {
        $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, 'newBinaryCreateStructFromUploadedFile', array('uploadedFile' => $uploadedFile), $this->initializer56b479e5bf180166957647);

        return $this->valueHolder56b479e5bf14f141162664->newBinaryCreateStructFromUploadedFile($uploadedFile);
    }

    /**
     * {@inheritDoc}
     */
    public function newBinaryCreateStructFromLocalFile($localFile)
    {
        $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, 'newBinaryCreateStructFromLocalFile', array('localFile' => $localFile), $this->initializer56b479e5bf180166957647);

        return $this->valueHolder56b479e5bf14f141162664->newBinaryCreateStructFromLocalFile($localFile);
    }

    /**
     * {@inheritDoc}
     */
    public function createBinaryFile(\eZ\Publish\Core\IO\Values\BinaryFileCreateStruct $binaryFileCreateStruct)
    {
        $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, 'createBinaryFile', array('binaryFileCreateStruct' => $binaryFileCreateStruct), $this->initializer56b479e5bf180166957647);

        return $this->valueHolder56b479e5bf14f141162664->createBinaryFile($binaryFileCreateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileInputStream(\eZ\Publish\Core\IO\Values\BinaryFile $binaryFile)
    {
        $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, 'getFileInputStream', array('binaryFile' => $binaryFile), $this->initializer56b479e5bf180166957647);

        return $this->valueHolder56b479e5bf14f141162664->getFileInputStream($binaryFile);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileContents(\eZ\Publish\Core\IO\Values\BinaryFile $binaryFile)
    {
        $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, 'getFileContents', array('binaryFile' => $binaryFile), $this->initializer56b479e5bf180166957647);

        return $this->valueHolder56b479e5bf14f141162664->getFileContents($binaryFile);
    }

    /**
     * {@inheritDoc}
     */
    public function getInternalPath($binaryFileId)
    {
        $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, 'getInternalPath', array('binaryFileId' => $binaryFileId), $this->initializer56b479e5bf180166957647);

        return $this->valueHolder56b479e5bf14f141162664->getInternalPath($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function getExternalPath($internalId)
    {
        $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, 'getExternalPath', array('internalId' => $internalId), $this->initializer56b479e5bf180166957647);

        return $this->valueHolder56b479e5bf14f141162664->getExternalPath($internalId);
    }

    /**
     * {@inheritDoc}
     */
    public function getUri($binaryFileId)
    {
        $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, 'getUri', array('binaryFileId' => $binaryFileId), $this->initializer56b479e5bf180166957647);

        return $this->valueHolder56b479e5bf14f141162664->getUri($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function getMimeType($binaryFileId)
    {
        $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, 'getMimeType', array('binaryFileId' => $binaryFileId), $this->initializer56b479e5bf180166957647);

        return $this->valueHolder56b479e5bf14f141162664->getMimeType($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function exists($binaryFileId)
    {
        $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, 'exists', array('binaryFileId' => $binaryFileId), $this->initializer56b479e5bf180166957647);

        return $this->valueHolder56b479e5bf14f141162664->exists($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteDirectory($path)
    {
        $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, 'deleteDirectory', array('path' => $path), $this->initializer56b479e5bf180166957647);

        return $this->valueHolder56b479e5bf14f141162664->deleteDirectory($path);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e5bf180166957647 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, '__get', array('name' => $name), $this->initializer56b479e5bf180166957647);

        if (isset(self::$publicProperties56b479e5bf124262317231[$name])) {
            return $this->valueHolder56b479e5bf14f141162664->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5bf14f141162664;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e5bf14f141162664;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e5bf180166957647);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5bf14f141162664;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e5bf14f141162664;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, '__isset', array('name' => $name), $this->initializer56b479e5bf180166957647);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5bf14f141162664;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e5bf14f141162664;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, '__unset', array('name' => $name), $this->initializer56b479e5bf180166957647);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5bf14f141162664;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e5bf14f141162664;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, '__clone', array(), $this->initializer56b479e5bf180166957647);

        $this->valueHolder56b479e5bf14f141162664 = clone $this->valueHolder56b479e5bf14f141162664;
    }

    public function __sleep()
    {
        $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, '__sleep', array(), $this->initializer56b479e5bf180166957647);

        return array('valueHolder56b479e5bf14f141162664');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e5bf180166957647 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e5bf180166957647;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e5bf180166957647 && $this->initializer56b479e5bf180166957647->__invoke($this->valueHolder56b479e5bf14f141162664, $this, 'initializeProxy', array(), $this->initializer56b479e5bf180166957647);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e5bf14f141162664;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e5bf14f141162664;
    }


}

class eZPublishCoreIOTolerantIOService_0000000010d767be00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\IO\TolerantIOService implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e5cc902778302038 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e5cc912061883112 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e5cc8d1345813334 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function setLogger(\Psr\Log\LoggerInterface $logger = null)
    {
        $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, 'setLogger', array('logger' => $logger), $this->initializer56b479e5cc912061883112);

        return $this->valueHolder56b479e5cc902778302038->setLogger($logger);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteBinaryFile(\eZ\Publish\Core\IO\Values\BinaryFile $binaryFile)
    {
        $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, 'deleteBinaryFile', array('binaryFile' => $binaryFile), $this->initializer56b479e5cc912061883112);

        return $this->valueHolder56b479e5cc902778302038->deleteBinaryFile($binaryFile);
    }

    /**
     * {@inheritDoc}
     */
    public function loadBinaryFile($binaryFileId)
    {
        $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, 'loadBinaryFile', array('binaryFileId' => $binaryFileId), $this->initializer56b479e5cc912061883112);

        return $this->valueHolder56b479e5cc902778302038->loadBinaryFile($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function loadBinaryFileByUri($binaryFileUri)
    {
        $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, 'loadBinaryFileByUri', array('binaryFileUri' => $binaryFileUri), $this->initializer56b479e5cc912061883112);

        return $this->valueHolder56b479e5cc902778302038->loadBinaryFileByUri($binaryFileUri);
    }

    /**
     * {@inheritDoc}
     */
    public function setPrefix($prefix)
    {
        $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, 'setPrefix', array('prefix' => $prefix), $this->initializer56b479e5cc912061883112);

        return $this->valueHolder56b479e5cc902778302038->setPrefix($prefix);
    }

    /**
     * {@inheritDoc}
     */
    public function newBinaryCreateStructFromUploadedFile(array $uploadedFile)
    {
        $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, 'newBinaryCreateStructFromUploadedFile', array('uploadedFile' => $uploadedFile), $this->initializer56b479e5cc912061883112);

        return $this->valueHolder56b479e5cc902778302038->newBinaryCreateStructFromUploadedFile($uploadedFile);
    }

    /**
     * {@inheritDoc}
     */
    public function newBinaryCreateStructFromLocalFile($localFile)
    {
        $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, 'newBinaryCreateStructFromLocalFile', array('localFile' => $localFile), $this->initializer56b479e5cc912061883112);

        return $this->valueHolder56b479e5cc902778302038->newBinaryCreateStructFromLocalFile($localFile);
    }

    /**
     * {@inheritDoc}
     */
    public function createBinaryFile(\eZ\Publish\Core\IO\Values\BinaryFileCreateStruct $binaryFileCreateStruct)
    {
        $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, 'createBinaryFile', array('binaryFileCreateStruct' => $binaryFileCreateStruct), $this->initializer56b479e5cc912061883112);

        return $this->valueHolder56b479e5cc902778302038->createBinaryFile($binaryFileCreateStruct);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileInputStream(\eZ\Publish\Core\IO\Values\BinaryFile $binaryFile)
    {
        $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, 'getFileInputStream', array('binaryFile' => $binaryFile), $this->initializer56b479e5cc912061883112);

        return $this->valueHolder56b479e5cc902778302038->getFileInputStream($binaryFile);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileContents(\eZ\Publish\Core\IO\Values\BinaryFile $binaryFile)
    {
        $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, 'getFileContents', array('binaryFile' => $binaryFile), $this->initializer56b479e5cc912061883112);

        return $this->valueHolder56b479e5cc902778302038->getFileContents($binaryFile);
    }

    /**
     * {@inheritDoc}
     */
    public function getInternalPath($binaryFileId)
    {
        $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, 'getInternalPath', array('binaryFileId' => $binaryFileId), $this->initializer56b479e5cc912061883112);

        return $this->valueHolder56b479e5cc902778302038->getInternalPath($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function getExternalPath($internalId)
    {
        $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, 'getExternalPath', array('internalId' => $internalId), $this->initializer56b479e5cc912061883112);

        return $this->valueHolder56b479e5cc902778302038->getExternalPath($internalId);
    }

    /**
     * {@inheritDoc}
     */
    public function getUri($binaryFileId)
    {
        $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, 'getUri', array('binaryFileId' => $binaryFileId), $this->initializer56b479e5cc912061883112);

        return $this->valueHolder56b479e5cc902778302038->getUri($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function getMimeType($binaryFileId)
    {
        $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, 'getMimeType', array('binaryFileId' => $binaryFileId), $this->initializer56b479e5cc912061883112);

        return $this->valueHolder56b479e5cc902778302038->getMimeType($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function exists($binaryFileId)
    {
        $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, 'exists', array('binaryFileId' => $binaryFileId), $this->initializer56b479e5cc912061883112);

        return $this->valueHolder56b479e5cc902778302038->exists($binaryFileId);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteDirectory($path)
    {
        $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, 'deleteDirectory', array('path' => $path), $this->initializer56b479e5cc912061883112);

        return $this->valueHolder56b479e5cc902778302038->deleteDirectory($path);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e5cc912061883112 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, '__get', array('name' => $name), $this->initializer56b479e5cc912061883112);

        if (isset(self::$publicProperties56b479e5cc8d1345813334[$name])) {
            return $this->valueHolder56b479e5cc902778302038->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5cc902778302038;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e5cc902778302038;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e5cc912061883112);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5cc902778302038;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e5cc902778302038;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, '__isset', array('name' => $name), $this->initializer56b479e5cc912061883112);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5cc902778302038;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e5cc902778302038;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, '__unset', array('name' => $name), $this->initializer56b479e5cc912061883112);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5cc902778302038;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e5cc902778302038;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, '__clone', array(), $this->initializer56b479e5cc912061883112);

        $this->valueHolder56b479e5cc902778302038 = clone $this->valueHolder56b479e5cc902778302038;
    }

    public function __sleep()
    {
        $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, '__sleep', array(), $this->initializer56b479e5cc912061883112);

        return array('valueHolder56b479e5cc902778302038');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e5cc912061883112 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e5cc912061883112;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e5cc912061883112 && $this->initializer56b479e5cc912061883112->__invoke($this->valueHolder56b479e5cc902778302038, $this, 'initializeProxy', array(), $this->initializer56b479e5cc912061883112);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e5cc902778302038;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e5cc902778302038;
    }


}

class eZBundleEzPublishCoreBundleImagineAliasCleaner_0000000010d770ca00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Bundle\EzPublishCoreBundle\Imagine\AliasCleaner implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e5da754554682083 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e5da763990512781 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e5da727280495377 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function removeAliases($originalPath)
    {
        $this->initializer56b479e5da763990512781 && $this->initializer56b479e5da763990512781->__invoke($this->valueHolder56b479e5da754554682083, $this, 'removeAliases', array('originalPath' => $originalPath), $this->initializer56b479e5da763990512781);

        return $this->valueHolder56b479e5da754554682083->removeAliases($originalPath);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e5da763990512781 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e5da763990512781 && $this->initializer56b479e5da763990512781->__invoke($this->valueHolder56b479e5da754554682083, $this, '__get', array('name' => $name), $this->initializer56b479e5da763990512781);

        if (isset(self::$publicProperties56b479e5da727280495377[$name])) {
            return $this->valueHolder56b479e5da754554682083->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5da754554682083;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e5da754554682083;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e5da763990512781 && $this->initializer56b479e5da763990512781->__invoke($this->valueHolder56b479e5da754554682083, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e5da763990512781);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5da754554682083;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e5da754554682083;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e5da763990512781 && $this->initializer56b479e5da763990512781->__invoke($this->valueHolder56b479e5da754554682083, $this, '__isset', array('name' => $name), $this->initializer56b479e5da763990512781);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5da754554682083;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e5da754554682083;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e5da763990512781 && $this->initializer56b479e5da763990512781->__invoke($this->valueHolder56b479e5da754554682083, $this, '__unset', array('name' => $name), $this->initializer56b479e5da763990512781);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5da754554682083;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e5da754554682083;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e5da763990512781 && $this->initializer56b479e5da763990512781->__invoke($this->valueHolder56b479e5da754554682083, $this, '__clone', array(), $this->initializer56b479e5da763990512781);

        $this->valueHolder56b479e5da754554682083 = clone $this->valueHolder56b479e5da754554682083;
    }

    public function __sleep()
    {
        $this->initializer56b479e5da763990512781 && $this->initializer56b479e5da763990512781->__invoke($this->valueHolder56b479e5da754554682083, $this, '__sleep', array(), $this->initializer56b479e5da763990512781);

        return array('valueHolder56b479e5da754554682083');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e5da763990512781 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e5da763990512781;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e5da763990512781 && $this->initializer56b479e5da763990512781->__invoke($this->valueHolder56b479e5da754554682083, $this, 'initializeProxy', array(), $this->initializer56b479e5da763990512781);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e5da754554682083;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e5da754554682083;
    }


}

class eZPublishCoreSearchLegacyContentHandler_0000000010d7723e00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Search\Legacy\Content\Handler implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e5dbc29713782199 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e5dbc39079747179 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e5dbbfb102789460 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function findContent(\eZ\Publish\API\Repository\Values\Content\Query $query, array $languageFilter = array())
    {
        $this->initializer56b479e5dbc39079747179 && $this->initializer56b479e5dbc39079747179->__invoke($this->valueHolder56b479e5dbc29713782199, $this, 'findContent', array('query' => $query, 'languageFilter' => $languageFilter), $this->initializer56b479e5dbc39079747179);

        return $this->valueHolder56b479e5dbc29713782199->findContent($query, $languageFilter);
    }

    /**
     * {@inheritDoc}
     */
    public function findSingle(\eZ\Publish\API\Repository\Values\Content\Query\Criterion $filter, array $languageFilter = array())
    {
        $this->initializer56b479e5dbc39079747179 && $this->initializer56b479e5dbc39079747179->__invoke($this->valueHolder56b479e5dbc29713782199, $this, 'findSingle', array('filter' => $filter, 'languageFilter' => $languageFilter), $this->initializer56b479e5dbc39079747179);

        return $this->valueHolder56b479e5dbc29713782199->findSingle($filter, $languageFilter);
    }

    /**
     * {@inheritDoc}
     */
    public function findLocations(\eZ\Publish\API\Repository\Values\Content\LocationQuery $query, array $languageFilter = array())
    {
        $this->initializer56b479e5dbc39079747179 && $this->initializer56b479e5dbc39079747179->__invoke($this->valueHolder56b479e5dbc29713782199, $this, 'findLocations', array('query' => $query, 'languageFilter' => $languageFilter), $this->initializer56b479e5dbc39079747179);

        return $this->valueHolder56b479e5dbc29713782199->findLocations($query, $languageFilter);
    }

    /**
     * {@inheritDoc}
     */
    public function suggest($prefix, $fieldPaths = array(), $limit = 10, \eZ\Publish\API\Repository\Values\Content\Query\Criterion $filter = null)
    {
        $this->initializer56b479e5dbc39079747179 && $this->initializer56b479e5dbc39079747179->__invoke($this->valueHolder56b479e5dbc29713782199, $this, 'suggest', array('prefix' => $prefix, 'fieldPaths' => $fieldPaths, 'limit' => $limit, 'filter' => $filter), $this->initializer56b479e5dbc39079747179);

        return $this->valueHolder56b479e5dbc29713782199->suggest($prefix, $fieldPaths, $limit, $filter);
    }

    /**
     * {@inheritDoc}
     */
    public function indexContent(\eZ\Publish\SPI\Persistence\Content $content)
    {
        $this->initializer56b479e5dbc39079747179 && $this->initializer56b479e5dbc39079747179->__invoke($this->valueHolder56b479e5dbc29713782199, $this, 'indexContent', array('content' => $content), $this->initializer56b479e5dbc39079747179);

        return $this->valueHolder56b479e5dbc29713782199->indexContent($content);
    }

    /**
     * {@inheritDoc}
     */
    public function indexLocation(\eZ\Publish\SPI\Persistence\Content\Location $location)
    {
        $this->initializer56b479e5dbc39079747179 && $this->initializer56b479e5dbc39079747179->__invoke($this->valueHolder56b479e5dbc29713782199, $this, 'indexLocation', array('location' => $location), $this->initializer56b479e5dbc39079747179);

        return $this->valueHolder56b479e5dbc29713782199->indexLocation($location);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteContent($contentId, $versionId = null)
    {
        $this->initializer56b479e5dbc39079747179 && $this->initializer56b479e5dbc39079747179->__invoke($this->valueHolder56b479e5dbc29713782199, $this, 'deleteContent', array('contentId' => $contentId, 'versionId' => $versionId), $this->initializer56b479e5dbc39079747179);

        return $this->valueHolder56b479e5dbc29713782199->deleteContent($contentId, $versionId);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteLocation($locationId, $contentId)
    {
        $this->initializer56b479e5dbc39079747179 && $this->initializer56b479e5dbc39079747179->__invoke($this->valueHolder56b479e5dbc29713782199, $this, 'deleteLocation', array('locationId' => $locationId, 'contentId' => $contentId), $this->initializer56b479e5dbc39079747179);

        return $this->valueHolder56b479e5dbc29713782199->deleteLocation($locationId, $contentId);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e5dbc39079747179 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e5dbc39079747179 && $this->initializer56b479e5dbc39079747179->__invoke($this->valueHolder56b479e5dbc29713782199, $this, '__get', array('name' => $name), $this->initializer56b479e5dbc39079747179);

        if (isset(self::$publicProperties56b479e5dbbfb102789460[$name])) {
            return $this->valueHolder56b479e5dbc29713782199->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5dbc29713782199;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e5dbc29713782199;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e5dbc39079747179 && $this->initializer56b479e5dbc39079747179->__invoke($this->valueHolder56b479e5dbc29713782199, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e5dbc39079747179);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5dbc29713782199;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e5dbc29713782199;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e5dbc39079747179 && $this->initializer56b479e5dbc39079747179->__invoke($this->valueHolder56b479e5dbc29713782199, $this, '__isset', array('name' => $name), $this->initializer56b479e5dbc39079747179);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5dbc29713782199;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e5dbc29713782199;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e5dbc39079747179 && $this->initializer56b479e5dbc39079747179->__invoke($this->valueHolder56b479e5dbc29713782199, $this, '__unset', array('name' => $name), $this->initializer56b479e5dbc39079747179);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5dbc29713782199;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e5dbc29713782199;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e5dbc39079747179 && $this->initializer56b479e5dbc39079747179->__invoke($this->valueHolder56b479e5dbc29713782199, $this, '__clone', array(), $this->initializer56b479e5dbc39079747179);

        $this->valueHolder56b479e5dbc29713782199 = clone $this->valueHolder56b479e5dbc29713782199;
    }

    public function __sleep()
    {
        $this->initializer56b479e5dbc39079747179 && $this->initializer56b479e5dbc39079747179->__invoke($this->valueHolder56b479e5dbc29713782199, $this, '__sleep', array(), $this->initializer56b479e5dbc39079747179);

        return array('valueHolder56b479e5dbc29713782199');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e5dbc39079747179 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e5dbc39079747179;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e5dbc39079747179 && $this->initializer56b479e5dbc39079747179->__invoke($this->valueHolder56b479e5dbc29713782199, $this, 'initializeProxy', array(), $this->initializer56b479e5dbc39079747179);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e5dbc29713782199;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e5dbc29713782199;
    }


}

class eZPublishCorePersistenceDoctrineConnectionHandler_0000000010d7705300007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Persistence\Doctrine\ConnectionHandler implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e5ef01b428031927 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e5ef02a351204208 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e5eeff2791562020 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function getConnection()
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, 'getConnection', array(), $this->initializer56b479e5ef02a351204208);

        return $this->valueHolder56b479e5ef01b428031927->getConnection();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, 'getName', array(), $this->initializer56b479e5ef02a351204208);

        return $this->valueHolder56b479e5ef01b428031927->getName();
    }

    /**
     * {@inheritDoc}
     */
    public function beginTransaction()
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, 'beginTransaction', array(), $this->initializer56b479e5ef02a351204208);

        return $this->valueHolder56b479e5ef01b428031927->beginTransaction();
    }

    /**
     * {@inheritDoc}
     */
    public function commit()
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, 'commit', array(), $this->initializer56b479e5ef02a351204208);

        return $this->valueHolder56b479e5ef01b428031927->commit();
    }

    /**
     * {@inheritDoc}
     */
    public function rollBack()
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, 'rollBack', array(), $this->initializer56b479e5ef02a351204208);

        return $this->valueHolder56b479e5ef01b428031927->rollBack();
    }

    /**
     * {@inheritDoc}
     */
    public function prepare($query)
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, 'prepare', array('query' => $query), $this->initializer56b479e5ef02a351204208);

        return $this->valueHolder56b479e5ef01b428031927->prepare($query);
    }

    /**
     * {@inheritDoc}
     */
    public function lastInsertId($sequenceName = null)
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, 'lastInsertId', array('sequenceName' => $sequenceName), $this->initializer56b479e5ef02a351204208);

        return $this->valueHolder56b479e5ef01b428031927->lastInsertId($sequenceName);
    }

    /**
     * {@inheritDoc}
     */
    public function useSequences()
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, 'useSequences', array(), $this->initializer56b479e5ef02a351204208);

        return $this->valueHolder56b479e5ef01b428031927->useSequences();
    }

    /**
     * {@inheritDoc}
     */
    public function exec($query)
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, 'exec', array('query' => $query), $this->initializer56b479e5ef02a351204208);

        return $this->valueHolder56b479e5ef01b428031927->exec($query);
    }

    /**
     * {@inheritDoc}
     */
    public function createSelectQuery()
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, 'createSelectQuery', array(), $this->initializer56b479e5ef02a351204208);

        return $this->valueHolder56b479e5ef01b428031927->createSelectQuery();
    }

    /**
     * {@inheritDoc}
     */
    public function createInsertQuery()
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, 'createInsertQuery', array(), $this->initializer56b479e5ef02a351204208);

        return $this->valueHolder56b479e5ef01b428031927->createInsertQuery();
    }

    /**
     * {@inheritDoc}
     */
    public function createUpdateQuery()
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, 'createUpdateQuery', array(), $this->initializer56b479e5ef02a351204208);

        return $this->valueHolder56b479e5ef01b428031927->createUpdateQuery();
    }

    /**
     * {@inheritDoc}
     */
    public function createDeleteQuery()
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, 'createDeleteQuery', array(), $this->initializer56b479e5ef02a351204208);

        return $this->valueHolder56b479e5ef01b428031927->createDeleteQuery();
    }

    /**
     * {@inheritDoc}
     */
    public function aliasedColumn($query, $columnName, $tableName = null)
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, 'aliasedColumn', array('query' => $query, 'columnName' => $columnName, 'tableName' => $tableName), $this->initializer56b479e5ef02a351204208);

        return $this->valueHolder56b479e5ef01b428031927->aliasedColumn($query, $columnName, $tableName);
    }

    /**
     * {@inheritDoc}
     */
    public function quoteColumn($columnName, $tableName = null)
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, 'quoteColumn', array('columnName' => $columnName, 'tableName' => $tableName), $this->initializer56b479e5ef02a351204208);

        return $this->valueHolder56b479e5ef01b428031927->quoteColumn($columnName, $tableName);
    }

    /**
     * {@inheritDoc}
     */
    public function quoteTable($tableName)
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, 'quoteTable', array('tableName' => $tableName), $this->initializer56b479e5ef02a351204208);

        return $this->valueHolder56b479e5ef01b428031927->quoteTable($tableName);
    }

    /**
     * {@inheritDoc}
     */
    public function alias($name, $alias)
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, 'alias', array('name' => $name, 'alias' => $alias), $this->initializer56b479e5ef02a351204208);

        return $this->valueHolder56b479e5ef01b428031927->alias($name, $alias);
    }

    /**
     * {@inheritDoc}
     */
    public function quoteIdentifier($identifier)
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, 'quoteIdentifier', array('identifier' => $identifier), $this->initializer56b479e5ef02a351204208);

        return $this->valueHolder56b479e5ef01b428031927->quoteIdentifier($identifier);
    }

    /**
     * {@inheritDoc}
     */
    public function getAutoIncrementValue($table, $column)
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, 'getAutoIncrementValue', array('table' => $table, 'column' => $column), $this->initializer56b479e5ef02a351204208);

        return $this->valueHolder56b479e5ef01b428031927->getAutoIncrementValue($table, $column);
    }

    /**
     * {@inheritDoc}
     */
    public function getSequenceName($table, $column)
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, 'getSequenceName', array('table' => $table, 'column' => $column), $this->initializer56b479e5ef02a351204208);

        return $this->valueHolder56b479e5ef01b428031927->getSequenceName($table, $column);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e5ef02a351204208 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, '__get', array('name' => $name), $this->initializer56b479e5ef02a351204208);

        if (isset(self::$publicProperties56b479e5eeff2791562020[$name])) {
            return $this->valueHolder56b479e5ef01b428031927->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5ef01b428031927;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e5ef01b428031927;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e5ef02a351204208);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5ef01b428031927;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e5ef01b428031927;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, '__isset', array('name' => $name), $this->initializer56b479e5ef02a351204208);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5ef01b428031927;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e5ef01b428031927;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, '__unset', array('name' => $name), $this->initializer56b479e5ef02a351204208);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e5ef01b428031927;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e5ef01b428031927;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, '__clone', array(), $this->initializer56b479e5ef02a351204208);

        $this->valueHolder56b479e5ef01b428031927 = clone $this->valueHolder56b479e5ef01b428031927;
    }

    public function __sleep()
    {
        $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, '__sleep', array(), $this->initializer56b479e5ef02a351204208);

        return array('valueHolder56b479e5ef01b428031927');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e5ef02a351204208 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e5ef02a351204208;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e5ef02a351204208 && $this->initializer56b479e5ef02a351204208->__invoke($this->valueHolder56b479e5ef01b428031927, $this, 'initializeProxy', array(), $this->initializer56b479e5ef02a351204208);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e5ef01b428031927;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e5ef01b428031927;
    }


}

class eZPublishCoreSearchLegacyContentHandler_0000000010d7723f00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\Search\Legacy\Content\Handler implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e60ed1a467982041 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e60ed2a345285888 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e60ece8453834683 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function findContent(\eZ\Publish\API\Repository\Values\Content\Query $query, array $languageFilter = array())
    {
        $this->initializer56b479e60ed2a345285888 && $this->initializer56b479e60ed2a345285888->__invoke($this->valueHolder56b479e60ed1a467982041, $this, 'findContent', array('query' => $query, 'languageFilter' => $languageFilter), $this->initializer56b479e60ed2a345285888);

        return $this->valueHolder56b479e60ed1a467982041->findContent($query, $languageFilter);
    }

    /**
     * {@inheritDoc}
     */
    public function findSingle(\eZ\Publish\API\Repository\Values\Content\Query\Criterion $filter, array $languageFilter = array())
    {
        $this->initializer56b479e60ed2a345285888 && $this->initializer56b479e60ed2a345285888->__invoke($this->valueHolder56b479e60ed1a467982041, $this, 'findSingle', array('filter' => $filter, 'languageFilter' => $languageFilter), $this->initializer56b479e60ed2a345285888);

        return $this->valueHolder56b479e60ed1a467982041->findSingle($filter, $languageFilter);
    }

    /**
     * {@inheritDoc}
     */
    public function findLocations(\eZ\Publish\API\Repository\Values\Content\LocationQuery $query, array $languageFilter = array())
    {
        $this->initializer56b479e60ed2a345285888 && $this->initializer56b479e60ed2a345285888->__invoke($this->valueHolder56b479e60ed1a467982041, $this, 'findLocations', array('query' => $query, 'languageFilter' => $languageFilter), $this->initializer56b479e60ed2a345285888);

        return $this->valueHolder56b479e60ed1a467982041->findLocations($query, $languageFilter);
    }

    /**
     * {@inheritDoc}
     */
    public function suggest($prefix, $fieldPaths = array(), $limit = 10, \eZ\Publish\API\Repository\Values\Content\Query\Criterion $filter = null)
    {
        $this->initializer56b479e60ed2a345285888 && $this->initializer56b479e60ed2a345285888->__invoke($this->valueHolder56b479e60ed1a467982041, $this, 'suggest', array('prefix' => $prefix, 'fieldPaths' => $fieldPaths, 'limit' => $limit, 'filter' => $filter), $this->initializer56b479e60ed2a345285888);

        return $this->valueHolder56b479e60ed1a467982041->suggest($prefix, $fieldPaths, $limit, $filter);
    }

    /**
     * {@inheritDoc}
     */
    public function indexContent(\eZ\Publish\SPI\Persistence\Content $content)
    {
        $this->initializer56b479e60ed2a345285888 && $this->initializer56b479e60ed2a345285888->__invoke($this->valueHolder56b479e60ed1a467982041, $this, 'indexContent', array('content' => $content), $this->initializer56b479e60ed2a345285888);

        return $this->valueHolder56b479e60ed1a467982041->indexContent($content);
    }

    /**
     * {@inheritDoc}
     */
    public function indexLocation(\eZ\Publish\SPI\Persistence\Content\Location $location)
    {
        $this->initializer56b479e60ed2a345285888 && $this->initializer56b479e60ed2a345285888->__invoke($this->valueHolder56b479e60ed1a467982041, $this, 'indexLocation', array('location' => $location), $this->initializer56b479e60ed2a345285888);

        return $this->valueHolder56b479e60ed1a467982041->indexLocation($location);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteContent($contentId, $versionId = null)
    {
        $this->initializer56b479e60ed2a345285888 && $this->initializer56b479e60ed2a345285888->__invoke($this->valueHolder56b479e60ed1a467982041, $this, 'deleteContent', array('contentId' => $contentId, 'versionId' => $versionId), $this->initializer56b479e60ed2a345285888);

        return $this->valueHolder56b479e60ed1a467982041->deleteContent($contentId, $versionId);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteLocation($locationId, $contentId)
    {
        $this->initializer56b479e60ed2a345285888 && $this->initializer56b479e60ed2a345285888->__invoke($this->valueHolder56b479e60ed1a467982041, $this, 'deleteLocation', array('locationId' => $locationId, 'contentId' => $contentId), $this->initializer56b479e60ed2a345285888);

        return $this->valueHolder56b479e60ed1a467982041->deleteLocation($locationId, $contentId);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e60ed2a345285888 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e60ed2a345285888 && $this->initializer56b479e60ed2a345285888->__invoke($this->valueHolder56b479e60ed1a467982041, $this, '__get', array('name' => $name), $this->initializer56b479e60ed2a345285888);

        if (isset(self::$publicProperties56b479e60ece8453834683[$name])) {
            return $this->valueHolder56b479e60ed1a467982041->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e60ed1a467982041;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e60ed1a467982041;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e60ed2a345285888 && $this->initializer56b479e60ed2a345285888->__invoke($this->valueHolder56b479e60ed1a467982041, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e60ed2a345285888);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e60ed1a467982041;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e60ed1a467982041;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e60ed2a345285888 && $this->initializer56b479e60ed2a345285888->__invoke($this->valueHolder56b479e60ed1a467982041, $this, '__isset', array('name' => $name), $this->initializer56b479e60ed2a345285888);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e60ed1a467982041;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e60ed1a467982041;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e60ed2a345285888 && $this->initializer56b479e60ed2a345285888->__invoke($this->valueHolder56b479e60ed1a467982041, $this, '__unset', array('name' => $name), $this->initializer56b479e60ed2a345285888);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e60ed1a467982041;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e60ed1a467982041;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e60ed2a345285888 && $this->initializer56b479e60ed2a345285888->__invoke($this->valueHolder56b479e60ed1a467982041, $this, '__clone', array(), $this->initializer56b479e60ed2a345285888);

        $this->valueHolder56b479e60ed1a467982041 = clone $this->valueHolder56b479e60ed1a467982041;
    }

    public function __sleep()
    {
        $this->initializer56b479e60ed2a345285888 && $this->initializer56b479e60ed2a345285888->__invoke($this->valueHolder56b479e60ed1a467982041, $this, '__sleep', array(), $this->initializer56b479e60ed2a345285888);

        return array('valueHolder56b479e60ed1a467982041');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e60ed2a345285888 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e60ed2a345285888;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e60ed2a345285888 && $this->initializer56b479e60ed2a345285888->__invoke($this->valueHolder56b479e60ed1a467982041, $this, 'initializeProxy', array(), $this->initializer56b479e60ed2a345285888);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e60ed1a467982041;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e60ed1a467982041;
    }


}

class eZPublishCoreRESTCommonFieldTypeProcessorRegistry_0000000010d76f7200007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \eZ\Publish\Core\REST\Common\FieldTypeProcessorRegistry implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e621d36848671146 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e621d44896453163 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e621d0d425679375 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function registerProcessor($fieldTypeIdentifier, \eZ\Publish\Core\REST\Common\FieldTypeProcessor $processor)
    {
        $this->initializer56b479e621d44896453163 && $this->initializer56b479e621d44896453163->__invoke($this->valueHolder56b479e621d36848671146, $this, 'registerProcessor', array('fieldTypeIdentifier' => $fieldTypeIdentifier, 'processor' => $processor), $this->initializer56b479e621d44896453163);

        return $this->valueHolder56b479e621d36848671146->registerProcessor($fieldTypeIdentifier, $processor);
    }

    /**
     * {@inheritDoc}
     */
    public function hasProcessor($fieldTypeIdentifier)
    {
        $this->initializer56b479e621d44896453163 && $this->initializer56b479e621d44896453163->__invoke($this->valueHolder56b479e621d36848671146, $this, 'hasProcessor', array('fieldTypeIdentifier' => $fieldTypeIdentifier), $this->initializer56b479e621d44896453163);

        return $this->valueHolder56b479e621d36848671146->hasProcessor($fieldTypeIdentifier);
    }

    /**
     * {@inheritDoc}
     */
    public function getProcessor($fieldTypeIdentifier)
    {
        $this->initializer56b479e621d44896453163 && $this->initializer56b479e621d44896453163->__invoke($this->valueHolder56b479e621d36848671146, $this, 'getProcessor', array('fieldTypeIdentifier' => $fieldTypeIdentifier), $this->initializer56b479e621d44896453163);

        return $this->valueHolder56b479e621d36848671146->getProcessor($fieldTypeIdentifier);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e621d44896453163 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e621d44896453163 && $this->initializer56b479e621d44896453163->__invoke($this->valueHolder56b479e621d36848671146, $this, '__get', array('name' => $name), $this->initializer56b479e621d44896453163);

        if (isset(self::$publicProperties56b479e621d0d425679375[$name])) {
            return $this->valueHolder56b479e621d36848671146->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e621d36848671146;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e621d36848671146;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e621d44896453163 && $this->initializer56b479e621d44896453163->__invoke($this->valueHolder56b479e621d36848671146, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e621d44896453163);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e621d36848671146;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e621d36848671146;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e621d44896453163 && $this->initializer56b479e621d44896453163->__invoke($this->valueHolder56b479e621d36848671146, $this, '__isset', array('name' => $name), $this->initializer56b479e621d44896453163);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e621d36848671146;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e621d36848671146;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e621d44896453163 && $this->initializer56b479e621d44896453163->__invoke($this->valueHolder56b479e621d36848671146, $this, '__unset', array('name' => $name), $this->initializer56b479e621d44896453163);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e621d36848671146;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e621d36848671146;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e621d44896453163 && $this->initializer56b479e621d44896453163->__invoke($this->valueHolder56b479e621d36848671146, $this, '__clone', array(), $this->initializer56b479e621d44896453163);

        $this->valueHolder56b479e621d36848671146 = clone $this->valueHolder56b479e621d36848671146;
    }

    public function __sleep()
    {
        $this->initializer56b479e621d44896453163 && $this->initializer56b479e621d44896453163->__invoke($this->valueHolder56b479e621d36848671146, $this, '__sleep', array(), $this->initializer56b479e621d44896453163);

        return array('valueHolder56b479e621d36848671146');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e621d44896453163 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e621d44896453163;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e621d44896453163 && $this->initializer56b479e621d44896453163->__invoke($this->valueHolder56b479e621d36848671146, $this, 'initializeProxy', array(), $this->initializer56b479e621d44896453163);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e621d36848671146;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e621d36848671146;
    }


}

class EzSystemsEzPlatformSolrSearchEngineHandler_0000000010d7698f00007f42791310a4fdda7e708466a44a1ce939fdb4e9724a extends \EzSystems\EzPlatformSolrSearchEngine\Handler implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder56b479e62884f592395014 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer56b479e62885e338989059 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties56b479e628817671654816 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function findContent(\eZ\Publish\API\Repository\Values\Content\Query $query, array $fieldFilters = array())
    {
        $this->initializer56b479e62885e338989059 && $this->initializer56b479e62885e338989059->__invoke($this->valueHolder56b479e62884f592395014, $this, 'findContent', array('query' => $query, 'fieldFilters' => $fieldFilters), $this->initializer56b479e62885e338989059);

        return $this->valueHolder56b479e62884f592395014->findContent($query, $fieldFilters);
    }

    /**
     * {@inheritDoc}
     */
    public function findSingle(\eZ\Publish\API\Repository\Values\Content\Query\Criterion $filter, array $fieldFilters = array())
    {
        $this->initializer56b479e62885e338989059 && $this->initializer56b479e62885e338989059->__invoke($this->valueHolder56b479e62884f592395014, $this, 'findSingle', array('filter' => $filter, 'fieldFilters' => $fieldFilters), $this->initializer56b479e62885e338989059);

        return $this->valueHolder56b479e62884f592395014->findSingle($filter, $fieldFilters);
    }

    /**
     * {@inheritDoc}
     */
    public function findLocations(\eZ\Publish\API\Repository\Values\Content\LocationQuery $query, array $fieldFilters = array())
    {
        $this->initializer56b479e62885e338989059 && $this->initializer56b479e62885e338989059->__invoke($this->valueHolder56b479e62884f592395014, $this, 'findLocations', array('query' => $query, 'fieldFilters' => $fieldFilters), $this->initializer56b479e62885e338989059);

        return $this->valueHolder56b479e62884f592395014->findLocations($query, $fieldFilters);
    }

    /**
     * {@inheritDoc}
     */
    public function suggest($prefix, $fieldPaths = array(), $limit = 10, \eZ\Publish\API\Repository\Values\Content\Query\Criterion $filter = null)
    {
        $this->initializer56b479e62885e338989059 && $this->initializer56b479e62885e338989059->__invoke($this->valueHolder56b479e62884f592395014, $this, 'suggest', array('prefix' => $prefix, 'fieldPaths' => $fieldPaths, 'limit' => $limit, 'filter' => $filter), $this->initializer56b479e62885e338989059);

        return $this->valueHolder56b479e62884f592395014->suggest($prefix, $fieldPaths, $limit, $filter);
    }

    /**
     * {@inheritDoc}
     */
    public function indexContent(\eZ\Publish\SPI\Persistence\Content $content)
    {
        $this->initializer56b479e62885e338989059 && $this->initializer56b479e62885e338989059->__invoke($this->valueHolder56b479e62884f592395014, $this, 'indexContent', array('content' => $content), $this->initializer56b479e62885e338989059);

        return $this->valueHolder56b479e62884f592395014->indexContent($content);
    }

    /**
     * {@inheritDoc}
     */
    public function bulkIndexContent(array $contentObjects)
    {
        $this->initializer56b479e62885e338989059 && $this->initializer56b479e62885e338989059->__invoke($this->valueHolder56b479e62884f592395014, $this, 'bulkIndexContent', array('contentObjects' => $contentObjects), $this->initializer56b479e62885e338989059);

        return $this->valueHolder56b479e62884f592395014->bulkIndexContent($contentObjects);
    }

    /**
     * {@inheritDoc}
     */
    public function indexLocation(\eZ\Publish\SPI\Persistence\Content\Location $location)
    {
        $this->initializer56b479e62885e338989059 && $this->initializer56b479e62885e338989059->__invoke($this->valueHolder56b479e62884f592395014, $this, 'indexLocation', array('location' => $location), $this->initializer56b479e62885e338989059);

        return $this->valueHolder56b479e62884f592395014->indexLocation($location);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteContent($contentId, $versionId = null)
    {
        $this->initializer56b479e62885e338989059 && $this->initializer56b479e62885e338989059->__invoke($this->valueHolder56b479e62884f592395014, $this, 'deleteContent', array('contentId' => $contentId, 'versionId' => $versionId), $this->initializer56b479e62885e338989059);

        return $this->valueHolder56b479e62884f592395014->deleteContent($contentId, $versionId);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteLocation($locationId, $contentId)
    {
        $this->initializer56b479e62885e338989059 && $this->initializer56b479e62885e338989059->__invoke($this->valueHolder56b479e62884f592395014, $this, 'deleteLocation', array('locationId' => $locationId, 'contentId' => $contentId), $this->initializer56b479e62885e338989059);

        return $this->valueHolder56b479e62884f592395014->deleteLocation($locationId, $contentId);
    }

    /**
     * {@inheritDoc}
     */
    public function purgeIndex()
    {
        $this->initializer56b479e62885e338989059 && $this->initializer56b479e62885e338989059->__invoke($this->valueHolder56b479e62884f592395014, $this, 'purgeIndex', array(), $this->initializer56b479e62885e338989059);

        return $this->valueHolder56b479e62884f592395014->purgeIndex();
    }

    /**
     * {@inheritDoc}
     */
    public function commit($flush = false)
    {
        $this->initializer56b479e62885e338989059 && $this->initializer56b479e62885e338989059->__invoke($this->valueHolder56b479e62884f592395014, $this, 'commit', array('flush' => $flush), $this->initializer56b479e62885e338989059);

        return $this->valueHolder56b479e62884f592395014->commit($flush);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer56b479e62885e338989059 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer56b479e62885e338989059 && $this->initializer56b479e62885e338989059->__invoke($this->valueHolder56b479e62884f592395014, $this, '__get', array('name' => $name), $this->initializer56b479e62885e338989059);

        if (isset(self::$publicProperties56b479e628817671654816[$name])) {
            return $this->valueHolder56b479e62884f592395014->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e62884f592395014;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder56b479e62884f592395014;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer56b479e62885e338989059 && $this->initializer56b479e62885e338989059->__invoke($this->valueHolder56b479e62884f592395014, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer56b479e62885e338989059);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e62884f592395014;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder56b479e62884f592395014;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer56b479e62885e338989059 && $this->initializer56b479e62885e338989059->__invoke($this->valueHolder56b479e62884f592395014, $this, '__isset', array('name' => $name), $this->initializer56b479e62885e338989059);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e62884f592395014;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e62884f592395014;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer56b479e62885e338989059 && $this->initializer56b479e62885e338989059->__invoke($this->valueHolder56b479e62884f592395014, $this, '__unset', array('name' => $name), $this->initializer56b479e62885e338989059);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder56b479e62884f592395014;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder56b479e62884f592395014;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer56b479e62885e338989059 && $this->initializer56b479e62885e338989059->__invoke($this->valueHolder56b479e62884f592395014, $this, '__clone', array(), $this->initializer56b479e62885e338989059);

        $this->valueHolder56b479e62884f592395014 = clone $this->valueHolder56b479e62884f592395014;
    }

    public function __sleep()
    {
        $this->initializer56b479e62885e338989059 && $this->initializer56b479e62885e338989059->__invoke($this->valueHolder56b479e62884f592395014, $this, '__sleep', array(), $this->initializer56b479e62885e338989059);

        return array('valueHolder56b479e62884f592395014');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer56b479e62885e338989059 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer56b479e62885e338989059;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer56b479e62885e338989059 && $this->initializer56b479e62885e338989059->__invoke($this->valueHolder56b479e62884f592395014, $this, 'initializeProxy', array(), $this->initializer56b479e62885e338989059);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder56b479e62884f592395014;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder56b479e62884f592395014;
    }


}
